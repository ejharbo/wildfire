# baseURI: http://topbraid.org/textindex
# imports: http://uispin.org/ui
# prefix: textindex

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix default: <http://uispin.org/default#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://topbraid.org/textindex>
  rdf:type owl:Ontology ;
  rdfs:comment """This namespace defines SWP elements and SPARQL functions to operate on (Lucene) text indices managed by TopBraid. Lucene indices can be used to perform efficient text queries against RDF graphs.

TopBraid can manage any number of text indices, which are addressed by their IDs, which are strings.

Indices are either in-memory or persistent. Persistent indices are stored in subfolders of _Data/Lucene in the workspace root folder. As a result of this, switching workspaces makes persistent indices no longer accessible. A restart always wipes out in-memory indices.

Indices provide a mapping from strings to quads. For a given graph, an index will collect all literals of types xsd:string, rdf:langString and rdf:HTML. The magic property textindex:query can then be used to find the subjects and graphs for a given predicate and a given Lucene query string.

Indices can track any number of named graphs. Only graphs that have a file in the workspace can be tracked (this excludes for example ui:tempGraphs). The graphs that are tracked should be specified via a SPARQL function that is passed into the create operation and which returns true or false for a given graph. This mechanism makes sure that newly created graphs are automatically added into the tracking. Alternatively, graphs can be added \"manually\" using the textindex:trackGraph SWP element, but this should be limited to shorter life-spans such as temporary helper indices.

A list of available indices and their tracked graphs can be seen in a corresponding administration page. Various SPARQL functions and magic properties also provide this information. SWP elements such as textindex:create, textindex:delete and textindex:rebuild can be used to control the life cycle.

The index is continuously monitoring changes to the graphs so that quads get automatically added or deleted. These updates happen in a background thread. Large (batch) updates such as file uploads may cause the index to have updates in its background queue. In this case, any queries against the index are waiting until the updates are applied. Lucene is typically fast enough so that this should not affect many users.

When TopBraid starts up, no index is known to its registry. textindex:create always needs to be called prior to any other operation. If there is already a data folder at this stage then the system will simply connect to the data that is already stored there. If changes have happened outside of the usual life cycle, e.g. in between restarts, then a rebuild of the index is advisable.""" ;
  rdfs:label "TopBraid Text Index features" ;
  owl:imports <http://uispin.org/ui> ;
.
textindex:create
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:persistent ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to make this index persistent across TopBraid restarts. Leaving it undefined or false will create an in-memory index." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:trackFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional SPARQL function that is used to determine if graphs shall be tracked by this index. The function must take one argument (a graph URI) and return true if the graph shall be tracked." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id under which the index will be known as." ;
    ] ;
  rdfs:comment "Creates a new text index. No index with the given id must already exist (use textindex:index to verify if needed)." ;
  rdfs:label "create" ;
  rdfs:subClassOf ui:ControlElement ;
.
textindex:delete
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the index to delete." ;
    ] ;
  rdfs:comment "Deletes a given text index." ;
  rdfs:label "delete" ;
  rdfs:subClassOf ui:ControlElement ;
.
textindex:index
  rdf:type spin:MagicProperty ;
  rdfs:comment """A magic property that can be used to get all text indices (?id unbound), or to check whether a given index exists (?id bound).

Examples:

	() textindex:index ?id . # Iterates over all known ids
	() textindex:index \"my\" .  # Continues the query if an index with that id exists""" ;
  rdfs:label "index" ;
  rdfs:subClassOf spin:MagicProperties ;
.
textindex:isBuilding
  rdf:type spin:Function ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given index is currently being (re) indexed. This process may take a few minutes." ;
  rdfs:label "is building" ;
  rdfs:subClassOf spin:Functions ;
.
textindex:isEnabled
  rdf:type spin:Function ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if text indexing is enabled in this TopBraid installation. This is true unless Disable Lucene Indexing is activated in the server configuration parameters." ;
  rdfs:label "is enabled" ;
  rdfs:subClassOf spin:Functions ;
.
textindex:query
  rdf:type spin:MagicProperty ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index to query." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The query property, such as rdfs:comment." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "The query string." ;
    ] ;
  rdfs:comment """Queries a given text index. All variables on the right hand side must be unbound.

The system uses the current context graph to find the graph URIs that need to be used for the text index queries. Callers should make sure that the specified text index has been built using the same graph URIs or a subset of them.

Example:

		(\"id\" rdfs:comment \"hello\") textindex:query (?subject ?score ?literal ?graph)""" ;
  rdfs:label "query" ;
  rdfs:subClassOf spin:MagicProperties ;
.
textindex:rebuild
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id under which the index will be known as." ;
    ] ;
  rdfs:comment "Rebuilds a given index using the graphs that it is tracking. The Lucene index will be erased and then a repopulated in a background thread." ;
  rdfs:label "rebuild" ;
  rdfs:subClassOf ui:ControlElement ;
.
textindex:trackGraph
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:addTriples ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also add the triples from this graph to the index. False or unbound assume that the triples have been added before." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI of the graph to track." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index to track the graph with." ;
    ] ;
  rdfs:comment "Starts tracking a given graph so that future updates are synchronized into the text index. If the graph already contains triples and those triples are not yet in the index, set arg:addTriples to true. Use textindex:untrackGraph when done." ;
  rdfs:label "track graph" ;
  rdfs:subClassOf ui:ControlElement ;
.
textindex:trackedGraph
  rdf:type spin:MagicProperty ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index to get the tracked graphs for." ;
    ] ;
  rdfs:comment """A magic property that can be used to get all graphs that are currently tracked by a given text index (left hand side argument, must be bound), or to verify that a given graph is currently tracked.

Examples:

	\"myIndex\" textindex:trackedGraph ?graph . # Iterates over all tracked graphs
	\"myIndex\" textindex:trackedGraph <http://example.org/graph> .    # Continues if the given graph is tracked by myIndex""" ;
  rdfs:label "tracked graph" ;
  rdfs:subClassOf spin:MagicProperties ;
.
textindex:untrackGraph
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:deleteTriples ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also delete any triples (quads) that represent triples from the graph." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI of the graph to untrack." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index that the graph is being tracked with." ;
    ] ;
  rdfs:comment "Stops tracking a graph that was previously added using textindex:trackGraph." ;
  rdfs:label "untrack graph" ;
  rdfs:subClassOf ui:ControlElement ;
.
textindex:updateQueueSize
  rdf:type spin:Function ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the text index." ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:comment "Gets the current size of the update queue - changes that have accumulated and are scheduled for inclusion into the Lucene index. This is mostly for diagnostic purposes." ;
  rdfs:label "update queue size" ;
  rdfs:subClassOf spin:Functions ;
.
