# baseURI: http://server.topbraidlive.org/system-applications/servicedoc
# imports: http://server.topbraidlive.org/system-applications/shacl/tblshacl
# imports: http://spinrdf.org/spin.ui
# imports: http://topbraid.org/sparqlmotion
# imports: http://topbraid.org/swa
# prefix: servicedoc

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix servicedoc: <http://server.topbraidlive.org/system-applications/servicedoc#> .
@prefix servicesearch: <http://topbraid.org/swa/servicesearch#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblservice: <http://server.topbraidlive.org/system-applications/servicesearch/tblservice#> .
@prefix tblshacl: <http://server.topbraidlive.org/system-applications/shacl/tblshacl#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://server.topbraidlive.org/system-applications/servicedoc>
  a owl:Ontology ;
  owl:imports <http://server.topbraidlive.org/system-applications/shacl/tblshacl> ;
  owl:imports <http://spinrdf.org/spin.ui> ;
  owl:imports <http://topbraid.org/sparqlmotion> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:versionInfo "An SWP application for TBL (and EVN) to display a list of all available SPIN templates and SM scripts alongside with their arguments. Can be filtered by namespace." ;
.
servicedoc:AvailableGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "count" ;
          ]
          [
            sp:varName "comment" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "graph" ;
                ] ;
              sp:predicate servicedoc:graphs ;
              sp:subject () ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a servicedoc:moduleCount ;
                      ] ;
                    sp:variable [
                        sp:varName "count" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:gt ;
                        sp:arg1 [
                            sp:varName "count" ;
                          ] ;
                        sp:arg2 0 ;
                      ] ;
                  ]
                )
                [
                  a sp:Bind ;
                  sp:expression [
                      a swa:labelInGraph ;
                      arg:resource [
                          sp:varName "graph" ;
                        ] ;
                      arg:resourceGraph [
                          sp:varName "graph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "comment" ;
                          ] ;
                        sp:predicate rdfs:comment ;
                        sp:subject [
                            sp:varName "graph" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all graphs that contain relevant services. Can be used to display a list of the available base URIs." ;
  rdfs:label "Available graphs" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
servicedoc:Filter
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:graphURIs ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"service-filter\">
    <h2>Select categories:</h2>
    <p class=\"servicedoc-filter-p\">
        <span class=\"servicedoc-filter-categories\">&darr;</span>
        <a class=\"select-all\" href=\"#\">Select all</a>
    </p>
    <ui:call ui:template=\"{= servicedoc:AvailableGraphs }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <form autocomplete=\"off\">
                <div class=\"checkbox servicedoc-filter-categories-results-form\">
                    <label>
                        <input checked=\"{= IF((bound(?graphURIs) &amp;&amp; servicedoc:isChecked(?graph, ?graphURIs)), &quot;checked&quot;, ?none) }\" class=\"graphCheckBox servicedoc-filter-checkbox\" onclick=\"servicedoc.reload()\" type=\"checkbox\" value=\"{= ?graph }\"/>
                        <span>{= ?label } ({= ?count } services)</span>
                        <br/>
                        <ui:if ui:condition=\"{= bound(?comment) }\">
                            <small class=\"servicedoc-filter-categories-results-form-comment\">{= ?comment }</small>
                        </ui:if>
                    </label>
                </div>
            </form>
        </ui:forEach>
    </ui:call>
</div>
"""^^ui:Literal ;
  rdfs:label "Filter" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:GraphQL
  a ui:NodeClass ;
  ui:headIncludes """
<title>TopBraid GraphQL Service</title>
"""^^ui:Literal ;
  ui:prototype """
<div class=\"container\">
    <h1>TopBraid GraphQL Service</h1>
    <p>
		TopBraid includes support for GraphQL services and mutations since version 6.0.
		At the current stage (6.0) this support is limited to RDF data that is under
		control of the TopBraid EDG (teamwork) framework, and in particular to only certain
		asset collections (which can be recognized by their GraphQL link on the Export tab).
	</p>
    <p>
		Comprehensive documentation of the functionality and design principles can be
		found <strong>
            <a href=\"https://www.topquadrant.com/technology/graphql\">online</a>
        </strong>.
	</p>
    <p>
		This page focuses on the technical details of the GraphQL web service.
	</p>
    <p>
		The easiest way to explore how to use the GraphQL web service is to use the
		interactive GraphiQL browser that is accessible from the Export tab, with a network
		traffic monitor (such as Chrome Developer Tools) open.
	</p>
    <p class=\"text-danger\">
		Note that although TopBraid Composer includes a feature to run queries against the
		currently open file, using <b>Model &gt; Query current Model with GraphiQL</b>,
		this is only for testing and not meant to be used for \"real\" work.
	</p>
    <p>
		An example POST request against the Northwind example data asset collection with the TopBraid
		Live server embedded into TBC-ME is
	</p>
    <pre>http://localhost:8083/tbl/graphql/northwind</pre>
    <p>
		with the following HTTP request payload:
	</p>
    <pre>{
	\"query\": \"databaseColumns { name }\",
	\"variables\": (optional)
}</pre>
    <p>
		Set the Accept header to <code>application/json</code>.
	</p>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "TopBraid GraphQL Service" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:GraphView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to query." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?graph }\">
    <a id=\"{= ?graph }\"/>
    <h1>{= swa:labelInGraph(?graph, ?graph) }</h1>
    <ui:group let:comment=\"{= spl:object(?graph, rdfs:comment) }\">
        <ui:if ui:condition=\"{= bound(?comment) }\">
            <p>{= ?comment }</p>
        </ui:if>
    </ui:group>
    <div>
        <strong>Graph URI: </strong>
        <tt>{= ?graph }</tt>
    </div>
    <div class=\"servicedoc-graph-view-module-views\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?module
                WHERE {
                    rdf:nil servicedoc:modules ?module .
                }
                ORDER BY (?module) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graph) }\">
                <servicedoc:ModuleView arg:module=\"{= ?module }\"/>
            </ui:setContext>
        </ui:forEach>
    </div>
    <hr/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A representation of all SPIN modules found in a given graph." ;
  rdfs:label "Graph view" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:Index
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:fixedFilter ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disable the check boxes where the user can select which namespaces to show. By default this is visible (false)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:graphURIs ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated string of graph URIs that shall be displayed and pre-selected in the filter." ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>TopBraid - Available Web Services</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<div class=\"service-documentation-page servicedoc-index-doc-page\">
    <h1>Available Web Services</h1>
    <p>
		This page lists some of the web services available on this server:</p>
    <ul>
        <li>
            <strong>SPIN Templates</strong> from <tt>.spin.</tt> files</li>
        <li>
            <strong>SPARQLMotion scripts</strong> from <tt>.sms.</tt> files</li>
        <li>
            <strong>SWP Services</strong> from <tt>.ui.</tt> files.</li>
    </ul>
    <ui:if ui:condition=\"{= (!bound(?fixedFilter)) || (!?fixedFilter) }\">
        <p>
            <div>Also on this server, both with user interface and programmatic access:</div>
            <ul>
                <li>
                    <a href=\"sparql\">SPARQL end point</a>
                </li>
                <li>
                    <ui:createLink ui:viewClass=\"{= tblshacl:ValidationPage }\">
                        <a href=\"{= ?link }\">SHACL validation service</a>
                    </ui:createLink>
                </li>
                <li>
                    <ui:createLink ui:viewClass=\"{= servicedoc:GraphQL }\">
                        <a href=\"{= ?link }\">GraphQL service</a>
                    </ui:createLink>
                </li>
            </ul>
        </p>
        <div>
            <p>For <b>template</b> services, the following values can either be supplied in the HTTP request's Accept header or as the value of the _format argument:</p>
            <table class=\"ArgumentsTable\">
                <thead>
                    <tr>
                        <th class=\"ArgumentsTH\">Response type</th>
                        <th class=\"ArgumentsTH\">Format name</th>
                        <th class=\"ArgumentsTH\">Arguments accepted</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class=\"ArgumentsTD\">application/sparql-results+xml</td>
                        <td class=\"ArgumentsTD\">SPARQL XML Results</td>
                        <td class=\"ArgumentsTD\">xml</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">application/sparql-results+json</td>
                        <td class=\"ArgumentsTD\">SPARQL JSON Results</td>
                        <td class=\"ArgumentsTD\">json</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">application/sparql-results+json-simple</td>
                        <td class=\"ArgumentsTD\">Simple JSON Format</td>
                        <td class=\"ArgumentsTD\">json-simple</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">text/csv</td>
                        <td class=\"ArgumentsTD\">Comma separated values</td>
                        <td class=\"ArgumentsTD\">csv</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">text/tab-separated-values</td>
                        <td class=\"ArgumentsTD\">Tab separated values</td>
                        <td class=\"ArgumentsTD\">tsv</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">application/rdf+xml</td>
                        <td class=\"ArgumentsTD\">RDF/XML</td>
                        <td class=\"ArgumentsTD\">application/rdf+xml</td>
                    </tr>
                    <tr>
                        <td class=\"ArgumentsTD\">text/turtle</td>
                        <td class=\"ArgumentsTD\">Turtle</td>
                        <td class=\"ArgumentsTD\">text/turtle</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <br/>
        <p>If you do not explicitly specify the response type, defaults will be used. 
   The default serialization of SELECT result sets is JSON, following the SPARQL protocol. 
   When you call a service from a web browser's address bar, the mime type will typically be 
   requested as something that includes the string \"xml\", and in this case it will produce  
   SPARQL XML Results. CONSTRUCT queries are returned in Turtle format by default.</p>
        <p>The value of the _base argument can be a full graph URI or a short graph name. 
   To define short graph names, go to the Server Administration -&gt; Server Configuration Parameters page. 
   In the section named \"URI Parameters\" define an instance of \"Short graph names\".</p>
        <servicedoc:Filter arg:graphURIs=\"{= ?graphURIs }\"/>
    </ui:if>
    <hr class=\"servicedoc-index-hr\"/>
    <ui:loadable ui:loadId=\"main\">
        <ui:if ui:condition=\"{= bound(?graphURIs) }\">
            <ui:forEach ui:resultSet='{#
                    SELECT ?graph
                    WHERE {
                        ?graphURI spif:split ( ?graphURIs \" \" ) .
                        BIND (IRI(?graphURI) AS ?graph) .
                    } }'>
                <servicedoc:GraphView arg:graph=\"{= ?graph }\"/>
            </ui:forEach>
        </ui:if>
    </ui:loadable>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "An index page listing all SM services and SPIN templates that can be called from the hosting TBL server." ;
  rdfs:label "Index" ;
  rdfs:subClassOf tblui:Elements ;
  rdfs:subClassOf spin.ui:Elements ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:ModuleView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:module ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The (SPIN) module to display." ;
    ] ;
  ui:prototype """
<div class=\"servicedoc-graph-view-module-views-top\" let:body=\"{= spl:object(?module, spin:body) }\" let:prototype=\"{= spl:object(?module, ui:prototype) }\">
    <h2>{= smf:qname(?module) } ({= smf:qname(spl:object(?module, rdf:type)) })</h2>
    <p>
        <ui:parse ui:str=\"{= html:encodeBRs(spl:object(?module, rdfs:comment)) }\"/>
    </p>
    <ui:if ui:condition=\"{= spl:instanceOf(?module, spin:Template) }\">
        <servicedoc:TemplateArgumentsList arg:module=\"{= ?module }\">
            <ui:insert ui:into=\"additionalArguments\">
                <servicedoc:ServletArgument arg:description=\"the base URI of the default query graph\" arg:name=\"_base\" arg:required=\"{= true }\"/>
                <servicedoc:ServletArgument arg:description=\"if 'true' then the _base will be used with its owl:imports\" arg:name=\"_withImports\"/>
                <servicedoc:ServletArgument arg:description=\"the output format\" arg:name=\"_format\"/>
                <servicedoc:ServletArgument arg:description=\"a value for LIMIT\" arg:name=\"_limit\"/>
                <servicedoc:ServletArgument arg:description=\"a value for OFFSET\" arg:name=\"_offset\"/>
            </ui:insert>
        </servicedoc:TemplateArgumentsList>
    </ui:if>
    <ui:elseif ui:condition=\"{= spl:instanceOf(?module, ui:Service) }\">
        <servicedoc:TemplateArgumentsList arg:module=\"{= ?module }\">
            <ui:insert ui:into=\"additionalArguments\">
                <servicedoc:ServletArgument arg:description=\"qname or URI of the resource to render.\" arg:name=\"_resource\"/>
                <servicedoc:ServletArgument arg:description=\"the base URI of the default query graph\" arg:name=\"_base\"/>
                <servicedoc:ServletArgument arg:description=\"if 'true' then the _base will be used with its owl:imports\" arg:name=\"_withImports\"/>
                <servicedoc:ServletArgument arg:description=\"comma-separated list of id types to match.\" arg:name=\"_matchIds\"/>
                <servicedoc:ServletArgument arg:description=\"true to only return an (HTML) snippet withoutHTML, HEAD and BODY tags.\" arg:name=\"_snippet\"/>
                <servicedoc:ServletArgument arg:description=\"the URL of the TBL server, used by ui:createLink.\" arg:name=\"_server\"/>
                <servicedoc:ServletArgument arg:description=\"ID of the view to render, e.g. its qnamed\" arg:name=\"_view\"/>
                <servicedoc:ServletArgument arg:description=\"true to activate caching for this request\" arg:name=\"_cache\"/>
                <servicedoc:ServletArgument arg:description=\"a unique identifier for a progress monitor\" arg:name=\"_progressId\"/>
                <servicedoc:ServletArgument arg:description=\"if true then files uploaded as part of a multi-part HTTP request will be copied into the workspace as temporary files. The name of the corresponding file will be assigned to the argument variable.\" arg:name=\"_fileUpload\"/>
            </ui:insert>
        </servicedoc:TemplateArgumentsList>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= spl:instanceOf(?module, sm:Function) || spl:instanceOf(?module, sm:Module) }\">
        <servicedoc:TemplateArgumentsList arg:module=\"{= ?module }\">
            <ui:insert ui:into=\"additionalArguments\">
                <servicedoc:ServletArgument arg:description=\"a unique identifier for a progress monitor\" arg:name=\"_progressId\"/>
                <servicedoc:ServletArgument arg:description=\"if true then files uploaded as part of a multi-part HTTP request will be copied into the workspace as temporary files. The name of the corresponding file will be assigned to the argument variable.\" arg:name=\"_fileUpload\"/>
            </ui:insert>
        </servicedoc:TemplateArgumentsList>
    </ui:elseif>
    <ui:else>
        <spin.ui:ArgumentsList arg:module=\"{= ?module }\"/>
    </ui:else>
    <servicedoc:ServiceSyntax arg:module=\"{= ?module }\"/>
    <ui:if ui:condition=\"{= bound(?prototype) }\">
        <h3>Service Body (Prototype)</h3>
        <spin.ui:QueryView arg:query=\"{= ?prototype }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?body) }\">
        <h3>Template Body</h3>
        <spin.ui:QueryView arg:query=\"{= ?body }\"/>
    </ui:if>
</div>
"""^^ui:Literal ;
  rdfs:comment "A representation of a single SPIN module." ;
  rdfs:label "Module view" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:ServiceSyntax
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:module ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The module to render." ;
    ] ;
  ui:prototype """
<ui:group let:server=\"http://.../\">
    <h3>Service Syntax</h3>
    <div class=\"servicedoc-service-syntax-padding-left\">
        <code>
            <ui:if ui:condition=\"{= spl:instanceOf(?module, sm:Function) }\">{= ?server }sparqlmotion?id={= ui:encodeURL(xsd:string(?module)) }&amp;</ui:if>
            <ui:elseif ui:condition=\"{= spl:instanceOf(?module, spin:Template) }\">{= ?server }template/{= spif:replaceAll(ui:encodeNode(?module), \":\", \"/\") }?_base=...&amp;</ui:elseif>
            <ui:else>{= ?server }swp?_viewClass={= ui:encodeNode(?module) }&amp;_base=...&amp;</ui:else>
            <servicedoc:ServiceSyntaxArguments arg:module=\"{= ?module }\"/>
        </code>
    </div>
    <ui:if ui:condition=\"{= spl:instanceOf(?module, spin:Template) }\">
        <div>
            <div>or</div>
            <div class=\"servicedoc-service-syntax-padding-left\">
                <code>{= ?server }template?_template={= spif:encodeURL(str(?module)) }&amp;_base=...&amp;<servicedoc:ServiceSyntaxArguments arg:module=\"{= ?module }\"/>
                </code>
            </div>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Service syntax" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:ServiceSyntaxArguments
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:module ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The module to render." ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?predicate
        WHERE {
            ?module (rdfs:subClassOf)* ?cls .
            ?cls spin:constraint ?arg .
            ?arg a spl:Argument .
            ?arg spl:predicate ?predicate .
        }
        ORDER BY (afn:localname(?predicate)) }\" ui:separator=\"&amp;\">{= afn:localname(?predicate) }=...</ui:forEach>
"""^^ui:Literal ;
  rdfs:label "Service syntax arguments" ;
  rdfs:subClassOf swa:Elements ;
.
servicedoc:ServletArgument
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:required ;
      spl:valueType xsd:boolean ;
      rdfs:comment "true if the argument is required" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:description ;
      spl:valueType xsd:string ;
      rdfs:comment "Description of the argument" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "Argument name" ;
    ] ;
  ui:prototype """
<tr>
    <td class=\"ArgumentsTD\">
        <div>
            <b>{= ?name }</b>
            <swa:Space/>({= IF((bound(?required) &amp;&amp; ?required), \"required\", \"optional\") }): {= ?description }</div>
    </td>
</tr>
"""^^ui:Literal ;
  rdfs:label "Servlet argument" ;
  rdfs:subClassOf spin.ui:Elements ;
.
servicedoc:TemplateArgumentsList
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:module ;
      spl:valueType spin:Module ;
      rdfs:comment "The module to list the arguments of." ;
    ] ;
  ui:prototype """
<div letrs:rs=\"{#
        SELECT ?arg
        WHERE {
            ?module (rdfs:subClassOf)* ?cls .
            ?cls spin:constraint ?arg .
            ?arg spl:predicate ?predicate .
            FILTER (spl:instanceOf(?arg, spl:Argument) || (spl:instanceOf(?arg, spl:Attribute) &amp;&amp; spl:instanceOf(?module, sm:Module))) .
        }
        ORDER BY (afn:localname(?predicate)) }\">
    <h3>Arguments</h3>
    <table class=\"ArgumentsTable\">
        <ui:insertionPoint ui:pointId=\"additionalArguments\"/>
        <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <tr>
                    <td class=\"ArgumentsTD\">
                        <ui:resourceView ui:resource=\"{= ?arg }\"/>
                    </td>
                </tr>
            </ui:forEach>
        </ui:if>
    </table>
</div>
"""^^ui:Literal ;
  rdfs:label "Template arguments list" ;
  rdfs:subClassOf spin.ui:Elements ;
.
servicedoc:graphs
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate tops:files ;
            sp:subject [
                sp:varName "file" ;
              ] ;
          ]
          [
            sp:object "" ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a servicedoc:isGraphFile ;
                arg:file [
                    sp:varName "file" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:baseURI ;
                sp:arg1 [
                    sp:varName "file" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                    sp:arg2 <http://topbraid.org/swa> ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "graphs" ;
  rdfs:subClassOf spin:MagicProperties ;
.
servicedoc:isChecked
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "graphURI" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "graphURIs" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        sp:varName "graphURI" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:graphURIs ;
      spl:valueType xsd:string ;
      rdfs:comment "The space-separated list of graph URIs." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to find" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "is checked" ;
  rdfs:subClassOf spin:Functions ;
.
servicedoc:isGraphFile
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:lastIndexOf ;
                sp:arg1 [
                    sp:varName "file" ;
                  ] ;
                sp:arg2 "/" ;
              ] ;
            sp:variable [
                sp:varName "lastHash" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "file" ;
                  ] ;
                sp:arg2 [
                    sp:varName "lastHash" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "name" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a fn:contains ;
                        sp:arg1 [
                            sp:varName "name" ;
                          ] ;
                        sp:arg2 ".spin." ;
                      ] ;
                    sp:arg2 [
                        a fn:contains ;
                        sp:arg1 [
                            sp:varName "name" ;
                          ] ;
                        sp:arg2 ".sms." ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a fn:contains ;
                    sp:arg1 [
                        sp:varName "name" ;
                      ] ;
                    sp:arg2 ".ui." ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:file ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Takes a file path (from the workspace) and checks whether the file is recognized to contain relevant services." ;
  rdfs:label "is graph file" ;
  rdfs:subClassOf spin:Functions ;
.
servicedoc:moduleCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "module" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "module" ;
              ] ;
            sp:predicate servicedoc:modules ;
            sp:subject () ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:comment "Gets the number of relevant modules found in a given graph." ;
  rdfs:label "module count" ;
  rdfs:subClassOf spin:Functions ;
.
servicedoc:modules
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "module" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object sm:Function ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "module" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object true ;
                              sp:predicate spin:abstract ;
                              sp:subject [
                                  sp:varName "module" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object true ;
                              sp:predicate spin:private ;
                              sp:subject [
                                  sp:varName "module" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object spin:SelectTemplate ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "module" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "someBody" ;
                      ] ;
                    sp:predicate spin:body ;
                    sp:subject [
                        sp:varName "module" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object true ;
                              sp:predicate spin:private ;
                              sp:subject [
                                  sp:varName "module" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object ui:Service ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "module" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "somePrototype" ;
                      ] ;
                    sp:predicate ui:prototype ;
                    sp:subject [
                        sp:varName "module" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object true ;
                              sp:predicate ui:private ;
                              sp:subject [
                                  sp:varName "module" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  rdfs:label "modules" ;
  rdfs:subClassOf spin:MagicProperties ;
.
arg:file
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:fixedFilter
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graphURIs
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:module
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
