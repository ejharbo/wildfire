# baseURI: http://server.topbraidlive.org/system-applications/pgadmin
# imports: http://server.topbraidlive.org/system-applications/tbladmin
# imports: http://topbraid.org/swa
# prefix: pgadmin

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix email: <http://topbraid.org/email#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/dynamic/permissiongroups#> .
@prefix pgadmin: <http://server.topbraidlive.org/system-applications/pgadmin#> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://server.topbraidlive.org/system-applications/pgadmin>
  rdf:type owl:Ontology ;
  owl:imports <http://server.topbraidlive.org/system-applications/tbladmin> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
pgadmin:AddAssetToGroupWizard
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  ui:prototype """
<ui:group>
    <script>var assetId;
var family;
var groupName = '{= ?group }';
var shouldClearInputs = true;</script>
    <pgadmin:AddAssetWildcardDialog arg:group=\"{= ?group }\"/>
    <pgadmin:SelectAssetsTreeDialog arg:group=\"{= ?group }\"/>
    <pgadmin:SelectImportClosureForTreeDialog arg:group=\"{= ?group }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add asset to group wizard" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:AddAssetWildcardDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  ui:prototype """
<ui:group>
    <div id=\"addAssetWildcardDialog\" title=\"Add Resource Wildcard to Group\">
        <p>Select from the wildcard resources below.</p>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?wildcardAsset ?family
                WHERE {
                    ?any smf:wildcardAsset ( ?wildcardAsset ?family ) .
                } }\">
            <div class=\"form-check\">
                <input class=\"wildcard-asset\" id=\"{= ?wildcardAsset }_-_{= ?family }\" name=\"wildcardAsset\" onclick=\"$('#addAssetWildcardDialogAddWildcard').button('enable');\" type=\"radio\" value=\"{= ?wildcardAsset }\"/>
                <label for=\"{= ?wildcardAsset }_-_{= ?family }\">{= ?wildcardAsset }</label>
            </div>
        </ui:forEach>
    </div>
    <script>$(document).ready(function(){
  $('#addAssetWildcardDialog').dialog({
autoOpen : false,
modal : true,
width : 310,
height : 300,
buttons : [
  {
id : \"addAssetWildcardDialogAddWildcard\",
text : \"Add Wildcard\",
click : function() {
  var assetFamily = $(\"input:radio[name=wildcardAsset]:checked\").attr(\"id\").split('_-_');
  assetId = assetFamily[0];
  family = assetFamily[1];
  pgadmin.addAssetsToGroup(assetId, family, groupName);
  shouldClearInputs = true;
  $( this ).dialog( \"close\" );
},
disabled : true
  },
  {
id : \"addAssetWildcardDialogCancel\",
text : \"Cancel\",
click : function() {
  shouldClearInputs = true;
  $( this ).dialog( \"close\" );
}
  }
],
open: function() {
  shouldClearInputs = true;
  var thisDialog = this;
  $(thisDialog).keypress(function(key) {
if (key.keyCode == $.ui.keyCode.ENTER) {
$('#addAssetWildcardDialogAddWildcard').button('click');
}
  });
},
close : function() {
  if (shouldClearInputs) {
$('#addAssetWildcardDialogAddWildcard').button('disable');
var selectedWildcard = $(\"input:radio[name=wildcardAsset]:checked\");
if (selectedWildcard != undefined &amp;&amp; selectedWildcard != null &amp;&amp; selectedWildcard.length != undefined &amp;&amp; selectedWildcard.length != null &amp;&amp; selectedWildcard.length &gt; 0) {
  selectedWildcard.prop('checked', false);
}
  }
}
  });
  });</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add asset wildcard" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:AddAssetsToGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:withImports ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Set to true to automatically add read access for all of these graphs' imports" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:assets ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset IDs" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:families ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset families" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group to which to add the assets" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:addAssetsToGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully added resources: {= ?assets } with families: {= ?families } to group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user adds assets to a group" ;
  rdfs:label "Add assets to group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:AddRoleToGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group to which to add the role" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType xsd:string ;
      rdfs:comment "The role to be added to the group" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:addRoleToGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully added role {= ?role } to group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user adds a role to a group" ;
  rdfs:label "Add role to group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:AdminElements
  rdf:type ui:NodeClass ;
  rdfs:label "Permission Group administration elements" ;
  rdfs:subClassOf tbladmin:AdminElements ;
.
pgadmin:AdminPageElements
  rdf:type ui:NodeClass ;
  rdfs:comment "Base class of permission group admin pages." ;
  rdfs:label "Permission Group Admin Page Elements" ;
  rdfs:subClassOf pgadmin:AdminElements ;
  rdfs:subClassOf tbladmin:AdminPages ;
.
pgadmin:CopyGroupDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:oldGroupName ;
      spl:valueType xsd:string ;
      rdfs:comment "Name of the group to copy" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:prototype """
<ui:group>
    <div id=\"copyGroupDialog\" title=\"Copy Group {= ?oldGroupName }\">
        <form>
            <fieldset>
                <label for=\"newGroupName\">New Group Name</label>
                <input autocomplete=\"off\" class=\"form-control\" id=\"newGroupName\" name=\"newGroupName\" type=\"text\"/>
            </fieldset>
        </form>
    </div>
    <script>$(document).ready(function(){
  var newGroupName = $('#newGroupName');
  $('#copyGroupDialog').dialog({
autoOpen : false,
modal : true,
buttons : {
  \"Copy Group\" : function() {
pgadmin.copyGroup('{= ?selectedRole }', '{= ?oldGroupName }', newGroupName.val());
$( this ).dialog( \"close\" );
  },
  Cancel: function() {
$( this ).dialog( \"close\" );
  }
},
open: function() {
  var thisDialog = this;
  $(thisDialog).keypress(function(key) {
if (key.keyCode == $.ui.keyCode.ENTER) {
  pgadmin.copyGroup('{= ?selectedRole }', '{= ?oldGroupName }', newGroupName.val());
  $( thisDialog ).dialog( \"close\" );
}
  });
},
close : function() {
  newGroupName.val( \"\" );
}
  });
  });</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Copy group dialog" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:CopyPermissionGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:newGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the new group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:oldGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the group to copy" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:copyPermissionGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully copied group {= ?oldGroup } to {= ?newGroup }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user copies a group" ;
  rdfs:label "Copy group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:CreateNewGroupDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:prototype """
<ui:group>
    <div id=\"createNewGroupDialog\" title=\"Create New Group\">
        <form>
            <fieldset>
                <label for=\"newGroupName\">Group Name</label>
                <input autocomplete=\"off\" class=\"form-control\" id=\"newGroupName\" name=\"newGroupName\" type=\"text\"/>
            </fieldset>
        </form>
    </div>
    <script>$(document).ready(function(){
  	var newGroupName = $('#newGroupName');
  	$('#createNewGroupDialog').dialog({
  		autoOpen : false,
		modal : true,
		buttons : {
  			\"Create Group\" : function() {
				pgadmin.createNewGroup('{= ?selectedRole }', newGroupName.val());
				$( this ).dialog( \"close\" );
  			},
  			Cancel: function() {
				$( this ).dialog( \"close\" );
  			}
		},
		open: function() {
  			var thisDialog = this;
			$(thisDialog).keypress(function(key) {
				if (key.keyCode == $.ui.keyCode.ENTER) {
  					pgadmin.createNewGroup('{= ?selectedRole }', newGroupName.val());
  					$( thisDialog ).dialog( \"close\" );
					return false;
				}
  			});

		},
		close : function() {
  			newGroupName.val( \"\" );
		}
  	});
  });</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Create new group dialog" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:CreateNewPermissionGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the group to create" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of a role to add to the group" ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:try>
        <pgadmin:createNewPermissionGroup ui:args=\"*\"/>
    </ui:try>
    <swon:Object>{= ?exception }</swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user creates a new group" ;
  rdfs:label "Create new group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:DeletePermissionGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group to delete" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:deletePermissionGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully deleted group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user deletes a group" ;
  rdfs:label "Delete permission group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:RemoveAssetFromGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:asset ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Asset" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group from which to remove the asset" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:removeAssetFromGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully removed resource {= ?asset } from group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user removes an asset from a group" ;
  rdfs:label "Remove asset from group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:RemoveRoleFromGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group from which to remove the role" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType xsd:string ;
      rdfs:comment "The role to be removed from the group" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:removeRoleFromGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully removed role {= ?role } from group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user removes a role from a group" ;
  rdfs:label "Remove role from group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:RenameGroupDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:oldGroupName ;
      spl:valueType xsd:string ;
      rdfs:comment "Name of the group to rename" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:prototype """
<ui:group>
    <div id=\"renameGroupDialog\" title=\"Rename Group {= ?oldGroupName }\">
        <form>
            <fieldset>
                <label for=\"newGroupName\">New Group Name</label>
                <input autocomplete=\"off\" class=\"form-control\" id=\"newGroupName\" name=\"newGroupName\" type=\"text\"/>
            </fieldset>
        </form>
    </div>
    <script>$(document).ready(function(){
  var newGroupName = $('#newGroupName');
  $('#renameGroupDialog').dialog({
autoOpen : false,
modal : true,
buttons : {
  \"Rename Group\" : function() {
pgadmin.renameGroup('{= ?selectedRole }', '{= ?oldGroupName }', newGroupName.val());
$( this ).dialog( \"close\" );
  },
  Cancel: function() {
$( this ).dialog( \"close\" );
  }
},
open: function() {
  var thisDialog = this;
  $(thisDialog).keypress(function(key) {
if (key.keyCode == $.ui.keyCode.ENTER) {
  pgadmin.renameGroup('{= ?selectedRole }', '{= ?oldGroupName }', newGroupName.val());
  $( thisDialog ).dialog( \"close\" );
}
  });
},
close : function() {
  newGroupName.val( \"\" );
}
  });
  });</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Rename group dialog" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RenamePermissionGroupService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:newGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "The new name of the group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:oldGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "The old name of the group" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:renamePermissionGroup ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully renamed group {= ?oldGroup } to {= ?newGroup }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user renames a group" ;
  rdfs:label "Rename group service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:RoleEditorAddGroupSelector
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "false"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:prototype """
<ui:loadable ui:loadId=\"roleEditorAddGroup\">
    <swa:Button arg:class=\"btn btn-default btn-sm\" arg:id=\"add-group-button\" arg:label=\"Add Group\" arg:onClick=\"pgadmin.toggleButtonSelect('select-groupId','add-group-button');\"/>
    <select class=\"form-control\" id=\"select-groupId\" name=\"groupId\" onblur=\"pgadmin.toggleButtonSelect('add-group-button','select-groupId');\" onchange=\"pgadmin.addGroupToRole(this[this.selectedIndex].value,'{= ?selectedRole }');\" style=\"display: none;\">
        <option value=\"\">Select a group</option>
        <option value=\"_newGroup_\">--New Group--</option>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?group
                WHERE {
                    ?selectedRole smf:notManagedBy ?group .
                }
                ORDER BY (?group) }\">
            <ui:if ui:condition=\"{= ?group != &quot;PublicGraphsGroup&quot; }\">
                <option value=\"{= ?group }\">{= ?group }</option>
            </ui:if>
        </ui:forEach>
    </select>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:label "Role editor add group selector" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorAssetHeader
  rdf:type ui:NodeClass ;
  ui:prototype """
<tr>
    <th width=\"100\">
        <span>Resource Type</span>
    </th>
    <th width=\"200\">
        <span>Resource</span>
    </th>
    <th>
        <span>Create</span>
    </th>
    <th>
        <span>Read</span>
    </th>
    <th>
        <span>Update</span>
    </th>
    <th>
        <span>Delete</span>
    </th>
    <th>
        <span>Execute</span>
    </th>
    <th class=\"no-top-border-th\"/>
</tr>
"""^^ui:Literal ;
  rdfs:label "Role editor asset header" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorAssetList
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "false"^^xsd:boolean ;
      spl:predicate arg:selectedGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Group" ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?asset ?family
        WHERE {
            ?selectedGroup smf:managedAssetsAndFamilies ( ?asset ?family ) .
        } }\">
    <tr>
        <td width=\"100\">{= ?family }</td>
        <td width=\"200\">{= ?asset }</td>
        <pgadmin:RoleEditorAssetPermissions arg:assetId=\"{= ?asset }\" arg:family=\"{= ?family }\" arg:group=\"{= ?selectedGroup }\"/>
        <td align=\"center\">
            <ui:if ui:condition=\"{= ?selectedGroup != &quot;AdministratorGroup&quot; }\">
                <a class=\"swa-icon ui-icon ui-icon-closethick\" href=\"javascript:void(0);\" onclick=\"pgadmin.removeAssetFromGroup('{= ?asset }','{= ?selectedGroup }');\" title=\"Remove this resource from the group\"/>
            </ui:if>
        </td>
    </tr>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:label "Role editor asset list" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorAssetPermission
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:assetId ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset ID" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:family ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset family" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:permission ;
      spl:valueType xsd:string ;
      rdfs:comment "Permission" ;
    ] ;
  ui:prototype """
<td align=\"center\">
    <ui:if ui:condition=\"{= ?group = &quot;AdministratorGroup&quot; }\">
        <div class=\"checkbox\">
            <input checked=\"checked\" disabled=\"disabled\" type=\"checkbox\"/>
        </div>
    </ui:if>
    <ui:else>
        <div class=\"checkbox\">
            <input id=\"{= ?family }_{= ?assetId }_{= afn:localname(?permission) }\" onclick=\"pgadmin.setAssetPermission(this, '{= ?assetId }', '{= ui:encodeNode(?permission) }', '{= ?group }')\" type=\"checkbox\"/>
        </div>
    </ui:else>
</td>
"""^^ui:Literal ;
  rdfs:label "Role editor asset permission" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorAssetPermissions
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:assetId ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset ID" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:family ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset family" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:RoleEditorAssetPermission arg:assetId=\"{= ?assetId }\" arg:family=\"{= ?family }\" arg:group=\"{= ?group }\" arg:permission=\"{= pg:Create }\"/>
    <pgadmin:RoleEditorAssetPermission arg:assetId=\"{= ?assetId }\" arg:family=\"{= ?family }\" arg:group=\"{= ?group }\" arg:permission=\"{= pg:Read }\"/>
    <pgadmin:RoleEditorAssetPermission arg:assetId=\"{= ?assetId }\" arg:family=\"{= ?family }\" arg:group=\"{= ?group }\" arg:permission=\"{= pg:Update }\"/>
    <pgadmin:RoleEditorAssetPermission arg:assetId=\"{= ?assetId }\" arg:family=\"{= ?family }\" arg:group=\"{= ?group }\" arg:permission=\"{= pg:Delete }\"/>
    <pgadmin:RoleEditorAssetPermission arg:assetId=\"{= ?assetId }\" arg:family=\"{= ?family }\" arg:group=\"{= ?group }\" arg:permission=\"{= pg:Execute }\"/>
    <script>$(document).ready(function() {
  var checkboxId;
  var checkbox;<ui:forEach ui:resultSet=\"{#
                SELECT ?permission
                WHERE {
                    ( ?group ?assetId ?family ) smf:permissionsForAsset ?permission .
                } }\">checkboxId = '{= ?family }_{= ?assetId }_{= afn:localname(?permission) }';
checkboxId = checkboxId.replace( /(\\:|\\/|\\.|\\,|\\[|\\]|#)/g, \"\\\\$1\" );
checkbox = $('#'+checkboxId);
checkbox.prop('checked', true);</ui:forEach>
  });
</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Role editor asset permissions" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorGroupInfo
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "SelectedRole" ;
    ] ;
  ui:prototype """
<ui:group>
    <td valign=\"top\" width=\"250\">
        <pgadmin:RoleEditorGroupList arg:selectedGroup=\"{= ?selectedGroup }\" arg:selectedRole=\"{= ?selectedRole }\"/>
    </td>
    <td valign=\"top\">
        <ui:if ui:condition=\"{= bound(?selectedGroup) }\">
            <ui:loadable ui:loadId=\"roleEditorAssetList\">
                <table>
                    <pgadmin:RoleEditorAssetHeader/>
                    <pgadmin:RoleEditorAssetList arg:selectedGroup=\"{= ?selectedGroup }\"/>
                </table>
                <br/>
            </ui:loadable>
        </ui:if>
    </td>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Role editor group info" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorGroupList
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "false"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Group" ;
    ] ;
  ui:prototype """
<ui:loadable ui:loadId=\"roleEditorGroupList\">
    <ul class=\"auth-role-group-ul\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?group
                WHERE {
                    ?selectedRole smf:memberOf ?group .
                } }\">
            <li class=\"auth-role-group-li\" letrs:groupRoles=\"{#
                    SELECT ?role
                    WHERE {
                        ?group smf:managedRole ?role .
                    } }\">
                <ui:if ui:condition=\"{= ?group = ?selectedGroup }\">
                    <a class=\"auth-role-group-selected-a\" href=\"swp?_viewClass=pgadmin:RoleEditorPage&amp;selectedRole={= ?selectedRole }&amp;selectedGroup={= ?group }\">{= ?group }</a>
                    <swa:Space/>
                    <ui:if ui:condition=\"{= ((?group != &quot;AdministratorGroup&quot;) &amp;&amp; (?group != &quot;ExplorerGroup&quot;)) &amp;&amp; (?group != &quot;PublicGraphsGroup&quot;) }\">
                        <a class=\"swa-icon ui-icon ui-icon-pencil\" href=\"javascript:void(0);\" onclick=\"pgadmin.openRenameGroupDialog();\" title=\"Rename this group\"/>
                        <swa:Space/>
                    </ui:if>
                    <ui:if ui:condition=\"{= ?group != &quot;ExplorerGroup&quot; }\">
                        <a class=\"swa-icon ui-icon ui-icon-copy\" href=\"javascript:void(0);\" onclick=\"pgadmin.openCopyGroupDialog();\" title=\"Make a copy of this group\"/>
                        <swa:Space/>
                    </ui:if>
                    <ui:if ui:condition=\"{= (?group != &quot;PublicGraphsGroup&quot;) &amp;&amp; ((?group != &quot;AdministratorGroup&quot;) || (spr:rowCount(?groupRoles) &gt; 1)) }\">
                        <a class=\"swa-icon ui-icon ui-icon-closethick\" href=\"javascript:void(0);\" onclick=\"pgadmin.removeGroupFromRole('{= ?selectedRole }','{= ?group }');\" title=\"Remove this group from the role\"/>
                        <swa:Space/>
                    </ui:if>
                    <ui:if ui:condition=\"{= ((?group != &quot;AdministratorGroup&quot;) &amp;&amp; (?group != &quot;ExplorerGroup&quot;)) &amp;&amp; (?group != &quot;PublicGraphsGroup&quot;) }\">
                        <a class=\"swa-icon ui-icon ui-icon-trash\" href=\"javascript:void(0);\" onclick=\"pgadmin.deleteGroup('{= ?selectedRole }','{= ?group }');\" title=\"Delete this group\"/>
                    </ui:if>
                </ui:if>
                <ui:else>
                    <a class=\"auth-role-group-a\" href=\"swp?_viewClass=pgadmin:RoleEditorPage&amp;selectedRole={= ?selectedRole }&amp;selectedGroup={= ?group }\">{= ?group }</a>
                </ui:else>
            </li>
        </ui:forEach>
    </ul>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:label "Role editor group list" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorHeader
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Slected Role" ;
    ] ;
  ui:prototype """
<tr>
    <th width=\"275\">
        <span>Security Roles</span>
    </th>
    <th width=\"250\">
        <span>
            <ui:if ui:condition=\"{= bound(?selectedRole) }\">Rights Groups</ui:if>
        </span>
    </th>
    <th>
        <span>
            <ui:if ui:condition=\"{= bound(?selectedGroup) &amp;&amp; bound(?selectedRole) }\">Resource Rights</ui:if>
        </span>
    </th>
</tr>
"""^^ui:Literal ;
  rdfs:label "Rights management header" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorPage
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedGroup ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>TopBraid Live - Rights Management</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<tblui:PageContainer arg:title=\"Rights Management\">
    <ui:setContext ui:queryGraph=\"{= &lt;http://server.topbraidlive.org/dynamic/permissiongroups&gt; }\">
        <tblui:Section arg:class=\"pgadmin\" arg:label=\"Map Security Roles to Resource Rights Groups\">
            <table>
                <pgadmin:RoleEditorHeader arg:selectedGroup=\"{= ?selectedGroup }\" arg:selectedRole=\"{= ?selectedRole }\"/>
                <tr>
                    <ui:if ui:condition=\"{= bound(?selectedRole) }\">
                        <td rowspan=\"2\" valign=\"top\" width=\"275\">
                            <pgadmin:RoleEditorRoleList arg:selectedRole=\"{= ?selectedRole }\"/>
                        </td>
                        <pgadmin:RoleEditorGroupInfo arg:selectedGroup=\"{= ?selectedGroup }\" arg:selectedRole=\"{= ?selectedRole }\"/>
                    </ui:if>
                    <ui:else>
                        <td valign=\"top\" width=\"275\">
                            <pgadmin:RoleEditorRoleList/>
                        </td>
                    </ui:else>
                </tr>
                <tr>
                    <ui:if ui:condition=\"{= bound(?selectedRole) }\">
                        <td valign=\"bottom\">
                            <ui:if ui:condition=\"{= !smf:isRoleManagedByGroup(?selectedRole, &quot;ExplorerGroup&quot;) }\">
                                <pgadmin:RoleEditorAddGroupSelector arg:selectedRole=\"{= ?selectedRole }\"/>
                            </ui:if>
                        </td>
                        <td valign=\"bottom\">
                            <ui:if ui:condition=\"{= (?selectedGroup != &quot;AdministratorGroup&quot;) &amp;&amp; (?selectedGroup != &quot;ExplorerGroup&quot;) }\">
                                <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Add Resources\" arg:onClick=\"pgadmin.openSelectAssetsTreeDialog();\"/>
                                <swa:Space/>
                                <swa:Space/>
                                <swa:Space/>
                                <swa:Space/>
                                <swa:Space/>
                                <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Add Wildcard\" arg:onClick=\"pgadmin.openAddAssetWildcardDialog();\"/>
                            </ui:if>
                        </td>
                    </ui:if>
                </tr>
            </table>
            <pgadmin:RenameGroupDialog arg:oldGroupName=\"{= ?selectedGroup }\" arg:selectedRole=\"{= ?selectedRole }\"/>
            <pgadmin:CopyGroupDialog arg:oldGroupName=\"{= ?selectedGroup }\" arg:selectedRole=\"{= ?selectedRole }\"/>
            <pgadmin:CreateNewGroupDialog arg:selectedRole=\"{= ?selectedRole }\"/>
            <pgadmin:AddAssetToGroupWizard arg:group=\"{= ?selectedGroup }\"/>
        </tblui:Section>
    </ui:setContext>
</tblui:PageContainer>
"""^^ui:Literal ;
  rdfs:label "Rights management page" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:RoleEditorRoleList
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:selectedRole ;
      spl:valueType xsd:string ;
      rdfs:comment "Selected Role" ;
    ] ;
  ui:prototype """
<ul class=\"auth-role-group-ul\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?role
            WHERE {
                ?any smf:role ?role .
            } }\">
        <li class=\"auth-role-group-li\">
            <ui:if ui:condition=\"{= ?role = ?selectedRole }\">
                <a class=\"auth-role-group-selected-a\" href=\"swp?_viewClass=pgadmin:RoleEditorPage&amp;selectedRole={= ?role }\">{= ?role }</a>
            </ui:if>
            <ui:else>
                <a class=\"auth-role-group-a\" href=\"swp?_viewClass=pgadmin:RoleEditorPage&amp;selectedRole={= ?role }\">{= ?role }</a>
            </ui:else>
        </li>
    </ui:forEach>
</ul>
"""^^ui:Literal ;
  rdfs:label "Role editor role list" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:SelectAssetsTreeDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:project ;
      spl:valueType xsd:string ;
      rdfs:comment "Project" ;
    ] ;
  ui:prototype """
<ui:group>
    <div id=\"selectAssetsTreeDialog\" title=\"Add Resource to Group\">
        <p>Select from the resources below.  Click Next to choose graph imports, or Add Resources to add the resources now.</p>
        <pgadmin:Tree arg:dataProvider=\"{= pgadmin:WorkspaceTreeDataProvider }\" arg:id=\"selectAssetsTreeDialogAssetTree\" arg:onCheck=\"pgadmin.assetTreeCheck();\" arg:onUncheck=\"pgadmin.assetTreeUncheck();\"/>
    </div>
    <script>$(document).ready(function(){
  $('#selectAssetsTreeDialog').dialog({
autoOpen : false,
modal : true,
width : 310,
height : 300,
buttons : [
  { id : \"selectAssetsTreeDialogBack\",
text : \"&lt;Back\",
disabled : true
  },
  { id : \"selectAssetsTreeDialogNext\",
text : \"Next&gt;\",
click : function() {
  pgadmin.openSelectImportClosureForTreeDialog();
  shouldClearInputs = false;
  $( this ).dialog( \"close\" );
},
disabled : true
  },
  { id : \"selectAssetsTreeDialogAddAssets\",
text : \"Add Resources\",
click : function() {
  pgadmin.addAssetsFromTreeToGroup(groupName);
  shouldClearInputs = true;
  $( this ).dialog( \"close\" );
},
disabled : true
  },
  { id : \"selectAssetsTreeDialogCancel\",
text : \"Cancel\",
click : function() {
  shouldClearInputs = true;
  $( this ).dialog( \"close\" );
}
  }
],
open: function() {
  shouldClearInputs = true;
  var checkedAssetCount = $('.jstree-checked').length;
  if (checkedAssetCount == 0) {
$('#selectAssetsTreeDialogNext').button('disable');
$('#selectAssetsTreeDialogAddAssets').button('disable');
  }
  var thisDialog = this;
  $(thisDialog).keypress(function(key) {
if (key.keyCode == $.ui.keyCode.ENTER) {
  $('#selectAssetsTreeDialogAddAssets').button('click');
}
  });
},
close : function() {
  if (shouldClearInputs) {
$('#selectAssetsTreeDialogNext').button('disable');
$('#selectAssetsTreeDialogAddAssets').button('disable');
$('#selectAssetsTreeDialogAssetTree').jstree(\"uncheck_all\");
  }
}
  });
});</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add assets to group" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:SelectImportClosureForTreeDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:assetId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:family ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "Group" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:project ;
      spl:valueType xsd:string ;
      rdfs:comment "Project" ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"checkbox\" id=\"selectImportClosureForTreeDialog\" title=\"Add Resources to Group\">
        <ui:loadable ui:loadId=\"selectImportClosureForTreeDialogAssets\">
            <input id=\"withImports\" name=\"withImports\" type=\"checkbox\"/>
            <label for=\"withImports\">Add all imports for selected resources</label>
        </ui:loadable>
    </div>
    <script>$(document).ready(function(){
  $('#selectImportClosureForTreeDialog').dialog({
autoOpen : false,
modal : true,
width : 310,
height : 300,
buttons : [
  { id : \"selectImportClosureForTreeDialogBack\",
text : \"&lt;Back\",
click : function() {
  pgadmin.openSelectAssetsTreeDialog();
  $( this ).dialog( \"close\" );
}
  },
  { id : \"selectImportClosureForTreeDialogNext\",
text : \"Next&gt;\",
disabled : true
  },
  { id : \"selectImportClosureForTreeDialogAddAssets\",
text : \"Add Resources\",
click : function() {
  var withImports = $('#withImports').is(':checked');
  pgadmin.addAssetsFromTreeToGroup(groupName, withImports);
  shouldClearInputs = true;
  $(\"#selectAssetsTreeDialog\").dialog(\"close\");
  $( this ).dialog( \"close\" );
}
  },
  { id : \"selectImportClosureForTreeDialogCancel\",
text : \"Cancel\",
click : function() {
  shouldClearInputs = true;
  $(\"#selectAssetsTreeDialog\").dialog(\"close\");
  $( this ).dialog( \"close\" );
}
  }
],
open: function() {
  var thisDialog = this;
  $(thisDialog).keypress(function(key) {
if (key.keyCode == $.ui.keyCode.ENTER) {
  $(\"#selectImportClosureForTreeDialogAddAssets\").button(\"click\");
}
  });
},
close : function() {
  if (shouldClearInputs) {
$('#withImports').prop('checked', false);
  }
}
  });
});</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add assets and all of their imports to group" ;
  rdfs:subClassOf pgadmin:AdminPageElements ;
.
pgadmin:SetAssetPermissionService
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:assetId ;
      spl:valueType xsd:string ;
      rdfs:comment "Asset ID" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType xsd:string ;
      rdfs:comment "The group to which to add the role" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:permission ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Permission" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:shouldHavePermission ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Whether or not to grant permission" ;
    ] ;
  ui:prototype """
<ui:group>
    <pgadmin:setAssetPermission ui:args=\"*\"/>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully set {= afn:localname(?permission) } permission on asset {= ?assetId } in group {= ?group }.\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback for when the user sets a permission on an asset in a group" ;
  rdfs:label "Set asset permission service" ;
  rdfs:subClassOf pgadmin:AdminElements ;
.
pgadmin:Tree
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:defaultValue "tree" ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the HTML element to generate for the tree." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:cache ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Set to true if the tree shall cache its requests. This should only be done for read-only static data." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional filter function that is passed into the tree provider so that it can hide certain nodes (such as system classes) from the tree. The function must take a resource as its only argument and return true if the resource shall appear in the tree." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:onCheck ;
      spl:valueType xsd:string ;
      rdfs:comment "JavaScript code that shall be called if a node has been selected in the tree. In this code, the variable 'resource' points to the URI of the selected resource. The variable 'node' holds the selected low-level tree node." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:onLoaded ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript snippet that is to be executed after the tree has loaded its roots." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:onUncheck ;
      spl:valueType xsd:string ;
      rdfs:comment "JavaScript code that shall be called if a node has been deselected in the tree." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:root ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A root node that can overload the default root of the data provider. For example, swa:ClassTreeDataProvider starts at rdfs:Resource by default - set arg:root to owl:Thing to start there instead." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType swa:TreeDataProvider ;
      rdfs:comment "The TreeDataProvider that is used in the callbacks to fetch the root and child nodes." ;
    ] ;
  ui:prototype """
<ui:createLink arg:filterFunction=\"{= ?filterFunction }\" arg:root=\"{= ?root }\" ui:cache=\"{= ?cache }\" ui:format=\"json\" ui:sendQueryGraph=\"{= true }\" ui:snippet=\"true\" ui:view=\"{= ?dataProvider }\">
    <div id=\"{= ?id }\" treedataprovider=\"{= ?dataProvider }\" treeroot=\"{= ?root }\"/>
    <script type=\"text/javascript\">function {= ?id }TreeInitHandler() {
		pgadmin.initTree(\"{= ?id }\", \"{= ?link }&amp;{= ui:encodeContext() }\",<ui:if ui:condition=\"{= bound(?onLoaded) }\">\"{= ?onLoaded }\"</ui:if>
        <ui:else>false</ui:else>, <ui:if ui:condition=\"{= bound(?onCheck) }\">\"{= ?onCheck }\"</ui:if>
        <ui:else>false</ui:else>, <ui:if ui:condition=\"{= bound(?onUncheck) }\">\"{= ?onUncheck }\"</ui:if>
        <ui:else>false</ui:else>);
  };
  $().ready(function() {
{= ?id }TreeInitHandler();
	});</script>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Inserts a jsTree component into the current page. The jsTree object will get the provided id." ;
  rdfs:label "Tree" ;
  rdfs:subClassOf swa:TreeElements ;
.
pgadmin:WorkspaceTreeChildren
  rdf:type spin:SelectTemplate ;
  spin:body [
      rdf:type sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:predicate smf:workspaceParent ;
            sp:subject [
                sp:varName "node" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:not ;
                    sp:arg1 [
                        rdf:type sp:bound ;
                        sp:arg1 [
                            sp:varName "filterFunction" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type spif:invoke ;
                    sp:arg1 [
                        sp:varName "filterFunction" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "node" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "node" ;
                        ] ;
                      sp:predicate smf:workspaceParent ;
                      sp:subject [
                          sp:varName "child" ;
                        ] ;
                    ]
                  ) ;
              ] ;
            sp:variable [
                sp:varName "leaf" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      sp:varName "leaf" ;
                    ] ;
                ]
                (
                  [
                    rdf:type sp:Bind ;
                    sp:expression "swa-icon-resource" ;
                    sp:variable [
                        sp:varName "icon" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:workspaceLabel ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression "false"^^xsd:boolean ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "A template that delivers all contents of a given container." ;
  rdfs:label "Workspace tree children" ;
  rdfs:subClassOf swa:TreeChildrenTemplates ;
.
pgadmin:WorkspaceTreeDataProvider
  rdf:type swa:TreeDataProvider ;
  arg:changeHandler "pgadmin.handleChangeForWorkspaceTree" ;
  arg:treeChildrenTemplate pgadmin:WorkspaceTreeChildren ;
  arg:treePathTemplate pgadmin:WorkspaceTreePath ;
  arg:treeRootsTemplate pgadmin:WorkspaceTreeRoots ;
  rdfs:comment "A data provider for a workspace tree." ;
  rdfs:label "Workspace tree data provider" ;
.
pgadmin:WorkspaceTreePath
  rdf:type spin:SelectTemplate ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "path" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:shortestObjectsPath ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
                sp:arg2 smf:workspaceParent ;
                sp:arg3 [
                    sp:varName "root" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "path" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "Used by the workspace tree to find the shortest path to a given node." ;
  rdfs:label "Workspace tree path" ;
  rdfs:subClassOf swa:TreePathTemplates ;
.
pgadmin:WorkspaceTreeRoots
  rdf:type spin:SelectTemplate ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:coalesce ;
                sp:arg1 [
                    sp:varName "root" ;
                  ] ;
                sp:arg2 [
                    rdf:type smf:workspaceRoot ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "node" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:workspaceLabel ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "node" ;
                        ] ;
                      sp:predicate smf:workspaceParent ;
                      sp:subject [
                          sp:varName "child" ;
                        ] ;
                    ]
                  ) ;
              ] ;
            sp:variable [
                sp:varName "leaf" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression "swa-icon-class" ;
            sp:variable [
                sp:varName "icon" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression "false"^^xsd:boolean ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "A template that delivers the roots of a workspace tree. Unless a different root has been specified using arg:root, it will return the workspace root." ;
  rdfs:label "Workspace tree roots" ;
  rdfs:subClassOf swa:TreeRootsTemplates ;
.
arg:asset
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:assetId
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:assetPermission
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:assets
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:families
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:family
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:newGroup
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldGroup
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldGroupName
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:onCheck
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:onUncheck
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:permission
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:project
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:role
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:selectedGroup
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:selectedRole
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:shouldHavePermission
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:userName
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withImports
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
