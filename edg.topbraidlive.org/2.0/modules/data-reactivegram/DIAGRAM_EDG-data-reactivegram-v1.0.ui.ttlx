# baseURI: http://edg.graph.link/swp/1.0/datareactivegram
# imports: http://edg.topbraid.solutions/1.0/spin/library
# imports: http://edg.topbraid.solutions/1.0/swp/diagrams/models
# imports: http://edg.topbraid.solutions/1.0/swp/diagrams/reactivegrams
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.avro: <http://edg.topbraidlive.org/avro/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.reactivegram: <http://edg.topbraid.solutions/diagram/reactivegram/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edg.xform.html: <http://edg.topbraid.solutions/transfrom/html/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix egl-align: <https://edg.graph.link/shapes/alignment#> .
@prefix egl-lib: <https://edg.graph.link/1.0/lib/functions#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix o2o: <http://lib.topquadrant.com/owl/srg/o2o#> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix reif: <https://edg.graph.link/1.0/shapes/reification#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tr-org: <http://permid.org/ontology/organization/> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xhtml1: <http://www.w3.org/1999/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.graph.link/swp/1.0/datareactivegram>
  a owl:Ontology ;
  owl:imports <http://edg.topbraid.solutions/1.0/spin/library> ;
  owl:imports <http://edg.topbraid.solutions/1.0/swp/diagrams/models> ;
  owl:imports <http://edg.topbraid.solutions/1.0/swp/diagrams/reactivegrams> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
edg.reactivegram:ButlerCommentsModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Comments</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Provide a means to see what comments have been made on the resource-of-interest</li>
                <li>How far should the comments reporting go into the data structure?</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Comments Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerConfigurationFormPlugin
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <!-- Disabled -->
    <!--swa:ObjectsEnum arg:alwaysDisplay=\"true\"
         arg:label=\"Data Butler Configuration Parameters\"
         default:labelWidth=\"250px\"
         default:subject=\"{= ?subject }\">
<swa:Object arg:editWidget=\"swa:PlainTextFieldEditor\"
        arg:label=\"Enable Butler\"
        arg:predicate=\"cfg:enableButler\"/>
<swa:Object arg:editWidget=\"swa:PlainTextFieldEditor\"
        arg:label=\"Data Butler SHACL Validation Graph\"
        arg:predicate=\"cfg:dataButlerShapesGraph\"/>
<swa:Object arg:editWidget=\"swa:PlainTextFieldEditor\"
        arg:label=\"Validation Depth\"
        arg:predicate=\"cfg:validationDepth\"/>
</swa:ObjectsEnum-->
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamworkconfig:ConfigFormPlugins ;
.
edg.reactivegram:ButlerFullValidationModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Full Validation</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Explain what it means</li>
                <li>How it executes</li>
                <li>Provide for asynchronous scheduling needs</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Full Validation Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerFullViewModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Full View</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Shows a birds-eye view of the full data structure</li>
                <li>Provides a way to navigate to a resource of interest</li>
                <li>Need to consider state management - should we be able to come back?</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Full View Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerHelpModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Purpose</div>
            <p>The purpose of the \"Butler\" is to provide a schematic view of a data/metadata structure depicting the status of its specification, with the following capabilities are needed:</p>
            <ol>
                <li>ability to provide a model-based view of data/metadata as a visual schematic</li>
                <li>ability to execute SHACL validation</li>
                <li>ability to navigate across all data connections while staying in the same page</li>
                <li>ability for a diagram to serve as an interactive entry form - optionally to provide a means to edit data in-situ.</li>
                <li>ability to see where issues and other comments have been made - hot spots and cold spots. (a future enhancement)</li>
                <li>ability to relate a &ldquo;subject-of-interest&rdquo; to its dependencies on workflows (future)</li>
                <li>ability to have the diagram serve as a launch pad for exploring other visualizations such as lineage, dependencies and other kinds of impact (future)</li>
                <li>ability for a user to ask what needs to happen for a \"subject-of-interest&rdquo; to be completed (butler aspect - future)</li>
                <li>ability to supervise a commit on completion of a &ldquo;subject-of-interest&rdquo; (butler aspect - future)</li>
            </ol>
            <div class=\"swa-sub-title\">Schematic Notation and Icons</div>
            <p>TBD: describe the nodes, links and controls</p>
            <p>TBD: images have a dependency on changes that might come from the reviews of styles and functionality</p>
            <div class=\"swa-sub-title\">Navigation</div>
            <p>TBD: Describe how navigation is possible within the schematic and from the schematic to other EDG editors</p>
            <div class=\"swa-sub-title\">Validation</div>
            <p>TBD: Describe how validation is performed and how the results are provided</p>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "All Validation Results Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerPrintModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Print Dialog</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Should be able to create image?</li>
                <li>Should provide full report?</li>
                <li>Should only save to PDF?</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Print Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerReactiveDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus class of interest." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:shapesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInShowEmptyNodesMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:maxValidationReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showOKnodes ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:errorPrototype """
<ui:group let:maybeValidationDataGraph=\"{= ui:getSessionAttribute(&quot;validationDataGraph&quot;) }\" let:maybeValidationResultsGraph=\"{= ui:getSessionAttribute(&quot;validationResultsGraph&quot;) }\" let:myDataGraphWithImports=\"{= ui:currentQueryGraph() }\" let:myFocusNode=\"{= COALESCE(?focusNode, ?resource) }\" let:myMaxValidationReach=\"{= COALESCE(?maxValidationReach, xsd:integer(smf:configParam(&quot;validationDepth&quot;)), 3) }\" let:validationDataGraph=\"{= ui:createSessionGraph() }\" let:validationResultsGraph=\"{= ui:createSessionGraph() }\">
    <ui:group let:myDataGraph=\"{= ui:graphWithoutImports(?myDataGraphWithImports) }\" let:myProjectType=\"{= teamwork:getProjectType(?myDataGraphWithImports) }\">
        <ui:try let:validationShapesGraphAssetCollectionSetting=\"{= IRI(spl:objectInGraph(?myDataGraphWithImports, edg:validationShapesGraph, ?myDataGraphWithImports)) }\" let:validationShapesGraphEnvironmentSetting=\"{= IRI(edg:getValidationShapesGraphSetting(?myProjectType)) }\">
            <ui:group let:maybeShapesGraph=\"{= ui:graphWithImports(COALESCE(?shapesGraph, ?validationShapesGraphAssetCollectionSetting, ?validationShapesGraphEnvironmentSetting)) }\">
                <ui:group let:myShapesGraph=\"{= COALESCE(?maybeShapesGraph, ?myDataGraphWithImports) }\">
                    <!--ui:dumpScope ui:message=\"AAA0: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"/-->
                    <ui:if ui:condition=\"{= (!bound(?myShapesGraph)) || (!isIRI(?myShapesGraph)) }\">
                        <ui:throw ui:message=\"Missing or bad SHACL validation graph. Check that the SHACL graph setting exists in the graph metadata.\"/>
                    </ui:if>
                    <ui:if ui:condition=\"{= (!bound(?myFocusNode)) || (!isIRI(?myFocusNode)) }\">
                        <ui:throw ui:message=\"Missing or bad focus node\"/>
                    </ui:if>
                </ui:group>
            </ui:group>
        </ui:try>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:maybeValidationDataGraph=\"{= ui:getSessionAttribute(&quot;validationDataGraph&quot;) }\" let:maybeValidationResultsGraph=\"{= ui:getSessionAttribute(&quot;validationResultsGraph&quot;) }\" let:myDataGraphWithImports=\"{= ui:currentQueryGraph() }\" let:myFocusNode=\"{= COALESCE(?focusNode, ?resource) }\" let:myMaxValidationReach=\"{= COALESCE(?maxValidationReach, xsd:integer(smf:configParam(&quot;validationDepth&quot;)), 3) }\" let:validationDataGraph=\"{= ui:createSessionGraph() }\" let:validationResultsGraph=\"{= ui:createSessionGraph() }\">
    <ui:group let:myDataGraph=\"{= ui:graphWithoutImports(?myDataGraphWithImports) }\" let:myProjectType=\"{= teamwork:getProjectType(?myDataGraphWithImports) }\">
        <ui:try let:validationShapesGraphAssetCollectionSetting=\"{= IRI(spl:objectInGraph(?myDataGraphWithImports, edg:validationShapesGraph, ?myDataGraphWithImports)) }\" let:validationShapesGraphEnvironmentSetting=\"{= IRI(edg:getValidationShapesGraphSetting(?myProjectType)) }\">
            <ui:group let:maybeShapesGraph=\"{= ui:graphWithImports(COALESCE(?shapesGraph, ?validationShapesGraphAssetCollectionSetting, ?validationShapesGraphEnvironmentSetting)) }\">
                <ui:group let:myShapesGraph=\"{= COALESCE(?maybeShapesGraph, ?myDataGraphWithImports) }\">
                    <!--ui:dumpScope ui:message=\"AAA0: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"/-->
                    <ui:if ui:condition=\"{= bound(?maybeValidationResultsGraph) }\">
                        <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"/-->
                        <swa:DeleteSessionGraphService arg:sessionGraph=\"{= IRI(?maybeValidationResultsGraph) }\"/>
                    </ui:if>
                    <ui:if ui:condition=\"{= bound(?maybeValidationDataGraph) }\">
                        <swa:DeleteSessionGraphService arg:sessionGraph=\"{= IRI(?maybeValidationDataGraph) }\"/>
                    </ui:if>
                    <ui:group let:nodeShapes=\"{= edg:countOfSubjectsForPropertyObjectInGraph(?myShapesGraph, sh:NodeShape, rdf:type) }\" let:propertyShapes=\"{= edg:countOfSubjectsForPropertyObjectInGraph(?myShapesGraph, sh:PropertyShape, rdf:type) }\">
                        <ui:setContext let:setSessionAttributeResult1=\"{= ui:setSessionAttribute(&quot;validationResultsGraph&quot;, str(?validationResultsGraph)) }\" let:setSessionAttributeResult2=\"{= ui:setSessionAttribute(&quot;butlerDataGraph&quot;, str(?myDataGraphWithImports)) }\" let:setSessionAttributeResult3=\"{= ui:setSessionAttribute(&quot;validationDataGraph&quot;, str(?validationDataGraph)) }\" let:setSessionAttributeResult4=\"{= ui:setSessionAttribute(&quot;shapesGraph&quot;, str(?myShapesGraph)) }\" ui:varName=\"butlerDataGraph\" ui:varValue=\"{= str(?myDataGraph) }\">
                            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?myDataGraphWithImports) }\">
                                <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                                    <edg.reactivegram:ExtractSubGraph arg:dataGraph=\"{= ?myDataGraphWithImports }\" arg:subject=\"{= ?myFocusNode }\" edg:maxReach=\"{= ?myMaxValidationReach }\" edg:parent=\"{= ?myFocusNode }\" edg:reach=\"{= 1 }\">
                                        <ui:setContext ui:silentTransactions=\"{= true }\">
                                            <ui:update ui:updateQuery=\"{!
                                                    INSERT {
                                                        GRAPH ?validationDataGraph {
                                                            ?s ?p ?o .
                                                        } .
                                                    }
                                                    WHERE {
                                                        GRAPH ui:tempGraphForValidation {
                                                            ?s ?p ?o .
                                                        } .
                                                    } }\"/>
                                        </ui:setContext>
                                    </edg.reactivegram:ExtractSubGraph>
                                    <ui:group let:startTime=\"{= 1 }\"/>
                                    <ui:if ui:condition=\"{= ?isInValidateMode }\">
                                        <ui:group let:startTime=\"{= spif:currentTimeMillis() }\">
                                            <edg:PerformSHACLvalidation arg:dataGraph=\"{= ?myDataGraphWithImports }\" arg:shapesGraph=\"{= ?myShapesGraph }\" arg:subject=\"{= ?myFocusNode }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" edg:maxReach=\"{= ?myMaxValidationReach }\"/>
                                            <ui:group let:endTime=\"{= spif:currentTimeMillis() }\">
                                                <ui:setContext let:countOfInstances=\"{#
                                                        SELECT COUNT(DISTINCT ?s)
                                                        WHERE {
                                                            GRAPH ?validationDataGraph {
                                                                ?s a ?type .
                                                            } .
                                                        } }\" let:validationTime=\"{= str(((?endTime - ?startTime) / 1000)) }&nbsp;seconds\" ui:varName=\"swaSystemLabels\" ui:varValue=\"{= ?systemLabels }\">
                                                    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"/-->
                                                    <p class=\"text-info\">
                                                        <span>Validation is <b>ON</b>&nbsp;for {= str(?myMaxValidationReach) } levels using&nbsp;</span>
                                                        <button class=\"btn btn-default btn-xs\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg:ButlerAllNodeShapesModal','SHACL Node Shapes',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }' ,{'shapesGraph': '{= str(?myShapesGraph) }'})\" type=\"button\">{= ?nodeShapes } Node Shapes</button>
                                                        <span> and </span>
                                                        <button class=\"btn btn-default btn-xs\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg:ButlerAllPropertyShapesModal','SHACL Node Shapes',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{'shapesGraph': '{= str(?myShapesGraph) }'} )\" type=\"button\">{= ?propertyShapes } property shapes</button>
                                                        <span>&nbsp;over {= str(?countOfInstances) } instances.</span>
                                                        <span>&nbsp;Execution time: {= ?validationTime }.</span>
                                                        <span>&nbsp;SHACL validation graph(s): {= str(?myShapesGraph) }</span>
                                                    </p>
                                                </ui:setContext>
                                            </ui:group>
                                        </ui:group>
                                        <!--ui:debug>
<ui:dumpGraph ui:filePath=\"/www.sandbox.com/debug/butler-extract.ttl\"
  ui:graph=\"{= ?validationDataGraph }\"/>
<ui:dumpGraph ui:filePath=\"/www.sandbox.com/debug/butler-validation-results.ttl\"
  ui:graph=\"{= ?validationResultsGraph }\"/>
</ui:debug-->
                                    </ui:if>
                                    <ui:else>
                                        <p class=\"text-info\">Validation is <b>OFF</b>
                                        </p>
                                    </ui:else>
                                    <ui:setContext let:errors=\"{= IF(?isInValidateMode, edg:getCountOfSHACLviolations(?validationResultsGraph), 0) }\" let:id=\"{= ui:uniqueId() }\" let:queryGraph=\"{= ui:graphWithImports(?myDataGraphWithImports) }\">
                                        <ui:call arg:filterFunction=\"{= edg.reactivegram:isRelevantButlerProperty }\" arg:resource=\"{= ?resource }\" arg:showEmptyNodes=\"{= ?isInShowEmptyNodesMode }\" ui:template=\"{= edg:GetAssetAssociations }\" ui:varName=\"assetAssociations\">
                                            <!--ui:dumpResultSet ui:message=\"AAA1: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"
                                              ui:resultSet=\"{= ?assetAssociations }\"/-->
                                            <ui:call arg:column=\"{= 0 }\" arg:resultSet=\"{= ?assetAssociations }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"associations\">
                                                <!--ui:dumpResultSet ui:message=\"AAA2: edg.reactivegram:ButlerReactiveDiagram {= ui:label(?myFocusNode) }\"
  ui:resultSet=\"{= ?associations }\"/-->
                                                <div class=\"swauml-instance-diagram-butler\" id=\"BID_{= ?id }\">
                                                    <edg.reactivegram:GenerateDiagramControls arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:resource=\"{= ?myFocusNode }\"/>
                                                    <edg.reactivegram:ReactiveInstanceNode arg:focused=\"{= true }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:resource=\"{= ?myFocusNode }\" arg:violationsCount=\"{= ?errors }\" edg:maxReach=\"{= ?myMaxValidationReach }\"/>
                                                    <edg.reactivegram:GenerateAssociatedAssetClasses arg:associations=\"{= ?assetAssociations }\" arg:attributesFilterFunction=\"{= ?attributesFilterFunction }\" arg:focusNode=\"{= ?myFocusNode }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:shapesGraph=\"{= ?shapesGraphs }\" arg:showOKnodes=\"{= ?showOKnodes }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" edg:maxReach=\"{= ?myMaxValidationReach }\"/>
                                                    <edg.reactivegram:GenerateSVGforDiagramLinks arg:associations=\"{= ?assetAssociations }\" arg:resource=\"{= ?myFocusNode }\"/>
                                                    <edg.reactivegram:InitializeButlerDiagram arg:associations=\"{= ?assetAssociations }\" arg:id=\"BID_{= ?id }\" arg:resource=\"{= ?myFocusNode }\"/>
                                                </div>
                                            </ui:call>
                                        </ui:call>
                                    </ui:setContext>
                                </ui:setContext>
                            </ui:setContext>
                        </ui:setContext>
                    </ui:group>
                </ui:group>
            </ui:group>
        </ui:try>
        <ui:catch>
            <div style=\"padding-left:300px;\">
                <p class=\"text-info\">Data Butler cannot proceed.</p>
                <p class=\"text-info\">{= ?exception }</p>
            </div>
        </ui:catch>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Builds a butler reactive diagram" ;
  rdfs:label "Butler Reactive Diagram" ;
  rdfs:seeAlso teamwork:RecordValidationReport ;
  rdfs:subClassOf swa:AbstractClassDiagram ;
.
edg.reactivegram:ButlerSearchModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">Search</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Asks for a string and/or uses auto-complete</li>
                <li>Looks for the resourcein the butler</li>
                <li>Positions any associated paginator correctly</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Search Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ButlerTemplate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>DataButler v1.2</title>
    <link href=\"{= ui:lib() }/reactivegram/css/butler.css\" rel=\"stylesheet\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group>
    <ui:setContext let:nodeFocusedEvent=\"org.topbraid.butler.nodeFocused\" ui:varName=\"swaAppName\" ui:varValue=\"ButlerGram\">
        <div class=\"ui-layout-north\" id=\"headerPanel\">
            <ui:insertionPoint ui:pointId=\"header\"/>
        </div>
        <div class=\"ui-layout-center\" id=\"center-pane\">
            <edg:ButlerPane arg:resource=\"{= ?resource }\" edg:version=\"v1.2\"/>
        </div>
        <swa:Initializer/>
    </ui:setContext>
    <script>var layout;
	$(document).ready(function () {
		layout = $('body').layout({
			applyDefaultStyles: true,
			defaults: {
				resizable: true,
				slidable: true
			},
			north: {
				closable: false,
				pane_spacing: 0,
				resizable: false,
				slidable: false,
				spacing_open: 0,
				togglerLength_open: 0
			},
			center: {
				onresize_end:  function () { }// butler.refreshLayout();
			}
		});
	});</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf edg:Elements ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg.reactivegram:ButlerWorkflowStatusModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <div class=\"swa-sub-title\">ACtive Workflows</div>
            <p class=\"text-danger\">TBD: Future Capability</p>
            <ol>
                <li>Show active workflows for the resource-of-interest</li>
                <li>How far should the workflow status reporting go into the data structure?</li>
            </ol>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Workflow Status Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg.reactivegram:ExtractSubGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:depictedReach=\"{= 2 }\" let:myMaxReach=\"{= COALESCE(?maxReach, 100) }\">
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
            <ui:throw ui:message=\"No data graph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= ?reach = 1 }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        GRAPH ui:tempGraphForValidation {
                            ?extractOntology ?p ?o .
                        } .
                    }
                    WHERE {
                        GRAPH ?dataGraph {
                            ?ontology a owl:Ontology .
                            ?ontology ?p ?o .
                            BIND (ui:tempGraphForValidation AS ?extractOntology) .
                        } .
                    } }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= ?reach &lt;= ?myMaxReach }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:ExtractSubGraph - subject is {= ?subject } at reach of {= str(?reach) } with max reach of {= ?maxReach }\"/-->
            <ui:group letrs:triples=\"{#
                    SELECT ?subject ?p ?o
                    WHERE {
                        GRAPH ?dataGraph {
                            ?subject ?p ?o .
                        } .
                    } }\">
                <ui:forEach ui:resultSet=\"{= ?triples }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                GRAPH ui:tempGraphForValidation {
                                    ?subject ?p ?o .
                                    ?subject edg:parent ?parent .
                                } .
                            }
                            WHERE {
                                GRAPH ?dataGraph {
                                    ?subject ?p ?o .
                                } .
                            } }\"/>
                    <ui:if ui:condition=\"{= (((?p != rdf:type) &amp;&amp; (?p != rdfs:isDefinedBy)) &amp;&amp; isIRI(?o)) &amp;&amp; bound(?o) }\">
                        <ui:group let:isKnown=\"{= EXISTS {
                            GRAPH ui:tempGraphForValidation {
                                ?o ?someP ?someO .
                            } .
                        } }\">
                            <!--ui:dumpScope ui:message=\"AAA2: edg:ExtractSubGraph - subject is {= ?o } - is known is {= ?isKnown }\"/-->
                            <ui:if ui:condition=\"{= !?isKnown }\">
                                <edg.reactivegram:ExtractSubGraph arg:dataGraph=\"{= ?dataGraph }\" arg:subject=\"{= ?o }\" edg:maxReach=\"{= ?myMaxReach }\" edg:parent=\"{= IF((?reach &gt;= ?depictedReach), ?parent, ?o) }\" edg:reach=\"{= ?reach + 1 }\"/>
                            </ui:if>
                        </ui:group>
                    </ui:if>
                </ui:forEach>
            </ui:group>
        </ui:if>
    </ui:try>
</ui:group>
"""^^ui:Literal ;
  vaem:todo """Improve this:

   <ui:if ui:condition=\"{= (((?p != rdf:type) &amp;&amp; (?p != rdfs:isDefinedBy)) &amp;&amp; isIRI(?o)) &amp;&amp; bound(?o) }\">
                                  """ ;
  rdfs:comment "Given a resource and a graph for results inserts into the graph the resources triples and those of its referenced resources. The reach arguments control the recursive execution." ;
  rdfs:label "extract subgraph (refin)" ;
  rdfs:subClassOf edg:Elements ;
.
edg.reactivegram:GenerateAssociatedAssetClasses
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:associations ;
      spl:valueType spr:Table ;
      rdfs:comment "The associations that will become links" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shapesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showOKnodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType spr:Table ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:GenerateAssociatedAssetClasses\"/-->
    <ui:forEach ui:resultSet=\"{= ?associations }\">
        <ui:group let:otherAssetClass=\"{= edg:getAssociatedAssetClass(?association, ?focusNode) }\">
            <ui:if ui:condition=\"{= bound(?otherAssetClass) }\">
                <!--ui:dumpScope ui:message=\"AAA2: edg.reactivegram:GenerateAssociatedAssetClasses - {= ?resource } - {= ?association }\"/-->
                <!-- TODO: The validation counts need to be handled for each instance in ReactiveClassNode. -->
                <!--       Here we deal with the counts for all instances -->
                <ui:call arg:focusNode=\"{= ?focusNode }\" arg:property=\"{= ?association }\" arg:resourceType=\"{= ?targetClass }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" ui:template=\"{= edg:GetSHACLvalidationResultsForShapeNode }\" ui:varName=\"validationResults\">
                    <!--ui:dumpScope ui:message=\"AAA2: edg.reactivegram:GenerateAssociatedAssetClasses target class is {= ?targetClass }\"/-->
                    <!--ui:dumpResultSet ui:message=\"AAA3: edg.reactivegram:GenerateAssociatedAssetClasses for {= ui:label(?otherAssetClass) }\"
  ui:resultSet=\"{= ?validationResults }\"/-->
                    <ui:group let:invalidInstancesCount=\"{= spr:rowCount(?validationResults) }\">
                        <ui:group let:violationsCount=\"{= IF((?invalidInstancesCount = 0), 0, spif:cast(spr:aggregateCol(spr:Sum, ?validationResults, 1), xsd:integer)) }\">
                            <edg.reactivegram:ReactiveClassNode arg:attributesFilterFunction=\"{= ?attributesFilterFunction }\" arg:focusNode=\"{= ?focusNode }\" arg:focused=\"{= false }\" arg:invalidInstancesCount=\"{= ?invalidInstancesCount }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:nodeStyle=\"swauml-instance-node\" arg:property=\"{= ?association }\" arg:propertyShape=\"{= ?propertyShape }\" arg:resourceType=\"{= ?targetClass }\" arg:showOKnodes=\"{= ?showOKnodes }\" arg:targetClass=\"{= ?targetClass }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" arg:violationsCount=\"{= ?violationsCount }\" edg:maxReach=\"{= ?maxReach }\" sh:maxCount=\"{= ?maxCardinality }\"/>
                        </ui:group>
                    </ui:group>
                </ui:call>
            </ui:if>
        </ui:group>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate associated asset classes" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:GenerateAssociatedAssetNodeClass_DEPRECATED
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:associations ;
      spl:valueType spr:Table ;
      rdfs:comment "The associations that will become links" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shapesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showOKnodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType spr:Table ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <edg.reactivegram:ReactiveClassNode arg:attributesFilterFunction=\"{= ?attributesFilterFunction }\" arg:focusNode=\"{= ?focusNode }\" arg:focused=\"{= false }\" arg:instance=\"{= ?focusNode }\" arg:invalidInstancesCount=\"{= ?invalidInstancesCount }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:nodeStyle=\"swauml-instance-node\" arg:property=\"{= ?association }\" arg:propertyShape=\"{= ?propertyShape }\" arg:resourceType=\"{= ?targetClass }\" arg:showOKnodes=\"{= ?showOKnodes }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" arg:violationsCount=\"{= ?violationsCount }\" sh:maxCount=\"{= ?maxCardinality }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate associated asset node class" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:GenerateDiagramControls
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group/>
"""^^ui:Literal ;
  rdfs:label "Generate diagram controls" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:GenerateSVGforDiagramLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:associations ;
      spl:valueType spr:Table ;
      rdfs:comment "The associations that will become links" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:GenerateDiagramLinks\"/-->
    <svg height=\"100%\" width=\"100%\">
        <defs>
            <edg.reactivegram:LogicalModelCardinalityDefs/>
        </defs>
        <ui:forEach ui:resultSet=\"{= ?associations }\">
            <ui:group let:otherAssetClass=\"{edg:getAssociatedAssetClass(?association, ?resource) }\">
                <!--ui:dumpScope ui:message=\"AAA2:edg.reactivegram:ButlerReactiveDiagram -  '{= ui:label(?resource) }' to class '{= ui:label(?otherAssetClass) }' for property '{= ui:label(?association) }'\"/-->
                <ui:if ui:condition=\"{= bound(?otherAssetClass) }\">
                    <edg.reactivegram:ReactiveModelLink arg:association=\"{= ?association }\" arg:sourceEntity=\"{= ?resource }\" arg:targetEntity=\"{= ENCODE_FOR_URI(str(?propertyShape)) }\" sh:maxCount=\"{= ?maxCardinality }\" sh:minCount=\"{= ?minCardinality }\"/>
                </ui:if>
                <ui:else>
                    <!--ui:dumpScope ui:message=\"AAA3: edg.reactivegram:ButlerReactiveDiagram -  {= ui:label(?resource) } has missing class for property {= ui:label(?association) } }\"/-->
                </ui:else>
            </ui:group>
        </ui:forEach>
    </svg>
    <!-- generate association labels -->
    <ui:forEach ui:resultSet=\"{= ?associations }\">
        <ui:group let:otherAssetClass=\"{edg:getAssociatedAssetClass(?association, ?resource) }\">
            <ui:if ui:condition=\"{= bound(?otherAssetClass) }\">
                <edg:ReactiveModelLinkLabel arg:association=\"{= ?association }\" arg:sourceEntity=\"{= ?resource }\" arg:targetEntity=\"{= ENCODE_FOR_URI(str(?propertyShape)) }\" sh:maxCount=\"{= ?maxCardinality }\" sh:minCount=\"{= ?minCardinality }\"/>
            </ui:if>
        </ui:group>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate SVG for diagram links" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:InitializeButlerDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:associations ;
      spl:valueType spr:Table ;
      rdfs:comment "The associations that will become links" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:InitializeButlerDiagram\"/-->
    <script>butler.initDiagram(\"{= ?id }\",<swon:Array/>
        <swon:Comma/>
        <swon:Array>
            <ui:forEach ui:resultSet=\"{= ?associations }\" ui:separator=\",\">
                <ui:group let:otherAssetClass=\"{= edg:getAssociatedAssetClass(?association, ?resource) }\">
                    <ui:if ui:condition=\"{= bound(?otherAssetClass) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"sourceEntity\" arg:value=\"{= ?resource }\"/>
                            <swon:Value arg:name=\"targetEntity\" arg:value=\"{= ENCODE_FOR_URI(str(?propertyShape)) }\"/>
                            <swon:Value arg:name=\"association\" arg:value=\"{= ?association }\"/>
                        </swon:Object>
                    </ui:if>
                </ui:group>
            </ui:forEach>
        </swon:Array>)</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Initialize butler diagram" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:Label
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The RDF node to display the label of." ;
    ] ;
  ui:prototype """
<ui:group>
    <span class=\"swa-label\" style=\"color:darkgreen\">
        <ui:if ui:condition=\"{= isLiteral(?node) }\">{= ui:label(?node) }</ui:if>
        <ui:else>
            <ui:resourceView ui:matchIds=\"label\" ui:resource=\"{= ?node }\"/>
        </ui:else>
    </span>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A span that inserts an instance view of a given resource with match id \"label\". If the node is a literal it will simply render the ui:label of the literal." ;
  rdfs:label "Label (EDG Refinitiv)" ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:Link
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelOverride ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional override to the label." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI resource to link to." ;
    ] ;
  ui:prototype """
<ui:group let:href=\"{= edg.reactivegram:createHRef(?resource) }\">
    <ui:if ui:condition=\"{= bound(?href) }\">
        <a class=\"swa-link\" href=\"{= ?href }\" id=\"{= ?id }\">
            <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
            <ui:else>
                <swa:Label arg:node=\"{= ?resource }\"/>
            </ui:else>
        </a>
    </ui:if>
    <ui:else>
        <ui:group let:uid=\"{= COALESCE(?id, ui:uniqueId()) }\">
            <ui:group let:link=\"{= swa:createLink(?resource, ?uid) }\">
                <ui:if ui:condition=\"{= bound(?link) }\">
                    <a class=\"swa-link\" href=\"javascript:void(0)\" id=\"{= ?uid }\" onclick=\"{= ?link }\">
                        <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
                        <ui:else>
                            <edg.reactivegram:Label arg:node=\"{= ?resource }\"/>
                        </ui:else>
                    </a>
                </ui:if>
            </ui:group>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a hyperlink to switch the current view to a given resource. This element should be used to create all hyperlinks in SWA applications, because this single place provides greater flexibility to make adjustments to the links. In particular, the semantics of what should happen if the user clicks on a link may be different for each application or even within different parts of a single application: in some cases the application may want to replace a form on the screen, while in other cases the selected resource should be opened in a modal dialog. The SPIN functions swa:createHRef and swa:createLink are used to define the link. If these functions return nothing, then no link is displayed, but rather an swa:Label." ;
  rdfs:label "Property Link (EDG Refinitiv)" ;
  rdfs:seeAlso edg.reactivegram:PropertyLink ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:LogicalModelCardinalityDefs
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <marker id=\"cardinality-many\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-20 -5 20 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M 0 6 L -10 0 M 0 -6 L -10 0 z\"/>
    </marker>
    <marker id=\"cardinality-many-reverse\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto-start-reverse\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-20 -5 20 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M 0 6 L -10 0 M 0 -6 L -10 0 z\"/>
    </marker>
    <marker id=\"cardinality-zero-or-many\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-20 -5 20 10\">
        <circle cx=\"-14\" cy=\"0\" r=\"5\"/>
        <path class=\"logical-relation-edge-marker\" d=\"M 0 6 L -10 0 M 0 -6 L -10 0 z\"/>
    </marker>
    <marker id=\"cardinality-zero-or-many-reverse\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto-start-reverse\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-20 -5 20 10\">
        <circle cx=\"-14\" cy=\"0\" r=\"5\"/>
        <path class=\"logical-relation-edge-marker\" d=\"M 0 6 L -10 0 M 0 -6 L -10 0 z\"/>
    </marker>
    <marker id=\"cardinality-one-or-many\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 1px\" viewbox=\"-11 -5 12 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M 0 4 L -10 0 M 0 -4 L -10 0 M -10 20  L -10 -10 z\"/>
    </marker>
    <marker id=\"cardinality-one-or-many-reverse\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto-start-reverse\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 1px\" viewbox=\"-11 -5 12 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M 0 4 L -10 0 M 0 -4 L -10 0 M -10 20  L -10 -10 z\"/>
    </marker>
    <marker id=\"cardinality-zero-or-one\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-16 -5 16 10\">
        <circle cx=\"-6\" cy=\"0\" r=\"5\"/>
        <path class=\"logical-relation-edge-marker\" d=\"M -14 0 L -14 -14  L -14, 14\"/>
    </marker>
    <marker id=\"cardinality-zero-or-one-reverse\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto-start-reverse\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 2px\" viewbox=\"-16 -5 16 10\">
        <circle cx=\"-6\" cy=\"0\" r=\"5\"/>
        <path class=\"logical-relation-edge-marker\" d=\"M -14 0 L -14 -14  L -14, 14\"/>
    </marker>
    <marker id=\"cardinality-exactly-one\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 1px\" viewbox=\"-11 -5 12 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M -5 0 L -5 -5 L -5, 5 \"/>
    </marker>
    <marker id=\"cardinality-exactly-one-reverse\" markerHeight=\"10\" markerUnits=\"strokeWidth\" markerWidth=\"12\" orient=\"auto-start-reverse\" refX=\"0\" refY=\"0\" style=\"fill: white; stroke: black; stroke-width: 1px\" viewbox=\"-11 -5 12 10\">
        <path class=\"logical-relation-edge-marker\" d=\"M -5 0 L -5 -5 L -5, 5 \"/>
    </marker>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Logical data model cardinality defs (Refinitiv)" ;
  rdfs:subClassOf edg:GraphElements ;
.
edg.reactivegram:Node
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:compact ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have the details as tool tip text only." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:linkable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to (perhaps) turn the node display into a hyperlink. If true, then the system will look for a context variable toshLinkFunction and call it with the given ?node as its only argument." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to display." ;
    ] ;
  ui:prototype """
<ui:group let:info=\"{= IF(isLiteral(?node), CONCAT(&quot;Datatype: &quot;, afn:localname(datatype(?node))), IF(isIRI(?node), CONCAT(&quot;URI: &quot;, str(?node)), &quot;Blank node&quot;)) }\">
    <ui:if ui:condition=\"{= ?linkable }\">
        <ui:setContext let:function=\"{= ui:contextValue(&quot;toshLinkFunction&quot;) }\" ui:queryGraph=\"{= ?dataGraph }\">
            <ui:group let:link=\"{= IF(bound(?function), spif:invoke(?function, ?node), ?none) }\">
                <ui:if ui:condition=\"{= bound(?link) }\">
                    <a href=\"{= ?link }\" title=\"{= ?info }\">{= ui:label(?node) }</a>
                </ui:if>
                <ui:else>
                    <span title=\"{= ?info }\">{= ui:label(?node) } [{= str(?node) }]</span>
                </ui:else>
            </ui:group>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <span title=\"{= ?info }\">{= swa:labelInGraph(?node, ?dataGraph) }</span>
    </ui:else>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?compact) }\">
        <swa:Space/>
        <swa:Space/>
        <swa:Space/>
        <span class=\"swa-validation-result-value-info\">({= ?info })</span>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Node (Refinitiv)" ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:PropertyLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelOverride ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional override to the label." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI resource to link to." ;
    ] ;
  ui:prototype """
<ui:group let:href=\"{= swa:createHRef(?resource) }\">
    <ui:if ui:condition=\"{= bound(?href) }\">
        <a class=\"swa-link\" href=\"{= ?href }\" id=\"{= ?id }\">
            <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
            <ui:else>
                <swa:Label arg:node=\"{= ?resource }\"/>
            </ui:else>
        </a>
    </ui:if>
    <ui:else>
        <ui:group let:uid=\"{= COALESCE(?id, ui:uniqueId()) }\">
            <ui:group let:link=\"{= swa:createLink(?resource, ?uid) }\">
                <ui:if ui:condition=\"{= bound(?link) }\">
                    <a class=\"swa-link\" href=\"javascript:void(0)\" id=\"{= ?uid }\" onclick=\"{= ?link }\">
                        <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
                        <ui:else>
                            <edg.reactivegram:Label arg:node=\"{= ?resource }\"/>
                        </ui:else>
                    </a>
                </ui:if>
                <edg:ShowCardinalities sh:maxCount=\"{= ?maxCount }\" sh:minCount=\"{= ?minCount }\"/>
            </ui:group>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a hyperlink to switch the current view to a given resource. This element should be used to create all hyperlinks in SWA applications, because this single place provides greater flexibility to make adjustments to the links. In particular, the semantics of what should happen if the user clicks on a link may be different for each application or even within different parts of a single application: in some cases the application may want to replace a form on the screen, while in other cases the selected resource should be opened in a modal dialog. The SPIN functions swa:createHRef and swa:createLink are used to define the link. If these functions return nothing, then no link is displayed, but rather an swa:Label." ;
  rdfs:label "Property Link (EDG Refinitiv)" ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:ReactiveClassNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional function(?property, ?class) returning true to include a given property at a given class node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focused ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have this focused." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:headerStyle ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:nodeStyle ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressAttributes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:invalidInstancesCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:propertyShape ;
      spl:valueType sh:PropertyShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:reactiveNodeFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showEmptyNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showOKnodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType spr:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:myHeaderStyle=\"{= COALESCE(?headerStyle, &quot;swauml-instance-header-reactive&quot;) }\" let:myNodeStyle=\"{= COALESCE(?nodeStyle, &quot;swauml-instance-node&quot;) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveClassNode - {= ui:label(?focusNode) }\"/-->
    <ui:call arg:onlyShowInvalidInstances=\"{= false }\" arg:property=\"{= ?property }\" arg:subject=\"{= ?focusNode }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" ui:template=\"{= edg:GetSubjectPropertyValues }\" ui:varName=\"values\">
        <ui:group let:countOfValues=\"{= spr:rowCount(?values) }\">
            <div about=\"{= ENCODE_FOR_URI(str(?propertyShape)) }\" class=\"{= ?myNodeStyle }\" let:systemLabels=\"{= COALESCE(ui:contextValue(&quot;swaSystemLabels&quot;), false) }\">
                <div class=\"{= ?myHeaderStyle }\" letrs:metaClasses=\"{#
                        SELECT ?metaClass
                        WHERE {
                            ?targetClass a ?metaClass .
                            FILTER (?metaClass NOT IN (rdfs:Class, owl:Class, sh:NodeShape)) .
                        } }\" style=\"{= IF(?focused, &quot;font-weight: bold&quot;, ?none) }\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?metaClasses) }\">
                        <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= edg.reactivegram:createDefaultLink }\">
                            <div class=\"swauml-instance-header-metaclass\">
                                <ui:forEach ui:resultSet=\"{= ?metaClasses }\" ui:separator=\"&nbsp;\">
                                    <swa:Link arg:labelOverride=\"&lt;&lt;{= IF(?systemLabels, smf:qname(?metaClass), ui:label(?metaClass)) }&gt;&gt;\" arg:resource=\"{= ?metaClass }\"/>
                                </ui:forEach>
                            </div>
                        </ui:setContext>
                    </ui:if>
                    <div class=\"swauml-instance-header-area\">
                        <div class=\"swauml-instance-count\">
                            <span style=\"color:{= IF((?violationsCount = 0), &quot;darkgreen&quot;, &quot;red&quot;) }\">{= spr:rowCount(?values) }</span>
                        </div>
                        <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= edg.reactivegram:createDefaultLink }\">
                            <swa:URIResourceViewer arg:object=\"{= ?targetClass }\"/>
                        </ui:setContext>
                        <ui:if ui:condition=\"{= ?isInValidateMode }\">
                            <ui:if ui:condition=\"{= ?countOfValues = 0 }\">
                                <p class=\"text-info pt20px\">
                                    <a class=\"btn btn-info btn-sm\" onclick=\"alert('{= CONCAT(&quot;No values is acceptable, use of the property &quot;, swa:labelInGraph(?property, ui:unionGraph), &quot; has min cardinality of zero&quot;) }')\">
                                        <span class=\"glyphicon glyphicon-ok\"/>Ok</a>
                                </p>
                            </ui:if>
                            <ui:elseif ui:condition=\"{= ?violationsCount = 0 }\">
                                <p class=\"text-info pt20px\">
                                    <a class=\"btn btn-info btn-sm\" onclick=\"alert('{= CONCAT(&quot;No violation errors for &quot;, str(?countOfValues), &quot; values&quot;) }')\">
                                        <span class=\"glyphicon glyphicon-ok\"/>Ok</a>
                                </p>
                            </ui:elseif>
                        </ui:if>
                    </div>
                </div>
                <div>
                    <edg.reactivegram:ReactiveClassNodeDetails arg:focusNode=\"{= ?focusNode }\" arg:invalidInstancesCount=\"{= ?invalidInstancesCount }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:property=\"{= ?property }\" arg:propertyValues=\"{= ?values }\" arg:resourceType=\"{= ?resourceType }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" arg:value=\"{= ?value }\" arg:violationsCount=\"{= ?violationsCount }\" edg:maxReach=\"{= ?maxReach }\" sh:maxCount=\"{= ?maxCount }\"/>
                </div>
            </div>
        </ui:group>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Class node" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveClassNodeControls
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classNodeId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:count ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:invalidInstancesCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The attribute property." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:propertyValueCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\" let:isValidated=\"{= false }\" let:myMaxCount=\"{= COALESCE(?maxCount, 9999) }\" let:mySelectedInstanceId=\"{= edg:buildInstanceTagId(?property, ?focusNode) }\" let:projectGraph=\"{= ui:contextValue(&quot;butlerDataGraph&quot;) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveClassNodeControls - {= ?focusNode }\"/-->
    <ui:if ui:condition=\"{= (?count &gt; 0) &amp;&amp; (?invalidInstancesCount &gt; 0) }\">
        <div class=\"violation row alert alert-danger\">
            <div class=\"violation row \" title=\" {= ?invalidInstancesCount } Invalid Instances\">
                <div class=\"col-sm-9 text-right\">
                    <span>Invalid:</span>
                </div>
                <div class=\"col-sm-3\">
                    <span>{= str(?invalidInstancesCount) }</span>
                </div>
            </div>
            <div class=\"violation row \" title=\"{= ?violationsCount } Inferred Violations\">
                <div class=\"col-sm-9 text-right\">
                    <span>known violations (depth {= str((?maxReach - 2)) }):</span>
                </div>
                <div class=\"col-sm-3\">
                    <span>{= str(?violationsCount) }</span>
                </div>
            </div>
        </div>
    </ui:if>
    <div class=\"row\" style=\"padding-bottom:12px; padding-top:10px;\">
        <div class=\"col-sm-12\" style=\"background-color:white;\">
            <ui:if let:href=\"{= edg.reactivegram:createSimpleFormEditorHRefBase(?projectGraph) }\" ui:condition=\"{= ?count &gt; 0 }\">
                <ui:group let:href=\"{= edg.reactivegram:createHRef(?mySelectedInstanceId) }\">
                    <button class=\"btn btn-default btn-xs\" onclick=\"butler.handleEditClick('{= ?mySelectedInstanceId }')\" type=\"button\">
                        <span aria-hidden=\"true\"/>Edit</button>
                </ui:group>
                <ui:if ui:condition=\"{= ?invalidInstancesCount &gt; 0 }\">
                    <ui:group let:instanceParameter=\"subject.attr('data-instance')\" let:modalParameters=\"{= edg:buildJSONforInstanceValidationModal(?focusNode, ?property, ?validationDataGraph) }\">
                        <button class=\"btn btn-default btn-xs\" data-nodeId=\"VALIDATIONRESEULTS_{= ?id }\" onclick=\"var subject=$('[id=&quot;{= ?mySelectedInstanceId }&quot;]'); butler.populateModalDialogWithCallbackForBody('edg:ButlerInstanceValidationResultsModal','Validation results for ' + subject.attr('data-label'),null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }',{= ?instanceParameter },{= ?modalParameters })\" type=\"button\">
                            <span aria-hidden=\"true\"/>Results</button>
                    </ui:group>
                </ui:if>
                <button class=\"btn btn-default btn-xs\" data-nodeId=\"FOCUS_{= ?id }\" onclick=\"butler.focusOnInstance('{= ?mySelectedInstanceId }')\" type=\"button\">
                    <span aria-hidden=\"true\"/>Explore</button>
            </ui:if>
            <ui:if ui:condition=\"{= ?count &gt; 0 }\">
                <button class=\"btn btn-default btn-xs\" data-nodeId=\"REMOVE{= ?id }\" onclick=\"butler.removeStatement('{= str(?focusNode) }','{= str(?property) }','{= ?mySelectedInstanceId }')\" type=\"button\">
                    <span aria-hidden=\"true\"/>Remove</button>
            </ui:if>
            <ui:if ui:condition=\"{= ?count &lt; ?myMaxCount }\">
                <button class=\"btn btn-default btn-xs\" data-nodeId=\"CREATE_{= ?id }\" onclick=\"butler.openCreateResourceDialog('{= str(?resourceType) }', '{= str(?property) }', '{= str(?focusNode) }')\" type=\"button\">
                    <span aria-hidden=\"true\"/>Create</button>
            </ui:if>
        </div>
    </div>
    <div>
        <ui:if ui:condition=\"{= ?count &lt; ?myMaxCount }\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?projectGraph)) }\">
                <edg.reactivegram:ResourceSelectionUsingAutoComplete arg:loadId=\"new-{= ?id }\" arg:placeholder=\"Select {= ui:label(?resourceType) }\" arg:predicate=\"{= ?property }\" arg:resourceType=\"{= ?resourceType }\" arg:subject=\"{= ?focusNode }\"/>
            </ui:setContext>
        </ui:if>
    </div>
    <ui:if ui:condition=\"{= ?isInValidateMode &amp;&amp; (?count &gt; 0) }\">
        <div class=\"pt10px\" style=\"padding-bottom:12px; padding-top:12px font-weight:300; \">
            <input id=\"INVCB_{= ?classNodeId }\" onchange=\"butler.showInvalidValues(this)\" type=\"checkbox\">Show only invalid values</input>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Class Node Controls" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveClassNodeDetails
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:invalidInstancesCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The attribute property." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:propertyValues ;
      spl:valueType spr:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to display the attribute in." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:instanceCount=\"{= edg:countOfSubjectPropertyValues(?property, ?focusNode) }\" let:isValidated=\"{= false }\" let:myClassNodeId=\"{= ui:uniqueId() }\" let:myMaxCount=\"{= COALESCE(?maxCount, 9999) }\" let:type=\"{= spl:object(?focusNode, rdf:type) }\">
    <ui:group let:inValidCount=\"{= ?invalidInstancesCount }\" let:typeString=\"{= IF(bound(?type), ui:label(?type), &quot;missing type&quot;) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveClassNodeDetails - {= ui:label(?resource) }\"/-->
        <!--ui:dumpResultSet ui:message=\"AAA2: edg.reactivegram:ReactiveClassNodeDetails - {= ui:label(?resource) }\"
  ui:resultSet=\"{= ?values }\"/-->
        <!--ui:insert/-->
        <ui:setContext let:countOfValues=\"{= spr:rowCount(?propertyValues) }\" ui:varName=\"swaNodeClass\" ui:varValue=\"{= ?resource }\">
            <ui:group let:nodeClass=\"{= IF((spr:rowCount(?propertyValues) = 0), &quot;swauml-instance-attributes-empty&quot;, &quot;swauml-instance-attributes&quot;) }\">
                <div class=\"{= ?nodeClass }\" let:validatedGlyph=\"{= IF(?isValidated, &quot;V&quot;, &quot;X&quot;) }\">
                    <div class=\"swauml-instance-attribute-name\" let:loadId=\"{= ui:uniqueId() }\">
                        <div class=\"container-fluid\">
                            <edg.reactivegram:ReactiveClassNodeControls arg:classNodeId=\"{= ?myClassNodeId }\" arg:count=\"{= ?countOfValues }\" arg:focusNode=\"{= ?focusNode }\" arg:invalidInstancesCount=\"{= ?invalidInstancesCount }\" arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:property=\"{= ?property }\" arg:propertyValueCount=\"{= ?instanceCount }\" arg:resourceType=\"{= ?resourceType }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:violationsCount=\"{= ?violationsCount }\" edg:maxReach=\"{= ?maxReach }\" sh:maxCount=\"{= ?maxCount }\" sh:minCount=\"{= ?minCount }\"/>
                            <edg.reactivegram:ReactiveClassNodeInstancesPaginator arg:classNodeId=\"{= ?myClassNodeId }\" arg:focusNode=\"{= ?focusNode }\" arg:property=\"{= ?property }\" arg:propertyValueCount=\"{= ?countOfValues }\" arg:resultSet=\"{= ?propertyValues }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" arg:violationsCount=\"{= ?violationsCount }\" sh:maxCount=\"{= ?myMaxCount }\" sh:minCount=\"{= ?minCount }\"/>
                        </div>
                    </div>
                </div>
            </ui:group>
        </ui:setContext>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Class Node Details" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveClassNodeInstancesPaginator
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classNodeId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The attribute property." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:propertyValueCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:filter=\"{= COALESCE(?filter, &quot;&quot;) }\" let:id=\"{= ?classNodeId }\" let:inValidCount=\"{= ?violationsCount }\" let:isValidated=\"{= false }\" let:masterGraph=\"{= teamwork:currentMasterGraph() }\" let:myHeaderStyle=\"{= COALESCE(?headerStyle, &quot;butler-instance-header&quot;) }\" let:myMaxCount=\"{= COALESCE(?maxCount, 9999) }\" let:myOnlyShowInvalidInstances=\"{= false }\" let:myProjectGraph=\"{= ?projectGraph }\" let:mySelectedInstanceId=\"{= edg:buildInstanceTagId(?property, ?focusNode) }\" let:mySummaryStyle=\"{= COALESCE(?summaryStyle, &quot;butler-class-node&quot;) }\">
    <div class=\"row\" style=\"width:20em; height:10em;\">
        <ui:loadable class=\"swa-facets-results-gadget\" ui:loadId=\"{= ?id }\">
            <ui:group let:butlerDataGraph=\"{= IRI(ui:getSessionAttribute(&quot;butlerDataGraph&quot;)) }\">
                <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?butlerDataGraph) }\">
                    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveClassNodeInstancesPaginator - focus node: {= ?focusNode }, property {= ui:label(?property) }, query graph is {= ui:currentQueryGraph() }\"/-->
                    <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                        <ui:call arg:filter=\"{= ?filter }\" arg:focusNode=\"{= ?focusNode }\" arg:onlyShowInvalidInstances=\"{= ?myOnlyShowInvalidInstances }\" arg:property=\"{= ?property }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" ui:template=\"{= edg:GetPropertyValuesForInstancesHeldInClassNode }\" ui:varName=\"values\">
                            <!--ui:dumpResultSet ui:message=\"AAA2: edg.reactivegram:ReactiveClassNodeInstancesPaginator - focus node: {= ?focusNode }, property {= ui:label(?property) }\"
  ui:resultSet=\"{= ?values }\"/-->
                            <ui:group let:rowCount=\"{= COALESCE(spr:rowCount(?values), ?propertyValueCount) }\">
                                <ui:group let:filter=\"{= COALESCE(?filter, &quot;&quot;) }\" let:pageSize=\"{= 1 }\" let:startIndex=\"{= COALESCE(?startIndex, 0) }\">
                                    <div class=\"ui-layout-content\" id=\"{= ?id }-owner\">
                                        <ui:if ui:condition=\"{= ?rowCount != 0 }\">
                                            <ui:group let:hasViolations=\"{= spr:cell(?values, ?startIndex, 2) }\" let:selectedInstance=\"{= spr:cell(?values, ?startIndex, 0) }\" let:stackedStyle=\"{= IF((?rowCount &gt; 1), &quot;butler-instance-header-stacked&quot;, ?myHeaderStyle) }\">
                                                <!--ui:dumpScope ui:message=\"AAA2: edg.reactivegram:ReactiveClassNodeInstancesPaginator - index: {= ?startIndex },value: {= spr:cell(?values, ?startIndex, 1) } hasViolations: {= ?hasViolations }\"/-->
                                                <div class=\"{= ?mySummaryStyle } pt12px \" data-callback=\"{= ?callback }\" data-instance=\"{= str(?selectedInstance) }\" data-label=\"{= ui:label(?selectedInstance) }\" data-options=\"{= ?options }\" data-suppress-uri=\"{= ?suppressURI }\" id=\"{= edg:buildInstanceTagId(?property, ?focusNode) }\" style=\"white-space: normal\">
                                                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?butlerDataGraph) }\">
                                                        <ui:group let:loadId=\"{= ui:uniqueId() }\">
                                                            <div class=\"{= ?stackedStyle } {= IF((bound(?hasViolations) &amp;&amp; ?hasViolations), &quot;bg-danger&quot;, &quot;bg-yellow&quot;) }\" data-uri=\"{= ?selectedInstance }\" id=\"resource-tool-tip-data-{= ?loadId }\">
                                                                <a class=\"butler-link\" href=\"#\" id=\"resource-tool-tip-{= ?loadId }\" onclick=\"butler.populateModalDialogAskingForBody('edg:ButlerInstanceDetailsModal','Details of {= ui:label(?selectedInstance) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= ?selectedInstance }')\">{= ui:label(?selectedInstance) }</a>
                                                                <script>gadgets.Hub.publish('org.topbraid.swa.resourceTooltip', '{= ?loadId }');</script>
                                                            </div>
                                                        </ui:group>
                                                    </ui:setContext>
                                                </div>
                                            </ui:group>
                                        </ui:if>
                                        <ui:if ui:condition=\"{= ?propertyValueCount &gt; 3 }\">
                                            <div class=\"pt10px\">
                                                <div class=\"float-left pt12px;\">Search: </div>
                                                <div class=\"float-left\">
                                                    <input id=\"{= ?id }-filter\" value=\"{= ?filter }\"/>
                                                    <button class=\"btn btn-xs btn-default\" id=\"{= ?id }-filter-button\" onclick=\"butler.handleFilterClick('{= ?id }')\" type=\"button\">
                                                        <i class=\"fas fa-search\"/>
                                                    </button>
                                                </div>
                                                <div class=\"clear-both\"/>
                                                <script>butler.initFilter('{= ?id }')</script>
                                            </div>
                                        </ui:if>
                                        <ui:if ui:condition=\"{= ?rowCount &gt; 1 }\">
                                            <div class=\"swauml-instance-pagination pt20px\" style=\"padding-bottom:40px\">
                                                <a id=\"{= ?id }-previousPage\">&laquo; Previous</a>
                                                <span> | </span>
                                                <strong id=\"{= ?id }-startIndex\">0</strong>
                                                <span> of </span>
                                                <strong id=\"{= ?id }-count\">0</strong>
                                                <span> | </span>
                                                <a id=\"{= ?id }-nextPage\">Next &raquo;</a>
                                            </div>
                                        </ui:if>
                                    </div>
                                    <ui:if ui:condition=\"{= (?minCount &gt; 0) &amp;&amp; (?propertyValueCount = 0) }\">
                                        <p class=\"text-info pt20px\" style=\"color:lightred\">Missing a value</p>
                                    </ui:if>
                                    <ui:group let:rowCount=\"{= COALESCE(spr:rowCount(?values), ?propertyValueCount) }\">
                                        <script>$(\"#{= ?id }-count\").text(\"{= ?rowCount }\");
$(\"#{= ?id }-startIndex\").text(\"{= IF((?rowCount = 0), 0, (?startIndex + 1)) }\");
$(\"#{= ?id }-endIndex\").text(\"{= IF((?rowCount &lt; (?startIndex + ?pageSize)), ?rowCount, (?startIndex + ?pageSize)) }\");<ui:if ui:condition=\"{= ?startIndex &gt; 0 }\">$(\"#{= ?id }-previousPage\").attr(\"onclick\", \"butler.handlePaginationClick('{= ?id }',  {= ?startIndex } - 1)\"); $(\"#{= ?id }-previousPage\").attr(\"href\", \"javascript:void(0)\");</ui:if>
                                            <ui:else>$(\"#{= ?id }-previousPage\").attr(\"onclick\", null);
$(\"#{= ?id }-previousPage\").attr(\"href\", null);</ui:else>
                                            <ui:if ui:condition=\"{= (?startIndex + ?pageSize) &lt; ?rowCount }\">$(\"#{= ?id }-nextPage\").attr(\"onclick\", \"butler.handlePaginationClick('{= ?id }', {= ?startIndex } + 1 )\"); $(\"#{= ?id }-nextPage\").attr(\"href\", \"javascript:void(0)\");</ui:if>
                                            <ui:else>$(\"#{= ?id }-nextPage\").attr(\"onclick\", null);
$(\"#{= ?id }-nextPage\").attr(\"href\", null);</ui:else>
                                        </script>
                                    </ui:group>
                                </ui:group>
                            </ui:group>
                        </ui:call>
                    </ui:setContext>
                </ui:setContext>
            </ui:group>
        </ui:loadable>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Class Node Instances Paginator" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveInstanceNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional function(?property, ?class) returning true to include a given property at a given class node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focused ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have this focused." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:headerStyle ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:nodeStyle ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressAttributes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:reactiveNodeFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:headerFontWeight=\"{= IF(?focused, &quot;font-weight: bold&quot;, ?none) }\" let:headerStyleBackgroundColor=\"{= IF(?isInValidateMode, IF((?violationsCount = 0), &quot;lightgreen&quot;, &quot;rgb(255, 179, 179)&quot;), &quot;beige&quot;) }\" let:myHeaderStyle=\"{= COALESCE(?headerStyle, &quot;swauml-instance-header&quot;) }\" let:myNodeStyle=\"{= COALESCE(?nodeStyle, &quot;swauml-instance-node-root&quot;) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveInstanceNode\"/-->
    <ui:group let:headerStyle=\"{= CONCAT(?headerFontWeight, &quot;; background-color:&quot;, ?headerStyleBackgroundColor) }\">
        <div about=\"{= ?resource }\" class=\"{= ?myNodeStyle }\" let:systemLabels=\"{= COALESCE(ui:contextValue(&quot;swaSystemLabels&quot;), false) }\">
            <div class=\"{= ?myHeaderStyle }\" letrs:metaClasses=\"{#
                    SELECT ?metaClass
                    WHERE {
                        ?resource a ?metaClass .
                        FILTER (?metaClass NOT IN (rdfs:Class, owl:Class, sh:NodeShape)) .
                    } }\" style=\"{= ?headerStyle }\">
                <ui:if ui:condition=\"{= !spr:isEmpty(?metaClasses) }\">
                    <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= edg.reactivegram:createDefaultLink }\">
                        <div class=\"swauml-instance-header-metaclass\">
                            <ui:forEach ui:resultSet=\"{= ?metaClasses }\" ui:separator=\"&nbsp;\">
                                <swa:Link arg:labelOverride=\"&lt;&lt;{= IF(?systemLabels, smf:qname(?metaClass), ui:label(?metaClass)) }&gt;&gt;\" arg:resource=\"{= ?metaClass }\"/>
                            </ui:forEach>
                        </div>
                    </ui:setContext>
                </ui:if>
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= edg.reactivegram:createDefaultLink }\">
                    <swa:URIResourceViewer arg:object=\"{= ?resource }\"/>
                </ui:setContext>
            </div>
            <div class=\"swauml-instance-attributes\" style=\"width:100%\">
                <ui:if ui:condition=\"{= (!bound(?suppressAttributes)) || (?suppressAttributes = false) }\">
                    <edg.reactivegram:ReactiveInstanceNodeDetails arg:isInValidateMode=\"{= ?isInValidateMode }\" arg:resource=\"{= ?resource }\" arg:violationsCount=\"{= ?violationsCount }\" edg:maxReach=\"{= ?maxReach }\"/>
                </ui:if>
            </div>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Instance node" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveInstanceNodeDetails
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isInValidateMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to display the attribute in." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:violationsCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\" let:inValidCount=\"{= COALESCE(?violationsCount, 0) }\" let:instanceCount=\"{= 3 }\" let:isValidated=\"{= true }\" let:mySummaryStyle=\"{= COALESCE(?summaryStyle, &quot;butler-class-node&quot;) }\">
    <ui:group let:typeString=\"{= IF(bound(?type), ui:label(?type), &quot;missing type&quot;) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\" ui:varName=\"swaNodeClass\" ui:varValue=\"{= ?resource }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveInstanceNodeDetails - {= ?resource }\"/-->
            <div class=\"swauml-instance-attribute\" let:systemLabels=\"{= ui:contextValue(&quot;swaSystemLabels&quot;) }\" let:validatedGlyph=\"{= IF(?isValidated, &quot;V&quot;, &quot;X&quot;) }\">
                <div class=\"tbd\" let:loadId=\"{= ui:uniqueId() }\">
                    <div class=\"container-fluid\">
                        <ui:if ui:condition=\"{= ?inValidCount &gt; 0 }\">
                            <div class=\"violation row alert alert-danger lead\">
                                <div title=\"{= ?inValidCount } inferred violations\">
                                    <div class=\"col-sm-8 text-right\">
                                        <span>
                                            <strong>known violations (depth {= str(?maxReach) }):</strong>
                                        </span>
                                    </div>
                                    <div class=\"col-sm-4\">
                                        <span>
                                            <strong>{= str(?inValidCount) }</strong>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </ui:if>
                        <div class=\"row pt10px\">
                            <div class=\"col-sm-12\" style=\"background-color:white; padding-bottom:10px;\">
                                <ui:group>
                                    <button class=\"btn btn-default btn-xs\" onclick=\"butler.navigateToResource('{= str(?resource) }');\" type=\"button\">
                                        <span aria-hidden=\"true\"/>Edit</button>
                                    <!--button class=\"btn btn-default btn-xs\"
data-nodeId=\"WHEREUSED_{= ?id }\"
onclick=\"alert('TBD: shows a table of where the resource is used.')\"
type=\"button\">
<span aria-hidden=\"true\"/>Where Used</button-->
                                </ui:group>
                                <button class=\"btn btn-default btn-xs\" data-nodeId=\"REVALIDATE_{= ?id }\" onclick=\"butler.revalidateInstance('{= ?resource }','{= ui:label(?resource) }')\" type=\"button\">
                                    <span aria-hidden=\"true\"/>Re-validate</button>
                                <ui:if ui:condition=\"{= ?inValidCount &gt; 0 }\">
                                    <button class=\"btn btn-default btn-xs\" data-nodeId=\"VALIDATIONRESULTS_{= ?id }\" onclick=\"butler.populateModalDialogAskingForBody('edg:ButlerAllValidationResultsModal','Validation results for ' + '{= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }' )\" type=\"button\">
                                        <span aria-hidden=\"true\"/>Validation Results</button>
                                </ui:if>
                            </div>
                        </div>
                        <div class=\"row\" style=\"background-color:darkorange; margin-left:0px; margin-right:0px; text-align:center;  font-weight:bold\">
                            <div class=\"col-sm-6\" style=\"word-break: break-all;\">Attribute</div>
                            <div class=\"col-sm-4\" style=\"word-break: break-all;\">Value</div>
                            <div class=\"col-sm-2\" style=\"word-break: break-all;\">Type</div>
                        </div>
                        <ui:group>
                            <div about=\"{= ?resource }\" class=\"{= ?mySummaryStyle }\" style=\"white-space: normal\">
                                <div class=\"butler-instance-details\" onclick=\"{= swa:createEventLink(?selectedInstance) }\">
                                    <!-- arg:filterFunction=\"{= edg.reactivegram:hasApplicableNameSpace }\" -->
                                    <ui:call arg:resource=\"{= ?resource }\" ui:template=\"{= edg:GetDatatypePropertyValues }\" ui:varName=\"attributes\">
                                        <!--ui:dumpResultSet ui:message=\"AAA3: edg.reactivegram:ReactiveInstanceNodeDetails - {= ?resource }\"
  ui:resultSet=\"{= ?attributes }\"/-->
                                        <ui:forEach ui:resultSet=\"{= ?attributes }\">
                                            <div class=\"tbd\" let:loadId=\"{= ui:uniqueId() }\" let:typeString=\"{= IF(bound(?datatype), ui:label(?datatype), &quot;missing type&quot;) }\">
                                                <div class=\"row\">
                                                    <div class=\"col-sm-6\" data-uri=\"{= ?property }\" id=\"resource-tool-tip-data-{= ?loadId }\" let:op=\"{= ui:contextValue(&quot;swaOnOpenResource&quot;) }\" style=\"word-break: break-all; text-align:left;\">
                                                        <swa:Link arg:id=\"resource-tool-tip-{= ?loadId }\" arg:resource=\"{= ?property }\"/>
                                                        <ui:if ui:condition=\"{= bound(?op) }\">
                                                            <a class=\"swa-uri-resource-viewer-menu swa-icon ui-icon ui-icon-arrow-1-e\" href=\"javascript:void(0)\" onclick=\"var resource='{= ui:encodeNode(?value, true, true) }';{= ?op };\" title=\"Open in a new Window\"/>
                                                        </ui:if>
                                                        <script>gadgets.Hub.publish('org.topbraid.swa.resourceTooltip', 'resource-tool-tip-{= ?loadId }');</script>
                                                    </div>
                                                    <ui:if ui:condition=\"{= !bound(?value) }\">
                                                        <div class=\"col-sm-4\" style=\"color:red; text-align:left;\">No Value</div>
                                                    </ui:if>
                                                    <ui:else>
                                                        <div class=\"col-sm-4\" style=\"word-break: break-all; text-align:left;\">{= ?value }</div>
                                                    </ui:else>
                                                    <div class=\"col-sm-2\" style=\"word-break: break-all; text-align:left;\">{= ?typeString }</div>
                                                </div>
                                            </div>
                                        </ui:forEach>
                                    </ui:call>
                                </div>
                            </div>
                        </ui:group>
                    </div>
                </div>
            </div>
        </ui:setContext>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive Instance Node Details" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ReactiveModelLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:association ;
      spl:valueType rdf:Property ;
      rdfs:comment "The (forward) predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceEntity ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The start of the association" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetEntity ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The end of the association." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:myMaxCount=\"{= COALESCE(?maxCount, 9999) }\" let:myMinCount=\"{= COALESCE(?minCount, 0) }\" let:sourceCardinality=\"{= ?none }\">
    <ui:group let:targetCardinality=\"{{= edg:getCardinalityInstance(?myMinCount, ?myMaxCount) } }}\">
        <ui:group let:sourceCardinalityId=\"{= ?none }\" let:targetCardinalityId=\"{= spl:object(?targetCardinality, dtype:literal) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:ReactiveModelLink - {= ui:label(?sourceEntity) } to {= ui:label(?targetEntity) }\"/-->
            <polyline about=\"{= ?sourceEntity } {= ?targetEntity } {= ?association }\" class=\"swauml-logical-relation-edge-line\" marker-end=\"url({= CONCAT(&quot;#cardinality-&quot;, ?targetCardinalityId) })\" marker-start=\"url({= CONCAT(&quot;#cardinality-&quot;, ?sourceCardinalityId, &quot;-reverse&quot;) })\"/>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Builds an SVG polyline for a logical relation. References to the end-point markers are build for the value of dtype:literal on a cardinality enumerated value.  A relation is binary and can only have one source and one target." ;
  rdfs:label "Reactive model link" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg.reactivegram:ResourceSelectionUsingAutoComplete
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label of the dialog." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:callback ;
      spl:valueType xsd:string ;
      rdfs:comment "A callback expression to invoke when the resource has been selected. The variable 'resource' will contain the selected resource, and 'label' its label." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
      rdfs:comment "The ui:loadId of the resulting ui:loadable." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:placeholder ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resources to select." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<div id=\"div-{= ?loadId }\" title=\"{= COALESCE(?label, fn:concat(&quot;Select &quot;, ui:label(?resourceType))) }\">
    <span>Add: </span>
    <swa:AutoComplete arg:id=\"{= ?loadId }\" arg:placeholder=\"{= ?placeholder }\" arg:type=\"{= ?resourceType }\" arg:withSelectMenu=\"{= true }\"/>
    <script>$(document).ready(function(){ 
  var $el = $(\"#{= ?loadId }\") ;
  butler.trackChange($el[0]);

  $el.change(function(e) { butler.handleAddResourceChange(e, '{= ?subject }', '{= ?predicate }') } );

});</script>
</div>
"""^^ui:Literal ;
  rdfs:comment "A dialog that can be used to select a single resource with a given type. Currently only shows an auto-complete box, but future versions may also have a tree of classes and a grid of instances per class." ;
  rdfs:label "Resource selection using autocomplete (Refinitiv)" ;
  rdfs:seeAlso swa:ResourceSelectionDialog ;
  rdfs:subClassOf swa:DialogElements ;
.
edg.reactivegram:ResourceTooltipData
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get tooltip data for" ;
    ] ;
  ui:prototype """
<section let:description=\"{= swa:getDescription(?resource) }\" let:homeGraph=\"{= smf:definedIn(?resource) }\">
    <ui:if ui:condition=\"{= bound(?homeGraph) }\">
        <p class=\"text-info\">
            <span>Defined in: <b>{= ui:label(IRI(?homeGraph)) },</b>&nbsp;</span>
            <span>as instance of <b>{= ui:label(spl:object(?resource, rdf:type)) }</b>
            </span>
        </p>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?description) }\">
        <ui:if ui:condition=\"{= datatype(?description) = rdf:HTML }\">
            <ui:parse ui:str=\"{= swa:redirectHRefs(?description) }\"/>
        </ui:if>
        <ui:else>
            <p>{= swa:abbreviatedText(?description, 300) }</p>
        </ui:else>
    </ui:if>
    <ui:else>
        <p class=\"text-info\">No description available</p>
    </ui:else>
</section>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:URIResourceViewer
  a swa:ObjectViewerClass ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:eq ;
          sp:arg1 [
              sp:varName "kind" ;
            ] ;
          sp:arg2 "uri" ;
        ] ;
      swa:weight -100 ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <div class=\"swa-shifted-label\" data-uri=\"{= ?object }\" id=\"resource-tool-tip-data-{= ?loadId }\" let:op=\"{= ui:contextValue(&quot;swaOnOpenResource&quot;) }\">
        <edg.reactivegram:Link arg:id=\"resource-tool-tip-{= ?loadId }\" arg:resource=\"{= ?object }\"/>
        <ui:if ui:condition=\"{= bound(?op) }\">
            <a class=\"swa-uri-resource-viewer-menu swa-icon ui-icon ui-icon-arrow-1-e\" href=\"javascript:void(0)\" onclick=\"var resource='{= ui:encodeNode(?object, true, true) }';{= ?op };\" title=\"Open in a new Window\"/>
        </ui:if>
        <script>gadgets.Hub.publish('org.topbraid.swa.resourceTooltip', 'resource-tool-tip-{= ?loadId }');</script>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """The EDG (Refinitiv) viewer for URI resources, displaying a hyperlink to that resource.

It is possible to also show a small arrow button behind the resource, to implement a special operation that shall be executed when the user clicks on the arrow. It will appear when the context variable 'swaOnOpenResource' is set. The value of that variable must be a JavaScript snippet that uses the variable 'resource' to query the current resource. In a typical scenario (as implemented in the SWA default application), this opens a new desktop window for that resource, but in principle any other operation would be possible too.""" ;
  rdfs:label "URI resource viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
edg.reactivegram:URIResourceViewerWithProvidedLink
  a swa:ObjectViewerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:link ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <div class=\"swa-shifted-label\" data-uri=\"{= ?object }\" id=\"resource-tool-tip-data-{= ?loadId }\" let:op=\"{= ui:contextValue(&quot;swaOnOpenResource&quot;) }\">
        <!-- TBD: investigate why edg.reactivegram:Link could not call teamwork functions -->
        <!--edg.reactivegram:Link arg:id=\"resource-tool-tip-{= ?loadId }\" arg:resource=\"{= ?object }\"/-->
        <a class=\"swa-link\" href=\"{= ?link }\" id=\"resource-tool-tip-{= ?loadId }\">
            <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
            <ui:else>
                <swa:Label arg:node=\"{= ?object }\"/>
            </ui:else>
        </a>
        <ui:if ui:condition=\"{= bound(?op) }\">
            <a class=\"swa-uri-resource-viewer-menu swa-icon ui-icon ui-icon-arrow-1-e\" href=\"javascript:void(0)\" onclick=\"var resource='{= ui:encodeNode(?object, true, true) }';{= ?op };\" title=\"Open in a new Window\"/>
        </ui:if>
        <script>gadgets.Hub.publish('org.topbraid.swa.resourceTooltip', 'resource-tool-tip-{= ?loadId }');</script>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """The EDG (Refinitiv) viewer for URI resources, displaying a hyperlink to that resource.

It is possible to also show a small arrow button behind the resource, to implement a special operation that shall be executed when the user clicks on the arrow. It will appear when the context variable 'swaOnOpenResource' is set. The value of that variable must be a JavaScript snippet that uses the variable 'resource' to query the current resource. In a typical scenario (as implemented in the SWA default application), this opens a new desktop window for that resource, but in principle any other operation would be possible too.""" ;
  rdfs:label "URI resource viewer with provided link (Refinitiv)" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
edg.reactivegram:URIpropertyLinkViewer
  a swa:ObjectViewerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:eq ;
          sp:arg1 [
              sp:varName "kind" ;
            ] ;
          sp:arg2 "uri" ;
        ] ;
      swa:weight -100 ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <div class=\"swa-shifted-label\" data-uri=\"{= ?object }\" id=\"resource-tool-tip-data-{= ?loadId }\" let:op=\"{= ui:contextValue(&quot;swaOnOpenResource&quot;) }\">
        <edg.reactivegram:PropertyLink arg:id=\"resource-tool-tip-{= ?loadId }\" arg:resource=\"{= ?object }\" sh:maxCount=\"{= ?maxCount }\" sh:minCount=\"{= ?minCount }\"/>
        <ui:if ui:condition=\"{= bound(?op) }\">
            <a class=\"swa-uri-resource-viewer-menu swa-icon ui-icon ui-icon-arrow-1-e\" href=\"javascript:void(0)\" onclick=\"var resource='{= ui:encodeNode(?object, true, true) }';{= ?op };\" title=\"Open in a new Window\"/>
        </ui:if>
        <script>gadgets.Hub.publish('org.topbraid.swa.resourceTooltip', 'resource-tool-tip-{= ?loadId }');</script>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """The viewer for URIs that are property lionks, displaying a hyperlink to that resource.

It is possible to also show a small arrow button behind the resource, to implement a special operation that shall be executed when the user clicks on the arrow. It will appear when the context variable 'swaOnOpenResource' is set. The value of that variable must be a JavaScript snippet that uses the variable 'resource' to query the current resource. In a typical scenario (as implemented in the SWA default application), this opens a new desktop window for that resource, but in principle any other operation would be possible too.""" ;
  rdfs:label "URI property link viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
edg.reactivegram:ValidationResultView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApply ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include the Apply button in suggestions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApplyGroups ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also display a button to apply all \"similar\" violations." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultSubject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The default subject - if set then the row \"Subject: ...\" will be suppressed if identical to the defaultSubject." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:result ;
      spl:valueType sh:AbstractResult ;
      rdfs:comment "The result instance to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:focusNode=\"{= spl:object(?result, sh:focusNode) }\" let:inverse=\"{= EXISTS {
    ?result sh:resultPath ?path .
    ?path sh:inversePath ?some .
} }\">
    <ui:group let:focusNodeLink=\"{= edg.reactivegram:createOldEditorFormHRef(?graphId, ?focusNode, ?tagId) }\" let:focusNodeType=\"{= spl:objectInGraph(?focusNode, rdf:type, ?dataGraph) }\" let:message=\"{= spl:object(?result, sh:resultMessage) }\" let:path=\"{= spl:object(?result, sh:resultPath) }\" let:resultId=\"{= ui:uniqueId() }\" let:severity=\"{= COALESCE(spl:object(?result, sh:resultSeverity), sh:Violation) }\" let:sourceShape=\"{= spl:object(?result, sh:sourceShape) }\" let:value=\"{= spl:object(?result, sh:value) }\">
        <div class=\"swa-validation-result swa-validation-result-{= IF((?severity = sh:Warning), &quot;warning&quot;, &quot;violation&quot;) }\" id=\"{= ?resultId }\">
            <div>
                <div class=\"swa-validation-result-icon swa-validation-result-icon-{= spif:lowerCase(afn:localname(?severity)) } swa-float-left\"/>
                <div class=\"swa-validation-result-message\">{= COALESCE(?message, \"(No message found)\") }</div>
            </div>
            <edg.reactivegram:URIResourceViewerWithProvidedLink arg:link=\"{= ?focusNodeLink }\" arg:object=\"{= ?focusNode }\"/>
            <edg.reactivegram:ValidationResultViewValue arg:dataGraph=\"{= ui:graphWithImports(?dataGraph) }\" arg:label=\"Resource\" arg:linkable=\"{= true }\" arg:value=\"{= ?focusNode }\"/>
            <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ui:graphWithImports(?dataGraph) }\" arg:label=\"Type\" arg:linkable=\"{= true }\" arg:value=\"{= ui:label(?focusNodeType) }\"/>
            <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ui:graphWithImports(?dataGraph) }\" arg:label=\"Source Shape\" arg:linkable=\"{= true }\" arg:value=\"{= ui:label(?sourceShape) } [{= str(?sourceShape) }]\"/>
            <ui:if ui:condition=\"{= bound(?path) }\">
                <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ui:graphWithImports(?dataGraph) }\" arg:label=\"Property{= IF(?inverse, &quot; (inv)&quot;, ?none) }\" arg:value=\"{= IF(?inverse, spl:object(?path, sh:inversePath), ?path) }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?value) }\">
                <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ?dataGraph }\" arg:label=\"Value\" arg:value=\"{= ?value }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= EXISTS {
                ?result dash:suggestion ?any .
                ?any a dash:GraphUpdate .
            } }\">
                <table class=\"swa-validation-result-table\">
                    <tr letrs:suggestions=\"{#
                            SELECT ?suggestion
                            WHERE {
                                ?result dash:suggestion ?suggestion .
                                ?suggestion a dash:GraphUpdate .
                                BIND (spl:object(?suggestion, sh:order) AS ?order) .
                            }
                            ORDER BY (?order) }\">
                        <td class=\"swa-validation-result-table-label\">Suggestion{= IF((spr:rowCount(?suggestions) = 1), ?none, \"s\") }:</td>
                        <td class=\"swa-validation-result-table-body\">
                            <ui:forEach ui:resultSet=\"{= ?suggestions }\">
                                <tosh.ui:GraphUpdateView arg:canApply=\"{= ?canApply }\" arg:canApplyGroups=\"{= ?canApplyGroups }\" arg:dataGraph=\"{= ?dataGraph }\" arg:graphUpdate=\"{= ?suggestion }\" arg:result=\"{= ?result }\" arg:resultId=\"{= ?resultId }\"/>
                            </ui:forEach>
                        </td>
                    </tr>
                </table>
            </ui:if>
            <ui:elseif ui:condition=\"{= EXISTS {
                ?result dash:fixed true .
            } }\">
                <div>(Suggestion applied)</div>
            </ui:elseif>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Validation result view (edg Refinitiv)" ;
  rdfs:seeAlso swa:ValidationResultView ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:ValidationResultViewValue
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:linkable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See tosh.ui:Node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label on the left." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      rdfs:comment "The value node to display." ;
    ] ;
  ui:prototype """
<table class=\"swa-validation-result-table\">
    <tr>
        <td class=\"swa-validation-result-table-label\">{= ?label }:</td>
        <td class=\"swa-validation-result-table-icon\">
            <div class=\"swa-icon swa-inline-icon {= swa:nodeIconInGraph(?value, ?dataGraph) }\"/>
        </td>
        <td class=\"swa-validation-result-table-body\">
            <edg.reactivegram:Node arg:compact=\"{= true }\" arg:dataGraph=\"{= ?dataGraph }\" arg:linkable=\"{= ?linkable }\" arg:node=\"{= ?value }\"/>
        </td>
    </tr>
</table>
"""^^ui:Literal ;
  rdfs:label "Validation result view value (refinitiv)" ;
  rdfs:subClassOf swa:Elements ;
.
edg.reactivegram:addInstanceToResource
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:addInstanceToResource - {= ui:currentQueryGraph() }\"/-->
    <ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
        <ui:addPropertyValue arg:property=\"{= ?predicate }\" arg:value=\"{= ?object }\" ui:this=\"{= ?subject }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "add instance to resource" ;
  rdfs:subClassOf ui:JSONServices ;
.
edg.reactivegram:createDefaultLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "anyO" ;
                            ] ;
                          sp:predicate [
                              sp:varName "anyP" ;
                            ] ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a ui:functionCall ;
                    sp:arg1 "butler.navigateToResource" ;
                    sp:arg2 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a swa:createNewTabLink ;
                    arg:resource [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "The default CreateLinkFunction - it simply navigates to the resource with a call of the SWP servlet." ;
  rdfs:label "create default link" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
edg.reactivegram:createHRef
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:contextValue ;
                sp:arg1 "createHRefFunction" ;
              ] ;
            sp:variable [
                sp:varName "maybeFunction" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeFunction" ;
                  ] ;
                sp:arg2 edg.reactivegram:createSimpleFormEditorHRef ;
              ] ;
            sp:variable [
                sp:varName "function" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:invoke ;
                sp:arg1 [
                    sp:varName "function" ;
                  ] ;
                sp:arg2 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Creates a URL an <a href=\"...\"> to navigate to another resource (see swa:createLink for use in onclick=\"...\" attributes). The function checks if the context variable \"createHRefFunction\" points to another SPIN function. If so, then it calls that SPIN function with the given resource argument. Otherwise it returns nothing, and surrounding code should fall back swa:createLink to produce an onclick attribute. If you want to replace the default behavior, create your own subclass of swa:CreateHRefFunctions, and then use ui:setContext to activate this function for the contained elements." ;
  rdfs:label "create href (EDG Refinitiv)" ;
  rdfs:subClassOf swa:CreateHRefFunctions ;
.
edg.reactivegram:createSimpleFormEditorHRef
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentMasterGraph ;
              ] ;
            sp:variable [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "." ;
                        sp:arg2 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 ".editor" ;
              ] ;
            sp:variable [
                sp:varName "editor" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "editor" ;
                  ] ;
                sp:arg2 "?_editorClass=teamwork:SimpleFormEditorApplication&resource=" ;
                sp:arg3 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:subClassOf swa:CreateHRefFunctions ;
.
edg.reactivegram:createSimpleFormEditorHRefBase
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "." ;
                        sp:arg2 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 ".editor" ;
              ] ;
            sp:variable [
                sp:varName "editor" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "editor" ;
                  ] ;
                sp:arg2 "?_editorClass=teamwork:SimpleFormEditorApplication&resource=" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "create simple form editor Href base" ;
  rdfs:subClassOf swa:CreateHRefFunctions ;
.
edg.reactivegram:getSHACLvalidationResultCounts
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "focusNode" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
          [
            sp:varName "errorCount" ;
          ]
          [
            sp:varName "warningCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:groupBy (
                    [
                      sp:varName "sourceShape" ;
                    ]
                    [
                      sp:varName "focusNode" ;
                    ]
                  ) ;
                sp:resultVariables (
                    [
                      sp:varName "focusNode" ;
                    ]
                    [
                      sp:varName "sourceShape" ;
                    ]
                    [
                      sp:expression [
                          a sp:Sum ;
                          sp:expression [
                              sp:varName "violation" ;
                            ] ;
                        ] ;
                      sp:varName "errorCount" ;
                    ]
                    [
                      sp:expression [
                          a sp:Sum ;
                          sp:expression [
                              sp:varName "warning" ;
                            ] ;
                        ] ;
                      sp:varName "warningCount" ;
                    ]
                  ) ;
                sp:where (
                    [
                      a sp:Union ;
                      sp:elements (
                          (
                            [
                              sp:object sh:ValidationReport ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "report" ;
                                ] ;
                            ]
                            [
                              sp:object false ;
                              sp:predicate sh:conforms ;
                              sp:subject [
                                  sp:varName "report" ;
                                ] ;
                            ]
                            [
                              sp:object sh:ValidationResult ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "result" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "focusNode" ;
                                ] ;
                              sp:predicate sh:focusNode ;
                              sp:subject [
                                  sp:varName "result" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "sourceShape" ;
                                ] ;
                              sp:predicate sh:sourceShape ;
                              sp:subject [
                                  sp:varName "result" ;
                                ] ;
                            ]
                            [
                              a sp:Optional ;
                              sp:elements (
                                  [
                                    sp:object [
                                        sp:varName "severity" ;
                                      ] ;
                                    sp:predicate sh:resultSeverity ;
                                    sp:subject [
                                        sp:varName "result" ;
                                      ] ;
                                  ]
                                ) ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression [
                                  a sp:if ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "severity" ;
                                        ] ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:if ;
                                      sp:arg1 [
                                          a sp:eq ;
                                          sp:arg1 [
                                              sp:varName "severity" ;
                                            ] ;
                                          sp:arg2 sh:Violation ;
                                        ] ;
                                      sp:arg2 1 ;
                                      sp:arg3 0 ;
                                    ] ;
                                  sp:arg3 0 ;
                                ] ;
                              sp:variable [
                                  sp:varName "violation" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression [
                                  a sp:if ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "severity" ;
                                        ] ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:if ;
                                      sp:arg1 [
                                          a sp:eq ;
                                          sp:arg1 [
                                              sp:varName "severity" ;
                                            ] ;
                                          sp:arg2 sh:Warning ;
                                        ] ;
                                      sp:arg2 1 ;
                                      sp:arg3 0 ;
                                    ] ;
                                  sp:arg3 0 ;
                                ] ;
                              sp:variable [
                                  sp:varName "warning" ;
                                ] ;
                            ]
                          )
                          (
                            [
                              a sp:Filter ;
                              sp:expression [
                                  a sp:bound ;
                                  sp:arg1 spin:_arg2 ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression spin:_arg2 ;
                              sp:variable [
                                  sp:varName "sourceShape" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression 0 ;
                              sp:variable [
                                  sp:varName "violation" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression 0 ;
                              sp:variable [
                                  sp:varName "warning" ;
                                ] ;
                            ]
                          )
                        ) ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "focusNode" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "sourceShape" ;
                          ] ;
                        sp:arg2 spin:_arg2 ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Optional argument for the property shape to be matched. I not provided returns the property shape found." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:label "get SHACL validation result counts (edg.reactivegram)" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg.reactivegram:hasApplicableNameSpace
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a afn:namespace ;
                sp:arg1 [
                    sp:varName "predicate" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ns" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "ns" ;
                      ] ;
                    sp:arg2 "https://graph.link/ecp/schema/CDF/" ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "ns" ;
                      ] ;
                    sp:arg2 "http://purl.org/dc/elements/1.1/" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Checks whether a property has the type of the subject as a range class. Also filters out rdf:type" ;
  rdfs:label "has applicable namespace" ;
  rdfs:subClassOf swa:PropertyWidgetGroupFilterFunctions ;
.
edg.reactivegram:isRelevantButlerProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object true ;
                            sp:predicate edg:isNotRequired ;
                            sp:subject [
                                sp:varName "predicate" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode <https://edg.graph.link/1.0/shapes/butler> ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "predicate" ;
                  ] ;
                sp:arg2 rdf:type ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment """  TODO: Something smarter than this is needed to avoid 'isNotRequired':

 FILTER NOT EXISTS {
        ?subject a ?subjectType .
        ?subjectType (rdfs:subClassOf)* ?parentType .
        ?predicate rdfs:range ?parentType .
        ?predicate owl:inverseOf ?predicate2 .
        ?predicate2 rdfs:domain ?subjectType .
    } .""" ;
  rdfs:comment "Checks whether a property has the type of the subject as a range class. Also filters out rdf:type" ;
  rdfs:label "is relevant butler property" ;
  rdfs:subClassOf swa:PropertyWidgetGroupFilterFunctions ;
.
edg.reactivegram:removeStatement
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg.reactivegram:removeStatement - {= ui:currentQueryGraph() }\"/-->
    <ui:removePropertyValue arg:property=\"{= ?predicate }\" arg:value=\"{= ?object }\" ui:this=\"{= ?subject }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "remove statement" ;
  rdfs:subClassOf ui:JSONServices ;
.
edg:ButlerAllNodeShapesModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shapesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?projectGraph) }\" let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:tagId=\"{= teamwork:currentTagId() }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:if ui:condition=\"{= bound(?shapesGraph) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\" let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:ButlerAllNodeShapesModal - {= ?resource }\"/-->
            <edg:ResourceInstancesDataTable arg:columnService=\"{= edg:NodeShapesColumns }\" arg:dataEndpoint=\"{= edg:DataTableResultsCallbackForNodeShapes }\" arg:resource=\"{= ?projectGraph }\" arg:resourceType=\"{= ?projectType }\"/>
        </ui:group>
    </ui:if>
    <ui:else>
        <p class=\"text-info\">No SHAPES Graph provided</p>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler All Node Shapes Modal" ;
  rdfs:seeAlso edg:ButlerAllPropertyShapesModal ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:ButlerAllPropertyShapesModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?projectGraph) }\" let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:tagId=\"{= teamwork:currentTagId() }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\" ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:ButlerAllPropertyShapesModal - {= ?resource }\"/-->
            <edg:ResourceInstancesDataTable arg:columnService=\"{= edg:PropertyShapesColumns }\" arg:dataEndpoint=\"{= edg:DataTableResultsCallbackForPropertyShapes }\" arg:resource=\"{= ?projectGraph }\" arg:resourceType=\"{= ?projectType }\"/>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler All Proprty Shapes Modal" ;
  rdfs:seeAlso edg:ButlerAllNodeShapesModal ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:ButlerAllValidationResultsModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?projectGraph) }\" let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:tagId=\"{= teamwork:tagIdFromTagGraph(?projectGraph) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\" ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:allValidationResultsModal - {= ?resource }\"/-->
            <ui:if ui:condition=\"{= bound(?myInstance) }\">
                <edg.reactivegram:URIResourceViewer arg:object=\"{= ?myInstance }\"/>
                <div class=\"text-info\">URI: {= ?resource }</div>
                <ui:call arg:dataGraph=\"{= ui:graphWithoutImports(?projectGraph) }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" ui:template=\"{= edg:GetSHACLvalidationResults }\" ui:varName=\"validationResults\">
                    <!--ui:dumpResultSet ui:message=\"AAA2: edg:allValidationResultsModal - {= ?resource }\"
  ui:resultSet=\"{= ?validationResults }\"/-->
                    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?projectGraph), ?validationResultsGraph) }\">
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?validationResults }\">
                            <edg.reactivegram:ValidationResultView arg:canApply=\"{= false }\" arg:dataGraph=\"{= ?projectGraph }\" arg:defaultSubject=\"{= ?resource }\" arg:graphId=\"{= ?graphId }\" arg:result=\"{= ?result }\" arg:tagId=\"{= ?tagId }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\"/>
                        </ui:forEach>
                    </ui:setContext>
                    <!--/ui:group-->
                </ui:call>
            </ui:if>
            <ui:else>
                <p class=\"text-info\">Nothing to show</p>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  vaem:todo "Make this work with wokring copies by getting the tagId into the links on resources" ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler All Validation Results Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:ButlerGramAction
  a swa:VisualizationAction ;
  arg:appName "Ontology,Editor" ;
  arg:condition [
      a sp:and ;
      sp:arg1 [
          a sp:not ;
          sp:arg1 [
              a teamwork:isOntology ;
              arg:projectGraph [
                  a teamwork:currentMasterGraph ;
                ] ;
            ] ;
        ] ;
      sp:arg2 [
          a xsd:boolean ;
          sp:arg1 [
              a smf:configParam ;
              arg:param "enableButler" ;
            ] ;
        ] ;
    ] ;
  arg:onSelect """// figure out how to make the data butler call so as to handle workflows
var parts=swa.queryGraphURI.match(/urn:x-evn-(master|tag):.*/g)[0].split(\":\"),
       isMaster = parts[1].includes(\"master\"),
       graphId = parts[2];

if (isMaster) {
  var user = parts[3] ;
  window.open( graphId + '.editor?_editorClass=edg:DataButlerDiagramPage' + '&resource=' + escape(resourceURI))
 }
else {
   var tagId = parts[3] ,
       user = parts[4] ;
   window.open( graphId + '.' + tagId +'.editor?_editorClass=edg:DataButlerDiagramPage' + '&resource=' + escape(resourceURI))
}""" ;
  swa:readOnly true ;
  rdfs:label "Data Butler ..." ;
.
edg:ButlerInstanceDetailsModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <!--ui:dumpScope ui:message=\"edg:InstanceSummaryModal - {= ?resource }\"/-->
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <ui:if ui:condition=\"{= bound(?myInstance) }\">
                <edg.reactivegram:URIResourceViewer arg:object=\"{= ?myInstance }\"/>
                <div class=\"text-info\">URI: {= ?resource }</div>
                <swa:ResourceFormBody arg:resource=\"{= ?myInstance }\"/>
            </ui:if>
            <ui:else>
                <p class=\"text-info\">Nothing to show</p>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "http://localhost:8083/tbl/mdr_test_4.editor?_editorClass=teamwork:SimpleFormEditorApplication&resource=" ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Instance Details Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:ButlerInstanceValidationResultsModal
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?projectGraph) }\" let:myInstance=\"{= COALESCE(?resource, ?none) }\" let:tagId=\"{= teamwork:tagIdFromTagGraph(?projectGraph) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:setContext let:validationResultsGraph=\"{= IRI(ui:getSessionAttribute(&quot;validationResultsGraph&quot;)) }\" ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:user=\"{= IRI(CONCAT(&quot;urn:x-tb-users:&quot;, ?userName)) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:InstanceValidationResultsModal - {= ?resource }, results graph is {= ?validationResultsGraph }\"/-->
            <ui:if ui:condition=\"{= bound(?myInstance) }\">
                <edg.reactivegram:URIResourceViewer arg:object=\"{= ?myInstance }\"/>
                <div class=\"text-info\">URI: {= ?resource }</div>
                <ui:if ui:condition=\"{= true }\">
                    <ui:call arg:focusNode=\"{= ?parent }\" arg:property=\"{= ?property }\" arg:subject=\"{= ?myInstance }\" arg:validationDataGraph=\"{= ?validationDataGraph }\" arg:validationResultsGraph=\"{= ?validationResultsGraph }\" ui:template=\"{= edg:GetClassNodeInstanceSHACLvalidationResults }\" ui:varName=\"validationResults\">
                        <!--ui:dumpScope ui:message=\"AAA2: edg.reactivegram:InstanceValidationResultsModal - parent is {= ?parent }\"/-->
                        <!--ui:dumpResultSet ui:message=\"AAA3: edg.reactivegram:InstanceValidationResultsModal\"

  ui:resultSet=\"{= ?validationResults }\"/-->
                        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?projectGraph), ?validationResultsGraph) }\">
                            <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?validationResults }\">
                                <edg.reactivegram:ValidationResultView arg:canApply=\"{= false }\" arg:dataGraph=\"{= ?projectGraph }\" arg:defaultSubject=\"{= ?resource }\" arg:graphId=\"{= ?graphId }\" arg:result=\"{= ?result }\" arg:tagId=\"{= ?tagId }\"/>
                            </ui:forEach>
                        </ui:setContext>
                    </ui:call>
                </ui:if>
            </ui:if>
            <ui:else>
                <p class=\"text-info\">Nothing to show</p>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "Butler Instance Validation Results Modal" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:ButlerPane
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:sessionGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A graph for session information" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:version ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  ui:headIncludes """
<ui:group>
    <meta content=\"IE=Edge,chrome=1\" http-equiv=\"X-UA-Compatible\"/>
    <script src=\"{= ui:lib() }/reactivegram/js/butler-diagram.js\"/>
    <meta charset=\"utf-8\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:focusNode=\"{= ?resource }\" let:isInValidateModeSetting=\"{= false }\" let:myClass=\"{= edg:propertyValue(?resource, owl:Thing, rdf:type) }\" let:showEmptyNodesSetting=\"{= false }\" let:showNextFeatures=\"{= false }\" let:showOKnodesSetting=\"{= true }\">
    <!-- TBD: remove this loadable -->
    <ui:loadable let:gid=\"{= ui:uniqueId() }\" let:loadId=\"{= ui:uniqueId() }\">
        <ui:if ui:condition=\"{= swa:isViewMode() }\">
            <div class=\"butler-button-bar\">
                <button class=\"btn btn-default butler-button {= IF(?isInValidateModeSetting, &quot;butler-validation-on&quot;, &quot;butler-validation-off&quot;) }\" data-invalidatemode=\"{= ?isInValidateModeSetting }\" id=\"validation-toggler\" onclick=\"butler.handleValidateModeClick()\" title=\"turn validation on/off\" type=\"button\">
                    <i class=\"fas fa-chess-queen\">&nbsp;<span id=\"validation-toggler-text\">Validate {= IF(?isInValidateModeSetting, \"On\", \"Off\") }</span>
                    </i>
                </button>
                <ui:if ui:condition=\"{= true }\">
                    <button class=\"btn btn-default butler-button\" data-showemptynodes=\"{= ?showEmptyNodesSetting }\" id=\"show-empty-nodes-toggler\" onclick=\"butler.handleShowEmptyNodesButtonClick()\" title=\"show/hide empty data\" type=\"button\">
                        <i class=\"fas fa-eye\">&nbsp;<span id=\"hide-empty-nodes-toggler-text\">Show Empty Nodes</span>
                        </i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" data-showoknodes=\"{= ?showOKnodesSetting }\" id=\"show-ok-nodes-toggler\" onclick=\"butler.handleShowOKnodesButtonClick()\" title=\"show/hide valid data\" type=\"button\">
                        <i class=\"fas fa-eye\">&nbsp;<span id=\"hide-ok-nodes-toggler-text\">Show OK Nodes</span>
                        </i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerSearchModal','Butler Search',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"Locate\" type=\"button\">
                        <i class=\"fas fa-search\">&nbsp;Locate</i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerFullViewModal','Butler Full View of {= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"Overall View\" type=\"button\">
                        <i class=\"fas fa-map\">&nbsp;Full View</i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerFullValidationModal','Butler Full Validation for {= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"Peform full Validation\" type=\"button\">
                        <i class=\"fas fa-globe\">&nbsp;Full Validation</i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButleWorkflowStatusModal','Workflow Status for {= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"workflow status\" type=\"button\">
                        <i class=\"fas fa-bullseye\">&nbsp;Workflow Status</i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerCommentsModal','Comments on {= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"Comments\" type=\"button\">
                        <i class=\"fas fa-pencil-alt\">&nbsp;Comments</i>
                    </button>
                </ui:if>
                <ui:if ui:condition=\"{= ?showNextFeatures }\">
                    <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerPrintModal','Print {= ui:label(?resource) }',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"print diagram\" type=\"button\">
                        <i class=\"fas fa-print\">&nbsp;Print</i>
                    </button>
                </ui:if>
                <button class=\"btn btn-default butler-button\" onclick=\"butler.populateModalDialogWithCallbackForBody('edg.reactivegram:ButlerHelpModal','Butler Help',null,'{= ui:contextValue(&quot;butlerDataGraph&quot;) }','{= str(?resource) }',{})\" title=\"about this diagram\" type=\"button\">
                    <i class=\"fas fa-info\">&nbsp;Help</i>
                </button>
            </div>
            <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"butler-diagram\">
                <!--ui:dumpScope ui:message=\"AAA1: edg:ButlerPane -  {= ?resource }\"/-->
                <span class=\"butler-breadcrumbs\" data-attr=\"{= ?focusNode }\" id=\"reactive-breadcrumbs\">{= ui:label(?focusNode) }</span>
                <edg.reactivegram:ButlerReactiveDiagram arg:isInShowEmptyNodesMode=\"{= ?isInShowEmptyNodesMode }\" arg:isInValidateMode=\"{= ?isInValidateModeSetting }\" arg:resource=\"{= ?focusNode }\" arg:showOKnodes=\"{= ?showOKnodesSetting }\"/>
            </ui:loadable>
        </ui:if>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:DataButlerDiagramGadget
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myClass=\"{= edg:propertyValue(?focusNode, owl:Thing, rdf:type) }\">
    <ui:loadable class=\"swa-labeled-objects\" let:gid=\"{= ui:uniqueId() }\" let:loadId=\"{= ui:uniqueId() }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:DataButlerDiagramGadget -  {= ?focusNode }\"/-->
        <ui:if ui:condition=\"{= swa:isViewMode() }\">
            <div class=\"mgl-3em\" style=\"margin-top: 8px\">
                <swa:CollapsibleLoadableFormSection arg:label=\"Butler Model\" arg:loadId=\"butler-diagram\">
                    <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"butler-diagram\" ui:loadOnDemand=\"{= true }\">
                        <span class=\"butler-breadcrumbs\" data-attr=\"{= ?focusNode }\" id=\"reactive-breadcrumbs\">{= ui:label(?focusNode) }</span>
                        <edg.reactivegram:ButlerReactiveDiagram arg:resource=\"{= ?focusNode }\"/>
                    </ui:loadable>
                </swa:CollapsibleLoadableFormSection>
            </div>
            <div class=\"mgl-3em\" style=\"margin-top: 8px\">
                <swa:CollapsibleLoadableFormSection arg:label=\"Class Diagram\" arg:loadId=\"DIA2_{= ?loadId }\">
                    <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"DIA2_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                        <edg:ReactiveClassDiagramShowingAssociations arg:degreeOfSeparation=\"{= 1 }\" arg:focusClass=\"{= ?myClass }\" arg:showClassInheritance=\"{= false }\"/>
                    </ui:loadable>
                </swa:CollapsibleLoadableFormSection>
            </div>
        </ui:if>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/datareactivegram> ;
  rdfs:label "Data Butler Diagram Gadget" ;
  rdfs:subClassOf edg:PathElements ;
.
edg:DataButlerDiagramPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myClass=\"{= edg:propertyValue(?resource, owl:Thing, rdf:type) }\" let:projectGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <ui:group let:tag=\"{= teamwork:tagIdFromTagGraph(?projectGraph) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:DataButlerDiagramPage\"/-->
        <edg.reactivegram:ButlerTemplate ui:args=\"*\">
            <ui:insert ui:into=\"header\">
                <teamwork:Header arg:suppressQuickNavigation=\"{= true }\" arg:suppressSearch=\"{= true }\">
                    <div class=\"{= IF(bound(?tag), &quot;in-workflow&quot;, ?none) }\" id=\"butler-mast\">
                        <span>DataButler v1.2</span>
                        <ui:if ui:condition=\"{= bound(?tag) }\">&nbsp;in workflow&nbsp;<span class=\"edg-boxed-text\">{= ?tag }</span>
                        </ui:if>&nbsp; - launched from <span style=\"color:#5a4d2e;\">{= ui:label(?myClass) }</span>:&nbsp;<span class=\"edg-boxed-text\">{= ui:label(?resource) }</span>
                    </div>
                </teamwork:Header>
            </ui:insert>
        </edg.reactivegram:ButlerTemplate>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/project/common> ;
  rdfs:label "Data Butler Diagram Page" ;
  rdfs:subClassOf swa:AbstractClassDiagram ;
.
edg:DataTableResultsCallbackForNodeShapes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rows ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of rows to deliver." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:dataGraph=\"{= swa:dataGraph() }\" let:masterGraph=\"{= teamwork:currentMasterGraph() }\" let:myShapesGraph=\"{= IRI(ui:getSessionAttribute(&quot;shapesGraph&quot;)) }\" let:projectGraph=\"{= IRI(ui:getSessionAttribute(&quot;persistresource&quot;)) }\">
    <ui:if ui:condition=\"{= bound(?projectGraph) }\">
        <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?masterGraph) }\" let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
            <ui:setContext ui:queryGraph=\"{= ?myShapesGraph }\">
                <ui:setContext ui:varName=\"createHRefFunction\" ui:varValue=\"{= teamwork:createSimpleFormEditorHRef }\">
                    <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
                    <!--ui:dumpScope ui:message=\"AAA: edg:DataTableResultsCallbackForNodeShapes\"/-->
                    <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
                    <ui:call arg:graph=\"{= ?myShapesGraph }\" ui:template=\"{= edg:GetNodeShapes }\" ui:varName=\"nodeShapes\">
                        <!--ui:dumpResultSet ui:message=\"AAA: edg:DataTableResultsCallbackForNodeShapes\"
  ui:resultSet=\"{= ?nodeShapes }\"/-->
                        <ui:if ui:condition=\"{= !spr:isEmpty(?nodeShapes) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"data\">
                                    <swon:Array>
                                        <ui:forEach ui:resultSet=\"{= ?nodeShapes }\">
                                            <swon:Object let:nodeShapeLink=\"{= CONCAT(?graphId, &quot;.editor&quot;, &quot;?_editorClass=teamwork:SimpleFormEditorApplication&amp;resource=&quot;, ENCODE_FOR_URI(str(?nodeShape))) }\">
                                                <swon:Value arg:name=\"uri\" arg:value=\"{= str(?nodeShape) }\"/>
                                                <swon:Value arg:name=\"nodeShapeLabel\" arg:value=\"{= ?nodeShapeLabel }\"/>
                                                <swon:Value arg:name=\"namespacePrefix\" arg:value=\"{= ?namespacePrefix }\"/>
                                                <swon:Value arg:name=\"desc\" arg:value=\"{= ?description }\"/>
                                                <!--edg-qa:GenerateJSONforDatatableCellObjects arg:arrayName=\"propertyConstraints\"
arg:class=\"sh:PropertyShape\"
arg:graphId=\"{= ?graphId }\"
arg:limit=\"20\"
arg:name=\"label\"
arg:property=\"sh:property\"
arg:resource=\"{= ?nodeShape }\"/-->
                                                <swon:Value arg:name=\"deactivated\" arg:value=\"{= ?deactivated }\"/>
                                                <ui:if ui:condition=\"{= false }\">
                                                    <swon:Value arg:name=\"diagnosticActions\" let:resourceFragment=\"&amp;resource={= ui:encodeURL(str(?nodeShape)) }\">
                                                        <swon:Object>
                                                            <swon:Value arg:name=\"label\" arg:value=\"\"/>
                                                            <swon:Value arg:name=\"uri\" arg:value=\"{= ?nodeShapeLink }\"/>
                                                            <swon:Value arg:name=\"graphLabel\" arg:value=\"{= ?graphId }\"/>
                                                            <swon:Value arg:name=\"glyph\" arg:value=\"glyphicon glyphicon-new-window\"/>
                                                            <swon:Value arg:name=\"isEDGresource\" arg:value=\"{= false }\"/>
                                                        </swon:Object>
                                                    </swon:Value>
                                                </ui:if>
                                            </swon:Object>
                                        </ui:forEach>
                                    </swon:Array>
                                </swon:Value>
                            </swon:Object>
                        </ui:if>
                        <ui:else>
                            <swon:Object/>
                        </ui:else>
                    </ui:call>
                    <!--/ui:setContext-->
                    <!--/ui:setContext-->
                </ui:setContext>
            </ui:setContext>
        </ui:group>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "QA project type instances data table callback. Uses the JS library for the \"old\" (non-graphQL) data tables. This can be found at /TopBraid-Suite/uiassets/topbraid/js/components/data-table-custom-renders.js" ;
  rdfs:label "Data table results callback for node shapes" ;
  rdfs:seeAlso edg:NodeShapesColumns ;
  rdfs:subClassOf edg:DataTableResults ;
.
edg:DataTableResultsCallbackForPropertyShapes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rows ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of rows to deliver." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:dataGraph=\"{= swa:dataGraph() }\" let:masterGraph=\"{= teamwork:currentMasterGraph() }\" let:myShapesGraph=\"{= IRI(ui:getSessionAttribute(&quot;shapesGraph&quot;)) }\" let:projectGraph=\"{= IRI(ui:getSessionAttribute(&quot;persistresource&quot;)) }\">
    <ui:if ui:condition=\"{= bound(?projectGraph) }\">
        <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?masterGraph) }\" let:projectType=\"{= ?myShapesGraph }\">
            <ui:setContext ui:queryGraph=\"{= ?myShapesGraph }\">
                <ui:setContext ui:varName=\"createHRefFunction\" ui:varValue=\"{= teamwork:createSimpleFormEditorHRef }\">
                    <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
                    <!--ui:dumpScope ui:message=\"AAA: edg:DataTableResultsCallbackForPropertyShapes\"/-->
                    <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
                    <ui:call arg:graph=\"{= ?myShapesGraph }\" ui:template=\"{= edg:GetPropertyShapes }\" ui:varName=\"propertyShapes\">
                        <!--ui:dumpResultSet ui:message=\"AAA: edg:DataTableResultsCallbackForPropertyShapes\"
  ui:resultSet=\"{= ?propertyShapes }\"/-->
                        <ui:if ui:condition=\"{= !spr:isEmpty(?propertyShapes) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"data\">
                                    <swon:Array>
                                        <ui:forEach ui:resultSet=\"{= ?propertyShapes }\">
                                            <swon:Object let:propertyShapeLink=\"{= CONCAT(?graphId, &quot;.editor&quot;, &quot;?_editorClass=teamwork:SimpleFormEditorApplication&amp;resource=&quot;, ENCODE_FOR_URI(str(?propretyShape))) }\">
                                                <swon:Value arg:name=\"uri\" arg:value=\"{= str(?propertyShape) }\"/>
                                                <swon:Value arg:name=\"propertyShapeLabel\" arg:value=\"{= ?propertyShapeLabel }\"/>
                                                <swon:Value arg:name=\"namespacePrefix\" arg:value=\"{= ?namespacePrefix }\"/>
                                                <swon:Value arg:name=\"desc\" arg:value=\"{= ?description }\"/>
                                                <!--edg-qa:GenerateJSONforDatatableCellObjects arg:arrayName=\"propertyConstraints\"
arg:class=\"sh:PropertyShape\"
arg:graphId=\"{= ?graphId }\"
arg:limit=\"20\"
arg:name=\"label\"
arg:property=\"sh:property\"
arg:resource=\"{= ?nodeShape }\"/-->
                                                <swon:Value arg:name=\"deactivated\" arg:value=\"{= ?deactivated }\"/>
                                            </swon:Object>
                                        </ui:forEach>
                                    </swon:Array>
                                </swon:Value>
                            </swon:Object>
                        </ui:if>
                        <ui:else>
                            <swon:Object/>
                        </ui:else>
                    </ui:call>
                    <!--/ui:setContext-->
                    <!--/ui:setContext-->
                </ui:setContext>
            </ui:setContext>
        </ui:group>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "QA project type instances data table callback. Uses the JS library for the \"old\" (non-graphQL) data tables. This can be found at /TopBraid-Suite/uiassets/topbraid/js/components/data-table-custom-renders.js" ;
  rdfs:label "Data table results callback for property shapes" ;
  rdfs:seeAlso edg:PropertyShapesColumns ;
  rdfs:subClassOf edg:DataTableResults ;
.
edg:GetAssetAssociations
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "association" ;
          ]
          [
            sp:varName "associationName" ;
          ]
          [
            sp:varName "propertyShape" ;
          ]
          [
            sp:varName "minCardinality" ;
          ]
          [
            sp:varName "maxCardinality" ;
          ]
          [
            sp:varName "targetClass" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "resource" ;
                    ] ;
                ] ;
            ]
          )
          (
            [
              sp:object [
                  sp:varName "subjectClass" ;
                ] ;
              sp:predicate rdf:type ;
              sp:subject [
                  sp:varName "resource" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "subjectClass" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate edg:relevantClassOfProperty ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "property" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?2" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "relevantClass" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?2" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?2" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "aPropertyShape" ;
                ] ;
              sp:predicate sh:property ;
              sp:subject [
                  sp:varName "relevantClass" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "property" ;
                ] ;
              sp:predicate sh:path ;
              sp:subject [
                  sp:varName "aPropertyShape" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:or ;
                  sp:arg1 [
                      a sp:not ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "filterFunction" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a spif:invoke ;
                      sp:arg1 [
                          sp:varName "filterFunction" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "property" ;
                        ] ;
                      sp:arg3 [
                          sp:varName "resource" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spif:walkObjects ;
                sp:arg1 [
                    sp:varName "subjectClass" ;
                  ] ;
                sp:arg2 rdfs:subClassOf ;
                sp:arg3 edg:propertyShapeFunctor ;
                sp:arg4 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetClass" ;
              ] ;
            sp:predicate sh:class ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "someValue" ;
                            ] ;
                          sp:predicate [
                              sp:varName "property" ;
                            ] ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    sp:varName "showEmptyNodes" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                sp:varName "property" ;
              ] ;
            sp:variable [
                sp:varName "association" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "association" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "associationName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:maxCountForClassProperty ;
                arg:class [
                    sp:varName "subjectClass" ;
                  ] ;
                arg:property [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maxCardinality" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:minCountForClassProperty ;
                arg:class [
                    sp:varName "subjectClass" ;
                  ] ;
                arg:property [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "minCardinality" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:showEmptyNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:private true ;
  rdfs:label "Get asset associations" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetClassNodeInstanceSHACLvalidationResults
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "innerNodeLabel" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
          [
            sp:varName "innerNode" ;
          ]
          [
            sp:varName "innerNodeLabel" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
          [
            sp:varName "severity" ;
          ]
          [
            sp:varName "value" ;
          ]
          [
            sp:varName "valueLabel" ;
          ]
          [
            sp:varName "resultMessage" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "validationResultsGraph" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "validationDataGraph" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object sh:ValidationReport ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object false ;
                  sp:predicate sh:conforms ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate sh:result ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object sh:ValidationResult ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "subject" ;
                    ] ;
                  sp:predicate edg:parent ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:exists ;
                      sp:elements (
                          [
                            a sp:NamedGraph ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "subject" ;
                                    ] ;
                                  sp:predicate [
                                      sp:varName "property" ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "focusNode" ;
                                    ] ;
                                ]
                              ) ;
                            sp:graphNameNode [
                                sp:varName "validationDataGraph" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "innerNode" ;
                    ] ;
                  sp:predicate sh:focusNode ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceShape" ;
                    ] ;
                  sp:predicate sh:sourceShape ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "severity" ;
                    ] ;
                  sp:predicate sh:resultSeverity ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "value" ;
                          ] ;
                        sp:predicate sh:value ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "resultMessage" ;
                          ] ;
                        sp:predicate sh:resultMessage ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a swa:labelInGraph ;
                      arg:resource [
                          sp:varName "innerNode" ;
                        ] ;
                      arg:resourceGraph [
                          sp:varName "validationDataGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "innerNodeLabel" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:isIRI ;
                          sp:arg1 [
                              sp:varName "value" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a swa:labelInGraph ;
                          arg:resource [
                              sp:varName "value" ;
                            ] ;
                          arg:resourceGraph [
                              sp:varName "validationDataGraph" ;
                            ] ;
                        ] ;
                      sp:arg3 [
                          sp:varName "value" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "valueLabel" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "validationResultsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:label "Get class node instance SHACL validation results" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetDatatypePropertyValues
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "propertyLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "propertyLabel" ;
          ]
          [
            sp:varName "datatype" ;
          ]
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resourceType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resourceType" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "propertyShape" ;
                      ] ;
                    sp:predicate sh:property ;
                    sp:subject [
                        sp:varName "parentClass" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "filterFunction" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "filterFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "property" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "resource" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "datatype" ;
                      ] ;
                    sp:predicate sh:datatype ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "resourceType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resourceType" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:predicate rdfs:domain ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "filterFunction" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "filterFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "property" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "resource" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "propertyType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          owl:DatatypeProperty
                        )
                        (
                          rdf:Property
                        )
                      ) ;
                    sp:varNames (
                        "propertyType"
                      ) ;
                  ]
                  [
                    sp:object [
                        sp:varName "datatype" ;
                      ] ;
                    sp:predicate rdfs:range ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a swa:isDatatypeRange ;
                        arg:range [
                            sp:varName "datatype" ;
                          ] ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "propertyLabel" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "value" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Get datatype property values" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetNodeShapes
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "nodeShapeLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "nodeShape" ;
          ]
          [
            sp:varName "nodeShapeLabel" ;
          ]
          [
            sp:varName "namespacePrefix" ;
          ]
          [
            sp:varName "description" ;
          ]
          [
            sp:varName "deactivated" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object sh:NodeShape ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "nodeShape" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a swa:filterAllSystemResources ;
                        arg:node [
                            sp:varName "nodeShape" ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        a sp:TriplePath ;
                        sp:object [
                            sp:varName "description" ;
                          ] ;
                        sp:path [
                            a sp:AltPath ;
                            sp:path1 rdfs:comment ;
                            sp:path2 dcterms:description ;
                          ] ;
                        sp:subject [
                            sp:varName "nodeShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "deactivated" ;
                          ] ;
                        sp:predicate sh:deactivated ;
                        sp:subject [
                            sp:varName "nodeShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "maybeLabel" ;
                          ] ;
                        sp:predicate rdfs:label ;
                        sp:subject [
                            sp:varName "nodeShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a afn:namespace ;
                      sp:arg1 [
                          sp:varName "nodeShape" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "namespacePrefix" ;
                    ] ;
                  sp:predicate spif:prefix ;
                  sp:subject [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          sp:varName "maybeLabel" ;
                        ] ;
                      sp:arg2 [
                          a afn:localname ;
                          sp:arg1 [
                              sp:varName "nodeShape" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "nodeShapeLabel" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Get node shapes" ;
  rdfs:subClassOf edg:Templates ;
.
edg:GetPropertyShapes
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "propertyShapeLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "propertyShape" ;
          ]
          [
            sp:varName "propertyShapeLabel" ;
          ]
          [
            sp:varName "namespacePrefix" ;
          ]
          [
            sp:varName "description" ;
          ]
          [
            sp:varName "deactivated" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object sh:PropertyShape ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a swa:filterAllSystemResources ;
                        arg:node [
                            sp:varName "propertyShape" ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        a sp:TriplePath ;
                        sp:object [
                            sp:varName "description" ;
                          ] ;
                        sp:path [
                            a sp:AltPath ;
                            sp:path1 rdfs:comment ;
                            sp:path2 dcterms:description ;
                          ] ;
                        sp:subject [
                            sp:varName "propertyShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "deactivated" ;
                          ] ;
                        sp:predicate sh:deactivated ;
                        sp:subject [
                            sp:varName "propertyShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "maybeLabel" ;
                          ] ;
                        sp:predicate rdfs:label ;
                        sp:subject [
                            sp:varName "propertyShape" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a afn:namespace ;
                      sp:arg1 [
                          sp:varName "propertyShape" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "namespacePrefix" ;
                    ] ;
                  sp:predicate spif:prefix ;
                  sp:subject [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          sp:varName "maybeLabel" ;
                        ] ;
                      sp:arg2 [
                          a afn:localname ;
                          sp:arg1 [
                              sp:varName "propertyShape" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "propertyShapeLabel" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Get property shapes" ;
  rdfs:subClassOf edg:Templates ;
.
edg:GetPropertyValuesForInstancesHeldInClassNode
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "object" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "violations" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "focusNode" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "property" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "focusNode" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "object" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "filter" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:contains ;
                    sp:arg1 [
                        a fn:lower-case ;
                        sp:arg1 [
                            sp:varName "label" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a fn:lower-case ;
                        sp:arg1 [
                            sp:varName "filter" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 true ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:nodeCarriesViolations ;
                arg:focusNode [
                    sp:varName "focusNode" ;
                  ] ;
                arg:parent [
                    sp:varName "object" ;
                  ] ;
                arg:property [
                    sp:varName "property" ;
                  ] ;
                arg:validationDataGraph [
                    sp:varName "validationDataGraph" ;
                  ] ;
                arg:validationResultsGraph [
                    sp:varName "validationResultsGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "violations" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "onlyShowInvalidInstances" ;
                  ] ;
                sp:arg2 [
                    sp:varName "violations" ;
                  ] ;
                sp:arg3 true ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filter ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The node that is connected via property to the subject node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:onlyShowInvalidInstances ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Get property values for instances held in class node" ;
  rdfs:seeAlso edg:GetSubjectPropertyValues ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetSHACLvalidationResults
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "depictedParentLabel" ;
          ]
          [
            sp:varName "focusNodeLabel" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
          [
            sp:varName "focusNode" ;
          ]
          [
            sp:varName "focusNodeLabel" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
          [
            sp:varName "depictedParent" ;
          ]
          [
            sp:varName "depictedParentLabel" ;
          ]
          [
            sp:varName "severity" ;
          ]
          [
            sp:varName "value" ;
          ]
          [
            sp:varName "valueLabel" ;
          ]
          [
            sp:varName "resultMessage" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "validationResultsGraph" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object sh:ValidationReport ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object false ;
                  sp:predicate sh:conforms ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate sh:result ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object sh:ValidationResult ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "depictedParent" ;
                          ] ;
                        sp:predicate edg:parent ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                (
                  [
                    sp:object [
                        sp:varName "focusNode" ;
                      ] ;
                    sp:predicate sh:focusNode ;
                    sp:subject [
                        sp:varName "result" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "resource" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "focusNode" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "resource" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "sourceShape" ;
                      ] ;
                    sp:predicate sh:sourceShape ;
                    sp:subject [
                        sp:varName "result" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "propertyShape" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "sourceShape" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "propertyShape" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "severity" ;
                    ] ;
                  sp:predicate sh:resultSeverity ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "value" ;
                          ] ;
                        sp:predicate sh:value ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "resultMessage" ;
                          ] ;
                        sp:predicate sh:resultMessage ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a swa:labelInGraph ;
                      arg:resource [
                          sp:varName "focusNode" ;
                        ] ;
                      arg:resourceGraph [
                          sp:varName "dataGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "focusNodeLabel" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a swa:labelInGraph ;
                      arg:resource [
                          sp:varName "depictedParent" ;
                        ] ;
                      arg:resourceGraph [
                          sp:varName "dataGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "depictedParentLabel" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:isIRI ;
                          sp:arg1 [
                              sp:varName "value" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a swa:labelInGraph ;
                          arg:resource [
                              sp:varName "value" ;
                            ] ;
                          arg:resourceGraph [
                              sp:varName "dataGraph" ;
                            ] ;
                        ] ;
                      sp:arg3 [
                          sp:varName "value" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "valueLabel" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "validationResultsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:propertyShape ;
      spl:valueType sh:PropertyShape ;
      rdfs:comment "Optional argument for the property shape to be matched. I not provided returns the property shape found." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:label "Get SHACL validation results" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetSHACLvalidationResultsForAllInstancesOfShapeNode
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "possiblyNestedFocusNode" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "possiblyNestedFocusNode" ;
          ]
          [
            sp:expression [
                a sp:Sum ;
                sp:expression [
                    sp:varName "violation" ;
                  ] ;
              ] ;
            sp:varName "errorCount" ;
          ]
          [
            sp:expression [
                a sp:Sum ;
                sp:expression [
                    sp:varName "warning" ;
                  ] ;
              ] ;
            sp:varName "warningCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object sh:ValidationReport ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object false ;
                  sp:predicate sh:conforms ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate sh:result ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "possiblyNestedFocusNode" ;
                    ] ;
                  sp:predicate sh:focusNode ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "parent" ;
                    ] ;
                  sp:predicate edg:parent ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:exists ;
                      sp:elements (
                          [
                            a sp:NamedGraph ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "parent" ;
                                    ] ;
                                  sp:predicate [
                                      sp:varName "property" ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "focusNode" ;
                                    ] ;
                                ]
                              ) ;
                            sp:graphNameNode [
                                sp:varName "dataGraph" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "severity" ;
                          ] ;
                        sp:predicate sh:resultSeverity ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "severity" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:if ;
                          sp:arg1 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "severity" ;
                                ] ;
                              sp:arg2 sh:Violation ;
                            ] ;
                          sp:arg2 1 ;
                          sp:arg3 0 ;
                        ] ;
                      sp:arg3 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "violation" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "severity" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:if ;
                          sp:arg1 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "severity" ;
                                ] ;
                              sp:arg2 sh:Warning ;
                            ] ;
                          sp:arg2 1 ;
                          sp:arg3 0 ;
                        ] ;
                      sp:arg3 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "warning" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "validationResultsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "Optional argument for the property on the original resource" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:comment "For a specific class node determine the violation counts for each instance. The algorithm finds all instances that have a tranistive parent relationship to the instance identified as the object of the supplied focus node and property." ;
  rdfs:label "Get SHACL validation results for all instances of shape node" ;
  rdfs:seeAlso edg:GetSHACLvalidationResultsForShapeNode ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetSHACLvalidationResultsForShapeNode
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "parent" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "parent" ;
          ]
          [
            sp:expression [
                a sp:Sum ;
                sp:expression [
                    sp:varName "violation" ;
                  ] ;
              ] ;
            sp:varName "errorCount" ;
          ]
          [
            sp:expression [
                a sp:Sum ;
                sp:expression [
                    sp:varName "warning" ;
                  ] ;
              ] ;
            sp:varName "warningCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object sh:ValidationReport ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object false ;
                  sp:predicate sh:conforms ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate sh:result ;
                  sp:subject [
                      sp:varName "report" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "myFocusNode" ;
                    ] ;
                  sp:predicate sh:focusNode ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "parent" ;
                    ] ;
                  sp:predicate edg:parent ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:exists ;
                      sp:elements (
                          [
                            a sp:NamedGraph ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "parent" ;
                                    ] ;
                                  sp:predicate [
                                      sp:varName "property" ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "focusNode" ;
                                    ] ;
                                ]
                              ) ;
                            sp:graphNameNode [
                                sp:varName "validationDataGraph" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "severity" ;
                          ] ;
                        sp:predicate sh:resultSeverity ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "severity" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:if ;
                          sp:arg1 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "severity" ;
                                ] ;
                              sp:arg2 sh:Violation ;
                            ] ;
                          sp:arg2 1 ;
                          sp:arg3 0 ;
                        ] ;
                      sp:arg3 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "violation" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "severity" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:if ;
                          sp:arg1 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "severity" ;
                                ] ;
                              sp:arg2 sh:Warning ;
                            ] ;
                          sp:arg2 1 ;
                          sp:arg3 0 ;
                        ] ;
                      sp:arg3 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "warning" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "validationResultsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "Optional argument for the property on the original resource" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:comment "For a specific class node determine the violation counts for each instance. The algorithm finds all instances that have a tranistive parent relationship to the instance identified as the object of the supplied focus node and property." ;
  rdfs:label "Get SHACL validation results for shape node" ;
  rdfs:seeAlso edg:GetSHACLvalidationResultsForAllInstancesOfShapeNode ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetSubjectPropertyValues
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "object" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "violations" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "subject" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "property" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "object" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filter ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:onlyShowInvalidInstances ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Get subject property values" ;
  rdfs:seeAlso edg:GetPropertyValuesForInstancesHeldInClassNode ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:NodeShapesColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Node Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"nodeShapeLabel\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Namespace\"/>
            <swon:Value arg:name=\"data\" arg:value=\"namespacePrefix\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <!--swon:Object>
<swon:Value arg:name=\"title\" arg:value=\"Property Constraints\"/>
<swon:Value arg:name=\"data\" arg:value=\"propertyConstraints\"/>
<swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
<swon:Value arg:name=\"render\" arg:value=\"detailsLink\"/>
</swon:Object-->
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Description\"/>
            <swon:Value arg:name=\"data\" arg:value=\"desc\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Deactivated\"/>
            <swon:Value arg:name=\"data\" arg:value=\"deactivated\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"render\" arg:value=\"bool\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Node Shapes columns" ;
  rdfs:seeAlso edg:DataTableResultsCallbackForNodeShapes ;
  rdfs:subClassOf edg:DataTableColumns ;
.
edg:PathElements
  a ui:NodeClass ;
  rdfs:label "Path elements" ;
  rdfs:subClassOf swa:PathElements ;
.
edg:PerformSHACLvalidation
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shapesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myMaxReach=\"{= COALESCE(?maxReach, 100) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:PerformSHACLvalidation\"/-->
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?subject) }\">
            <ui:throw ui:message=\"ERROR: edg:PerformSHACLvalidation - no subject provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
            <ui:throw ui:message=\"ERROR: edg:PerformSHACLvalidation - no datagraph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?shapesGraph) }\">
            <ui:throw ui:message=\"ERROR: edg:PerformSHACLvalidation - no shapes graph(s) provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?validationDataGraph) }\">
            <ui:throw ui:message=\"ERROR: edg:PerformSHACLvalidation - no validation data graph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?validationResultsGraph) }\">
            <ui:throw ui:message=\"ERROR: edg:PerformSHACLvalidation - no validation results graph provided\"/>
        </ui:if>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?dataGraph) }\">
            <!--ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?dataGraph) }\"-->
            <!--ui:dumpResultSet ui:message=\"AAA1: edg:PerformSHACLvalidation\" ui:resultSet=\"{= ?subjects }\"/-->
            <ui:group>
                <sml:ValidateGraph sml:generateSuggestions=\"{= false }\" sml:ignoreImports=\"{= false }\" sml:ignoreSPLConstraints=\"{= true }\" sml:selectQuery=\"{#
                        SELECT DISTINCT ?target
                        WHERE {
                            GRAPH ?validationDataGraph {
                                ?target ?p ?o .
                            } .
                        } }\" sml:shapesGraph=\"{= ?shapesGraph }\">
                    <!--ui:dumpGraph ui:filePath=\"/edg.graph.link/debug/butler-validation-results-{= str(?index) }.ttl\"
  ui:graph=\"{= ?validationResultsGraph }\"/-->
                    <ui:setContext ui:silentTransactions=\"{= true }\">
                        <ui:transaction>
                            <ui:update ui:updateQuery=\"{!
                                    INSERT {
                                        GRAPH ?validationResultsGraph {
                                            ?s ?p ?o .
                                            ?s sh:focusNode ?focusNode .
                                            ?s edg:parent ?depictedParent .
                                        } .
                                    }
                                    WHERE {
                                        {
                                            ?s ?p ?o .
                                        }
                                        UNION
                                        {
                                            ?s sh:focusNode ?o .
                                            OPTIONAL {
                                                GRAPH ?validationDataGraph {
                                                    ?o edg:parent ?depictedParent .
                                                } .
                                            } .
                                        } .
                                    } }\"/>
                        </ui:transaction>
                    </ui:setContext>
                </sml:ValidateGraph>
            </ui:group>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <h3>Exception</h3>
        <p class=\"text-error\">{= ?exception }</p>
        <h3>Stack Trace</h3>
        <p class=\"text-error\">{= ?stackTrace }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Given a subject as a focus instance, a shapes graph, a validation results graph and a maximum reach setting, executes the SHACL validator and stores results in the provided graph." ;
  rdfs:label "perform SHACL validation" ;
  rdfs:subClassOf edg:Elements ;
.
edg:PropertyShapesColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Property Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"propertyShapeLabel\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Namespace\"/>
            <swon:Value arg:name=\"data\" arg:value=\"namespacePrefix\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <!--swon:Object>
<swon:Value arg:name=\"title\" arg:value=\"Property Constraints\"/>
<swon:Value arg:name=\"data\" arg:value=\"propertyConstraints\"/>
<swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
<swon:Value arg:name=\"render\" arg:value=\"detailsLink\"/>
</swon:Object-->
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Description\"/>
            <swon:Value arg:name=\"data\" arg:value=\"desc\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Deactivated\"/>
            <swon:Value arg:name=\"data\" arg:value=\"deactivated\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"render\" arg:value=\"bool\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Node Shapes columns" ;
  rdfs:seeAlso edg:DataTableResultsCallbackForNodeShapes ;
  rdfs:subClassOf edg:DataTableColumns ;
.
edg:ReactiveModelLinkLabel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:association ;
      spl:valueType edg:LogicalRelation ;
      rdfs:comment "The (forward) predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceEntity ;
      spl:valueType edg:LogicalEntity ;
      rdfs:comment "The start of the association" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetEntity ;
      spl:valueType edg:LogicalEntity ;
      rdfs:comment "The end of the association." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:systemLabels=\"{= ui:contextValue(&quot;swaSystemLabels&quot;) }\">
    <div about=\"label {= ?sourceEntity } {= ?targetEntity } {= ?association }\" class=\"swauml-logical-relation-edge-label\">
        <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= edg.reactivegram:createDefaultLink }\">
            <edg.reactivegram:URIpropertyLinkViewer arg:object=\"{= ?association }\" sh:maxCount=\"{= ?maxCount }\" sh:minCount=\"{= ?minCount }\"/>
        </ui:setContext>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Reactive model link label" ;
  rdfs:subClassOf swa:GraphElements ;
.
edg:ShowCardinalities
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:maxCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sh:minCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?minCount) &amp;&amp; bound(?maxCount) }\">
        <span>( {= str(?minCount) } .. {= str(?maxCount) })</span>
    </ui:if>
    <ui:elseif ui:condition=\"{= bound(?minCount) &amp;&amp; (!bound(?maxCount)) }\">
        <span>( {= str(?minCount) } .. * )</span>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= (!bound(?minCount)) &amp;&amp; bound(?maxCount) }\">
        <span>( 0 .. {= str(?maxCount) })</span>
    </ui:elseif>
    <ui:else>
        <span>( 0 .. * )</span>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Show cardinalities" ;
  rdfs:subClassOf swa:Elements ;
.
edg:buildInstanceTagId
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "tagId" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:lowerCase ;
                sp:arg1 [
                    a spif:regex ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "subject" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "_" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:lowerCase ;
                sp:arg1 [
                    a spif:regex ;
                    sp:arg1 [
                        a afn:localname ;
                        sp:arg1 [
                            sp:varName "property" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "_" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "butler-" ;
                sp:arg2 [
                    sp:varName "p1" ;
                  ] ;
                sp:arg3 "-" ;
                sp:arg4 [
                    sp:varName "p2" ;
                  ] ;
                sp:arg5 "-instance" ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "build instance tag id" ;
  rdfs:subClassOf edg:Functions ;
.
edg:buildJSONforInstanceValidationModal
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  ui:prototype """
<ui:group>
    <ui:bind>
        <ui:stringify ui:varName=\"json\">
            <swon:Object>
                <swon:Value arg:name=\"parent\" arg:value=\"{= str(?parent) }\"/>
                <swon:Value arg:name=\"property\" arg:value=\"{= str(?property) }\"/>
                <swon:Value arg:name=\"validationDataGraph\" arg:value=\"{= str(?validationDataGraph) }\"/>
            </swon:Object>
        </ui:stringify>
        <ui:return ui:result=\"{= ?json }\"/>
    </ui:bind>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Constructs a parameters object for passing to the modal" ;
  rdfs:label "build JSON for instance validation modal" ;
  rdfs:subClassOf edg:UIfunctions ;
.
edg:countOfSubjectPropertyValues
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:expression [
                sp:varName "object" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "count of subject property values" ;
  rdfs:subClassOf edg:Functions ;
.
edg:countOfSubjectsForPropertyObjectInGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:expression [
                sp:varName "subject" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "object" ;
                    ] ;
                  sp:predicate [
                      sp:varName "property" ;
                    ] ;
                  sp:subject [
                      sp:varName "subject" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "count of subjects for property object in graph" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getAssociatedAssetClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "associatedAssetClass" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resourceClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "maybeParentAssetClass" ;
              ] ;
            sp:predicate swa:directRelevantPropertyOfClass ;
            sp:subject [
                sp:varName "association" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "maybeParentAssetClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "resourceClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "propertyShape" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "maybeParentAssetClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "association" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "associatedAssetClass" ;
              ] ;
            sp:predicate sh:class ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:association ;
      spl:valueType edg:LogicalRelation ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:LogicalEntity ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType rdfs:Class ;
  vaem:todo "Handle the situation where there is no instance of the association" ;
  rdfs:label "get associated asset class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getValidationShapesGraphSetting
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "maybeShapesGraph" ;
                          ] ;
                        sp:predicate edg:validationShapesGraph ;
                        sp:subject [
                            sp:varName "projectType" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          sp:varName "maybeShapesGraph" ;
                        ] ;
                      sp:arg2 [
                          a smf:configParam ;
                          arg:param "dataButlerShapesGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "grsph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType edg:ProjectType ;
      rdfs:comment "The ProjectType to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Gets the validation graphs setting frome either project type instance or the EDG configuration page." ;
  rdfs:label "get validation shapes graph setting" ;
  rdfs:subClassOf spin:Functions ;
.
edg:nodeCarriesViolations
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        a sp:Count ;
                        sp:expression [
                            sp:varName "someResource" ;
                          ] ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 false ;
                sp:arg3 true ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "validationResultsGraph" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "someResource" ;
                      ] ;
                    sp:predicate sh:focusNode ;
                    sp:subject [
                        sp:varName "someResult" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parent" ;
                      ] ;
                    sp:predicate edg:parent ;
                    sp:subject [
                        sp:varName "someResult" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              a sp:NamedGraph ;
                              sp:elements (
                                  [
                                    sp:object [
                                        sp:varName "parent" ;
                                      ] ;
                                    sp:predicate [
                                        sp:varName "property" ;
                                      ] ;
                                    sp:subject [
                                        sp:varName "focusNode" ;
                                      ] ;
                                  ]
                                ) ;
                              sp:graphNameNode [
                                  sp:varName "validationDataGraph" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
            sp:graphNameNode [
                sp:varName "validationResultsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationDataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:validationResultsGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "node carries violations" ;
  rdfs:subClassOf edg:Functions ;
.
edg:parent
  a rdf:Property ;
  rdfs:label "parent" ;
  rdfs:subPropertyOf sp:arg ;
.
edg:propertyShapeFunctor
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "propertyShape" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "propertyShape" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to look for." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Can be used in conjunction with spif:walkObjects to get the \"first\" declared sh:property of a given property (?property) at a given class (?class)." ;
  rdfs:isDefinedBy <http://edg.graph.link/swp/1.0/butler> ;
  rdfs:label "property shape functor" ;
  rdfs:subClassOf swa:ClassFunctorFunctions ;
.
arg:associations
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:classNodeId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:column
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:invalidInstancesCount
  a rdf:Property ;
  rdfs:label "invalid instances count" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isInShowEmptyNodesMode
  a rdf:Property ;
  rdfs:label "is in show empty nodes mode" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isInValidateMode
  a rdf:Property ;
  rdfs:label "is in validate mode" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:maxValidationReach
  a rdf:Property ;
  rdfs:label "max validation reach" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:onlyShowInvalidInstances
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:onlyShowInvalidsId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:propertyValueCount
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:reactiveNodeFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:showEmptyNodes
  a rdf:Property ;
  rdfs:label "show empty nodes" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:showOKnodes
  a rdf:Property ;
  rdfs:label "show OK nodes" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:validationDataGraph
  a rdf:Property ;
  rdfs:label "validation data graph" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:validationResults
  a rdf:Property ;
  rdfs:label "validation results" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:validationResultsGraph
  a rdf:Property ;
  rdfs:label "validation results graph" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:violationsCount
  a rdf:Property ;
  rdfs:label "violations count" ;
  rdfs:subPropertyOf sp:arg ;
.
css:Select_1
  a sp:Select ;
.
[
  rdfs:comment "propertyShape" ;
].
[
  rdfs:comment "shapesGraph" ;
].
[
  rdfs:comment "the graph holding validation check results" ;
].
