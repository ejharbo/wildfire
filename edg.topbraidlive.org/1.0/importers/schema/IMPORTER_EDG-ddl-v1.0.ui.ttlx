# baseURI: http://edg.topbraidlive.org/1.0/importers/ddl
# imports: http://edg.topbraidlive.org/1.0/importers/schema

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraidlive.org/1.0/importers/ddl>
  a owl:Ontology ;
  vaem:hasGraphMetadata <http://edg.topbraidlive.org/importers/ddl/GMD_ddl> ;
  owl:imports <http://edg.topbraidlive.org/1.0/importers/schema> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
edg-importer:DDLImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:ImportDDLFilePage }\">
    <teamwork:ActionLink arg:comment=\"Imports {= IF((teamwork:getProjectType(?projectGraph) = edg:DatatypesProjectType), &quot;datatype definitions&quot;, &quot;database schema definitions&quot;) } from a SQL file containing DDL statements.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-sql.svg\" arg:link=\"{= ?link }\" arg:title=\"Import DDL File\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Adds an import function for SQL files containing DDL statements to a project type." ;
  rdfs:label "Import DDL file plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
edg-importer:ImportDDLFilePage
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:manager, ?teamGraph)) }\">
            <teamwork:ImportErrorPage arg:message=\"You need to be manager of this {= IF(bound(?tag), &quot;working copy&quot;, ?projectType) } to import files into it.\" ui:args=\"*\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext let:isDatatypesModel=\"{= ?projectType = edg:DatatypesProjectType }\" ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
            <h1>Import DDL File</h1>
            <p>This will add {= IF(?isDatatypesModel, \"datatype definitions\", \"schema definitions\") } from a SQL file to the current {= IF(bound(?tag), \"working copy\", teamwork:singularProjectTypeLabel(?projectType)) }.</p>
            <form action=\"swp\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                <input name=\"_viewClass\" type=\"hidden\" value=\"{= edg-importer:ImportDDLFileService }\"/>
                <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                <div class=\"form-group\">
                    <label for=\"file\">Input file</label>
                    <input id=\"file\" name=\"file\" required=\"required\" type=\"file\"/>
                </div>
                <ui:if ui:condition=\"{= !?isDatatypesModel }\">
                    <div class=\"form-group\">
                        <label for=\"dbName\">Database name</label>
                        <div class=\"row\">
                            <div class=\"col-xs-3\">
                                <input aria-describedby=\"dbNameHelp\" class=\"form-control input-sm\" id=\"dbName\" name=\"dbName\" type=\"text\"/>
                            </div>
                        </div>
                        <p class=\"help-block\" id=\"dbNameHelp\">Optional database/schema name; by default, the file name will be used</p>
                    </div>
                </ui:if>
                <edg-importer:DatatypesProjectSelector ui:args=\"*\"/>
                <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                <div class=\"form-group\">
                    <button class=\"btn btn-primary\" id=\"submitButton\" type=\"submit\">Import</button>
                </div>
            </form>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that can be used to import schema definitions from a SQL file containing DDL statements into the current project." ;
  rdfs:label "Import DDL file page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:ImportDDLFileService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesModel ;
      spl:valueType owl:Ontology ;
      rdfs:comment "Only relevant if the project graph is a Data Asset Model, otherwise it is ignored. Specifies the graph to import datatypes into. May be the same as the project graph or tag. If not present, datatypes will not be imported." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dbName ;
      spl:valueType xsd:string ;
      rdfs:comment "A database or schema name to distinguish this physical data model from others. Optional; defaults to the file name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The file name, if available." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:file ;
      spl:valueType xsd:string ;
      rdfs:comment "The contents of a SQL file" ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?datatypesModel) }\">
    <teamwork:ImportErrorPage arg:message=\"No datatypes model selected.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?file) }\">
    <teamwork:ImportErrorPage arg:message=\"No file selected.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= bound(?datatypesModel) &amp;&amp; (!smf:canWrite(?datatypesModel)) }\">
    <teamwork:ImportErrorPage arg:message=\"No write permission for the specified datatypes model.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:databaseName=\"{= COALESCE(?dbName, edg-importer:stripFileExtension(?fileName)) }\" let:datatypesProject=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?projectGraph, teamwork:masterGraph(teamwork:graphIdFromGraph(?datatypesModel))) }\" let:datatypesTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ui:currentQueryGraph(), ?datatypesModel) }\" let:pageType=\"import-page\" let:projectTypeLabel=\"{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\" let:schemaProject=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, ?projectGraph) }\" let:schemaTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, ui:currentQueryGraph()) }\" let:title=\"Import DDL File\">
    <ui:try>
        <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
            <sml:ConvertDDLToRDF sml:baseURI=\"{= edg-importer:getDefaultNamespace(?schemaProject) }\" sml:databaseName=\"{= ?databaseName }\" sml:datatypesBaseURI=\"{= edg-importer:getDefaultNamespace(?datatypesTarget) }\" sml:text=\"{= ?file }\" sml:withDatatypeLinks=\"{= bound(?datatypesTarget) }\" sml:withDatatypes=\"{= false }\" sml:withSchema=\"{= true }\">
                <edg-importer:CopyQueryGraph arg:targetGraph=\"{= ui:tempGraphSchema }\"/>
            </sml:ConvertDDLToRDF>
            <ui:if ui:condition=\"{= edg-importer:graphsHaveSharedInstance(ui:tempGraphSchema, ?schemaTarget, edg:PhysicalDataModel) }\">
                <ui:throw ui:message=\"DB_EXISTS\"/>
            </ui:if>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
            <sml:ConvertDDLToRDF sml:baseURI=\"{= edg-importer:getDefaultNamespace(?datatypesProject) }\" sml:databaseName=\"{= ?databaseName }\" sml:text=\"{= ?file }\" sml:withDatatypeLinks=\"{= false }\" sml:withDatatypes=\"{= true }\" sml:withSchema=\"{= false }\">
                <edg-importer:RemoveExistingResourcesFromQueryGraph arg:graph=\"{= ?datatypesTarget }\"/>
                <edg-importer:CopyQueryGraph arg:targetGraph=\"{= ui:tempGraphDatatypes }\"/>
            </sml:ConvertDDLToRDF>
        </ui:if>
        <edg-importer:PostProcessImportedDDL arg:datatypesGraph=\"{= ui:tempGraphDatatypes }\" arg:datatypesTargetGraph=\"{= ?datatypesTarget }\" arg:schemaGraph=\"{= ui:tempGraphSchema }\" arg:schemaTargetGraph=\"{= ?schemaTarget }\"/>
        <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
            <ui:setContext ui:queryGraph=\"{= edg-importer:withHistory(?schemaTarget, ?record) }\">
                <ui:transaction ui:logMessage=\"Import DDL file {= ?fileName }\">
                    <edg-importer:CopyIntoQueryGraph arg:sourceGraph=\"{= ui:tempGraphSchema }\"/>
                </ui:transaction>
            </ui:setContext>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
            <ui:setContext ui:queryGraph=\"{= edg-importer:withHistory(?datatypesTarget, ?record) }\">
                <ui:transaction ui:logMessage=\"Import DDL file {= ?fileName }\">
                    <edg-importer:CopyIntoQueryGraph arg:sourceGraph=\"{= ui:tempGraphDatatypes }\"/>
                </ui:transaction>
            </ui:setContext>
        </ui:if>
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" ui:args=\"*\">
            <h1>DDL Import Completed</h1>
            <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
                <p>Schema definitions imported into <em>{= teamwork:projectLabel(?schemaProject) }</em>:</p>
                <edg-importer:InstanceCountReport arg:graph=\"{= ui:tempGraphSchema }\" arg:labelGraph=\"{= ui:graphWithImports(?schemaTarget) }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
                <p>Datatype definitions imported into <em>{= teamwork:projectLabel(?datatypesProject) }</em>:</p>
                <edg-importer:InstanceCountReport arg:graph=\"{= ui:tempGraphDatatypes }\" arg:labelGraph=\"{= ui:graphWithImports(?datatypesTarget) }\"/>
            </ui:if>
            <teamwork:LinkToProblemsAndSuggestionsReport ui:args=\"*\"/>
            <teamwork:ButtonReturnToProjectOrTagPage ui:args=\"*\"/>
        </teamwork:Chrome>
    </ui:try>
    <ui:catch>
        <ui:if ui:condition=\"{= CONTAINS(?exception, &quot;DB_EXISTS&quot;) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                <ui:group let:blockerClassLabel=\"{= ui:label(edg:PhysicalDataAsset) }\">
                    <teamwork:ImportErrorPage arg:message=\"A {= ?blockerClassLabel } with this name was already imported/created in this {= ?projectTypeLabel }.\" arg:title=\"Database already exists\" ui:args=\"*\">
                        <p class=\"text-muted\">Try one of these:</p>
                        <ul class=\"text-muted\">
                            <li>Specify a different name</li>
                            <li>Delete the {= ?blockerClassLabel } from this {= ?projectTypeLabel }</li>
                            <li>Clear this {= ?projectTypeLabel } on its&nbsp;<em>
                                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                        <a href=\"{= ?link }\">Manage</a>
                                    </ui:createLink>
                                </em> tab</li>
                            <li>Import the file into a different {= ?projectTypeLabel }</li>
                        </ul>
                    </teamwork:ImportErrorPage>
                </ui:group>
            </ui:setContext>
        </ui:if>
        <ui:elseif ui:condition=\"{= CONTAINS(?stackTrace, &quot;SchemaImportException&quot;) }\">
            <teamwork:ImportErrorPage arg:message=\"The input file could not be parsed. Error:\" arg:title=\"DDL Import Failed\" ui:args=\"*\">
                <pre>{= STRBEFORE(STRAFTER(?stackTrace, \"SchemaImportException: \"), \"Was expecting one of\") }</pre>
            </teamwork:ImportErrorPage>
        </ui:elseif>
        <ui:else>
            <teamwork:ImportErrorPage arg:message=\"{= REPLACE(?exception, &quot;.*SWPException: &quot;, &quot;&quot;) }\" arg:title=\"DDL Import Failed\" ui:args=\"*\">
                <pre class=\"hidden\">{= ?stackTrace }</pre>
            </teamwork:ImportErrorPage>
        </ui:else>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A service that processes an uploaded SQL file by parsing its DDL statements and storing an RDF representation in a project or tag graph. If the project is an EDG Datatypes Model, only datatype definitons will be imported into the project. Otherwise, schema definitions will be imported into the project, and optionally the datatype definitions can be imported into a separately specified project." ;
  rdfs:label "Import DDL file service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:PostProcessImportedDDL
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "If datatype definitions are being imported, then this is a temporary graph containing the imported definitions. The post-processor may modify this graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesTargetGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "If datatype definitions are being imported, then this is the target Teamwork project or tag that we ultimately will import into. Do not modify!" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:schemaGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "If schema definitions are being imported, then this is a temporary graph containing the imported definitions. The post-processor may modify this graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:schemaTargetGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "If schema definitions are being imported, then this is the target Teamwork project or tag that we ultimately will import into. Do not modify!" ;
    ] ;
  ui:prototype """
<ui:group/>
"""^^ui:Literal ;
  rdfs:comment "An operation for post-processing after a DDL import. The default implementation does nothing; it is intended for overriding. Temporary graphs containing the parsed schema definitions and datatype definitions are passed in (?schemaGraph and ?datatypesGraph). Implementations may do post-processing by modifying these graphs. Either can be missing, or they could be the same graph. The target graphs that we are importing into are also given, in case we need to refer to existing definitions in these graphs or in their includes, but they should not be modified by the post-processing operation. Overriding implementations can use ui:throw to abort the import." ;
  rdfs:label "post-process imported DDL" ;
  rdfs:subClassOf ui:Operations ;
.
<http://edg.topbraidlive.org/importers/ddl/GMD_ddl>
  a vaem:GraphMetaData ;
  dcterms:modified "2016-12-18"^^xsd:date ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  vaem:hasGraphRole vaem:ImporterGraph ;
  vaem:hasLicenseType <voag:TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:hasOwner vaem:TopQuadrant ;
  vaem:hasSteward vaem:TopQuadrant ;
  vaem:isMetadataFor <http://edg.topbraidlive.org/1.0/importers/ddl> ;
  vaem:name "EDG" ;
  vaem:namespace "http://edg.topbraid.solutions/model/" ;
  vaem:namespacePrefix "edg" ;
  vaem:owner "TopQuadrant, Inc." ;
  vaem:releaseDate "2016-12-18"^^xsd:date ;
  vaem:revision "1.0" ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:author ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:withAttributionTo "Any references to this ontology should give attribution to TopQuadrant, Inc." ;
.
