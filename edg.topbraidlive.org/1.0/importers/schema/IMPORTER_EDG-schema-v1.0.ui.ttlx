# baseURI: http://edg.topbraidlive.org/1.0/importers/schema
# imports: http://edg.topbraid.solutions/1.0/project/datatypes
# imports: http://edg.topbraid.solutions/1.0/schema/datamodels
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraidlive.org/1.0/importers/schema>
  a owl:Ontology ;
  vaem:hasGraphMetadata <http://edg.topbraidlive.org/importers/ddl/GMD_ddl> ;
  owl:imports <http://edg.topbraid.solutions/1.0/project/datatypes> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/datamodels> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
edg-importer:CopyIntoQueryGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A readable graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:update ui:updateQuery=\"{!
        INSERT {
            ?s ?p ?o .
        }
        WHERE {
            GRAPH ?sourceGraph {
                ?s ?p ?o .
            } .
        } }\"/>
"""^^ui:Literal ;
  rdfs:comment "Inserts the contents of the specified source graph into the current query graph." ;
  rdfs:label "Copy into query graph" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:CopyQueryGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:targetGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A writable graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:update ui:updateQuery=\"{!
        INSERT {
            GRAPH ?targetGraph {
                ?s ?p ?o .
            } .
        }
        WHERE {
            ?s ?p ?o .
        } }\"/>
"""^^ui:Literal ;
  rdfs:comment "Inserts the contents of the current query graph into the specified target graph." ;
  rdfs:label "Copy query graph" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:DatatypesProjectSelector
  a ui:NodeClass ;
  ui:prototype """
<ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= edg-importer:GetIncludedDatatypeModels }\">
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:GeneralProjectTab }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
        <div class=\"form-group\" let:numIncludes=\"{= spr:rowCount(?rs) }\">
            <label for=\"datatypesModel\">Model for Datatype Definitions</label>
            <div class=\"row\">
                <div class=\"col-xs-6\">
                    <select aria-describedby=\"datatypesModelHelp\" class=\"form-control input-sm\" id=\"datatypesModel\" name=\"datatypesModel\">
                        <ui:if ui:condition=\"{= ?numIncludes &gt;= 2 }\">
                            <option disabled=\"disabled\" selected=\"selected\">Select&hellip;</option>
                        </ui:if>
                        <optgroup label=\"Included Datatypes Models\">
                            <ui:forEach ui:bindVars=\"?includedProjectGraph, ?label\" ui:resultSet=\"{= ?rs }\">
                                <option selected=\"{= IF((?numIncludes = 1), &quot;selected&quot;, ?notSelected) }\" value=\"{= ?includedProjectGraph }\">
                                    <ui:if ui:condition=\"{= bound(?tag) }\">Production copy of </ui:if>{= ?label }</option>
                            </ui:forEach>
                            <ui:if ui:condition=\"{= ?numIncludes = 0 }\">
                                <option disabled=\"disabled\">(None)</option>
                            </ui:if>
                        </optgroup>
                        <optgroup label=\"Data Asset Models (not recommended)\">
                            <option selected=\"{= IF((?numIncludes = 0), &quot;selected&quot;, ?notSelected) }\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\">{= teamwork:projectLabel(?projectGraph) }</option>
                        </optgroup>
                    </select>
                </div>
            </div>
            <div class=\"help-block\" id=\"datatypesModelHelp\">
                <p>Datatypes will be imported into the selected model if they don't yet exist.</p>
                <p>Only Datatypes Models included by reference into this Data Asset Model are shown. See <em>Includes</em> on the <em>
                        <a href=\"{= ?link }\">{= swa:labelInGraph(teamwork:GeneralProjectTab, ui:graph) }</a>
                    </em> tab.</p>
            </div>
        </div>
    </ui:createLink>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "A form group that allows selection of one of the datatypes projects included into this project." ;
  rdfs:label "datatypes project selector" ;
  rdfs:subClassOf teamwork:TagElements ;
.
edg-importer:ErrorReport
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Instances defined in this graph will be counted. Defaults to the current query graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Class labels will be pulled from this graph. Defaults to the current query graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\">
    <ui:group letrs:errors=\"{#
            SELECT ?entity ?errMsg
            WHERE {
                ?entity edg:errorMsg ?errMsg .
            } }\">
        <ui:if ui:condition=\"{= spr:rowCount(?errors) &gt; 0 }\">
            <p>
                <em>Errors and Warnings:</em>
            </p>
            <table class=\"table table-sm table-bordered swa-width-auto\">
                <tr>
                    <th>Resource</th>
                    <th>Error</th>
                </tr>
                <ui:setContext ui:queryGraph=\"{= COALESCE(?labelGraph, ui:currentQueryGraph) }\">
                    <ui:forEach ui:resultSet=\"{= ?errors }\">
                        <tr>
                            <td>{= ui:label(?entity) }</td>
                            <td>{= ?errMsg }</td>
                        </tr>
                    </ui:forEach>
                </ui:setContext>
            </table>
        </ui:if>
        <ui:else>
            <p>
                <em>No Errors.</em>
            </p>
        </ui:else>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Display any errors encountered during the import" ;
  rdfs:label "Import error report" ;
  rdfs:subClassOf teamwork:Elements ;
.
edg-importer:GetIncludedDatatypeModels
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "includedProjectGraph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "includedProjectGraph" ;
                    ] ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "projectGraph" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:and ;
                      sp:arg1 [
                          a teamwork:hasTeamGraph ;
                          sp:arg1 [
                              sp:varName "includedProjectGraph" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a smf:canRead ;
                          sp:arg1 [
                              sp:varName "includedProjectGraph" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:eq ;
                      sp:arg1 [
                          a teamwork:getProjectType ;
                          arg:projectGraph [
                              sp:varName "includedProjectGraph" ;
                            ] ;
                        ] ;
                      sp:arg2 edg:DatatypesProjectType ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "includedProjectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "includedProjectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The Teamwork project graph whose includes to search." ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns any graphs included into the given project graph that are (i) under Teamwork control, (ii) readable by the current user, and (iii) are EDG Datatypes Models." ;
  rdfs:label "Get included datatype models" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
edg-importer:ImportDatatypeFamily
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:targetModel=\"{= ui:graphWithImports(?targetGraph) }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?dt edg:belongsTo ?dtftName .
            }
            INSERT {
                ?dt edg:belongsTo ?dtft .
                GRAPH ?targetGraph {
                    ?targetGraph owl:imports ?typeGraph .
                } .
            }
            WHERE {
                ?dt a edg:PhysicalDatatype .
                ?dt edg:belongsTo ?dtftName .
                {
                    SELECT ?dtft ?typeGraph ?dtftName
                    WHERE {
                        GRAPH ?targetModel {
                            ?dtft a edg:DatatypeFamilyType .
                            ?dtft dtype:literal ?dtftName .
                            ?dtft edg:graph ?typeGraph .
                        } .
                    }
                } .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Looks up the DataContainerType from the database product name." ;
  rdfs:label "Link Data Container" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:InstanceCountReport
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Instances defined in this graph will be counted. Defaults to the current query graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Class labels will be pulled from this graph. Defaults to the current query graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\">
    <ui:group letrs:classCounts=\"{#
            SELECT ?class (COUNT(?class) AS ?count)
            WHERE {
                ?x a ?class .
            }
            GROUP BY ?class
            HAVING (?count &gt; 0)
            ORDER BY DESC (COUNT(?class)) }\">
        <ui:if ui:condition=\"{= spr:rowCount(?classCounts) &gt; 0 }\">
            <table class=\"table table-sm table-bordered swa-width-auto\">
                <tr>
                    <th>Asset type</th>
                    <th>Imported instances</th>
                </tr>
                <ui:setContext ui:queryGraph=\"{= COALESCE(?labelGraph, ui:currentQueryGraph) }\">
                    <ui:forEach ui:resultSet=\"{= ?classCounts }\">
                        <tr>
                            <td>{= ui:label(?class) }</td>
                            <td class=\"right\">{= ?count }</td>
                        </tr>
                    </ui:forEach>
                </ui:setContext>
            </table>
        </ui:if>
        <ui:else>
            <p>
                <em>None: No new datatypes found.</em>
            </p>
        </ui:else>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Renders a table that shows the number of instances for each class used in a graph." ;
  rdfs:label "Imported classes report" ;
  rdfs:subClassOf teamwork:Elements ;
.
edg-importer:LinkDataContainer
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:update ui:updateQuery=\"{!
        DELETE {
            ?db edg:dataSource ?dbProdName .
        }
        INSERT {
            ?db edg:dataContainerType ?dct .
        }
        WHERE {
            ?db a edg:RelationalDatabase .
            ?db edg:dataSource ?dbProdName .
            {
                SELECT ?dct ?litval
                WHERE {
                    GRAPH ?targetGraph {
                        ?dct a edg:DataContainerType .
                        ?dct dtype:literal ?litval .
                    } .
                }
            } .
            FILTER (?litval = ?dbProdName) .
        } }\"/>
"""^^ui:Literal ;
  rdfs:comment "Looks up the DataContainerType from the database product name." ;
  rdfs:label "Link Data Container" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:RemoveExistingDBs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group letrs:dbs=\"{#
        SELECT ?db
        WHERE {
            GRAPH ?sourceGraph {
                ?db a edg:RelationalDatabase .
            } .
        } }\">
    <ui:forEach ui:resultSet=\"{= ?dbs }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?col ?p ?o .
                    ?o ?q ?z .
                }
                WHERE {
                    ?col a edg:DatabaseColumn .
                    ?col edg:columnOf ?table .
                    ?table ?mp ?db .
                    ?mp (rdfs:subPropertyOf)* edg:partOf .
                    ?col ?p ?o .
                    OPTIONAL {
                        ?o ?q ?z .
                        FILTER isBlank(?o) .
                    } .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?table ?tp ?to .
                }
                WHERE {
                    ?table ?mp ?db .
                    ?mp (rdfs:subPropertyOf)* edg:partOf .
                    ?table ?tp ?to .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?pdm ?p ?o .
                }
                WHERE {
                    ?pdm a edg:PhysicalDataModel .
                    ?pdm edg:realizedAs ?db .
                    ?pdm ?p ?o .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?db ?p ?o .
                }
                WHERE {
                    ?db ?p ?o .
                } }\"/>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Deletes all edg:RelationalDatabase found in the source graph, from the query graph." ;
  rdfs:label "Remove Existing Databases" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:RemoveExistingResourcesFromQueryGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph that will be checked for existing resources." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:update ui:updateQuery=\"{!
        DELETE {
            ?s ?p ?o .
        }
        WHERE {
            ?s ?p ?o .
            {
                SELECT DISTINCT ?s
                WHERE {
                    GRAPH ?graph {
                        ?s ?x ?y .
                    } .
                }
            } .
        } }\"/>
"""^^ui:Literal ;
  rdfs:comment "Removes resources from the query graph if they already exist in some other graph. A resource is deemed to exist if it is the subject of any triple." ;
  rdfs:label "Remove existing resources from query graph" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:SaveSampleCount
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The ontology to same the value in." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sampleCount ;
      spl:valueType xsd:integer ;
      rdfs:comment "The new profile sample count." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:if ui:condition=\"{= bound(?sampleCount) }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?projectGraph edg:profileSampleCount ?old .
            }
            WHERE {
                ?projectGraph edg:profileSampleCount ?old .
            } }\"/>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?projectGraph edg:profileSampleCount ?sampleCount .
            }
            WHERE {
            } }\"/>
</ui:if>
"""^^ui:Literal ;
  rdfs:comment "Inserts the last used value of the profile sample count." ;
  rdfs:label "Save sample count" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:getCurrentQueryGraphWithHistory
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:if ;
            sp:arg1 [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:currentTagId ;
                  ] ;
                sp:arg2 false ;
              ] ;
            sp:arg2 [
                a ui:currentQueryGraph ;
              ] ;
            sp:arg3 [
                a teamwork:masterGraphForCurrentUser ;
                arg:masterGraph [
                    a ui:currentQueryGraph ;
                  ] ;
              ] ;
          ]
        ) ;
      sp:where () ;
    ] ;
  rdfs:comment "Returns the current query graph with change tracking enabled. If it's a working copy, return it immediately. If it's a master graph, return its buffering graph for the current user. Otherwise, behaviour is undefined." ;
  rdfs:label "get current query graph with history" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:getDefaultNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "namespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
                sp:arg2 swa:defaultNamespace ;
                sp:arg3 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeDefaultNamespace" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeDefaultNamespace" ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 "/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The project whose default namespace to return." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the default namespace of a Teamwork project. This is the namespace that will be used when new resources are created in the project." ;
  rdfs:label "get default namespace" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:getSampleCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a spl:objectInGraph ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
            sp:arg2 edg:profileSampleCount ;
            sp:arg3 [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The project whose default namespace to return." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:comment "Returns the value of profileSampleCount property for the project." ;
  rdfs:label "get sample count" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:graphsHaveSharedInstance
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "targetClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph1" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "targetClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph2" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:graph1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The first graph to compare." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:graph2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The second graph to compare." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:targetClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class whose instances will be compared among the two graphs." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "True if both specified graphs share an instance of the specified class." ;
  rdfs:label "graphs have shared instance" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:isDatatypesModel
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object edg:DatatypesProject ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Is the specified teamwork project an EDG Datatypes Model?" ;
  rdfs:label "is datatypes model" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:stripFileExtension
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a spif:replaceAll ;
            sp:arg1 [
                sp:varName "fileName" ;
              ] ;
            sp:arg2 "\\.[^.]+$" ;
            sp:arg3 "" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Removes a file extension from the end of a file name string." ;
  rdfs:label "strip file extension" ;
  rdfs:subClassOf spin:Functions ;
.
edg-importer:withHistory
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:strstarts ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                    sp:arg2 "urn:x-evn-master:" ;
                  ] ;
                sp:arg2 [
                    a teamwork:masterGraphForCurrentUser ;
                    arg:masterGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "x" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "record" ;
                  ] ;
                sp:arg2 [
                    sp:varName "x" ;
                  ] ;
                sp:arg3 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "y" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "y" ;
                  ] ;
                sp:arg2 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Are changes being recorded?" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph whose history-enabled version is to be returned." ;
    ] ;
  rdfs:comment "Returns the specified graph with change tracking enabled. If it's a working copy, return it immediately. If it's a master graph, return its team buffering graph for the current user. Otherwise, behaviour is undefined." ;
  rdfs:label "with history" ;
  rdfs:subClassOf spin:Functions ;
.
<http://edg.topbraidlive.org/importers/schema/GMD_schema>
  a vaem:GraphMetaData ;
  dcterms:modified "2017-10-23"^^xsd:date ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  vaem:hasGraphRole vaem:ImporterGraph ;
  vaem:hasLicenseType <voag:TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:hasOwner vaem:TopQuadrant ;
  vaem:hasSteward vaem:TopQuadrant ;
  vaem:isMetadataFor <http://edg.topbraidlive.org/1.0/importers/ddl> ;
  vaem:name "EDG" ;
  vaem:namespace "http://edg.topbraid.solutions/model/" ;
  vaem:namespacePrefix "edg" ;
  vaem:owner "TopQuadrant, Inc." ;
  vaem:releaseDate "2016-12-18"^^xsd:date ;
  vaem:revision "1.0" ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:author ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:withAttributionTo "Any references to this ontology should give attribution to TopQuadrant, Inc." ;
.
arg:datatypesGraph
  a rdf:Property ;
  rdfs:label "datatypes graph" ;
.
arg:datatypesModel
  a rdf:Property ;
  rdfs:label "datatypes model" ;
  rdfs:range owl:Ontology ;
.
arg:datatypesTargetGraph
  a rdf:Property ;
  rdfs:label "datatypes target graph" ;
.
arg:dbName
  a rdf:Property ;
  rdfs:range xsd:string ;
.
arg:labelGraph
  a rdf:Property ;
  rdfs:label "label graph" ;
  rdfs:range rdfs:Resource ;
.
arg:schemaGraph
  a rdf:Property ;
  rdfs:label "schema graph" ;
.
arg:schemaTargetGraph
  a rdf:Property ;
  rdfs:label "schema target graph" ;
.
[
  a sp:Select ;
  sp:resultVariables (
      [
        sp:varName "namespace" ;
      ]
    ) ;
  sp:where (
      [
        a sp:Filter ;
        sp:expression [
            a sp:bound ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a spl:objectInGraph ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
            sp:arg2 swa:defaultNamespace ;
            sp:arg3 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "maybeDefaultNamespace" ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a sp:coalesce ;
            sp:arg1 [
                sp:varName "maybeDefaultNamespace" ;
              ] ;
            sp:arg2 [
                a sp:concat ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 "#" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "namespace" ;
          ] ;
      ]
    ) ;
].
[
  a sp:Select ;
  sp:resultVariables (
      [
        sp:varName "namespace" ;
      ]
    ) ;
  sp:where (
      [
        a sp:Filter ;
        sp:expression [
            a sp:bound ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a spl:objectInGraph ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
            sp:arg2 swa:defaultNamespace ;
            sp:arg3 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "maybeDefaultNamespace" ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a sp:coalesce ;
            sp:arg1 [
                sp:varName "maybeDefaultNamespace" ;
              ] ;
            sp:arg2 [
                a sp:concat ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 "#" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "namespace" ;
          ] ;
      ]
    ) ;
].
[
  a sp:Select ;
  sp:resultVariables (
      [
        sp:varName "namespace" ;
      ]
    ) ;
  sp:where (
      [
        a sp:Filter ;
        sp:expression [
            a sp:bound ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a spl:objectInGraph ;
            sp:arg1 [
                sp:varName "projectGraph" ;
              ] ;
            sp:arg2 swa:defaultNamespace ;
            sp:arg3 [
                sp:varName "projectGraph" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "maybeDefaultNamespace" ;
          ] ;
      ]
      [
        a sp:Bind ;
        sp:expression [
            a sp:coalesce ;
            sp:arg1 [
                sp:varName "maybeDefaultNamespace" ;
              ] ;
            sp:arg2 [
                a sp:concat ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 "#" ;
              ] ;
          ] ;
        sp:variable [
            sp:varName "namespace" ;
          ] ;
      ]
    ) ;
].
