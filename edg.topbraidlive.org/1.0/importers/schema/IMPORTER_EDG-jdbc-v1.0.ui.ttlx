# baseURI: http://edg.topbraidlive.org/1.0/importers/jdbc
# imports: http://edg.topbraidlive.org/1.0/importers/schema
# prefix: jdbc

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraidlive.org/1.0/importers/jdbc>
  a owl:Ontology ;
  rdfs:comment "Components for importing RDBMS schemas via JDBC" ;
  rdfs:label "JDBC Import" ;
  owl:imports <http://edg.topbraidlive.org/1.0/importers/schema> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
edg-importer:CreateJobLabelElement
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<uix:asAdmin>
    <div class=\"form-group\">
        <label for=\"label-text\">Name</label>
        <div class=\"row\">
            <div class=\"col-xs-3\">
                <input autocomplete=\"off\" class=\"form-control input-sm\" id=\"jobName\" name=\"jobName\" type=\"text\" value=\"{= ?value }\"/>
            </div>
        </div>
        <span class=\"teamwork-create-project-label-element-input-error\" id=\"label-error\">&nbsp;Warning: Label already used.</span>
        <p class=\"help-block\" id=\"nameHelp\">The unique name of this import job.</p>
        <script letrs:labels=\"{#
                SELECT ?label
                WHERE {
                    rdf:nil teamwork:graphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
                    BIND (teamwork:projectLabel(?projectGraph) AS ?label) .
                } }\">
var usedLabels = <swon:RSArray arg:resultSet=\"{= ?labels }\"/>;
$(\"#label-text\").keyup(function () { $(\"#label-error\").css(\"display\", $.inArray($(\"#label-text\").val(), usedLabels) &gt;= 0 ? \"inline\" : \"none\");  });</script>
    </div>
</uix:asAdmin>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
edg-importer:DeleteJobService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:job ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <sml:ScheduleJob sml:cronExpression=\"\" sml:jobURI=\"{= ?job }\"/>
        <ui:if ui:condition=\"{#
                ASK 
                WHERE {
                    ?job scheduler:scheduledJobStatus ( ?schedule ?nextExecution ?currentExecutionId ?currentRunTime ?userURI ) .
                } }\"/>
        <ui:else>
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?job ?p ?o .
                    }
                    WHERE {
                        ?job ?p ?o .
                    } }\"/>
        </ui:else>
    </ui:setContext>
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:SelectJobPage }\">
        <swa:RedirectAfterPost arg:url=\"{= ?link }\"/>
    </ui:createLink>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A service to remove a JDBC import job definition from the tch file.  Also unschedules any pending executions of it." ;
  rdfs:label "Delete Job Service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:DeleteSamplesDialog
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<div id=\"div-delete-samples\" title=\"Delete Samples\">
    <ui:setContext ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT (COUNT(DISTINCT ?table) AS ?tables) (COUNT(DISTINCT ?row) AS ?rows) (COUNT(?val) AS ?values)
                WHERE {
                    ?table edg:dataSample ?row .
                    ?row ?prop ?val .
                } }\">
            <ui:if ui:condition=\"{= ?rows &gt; 0 }\">
                <div>Found {= ?rows } sample rows in {= ?tables } entitities.</div>
                <div>
                    <input checked=\"true\" name=\"keep\" type=\"radio\" value=\"none\"/>
                    <span> Delete all sample data.</span>
                </div>
                <div>
                    <input name=\"keep\" type=\"radio\" value=\"some\"/>
                    <span class=\"swa-checkbox-span\"> Truncate samples to <input id=\"sampleCount\" name=\"sampleCount\" type=\"text\" value=\"5\"/> rows per entity.</span>
                    <p class=\"countError text-danger ui-helper-hidden-accessible\">Please enter a positive integer.</p>
                </div>
                <div class=\"swa-dialog-button-bar\">
                    <button class=\"btn btn-default btn-xs\" onclick=\"teamwork.confirmDeleteSamples($('input[name=keep]:checked').val(), $('#sampleCount').val(), '{= ?projectGraph }', '{= ?tag }')\">OK</button>
                    <swa:Space/>
                    <button class=\"btn btn-default btn-xs\" onclick=\"swa.closeDialog('delete-samples')\">Cancel</button>
                </div>
            </ui:if>
            <ui:else>
                <div>No sample data was found</div>
            </ui:else>
        </ui:forEach>
    </ui:setContext>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "A dialog that can be used to create a sh:PropertyShape." ;
  rdfs:subClassOf teamwork:TagElements ;
.
edg-importer:DeleteSamplesPlugin
  a teamwork:TransformPlugin ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<teamwork:ActionLink arg:comment=\"Remove some or all of the sample data created by a JDBC schema import.\" arg:icon=\"lib/teamwork/build/images/teamwork/delete-samples.svg\" arg:onClick=\"{= ui:functionCall(&quot;teamwork.showDeleteSamples&quot;, ?projectGraph, ?tag) }\" arg:title=\"Delete Sample Data\"/>
"""^^ui:Literal ;
  rdfs:label "Delete sample data plugin" ;
  rdfs:subClassOf teamwork:TransformPlugins ;
.
edg-importer:DeleteSamplesService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:keep ;
      spl:valueType xsd:integer ;
      rdfs:comment "The maximum number of samples rows to leave per entity." ;
    ] ;
  ui:prototype """
<ui:transaction>
    <sml:DeleteSampleData sml:baseURI=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" sml:sampleCount=\"{= ?keep }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:comment "Deletes sample data created from a JDBC schema import." ;
  rdfs:label "Delete samples service" ;
  rdfs:subClassOf teamwork:TagElements ;
.
edg-importer:ImportJDBCFilePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:job ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:submit ;
      spl:valueType xsd:string ;
    ] ;
  ui:errorPrototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:manager, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to be manager of this {= IF(bound(?tag), &quot;working copy&quot;, &quot;project&quot;) } to import into it.\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:if ui:condition=\"{= ?submit = &quot;delete&quot; }\">
        <ui:createLink arg:job=\"{= ?job }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:DeleteJobService }\">
            <swa:RedirectAfterPost arg:url=\"{= ?link }\"/>
        </ui:createLink>
    </ui:if>
    <ui:else>
        <ui:setContext let:isDatatypesModel=\"{= ?projectType = edg:DatatypesProjectType }\" ui:queryGraph=\"{= ?teamGraph }\">
            <teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
                <h1>Import From JDBC Connection</h1>
                <p>This will add {= IF(?isDatatypesModel, \"datatype definitions\", \"schema definitions\") } from a database to the current {= IF(bound(?tag), \"working copy\", teamwork:singularProjectTypeLabel(?projectType)) } via a JDBC connection.</p>
                <form action=\"swp\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                    <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                    <input name=\"_viewClass\" type=\"hidden\" value=\"{= edg-importer:ScheduleImportService }\"/>
                    <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                    <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                    <edg-importer:CreateJobLabelElement arg:value=\"{= str(COALESCE(spl:objectInGraph(?job, rdfs:label, ?teamGraph), &quot;&quot;)) }\"/>
                    <div class=\"form-group\">
                        <label for=\"url\">JDBC URL</label>
                        <div class=\"row\">
                            <div class=\"col-xs-3\">
                                <input aria-describedby=\"urlHelp\" class=\"form-control input-sm\" id=\"url\" name=\"url\" required=\"required\" type=\"text\" value=\"{= str(COALESCE(spl:objectInGraph(?job, arg:url, ?teamGraph), &quot;&quot;)) }\"/>
                            </div>
                        </div>
                        <p class=\"help-block\" id=\"urlHelp\">The JDBC connection information for the database to import schema from.</p>
                    </div>
                    <div class=\"form-group\">
                        <label for=\"dbName\">User Name</label>
                        <div class=\"row\">
                            <div class=\"col-xs-3\">
                                <input aria-describedby=\"userNameHelp\" class=\"form-control input-sm\" id=\"userName\" name=\"userName\" required=\"required\" type=\"text\" value=\"{= str(COALESCE(spl:objectInGraph(?job, arg:userName, ?teamGraph), &quot;&quot;)) }\"/>
                            </div>
                        </div>
                        <p class=\"help-block\" id=\"userNameHelp\">The account user name for the database.</p>
                    </div>
                    <div class=\"form-group\">
                        <label for=\"password\">Password</label>
                        <div class=\"row\">
                            <div class=\"col-xs-3\">
                                <input aria-describedby=\"passwordHelp\" class=\"form-control input-sm\" id=\"password\" name=\"password\" required=\"required\" type=\"password\"/>
                            </div>
                        </div>
                        <p class=\"help-block\" id=\"passwordHelp\">The account password.</p>
                    </div>
                    <ui:if ui:condition=\"{= !?isDatatypesModel }\">
                        <div class=\"form-group\">
                            <label for=\"dbName\">Database name</label>
                            <div class=\"row\">
                                <div class=\"col-xs-3\">
                                    <input aria-describedby=\"dbNameHelp\" class=\"form-control input-sm\" id=\"dbName\" name=\"dbName\" type=\"text\" value=\"{= str(COALESCE(spl:objectInGraph(?job, arg:dbName, ?teamGraph), &quot;&quot;)) }\"/>
                                </div>
                            </div>
                            <p class=\"help-block\" id=\"dbNameHelp\">Optional database/schema name; by default, the user or connection default will be used.</p>
                        </div>
                        <edg-importer:DatatypesProjectSelector ui:args=\"*\"/>
                        <div class=\"checkbox\">
                            <ui:if ui:condition=\"{= spl:objectInGraph(?job, arg:statistics, ?teamGraph) }\">
                                <input checked=\"\" id=\"statistics\" name=\"statistics\" type=\"checkbox\" value=\"true\"/>
                            </ui:if>
                            <ui:else>
                                <input id=\"statistics\" name=\"statistics\" type=\"checkbox\" value=\"true\"/>
                            </ui:else>
                            <span>Include data statistics</span>
                        </div>
                        <div class=\"checkbox\">
                            <ui:if ui:condition=\"{= spl:objectInGraph(?job, arg:samples, ?teamGraph) }\">
                                <input checked=\"\" id=\"data-samples\" name=\"samples\" type=\"checkbox\" value=\"true\"/>
                            </ui:if>
                            <ui:else>
                                <input id=\"data-samples\" name=\"samples\" type=\"checkbox\" value=\"true\"/>
                            </ui:else>
                            <span>Include data samples</span>
                        </div>
                        <div class=\"text form-group ui-helper-hidden-accessible\" id=\"profileCount\">
                            <label for=\"sampleCount\">Maximum number of data samples per table</label>
                            <div class=\"row\">
                                <div class=\"col-xs-3\">
                                    <input class=\"form-control input-sm\" id=\"sampleCount\" name=\"sampleCount\" type=\"text\" value=\"{= str(COALESCE(spl:objectInGraph(?job, arg:sampleCount, ?teamGraph), edg-importer:getSampleCount(?projectGraph))) }\"/>
                                </div>
                                <p class=\"jdbcError text-danger ui-helper-hidden-accessible\">Please enter a number between 1 and 1000.</p>
                            </div>
                        </div>
                        <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                    </ui:if>
                    <ui:else>
                        <input name=\"datatypesModel\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                    </ui:else>
                    <div class=\"form-group\">
                        <button class=\"btn btn-primary\" id=\"submitNow\" name=\"submit\" type=\"submit\" value=\"now\">Import Now</button>
                    </div>
                    <ui:if ui:condition=\"{= !bound(?tag) }\">
                        <div>
                            <h2>Schedule Import</h2>
                            <p>Schedule this import job to run later or on a recurring schedule.</p>
                            <div class=\"form-group\">
                                <label for=\"cronExpression\">Cron Expression</label>
                                <div class=\"row\">
                                    <div class=\"col-xs-3\">
                                        <input aria-describedby=\"cronExpHelp\" class=\"form-control input-sm\" id=\"cronExpression\" name=\"cronExpression\" type=\"text\" value=\"{= scheduler:userJobSchedule(?job, edg:currentUser()) }\"/>
                                    </div>
                                </div>
                                <p class=\"help-block\" id=\"cronExpHelp\">The cron expression for the execution schedule.<a href=\"http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/tutorial-lesson-06.html\" target=\"_blank\">
                                        <i class=\"fa fa-info-circle\"/>
                                    </a>
                                </p>
                            </div>
                            <edg-importer:WorkflowTemplateSelectionBox arg:projectGraph=\"{= ?projectGraph }\"/>
                            <button class=\"btn btn-primary\" id=\"scheduleImport\" name=\"submit\" type=\"submit\" value=\"later\">Schedule Import</button>
                        </div>
                    </ui:if>
                </form>
            </teamwork:Chrome>
        </ui:setContext>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that can be used to import schema definitions from a JDBC connection into the current project." ;
  rdfs:label "Import from JDBC connection page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:ImportJDBCService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true and importing to production copy, record each new triple in history" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:samples ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include samples in the import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:statistics ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include statistics in this import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The database user name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesModel ;
      spl:valueType owl:Ontology ;
      rdfs:comment "Only relevant if the project graph is a Data Asset Model, otherwise it is ignored. Specifies the graph to import datatypes into. May be the same as the project graph or tag. If not present, datatypes will not be imported." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dbName ;
      spl:valueType xsd:string ;
      rdfs:comment "A database or schema name to distinguish this physical data model from others. Optional." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:password ;
      spl:valueType xsd:string ;
      rdfs:comment "The password for the user used to connect to the database." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sampleCount ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of sample rows to be collected" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:url ;
      spl:valueType xsd:string ;
      rdfs:comment "The JDBC URL" ;
    ] ;
  spin:private true ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?datatypesModel) }\">
    <teamwork:ImportErrorPage arg:message=\"No datatypes model selected.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?url) }\">
    <teamwork:ImportErrorPage arg:message=\"No connection URL.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= bound(?datatypesModel) &amp;&amp; (!smf:canWrite(?datatypesModel)) }\">
    <teamwork:ImportErrorPage arg:message=\"No write permission for the specified datatypes model.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:group let:datatypesProject=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?projectGraph, teamwork:masterGraph(teamwork:graphIdFromGraph(?datatypesModel))) }\" let:datatypesTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), teamwork:projectOrTagGraph(?projectGraph, ?tag), ?datatypesModel) }\" let:pageType=\"import-page\" let:projectTypeLabel=\"{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\" let:schemaProject=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, ?projectGraph) }\" let:schemaTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\" let:title=\"Import From JDBC Connection\">
    <ui:try>
        <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
            <sml:ExtractJDBCSchema sml:baseURI=\"{= edg-importer:getDefaultNamespace(?schemaProject) }\" sml:databaseName=\"{= ?dbName }\" sml:datatypesBaseURI=\"{= edg-importer:getDefaultNamespace(?datatypesTarget) }\" sml:password=\"{= ?password }\" sml:sampleCount=\"{= ?sampleCount }\" sml:url=\"{= ?url }\" sml:userName=\"{= ?userName }\" sml:withDatatypeLinks=\"{= bound(?datatypesTarget) }\" sml:withDatatypes=\"{= false }\" sml:withSamples=\"{= ?samples }\" sml:withSchema=\"{= true }\" sml:withStats=\"{= ?statistics }\">
                <edg-importer:LinkDataContainer arg:targetGraph=\"{= ui:graphWithImports(?schemaTarget) }\"/>
                <edg-importer:CopyQueryGraph arg:targetGraph=\"{= ui:tempGraphSchema }\"/>
            </sml:ExtractJDBCSchema>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
            <sml:ExtractJDBCSchema sml:baseURI=\"{= edg-importer:getDefaultNamespace(?datatypesProject) }\" sml:databaseName=\"{= ?dbName }\" sml:datatypesBaseURI=\"{= edg-importer:getDefaultNamespace(?datatypesTarget) }\" sml:password=\"{= ?password }\" sml:url=\"{= ?url }\" sml:userName=\"{= ?userName }\" sml:withDatatypeLinks=\"{= false }\" sml:withDatatypes=\"{= true }\" sml:withSamples=\"{= false }\" sml:withSchema=\"{= false }\" sml:withStats=\"{= false }\">
                <edg-importer:ImportDatatypeFamily arg:targetGraph=\"{= ?datatypesTarget }\"/>
                <edg-importer:RemoveExistingResourcesFromQueryGraph arg:graph=\"{= ui:graphWithImports(?datatypesTarget) }\"/>
                <edg-importer:CopyQueryGraph arg:targetGraph=\"{= ui:tempGraphDatatypes }\"/>
            </sml:ExtractJDBCSchema>
        </ui:if>
        <edg-importer:PostProcessImportedJDBC arg:datatypesGraph=\"{= ui:tempGraphDatatypes }\" arg:datatypesTargetGraph=\"{= ?datatypesTarget }\" arg:schemaGraph=\"{= ui:tempGraphSchema }\" arg:schemaTargetGraph=\"{= ?schemaTarget }\"/>
        <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(edg-importer:withHistory(?schemaTarget, ?record)) }\">
                <ui:transaction ui:logMessage=\"Import from JDBC connection {= ?url }\">
                    <edg-importer:RemoveExistingDBs arg:sourceGraph=\"{= ui:tempGraphSchema }\"/>
                    <edg-importer:CopyIntoQueryGraph arg:sourceGraph=\"{= ui:tempGraphSchema }\"/>
                    <edg-importer:SaveSampleCount ui:args=\"*\"/>
                </ui:transaction>
            </ui:setContext>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(edg-importer:withHistory(?datatypesTarget, ?record)) }\">
                <ui:transaction ui:logMessage=\"Import from JDBC connection {= ?url }\">
                    <edg-importer:CopyIntoQueryGraph arg:sourceGraph=\"{= ui:tempGraphDatatypes }\"/>
                </ui:transaction>
            </ui:setContext>
        </ui:if>
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" ui:args=\"*\">
            <h1>JDBC Import Completed</h1>
            <edg-importer:ErrorReport arg:graph=\"{= ui:tempGraphSchema }\" arg:labelGraph=\"{= ui:graphWithImports(?schemaTarget) }\"/>
            <ui:if ui:condition=\"{= bound(?schemaTarget) }\">
                <p>Schema definitions imported into <em>{= teamwork:projectLabel(?schemaProject) }</em>:</p>
                <edg-importer:InstanceCountReport arg:graph=\"{= ui:tempGraphSchema }\" arg:labelGraph=\"{= ui:graphWithImports(?schemaTarget) }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?datatypesTarget) }\">
                <p>Datatype definitions imported into <em>{= teamwork:projectLabel(?datatypesProject) }</em>:</p>
                <edg-importer:InstanceCountReport arg:graph=\"{= ui:tempGraphDatatypes }\" arg:labelGraph=\"{= ui:graphWithImports(?datatypesTarget) }\"/>
            </ui:if>
            <teamwork:LinkToProblemsAndSuggestionsReport ui:args=\"*\"/>
            <teamwork:ButtonReturnToProjectOrTagPage arg:projectTab=\"{= teamwork:ImportProjectTab }\" ui:args=\"*\"/>
        </teamwork:Chrome>
    </ui:try>
    <ui:catch>
        <ui:if ui:condition=\"{= CONTAINS(?exception, &quot;DB_EXISTS&quot;) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                <ui:group let:blockerClassLabel=\"{= ui:label(edg:PhysicalDataAsset) }\">
                    <teamwork:ImportErrorPage arg:message=\"A {= ?blockerClassLabel } with this name was already imported/created in this {= ?projectTypeLabel }.\" arg:title=\"Database already exists\" ui:args=\"*\">
                        <p class=\"text-muted\">Try one of these:</p>
                        <ul class=\"text-muted\">
                            <li>Specify a different name</li>
                            <li>Delete the {= ?blockerClassLabel } from this {= ?projectTypeLabel }</li>
                            <li>Clear this {= ?projectTypeLabel } on its&nbsp;<em>
                                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                        <a href=\"{= ?link }\">Manage</a>
                                    </ui:createLink>
                                </em> tab</li>
                            <li>Import the schema into a different {= ?projectTypeLabel }</li>
                        </ul>
                    </teamwork:ImportErrorPage>
                </ui:group>
            </ui:setContext>
        </ui:if>
        <ui:elseif ui:condition=\"{= CONTAINS(?stackTrace, &quot;SchemaImportException&quot;) }\">
            <teamwork:ImportErrorPage arg:message=\"The schema could not be extracted. Error:\" arg:title=\"JDBC Import Failed\" ui:args=\"*\">
                <pre>{= STRBEFORE(STRAFTER(?stackTrace, \"SchemaImportException: \"), \"\\n\") }</pre>
            </teamwork:ImportErrorPage>
        </ui:elseif>
        <ui:else>
            <teamwork:ImportErrorPage arg:message=\"{= REPLACE(?exception, &quot;.*SWPException: &quot;, &quot;&quot;) }\" arg:title=\"JDBC Import Failed\" ui:args=\"*\">
                <pre class=\"hidden\">{= ?stackTrace }</pre>
            </teamwork:ImportErrorPage>
        </ui:else>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A service that connects via JDBC to the specified database and traverses DatabaseMetaData to extract schema information, storing an RDF representation in a project or tag graph. If the project is an EDG Datatypes Model, only datatype definitons will be imported into the project. Otherwise, schema definitions will be imported into the project, and optionally the datatype definitions can be imported into a separately specified project." ;
  rdfs:label "Import from JDBC service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:ImportJDBCjob
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:samples ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include samples in the import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:statistics ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include statistics in this import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The database user name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesModel ;
      spl:valueType owl:Ontology ;
      rdfs:comment "Only relevant if the project graph is a Data Asset Model, otherwise it is ignored. Specifies the graph to import datatypes into. May be the same as the project graph or tag. If not present, datatypes will not be imported." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dbName ;
      spl:valueType xsd:string ;
      rdfs:comment "A database or schema name to distinguish this physical data model from others. Optional." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:sampleCount ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of sample rows to be collected" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:execution ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The execution instance of this run." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jobName ;
      spl:valueType xsd:string ;
      rdfs:comment "The unique name of the this job withing it's containing asset collection" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:url ;
      spl:valueType xsd:string ;
      rdfs:comment "The JDBC URL" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflow ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template to be used for this import" ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:tagName=\"{= fn:concat(&quot;Scheduled JDBC Import of &quot;, ?jobName, &quot;:&quot;, fn:substring(xsd:string(?execution), (spif:lastIndexOf(xsd:string(?execution), &quot;:&quot;) + 2))) }\">
    <ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" let:thisTag=\"{= teamwork:tagById(teamwork:createTagId(?tagName, ?projectGraph)) }\">
        <teamwork:AddTagService arg:name=\"{= ?tagName }\" arg:projectGraph=\"{= ?projectGraph }\" arg:workflow=\"{= ?workflow }\"/>
        <edg-importer:ImportJDBCService arg:tag=\"{= ?thisTag }\" ui:args=\"*\"/>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?teamGraph) }\">
            <!-- Look to see if any data elements have been added or deleted and commit if not -->
            <ui:if ui:condition=\"{#
                    ASK 
                    WHERE {
                        ?change teamwork:tag ?thisTag .
                        ?change teamwork:added|teamwork:deleted ?triple .
                        ?triple teamwork:predicate rdf:type .
                        ?triple teamwork:object ?type .
                        ?type (rdfs:subClassOf)* edg:Traceable .
                    } }\"/>
            <ui:else>
                <teamwork:SetTagStatusService arg:projectGraph=\"{= ?projectGraph }\" arg:status=\"{= teamwork:Committed }\" arg:tag=\"{= ?thisTag }\"/>
            </ui:else>
        </ui:setContext>
        <!-- Delete all frequency, quantile and samples from history -->
        <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?ch ?addDel ?statTriple .
                            ?statTriple ?p ?o .
                        }
                        WHERE {
                            ?ch a teamwork:Change .
                            ?ch teamwork:tag ?chTag .
                            FILTER (?chTag = ?thisTag) .
                            ?ch ?addDel ?colTriple .
                            FILTER ((?addDel = teamwork:deleted) || (?addDel = teamwork:added)) .
                            ?colTriple teamwork:predicate ?sp .
                            FILTER (((?sp = edg:frequenciesStatistic) || (?sp = edg:quantileStatistic)) || (?sp = edg:dataSample)) .
                            ?colTriple teamwork:object ?stat .
                            ?statTriple teamwork:subject ?stat .
                            ?statTriple ?p ?o .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?ch ?addDel ?colTriple .
                            ?colTriple ?p ?o .
                        }
                        WHERE {
                            ?ch a teamwork:Change .
                            ?ch teamwork:tag ?chTag .
                            FILTER (?chTag = ?thisTag) .
                            ?ch ?addDel ?colTriple .
                            FILTER ((?addDel = teamwork:deleted) || (?addDel = teamwork:added)) .
                            ?colTriple teamwork:predicate ?sp .
                            FILTER (((?sp = edg:frequenciesStatistic) || (?sp = edg:quantileStatistic)) || (?sp = edg:dataSample)) .
                            ?colTriple ?p ?o .
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a working copy and performs a JDBC import into it.  Commits the working copy if rules permit." ;
  rdfs:label "Import from JDBC job definition" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:JDBCImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:SelectJobPage }\">
    <teamwork:ActionLink arg:comment=\"Imports {= IF((teamwork:getProjectType(?projectGraph) = edg:DatatypesProjectType), &quot;datatype definitions&quot;, &quot;database schema definitions&quot;) } from a JDBC database connection.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-jdbc.svg\" arg:link=\"{= ?link }\" arg:title=\"Import From JDBC Connection\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Adds an schema import function from a JDBC connection to a project type." ;
  rdfs:label "Import from JDBC connection plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
edg-importer:PostProcessImportedJDBC
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "If datatype definitions are being imported, then this is a temporary graph containing the imported definitions. The post-processor may modify this graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesTargetGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "If datatype definitions are being imported, then this is the target Teamwork project or tag that we ultimately will import into. Do not modify!" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:schemaGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "If schema definitions are being imported, then this is a temporary graph containing the imported definitions. The post-processor may modify this graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:schemaTargetGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "If schema definitions are being imported, then this is the target Teamwork project or tag that we ultimately will import into. Do not modify!" ;
    ] ;
  ui:prototype """
<ui:group/>
"""^^ui:Literal ;
  rdfs:comment "An operation for post-processing after a JDBC schema import. The default implementation does nothing; it is intended for overriding. Temporary graphs containing the parsed schema definitions and datatype definitions are passed in. Implementations may do post-processing by modifying these graphs. Either can be missing, or they could be the same graph. The target graphs that we are importing into are also given, in case we need to refer to existing definitions in these graphs or in their includes, but they should not be modified by the post-processing operation." ;
  rdfs:label "post-process imported JDBC schema" ;
  rdfs:subClassOf ui:Operations ;
.
edg-importer:ScheduleImportService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The database user name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cronExpression ;
      spl:valueType xsd:string ;
      rdfs:comment "The cron expression string that defines the execution schedule.  Only required when scheduling execution for later." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatypesModel ;
      spl:valueType owl:Ontology ;
      rdfs:comment "Only relevant if the project graph is a Data Asset Model, otherwise it is ignored. Specifies the graph to import datatypes into. May be the same as the project graph or tag. If not present, datatypes will not be imported." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dbName ;
      spl:valueType xsd:string ;
      rdfs:comment "A database or schema name to distinguish this physical data model from others. Optional." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:samples ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include samples in the import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:statistics ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Include statistics in this import" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jobName ;
      spl:valueType xsd:string ;
      rdfs:comment "A unique identifier for this job within its containing asset collection." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:password ;
      spl:valueType xsd:string ;
      rdfs:comment "The password for the user used to connect to the database." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sampleCount ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of sample rows to be collected" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:submit ;
      spl:valueType xsd:string ;
      rdfs:comment "If set to \"now\" the import will be executed immediatly.  Otherwise scheduled for later execution based on the cronExpression arg." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:url ;
      spl:valueType xsd:string ;
      rdfs:comment "The JDBC URL" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflow ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template to be used for this import" ;
    ] ;
  spin:private true ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?datatypesModel) }\">
    <teamwork:ImportErrorPage arg:message=\"No datatypes model selected.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?url) }\">
    <teamwork:ImportErrorPage arg:message=\"No connection URL.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= bound(?datatypesModel) &amp;&amp; (!smf:canWrite(?datatypesModel)) }\">
    <teamwork:ImportErrorPage arg:message=\"No write permission for the specified datatypes model.\" ui:args=\"*\"/>
</ui:if>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:group let:datatypesTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ui:currentQueryGraph(), ?datatypesModel) }\" let:jobURI=\"{= spif:buildURI(fn:concat(edg-importer:getDefaultNamespace(?projectGraph), &quot;importJob/{?1}&quot;), ?jobName) }\" let:schemaProject=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, ?projectGraph) }\" let:schemaTarget=\"{= IF(edg-importer:isDatatypesModel(?projectGraph), ?unbound, ui:currentQueryGraph()) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:transaction ui:logMessage=\"Save JDBC import job {= ?jobURI }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?jobURI ?p ?o .
                    }
                    WHERE {
                        ?jobURI ?p ?o .
                    } }\"/>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?jobURI a edg-importer:ImportJDBCjob .
                        ?jobURI rdfs:label ?jobName .
                        ?jobURI arg:datatypesModel ?datatypesModel .
                        ?jobURI arg:dbName ?dbName .
                        ?jobURI arg:sampleCount ?sampleCount .
                        ?jobURI arg:samples ?samples .
                        ?jobURI arg:statistics ?statistics .
                        ?jobURI arg:url ?url .
                        ?jobURI arg:jobName ?jobName .
                        ?jobURI arg:userName ?userName .
                        ?jobURI arg:workflow ?workflow .
                        ?jobURI arg:projectGraph ?projectGraph .
                    }
                    WHERE {
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
    <swa:updateSecureStorage arg:key=\"{= ?userName }@{= ?url }\" arg:value=\"{= ?password }\"/>
    <ui:if ui:condition=\"{= ?submit = &quot;now&quot; }\">
        <ui:setContext ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\">
            <edg-importer:ImportJDBCService ui:args=\"*\"/>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <sml:ScheduleJob sml:cronExpression=\"{= ?cronExpression }\" sml:jobURI=\"{= ?jobURI }\"/>
        </ui:setContext>
        <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"teamwork:ImportProjectTab\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
            <swa:RedirectAfterPost arg:url=\"{= ?link }\"/>
        </ui:createLink>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A service to schedule a JDBC import job.  Creates or updates the job definitition parameters.  If the submit argument is \"now\" the job is executed syncronously. Otherwis the job is placed in the scheduler with the provided cron expression." ;
  rdfs:label "Schedule Import Service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:SelectJobPage
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:editor, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to have editor permissions for this {= IF(bound(?tag), &quot;working copy&quot;, &quot;vocabulary&quot;) } to import spreadsheets into it.\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
            <ui:group letrs:jobs=\"{#
                    SELECT ?jobURI ?jobName
                    WHERE {
                        ?jobURI a edg-importer:ImportJDBCjob .
                        ?jobURI rdfs:label ?jobName .
                    } }\">
                <ui:if ui:condition=\"{= spr:isEmpty(?jobs) }\">
                    <ui:createLink arg:job=\"rdf:nil\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:ImportJDBCFilePage }\">
                        <swa:RedirectAfterPost arg:url=\"{= ?link }\"/>
                    </ui:createLink>
                </ui:if>
                <ui:else>
                    <h1>Select Job</h1>
                    <p class=\"text-info\">Please select</p>
                    <form action=\"swp\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                        <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                        <input name=\"_viewClass\" type=\"hidden\" value=\"{= edg-importer:ImportJDBCFilePage }\"/>
                        <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                        <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                        <br/>
                        <span class=\"swa-bold-font\">Job: </span>
                        <select class=\"form-control vocabSelect\" id=\"job\" name=\"job\">
                            <ui:forEach ui:resultSet=\"{= ?jobs }\">
                                <option value=\"{= ?jobURI }\">{= ?jobName }</option>
                            </ui:forEach>
                        </select>
                        <br/>
                        <br/>
                        <button class=\"btn btn-primary\" id=\"editButton\" name=\"submit\" type=\"submit\" value=\"edit\">Edit</button>&nbsp;
 <button class=\"btn btn-primary\" id=\"deleteButton\" name=\"submit\" type=\"submit\" value=\"delete\">Delete</button>&nbsp;
    <ui:createLink arg:job=\"rdf:nil\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= edg-importer:ImportJDBCFilePage }\">
                            <a class=\"btn btn-primary\" href=\"{= ?link }\">Create New</a>
                        </ui:createLink>
                    </form>
                </ui:else>
            </ui:group>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that allows selection of a previously saved import job." ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
edg-importer:WorkflowTemplateSelectionBox
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\" ui:shapesGraph=\"{= teamwork:workflowsGraph() }\">
    <ui:call arg:projectGraph=\"{= ?projectGraph }\" let:default=\"{= COALESCE(teamwork:getDefaultTagWorkflowTemplateForProject(?projectGraph), teamwork:getDefaultTagWorkflowTemplate()) }\" ui:template=\"{= teamwork:PotentialTagWorkflowsForResource }\" ui:varName=\"workflows\">
        <ui:if ui:condition=\"{= spr:rowCount(?workflows) &gt; 1 }\">
            <div class=\"form-group\">
                <label for=\"workflow-select\">Workflow</label>
                <div class=\"row\">
                    <div class=\"col-xs-3\">
                        <select class=\"form-control\" id=\"workflow-select\" name=\"workflow\">
                            <ui:forEach ui:resultSet=\"{= ?workflows }\">
                                <option selected=\"{= IF((?workflowTemplate = ?default), &quot;selected&quot;, ?none) }\" value=\"{= ?workflowTemplate }\">{= ?label }</option>
                            </ui:forEach>
                        </select>
                    </div>
                </div>
                <p class=\"help-block\" id=\"wfSelectionHelp\">The workflow template to use for the import.</p>
            </div>
        </ui:if>
        <ui:elseif ui:condition=\"{= !spr:isEmpty(?workflows) }\">
            <input name=\"workflow\" type=\"hidden\" value=\"{= spr:cell(?workflows, 0, 0) }\"/>
            <div class=\"form-group\">
                <label for=\"workflow-select\">Workflow</label>
                <div class=\"row\">
                    <div class=\"col-xs-3\">{= spr:cell(?workflows, 0, 1) }</div>
                </div>
                <p class=\"help-block\">The workflow template to use for the import.</p>
            </div>
        </ui:elseif>
    </ui:call>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Displays a drop down box of available workflow templates " ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
