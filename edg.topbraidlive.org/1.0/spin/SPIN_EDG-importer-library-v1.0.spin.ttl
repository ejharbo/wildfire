# baseURI: http://edg.topbraid.solutions/1.0/importer/lib
# imports: http://edg.topbraid.solutions/1.0/schema/config/importers
# imports: http://spinrdf.org/spl

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraid.solutions/1.0/importer/lib>
  a owl:Ontology ;
  rdfs:label "lib" ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/config/importers> ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
lib-importer:BuildConfidentialityUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "confidentialityUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "confidentiality" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/model/CL_" ;
                    sp:arg2 [
                        sp:varName "confidentiality" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "confidentialityUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the process
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the confidentiality Uri based on the localname" ;
  rdfs:label "BuildConfidentialityUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildContainerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "containerUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "CONTAINER_" ;
                    sp:arg3 [
                        sp:varName "normalizedStr1" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "normalizedStr2" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "containerUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment " server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """That is the container name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "data Asset namespace" ;
    ] ;
  rdfs:label "build container uri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildCriticalityUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "criticalityUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FiveLevelRatingScale> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "criticalityUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "criticalityUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://edg.topbraid.solutions/1.0/codelist/core/scales> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the process
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the criticality Uri based on the localname" ;
  rdfs:label "BuildCriticalityUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildDatabaseTableColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "columnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "physicalModelName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "tableName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg3 ;
              ] ;
            sp:variable [
                sp:varName "columnName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg4 ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        sp:varName "physicalModelName" ;
                      ] ;
                    sp:arg4 "." ;
                    sp:arg5 [
                        sp:varName "tableName" ;
                      ] ;
                    sp:arg6 "." ;
                    sp:arg7 [
                        sp:varName "columnName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "physical model" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """That is the source dataset name ( table)
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "data element name ( column)" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "data Asset namespace" ;
    ] ;
  rdfs:label "BuildDatabaseTableColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildDatabaseTableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseTableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "tableName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "TABLE_" ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 "." ;
                    sp:arg5 [
                        sp:varName "tableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseTableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "table name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "model name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  rdfs:label "Build database table" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildDatabaseViewColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "columnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "viewName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg3 ;
              ] ;
            sp:variable [
                sp:varName "columnName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg4 ;
                    sp:arg2 "VIEWCOLUMN_" ;
                    sp:arg3 spin:_arg1 ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "viewName" ;
                      ] ;
                    sp:arg6 "--" ;
                    sp:arg7 [
                        sp:varName "columnName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "physical model" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """That is the source dataset name ( view)
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "element ( column) name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "data Asset namespace" ;
    ] ;
  rdfs:label "BuildDatabaseViewColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildDatabaseViewUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseViewUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "viewName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "VIEW_" ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "viewName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseViewUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "view name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "model name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  rdfs:label "Build database table" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildEncryptionMethodUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "encryptionMethod" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/model/EM_" ;
                    sp:arg2 [
                        sp:varName "encryptionMethod" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the projectGraph
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the EncryptionMethod Uri based on the localname" ;
  rdfs:label "BuildEncryptionMethodUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildExecutableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "executableServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "executableContainer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg3 ;
              ] ;
            sp:variable [
                sp:varName "executableName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg4 ;
              ] ;
            sp:variable [
                sp:varName "executableType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg5 ;
                    sp:arg2 [
                        sp:varName "executableType" ;
                      ] ;
                    sp:arg3 "_" ;
                    sp:arg4 [
                        sp:varName "executableServer" ;
                      ] ;
                    sp:arg5 "_" ;
                    sp:arg6 [
                        sp:varName "executableContainer" ;
                      ] ;
                    sp:arg7 "--" ;
                    sp:arg8 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable server" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable container" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "namespace" ;
    ] ;
  rdfs:label "build executable uri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildFlowStatementUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "flowUri" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "defaultNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.org/defaultNamespace> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "defaultNamespace" ;
                      ] ;
                    sp:arg2 "FLOW-" ;
                    sp:arg3 [
                        a spif:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "flowUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the reification uri to define the encryption in the flow of the data. We needed to use the default namespace of the current graph so we had stored it to a temp triple" ;
  rdfs:label "buildLineageUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildGeneralDataAssetUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataAssetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "tableName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataAssetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "physical model" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "data Asset namespace" ;
    ] ;
  rdfs:label "BuildGeneralDataAssetUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildGeneralExecutableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "executableType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "executableName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 [
                        sp:varName "executableType" ;
                      ] ;
                    sp:arg3 "_" ;
                    sp:arg4 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical asset type" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical asset name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "This is the technical data namespace" ;
    ] ;
  rdfs:label "BuildGeneralExecutableUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildGeoLocationUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "locationUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "prefLabel" ;
                          ] ;
                        sp:predicate <http://www.w3.org/2004/02/skos/core#prefLabel> ;
                        sp:subject [
                            sp:varName "prefLabelSubject" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "prefLabel" ;
                              ] ;
                          ] ;
                        sp:variable [
                            sp:varName "prefLabelStr" ;
                          ] ;
                      ]
                      [
                        a sp:Filter ;
                        sp:expression [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 [
                                sp:varName "prefLabelStr" ;
                              ] ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "altLabel" ;
                          ] ;
                        sp:predicate <http://www.w3.org/2008/05/skos-xl#altLabel> ;
                        sp:subject [
                            sp:varName "altLabelSubject" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression [
                            a sp:str ;
                            sp:arg1 [
                                a afn:localname ;
                                sp:arg1 [
                                    sp:varName "altLabel" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:variable [
                            sp:varName "altLabelStr" ;
                          ] ;
                      ]
                      [
                        a sp:Filter ;
                        sp:expression [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 [
                                sp:varName "altLabelStr" ;
                              ] ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a lib-importer:NormalizeString ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "location" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 [
                          a sp:concat ;
                          sp:arg1 "http://topquadrant.com/ns/examples/geography#" ;
                          sp:arg2 [
                              sp:varName "location" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "locationGeneral" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a smf:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "prefLabelSubject" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          sp:varName "prefLabelSubject" ;
                        ] ;
                      sp:arg3 [
                          a smf:if ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "altLabelSubject" ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              sp:varName "altLabelSubject" ;
                            ] ;
                          sp:arg3 [
                              sp:varName "locationGeneral" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "locationUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <urn:x-evn-master:geo> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The location localname
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the location Uri based on  Geography taxonomy included in EDG" ;
  rdfs:label "BuildGeoLocationUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildLineageUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "lineageUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 "Lineage_" ;
                    sp:arg3 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lineageUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the projectGraph
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "lineage namespace" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the lineage uri by using the default namespace for lineage models  and append the localname of the edg lineage project graph" ;
  rdfs:label "buildLineageUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildPersonalDataCategoryUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "PersonalDataCategoryUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "personalDataCategory" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/model/PDC_" ;
                    sp:arg2 [
                        sp:varName "personalDataCategory" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "PersonalDataCategoryUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the projectGraph
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the PersonalDataCategoryUri based on the localname" ;
  rdfs:label "BuildPersonalDataCategoryUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildPhysicalModelUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "physicalModelUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "physicalModelName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 "PDM_" ;
                    sp:arg3 [
                        sp:varName "physicalModelName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "physicalModelUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  rdfs:label "Build database table" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildPipelineStepUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "pipelineStepUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "PIPELINESTEP_" ;
                    sp:arg3 [
                        sp:varName "normalizedStr1" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "normalizedStr2" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "pipeline name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "pipeline step" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  rdfs:label "build pipeline uri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildPipelineUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "pipelineUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 "PIPELINE-" ;
                    sp:arg3 [
                        sp:varName "normalizedStr1" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "pipeline name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  rdfs:label "build pipeline uri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildProcessUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "processUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "process" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.gdpr.topbraid.solutions/gdpr/P_" ;
                    sp:arg2 [
                        sp:varName "process" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "processUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The localname of the process
""" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the Process Uri based on the localname" ;
  rdfs:label "BuildProcessUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildRelationalDatabaseUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "databaseName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 "RDB_" ;
                    sp:arg3 [
                        sp:varName "databaseName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  rdfs:label "Build database table" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildReportColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "columnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg5 ;
                    sp:arg2 "REPORTCOLUMN_" ;
                    sp:arg3 spin:_arg1 ;
                    sp:arg4 "_" ;
                    sp:arg5 spin:_arg2 ;
                    sp:arg6 "--" ;
                    sp:arg7 spin:_arg3 ;
                    sp:arg8 "--" ;
                    sp:arg9 spin:_arg4 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """container name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset ( report ) name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "report column name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  rdfs:label "BuildReportColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildReportDatasetUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "reportDatasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "datasetName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "REPORTDATASET_" ;
                    sp:arg3 spin:_arg1 ;
                    sp:arg4 [
                        sp:varName "datasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "reportDatasetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "model from config eg. FRB" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """dataset name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildReportDatasetUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildReportUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "reportUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:NormalizeString ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "datasetName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 "REPORT_" ;
                    sp:arg3 [
                        sp:varName "datasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "reportUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildReportUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildSituatedProcessUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "situatedProcessUri" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "defaultNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.org/defaultNamespace> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "defaultNamespace" ;
                      ] ;
                    sp:arg2 "SituatedProcess-" ;
                    sp:arg3 [
                        a spif:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "situatedProcessUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function will create the situated Process uri. We needed to use the default namespace of the current graph so we had stored it to a temp triple" ;
  rdfs:label "buildLineageUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardColumnLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "." ;
                    sp:arg3 spin:_arg2 ;
                  ] ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "firstItemInParenthesis" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 [
                        sp:varName "firstItemInParenthesis" ;
                      ] ;
                    sp:arg4 " | " ;
                    sp:arg5 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg4 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg6 " | " ;
                    sp:arg7 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg5 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg8 ")" ;
                  ] ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 [
                        sp:varName "firstItemInParenthesis" ;
                      ] ;
                    sp:arg4 " | " ;
                    sp:arg5 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg4 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg6 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "column name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "table or view name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardColumnLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardContainerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataContainerUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "DC_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "data container name" ;
    ] ;
  rdfs:label "BuildStandardDataContainerUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardCustomElementUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customElementUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "DC_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                        sp:arg6 "_" ;
                        sp:arg7 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                        sp:arg3 "_" ;
                        sp:arg4 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customElementUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "custom namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "data container name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset type actually the custom class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "custom element name" ;
    ] ;
  rdfs:label "BuildStandardCustomElementUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardCustomExecutableContainerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "DC_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 spin:_arg3 ;
                        sp:arg6 "_" ;
                        sp:arg7 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg3 ;
                        sp:arg3 "_" ;
                        sp:arg4 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "acronym" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  rdfs:label "BuildStandardCustomExecutableContainerUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "arg7" ;
                      ] ;
                    sp:arg3 "_" ;
                    sp:arg4 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                    sp:arg5 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
                      ] ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "table column" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "column name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg7 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset type (e.g. TBL, VIEW)" ;
    ] ;
  rdfs:label "BuildStandardDatabaseTableColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " (" ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " )" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardDatabaseLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseSchemaLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "schemaLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " | " ;
                    sp:arg5 spin:_arg3 ;
                    sp:arg6 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg3 ;
                    sp:arg4 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label3" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "label1" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "label1" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "label2" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "label2" ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "label3" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "label3" ;
                          ] ;
                        sp:arg3 spin:_arg1 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardDatabaseSchemaLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseSchemaUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "schemaUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  rdfs:label "BuildStandardDatabaseSchemaUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseSynonymColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseSynonymColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "SYN_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
                      ] ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseSynonymColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "synonym (dataset) column" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "column name" ;
    ] ;
  rdfs:label "BuildStandardDatabaseSynonymColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseSynonymUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseSynonymUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "SYN_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseSynonymUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "database table" ;
    ] ;
  rdfs:label "BuildStandardDatabaseSynonymUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseTableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseTableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "TBL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseTableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "database table" ;
    ] ;
  rdfs:label "BuildStandardDatabaseTableUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseTypeUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:upperCase ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "databaseType" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "databaseTypeUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://edg.topbraid.solutions/1.0/codelist/datamodels> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildStandardDatabaseType" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "DB_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "SRV_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 "DB_" ;
                        sp:arg6 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  rdfs:label "BuildStandardRelationalDatabaseUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseViewColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseViewColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "VIEW_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrView" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrView" ;
                      ] ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseViewColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "view column" ;
    ] ;
  rdfs:label "BuildStandardDatabaseViewColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatabaseViewUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseViewUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "VIEW_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseViewUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "view name" ;
    ] ;
  rdfs:label "BuildStandardDatabaseViewUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardDatasetLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " | " ;
                    sp:arg5 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg6 " | " ;
                    sp:arg7 spin:_arg4 ;
                    sp:arg8 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg4 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg4 " | " ;
                    sp:arg5 spin:_arg4 ;
                    sp:arg6 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label3" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg4 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " | " ;
                    sp:arg5 [
                        a sp:coalesce ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 "" ;
                      ] ;
                    sp:arg6 ")" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label4" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "label1" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "label1" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "label2" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "label2" ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "label3" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "label3" ;
                          ] ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "label4" ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                sp:varName "label4" ;
                              ] ;
                            sp:arg3 spin:_arg1 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "table or view name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardDatasetLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardExecutableIFPCUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "REP_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrRepository" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrRepository" ;
                      ] ;
                    sp:arg2 "FOL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrRepository" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrRepositoryOrFolder" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrRepositoryOrFolder" ;
                      ] ;
                    sp:arg2 "WFL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrRepositoryOrFolder" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrRepositoryOrFolderOrWorkFlow" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a lib-importer:GetExecutableAcronym ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acronym" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrRepositoryOrFolderOrWorkFlow" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "acronym" ;
                      ] ;
                    sp:arg3 "_" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrRepositoryOrFolderOrWorkFlow" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrRepositoryOrFolderOrWorkFlowOrType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "arg6" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrRepositoryOrFolderOrWorkFlowOrType" ;
                      ] ;
                    sp:arg2 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrRepositoryOrFolderOrWorkFlowOrType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrRepositoryOrFolderOrWorkFlowOrTypeOrName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "namespaceOrRepositoryOrFolderOrWorkFlowOrTypeOrName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable server which is the IFPC Repository " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable database which is the IFPC Folder " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable schema which is the IFPC Workflow " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type which will Mapping" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name which is the IFPC Session or  SSIS DataFlowTask" ;
    ] ;
  rdfs:label "BuildStandardExecutableIFPCUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardExecutableSSISUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "FLD_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrFolder" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrFolder" ;
                      ] ;
                    sp:arg2 "PCK_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrFolder" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrFolderOrPackage" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a lib-importer:GetExecutableAcronym ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acronym" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrFolderOrPackage" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "acronym" ;
                      ] ;
                    sp:arg3 "_" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrFolderOrPackage" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrFolderOrPackageOrType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "arg6" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrFolderOrPackageOrType" ;
                      ] ;
                    sp:arg2 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrFolderOrPackageOrType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrFolderOrPackageOrTypeOrName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "namespaceOrServerOrFolderOrPackageOrTypeOrName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "the server for Microsoft SSIS" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "SSIS Folder/SSIS Project" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "SSIS Package" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "ETL JOB" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name " ;
    ] ;
  rdfs:label "Build StandardExecutableSSISUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardExecutableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a lib-importer:GetExecutableAcronym ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acronym" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "acronym" ;
                      ] ;
                    sp:arg3 "_" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "arg6" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrType" ;
                      ] ;
                    sp:arg2 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceServerOrDatabaseOrSchemaOrType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrTypeOrName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "namespaceServerOrDatabaseOrSchemaOrTypeOrName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable server" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable database" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable schema" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  rdfs:label "BuildStandardLineageExecutableUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardExternalScriptLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "externalScriptLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " )" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "externalScriptLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "external script name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "repository name" ;
    ] ;
  rdfs:label "BuildStandardExternalScriptLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardExternalScriptUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "scriptUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:encode_for_uri ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "scriptName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:encode_for_uri ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "repositoryHierarchy" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 [
                        sp:varName "repositoryHierarchy" ;
                      ] ;
                    sp:arg3 "--" ;
                    sp:arg4 "SCRIPT_" ;
                    sp:arg5 [
                        sp:varName "scriptName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "scriptUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "name of the script" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "repository that resides" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical asset namespace" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildStandardExternalScriptUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileColumnLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileColumnLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "( " ;
                    sp:arg3 spin:_arg1 ;
                    sp:arg4 " | " ;
                    sp:arg5 spin:_arg2 ;
                    sp:arg6 " )" ;
                  ] ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 "( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " )" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileColumnLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "file column" ;
    ] ;
  rdfs:label "BuildStandardFileColumnLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "FS_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 "FILE_" ;
                    sp:arg6 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg7 "--" ;
                    sp:arg8 "COL_" ;
                    sp:arg9 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "FILE_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 "COL_" ;
                    sp:arg6 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "file column" ;
    ] ;
  rdfs:label "BuildStandardFileColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg1 ;
                    sp:arg4 " )" ;
                  ] ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "fileLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  rdfs:label "BuildStandardFileLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileSystemLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileSystemLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 " ( " ;
                    sp:arg3 spin:_arg2 ;
                    sp:arg4 " )" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "fileSystemLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "file system name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardFileSystemLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileSystemUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileSystemUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "SRV_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 "FS_" ;
                        sp:arg6 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "FS_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name if exists" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure " ;
    ] ;
  rdfs:label "BuildStandardFileSystemUri " ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileTableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileTableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "FS_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 "FT_" ;
                        sp:arg6 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "FT_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileTableUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  rdfs:label "BuildStandardFileTableUri " ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardFileUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "FS_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg4 "--" ;
                        sp:arg5 "FILE_" ;
                        sp:arg6 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 "FILE_" ;
                        sp:arg3 [
                            a sp:encode_for_uri ;
                            sp:arg1 spin:_arg3 ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "directory structure" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  rdfs:label "BuildStandardFileUri " ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardReportColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "reportColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "RPT_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrReport" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrReport" ;
                      ] ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "reportColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """server name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset (report) name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "report column" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildStandardReportColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardReportDatasetUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "reportDatasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
                sp:arg2 "RPD_" ;
                sp:arg3 [
                    a sp:encode_for_uri ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "reportDatasetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment """server name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "report name" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildStandardReportReportDatasetUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardReportUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "reportDatasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
                sp:arg2 "RPT_" ;
                sp:arg3 [
                    a sp:encode_for_uri ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "reportUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "enterprise namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server Name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "report name" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "BuildStandardReportUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:BuildStandardServerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "serverUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "technical namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "BuildStandardServerUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:FindCustomClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customClass" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "inputGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "importedGraphs" ;
                    ] ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "inputGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "inputGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:ne ;
                      sp:arg1 [
                          sp:varName "customClass" ;
                        ] ;
                      sp:arg2 <http://edg.topbraid.solutions/model/CustomElement> ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "customClass" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "importedGraphs" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "local name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "graph to search for imported graphs that contain this class" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "looks for a custom class based on label." ;
  rdfs:label "Find Custom Class" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:FindCustomClassInGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customClass" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "currentLineageGraph" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/lineageModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentLineageGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInLineageMaybe" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "currentEnterpriseModel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject <http://temp.com/enterpriseAssetModel> ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a lib-importer:FindCustomClass ;
                      sp:arg1 spin:_arg1 ;
                      sp:arg2 [
                          sp:varName "currentEnterpriseModel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "customInEnterpriseMaybe" ;
                    ] ;
                ]
              ) ;
          ]
          [
            sp:object [
                sp:varName "currentTechnicalModel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/technicalAssetModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentTechnicalModel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInTechnicalMaybe" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "currentDataModel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/dataAssetModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentDataModel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInDataMaybe" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "customInLineageMaybe" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "customInLineageMaybe" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "customInEnterpriseMaybe" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "customInEnterpriseMaybe" ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "customInTechnicalMaybe" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "customInTechnicalMaybe" ;
                          ] ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "customInDataMaybe" ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                sp:varName "customInDataMaybe" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "none" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customClass" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "local name" ;
    ] ;
  rdfs:comment "Searches for the custom class in all imported graphs in the Lineage/Data/Technical/Enterprise models" ;
  rdfs:label "FindGraphForCustomClass" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:FindCustomClassNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customNamespace" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "currentLineageGraph" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/lineageModel> ;
          ]
          [
            sp:object [
                sp:varName "currentLineageModelNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/lineageModelNamespace> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentLineageGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInLineageMaybe" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "currentTechnicalModel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/technicalAssetModel> ;
          ]
          [
            sp:object [
                sp:varName "technicalModelNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/technicalAssetNamespace> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentTechnicalModel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInTechnicalMaybe" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "currentDataModel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/dataAssetModel> ;
          ]
          [
            sp:object [
                sp:varName "dataModelNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/dataAssetNamespace> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:FindCustomClass ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "currentDataModel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInDataMaybe" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "currentEnterpriseModel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject <http://temp.com/enterpriseAssetModel> ;
                ]
                [
                  sp:object [
                      sp:varName "enterpriseModelNamespace" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject <http://temp.com/enterpriseAssetNamespace> ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a lib-importer:FindCustomClass ;
                      sp:arg1 spin:_arg1 ;
                      sp:arg2 [
                          sp:varName "currentEnterpriseModel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "customInEnterpriseMaybe" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "customInLineageMaybe" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "currentLineageModelNamespace" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "customInEnterpriseMaybe" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "enterpriseModelNamespace" ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "customInTechnicalMaybe" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "technicalModelNamespace" ;
                          ] ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "customInDataMaybe" ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                sp:varName "customInDataMaybe" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "none" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "local name" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "FindGraphForCustomClass" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetConfigBaseUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "configBaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <http://edg.topbraidlive.org/1.0/config/importers> ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "get config base uri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetCustomInstance
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customInstanceUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/CustomElement> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "customInstanceUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "customInstanceUri" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "dataContainerUri" ;
                          ] ;
                        sp:predicate <http://edg.topbraid.solutions/model/dataElementOf> ;
                        sp:subject [
                            sp:varName "customInstanceUri" ;
                          ] ;
                      ]
                      [
                        sp:object spin:_arg3 ;
                        sp:predicate <http://edg.topbraid.solutions/model/name> ;
                        sp:subject [
                            sp:varName "dataContainerUri" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "custom element name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "composite hierarchy" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "data container" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetCustomInstance" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetCustomInstanceFromSpecificGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customElementUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "customElementUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "customElementUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode spin:_arg3 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "custom class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "custom element name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "graph uri" ;
    ] ;
  rdfs:label "GetCustomInstanceFromSpecificGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetCustomInstanceNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customInstanceNamespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:trace ;
                sp:arg1 "I am in GetCustomInstanceNamespace with {?arg1}" ;
              ] ;
            sp:variable [
                sp:varName "a1" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "superClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "projectType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/model/instancesHeldInAssetCollectionType> ;
            sp:subject [
                sp:varName "superClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "projectType" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/model/dataAssetsProjectType> ;
                  ] ;
                sp:arg2 [
                    a lib-importer:GetDataAssetNamespace ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "projectType" ;
                          ] ;
                        sp:arg2 <http://edg.topbraid.solutions/model/TechnicalAssetsProjectType> ;
                      ] ;
                    sp:arg2 [
                        a lib-importer:GetTechnicalAssetNamespace ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "projectType" ;
                              ] ;
                            sp:arg2 <http://edg.topbraid.solutions/model/EnterpriseAssetsProjectType> ;
                          ] ;
                        sp:arg2 [
                            a lib-importer:GetEnterpriseAssetNamespace ;
                          ] ;
                        sp:arg3 [
                            sp:varName "lineageModelName" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customInstanceNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "this is the custom class" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "We check to see in which model the class is held on and then retrieve its namespace. If in none, we use the lineage model namespace" ;
  rdfs:label "Get Lineage Model Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetDataAssetModelForLineage
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataAssetModel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "dataAssetModelLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/dataAssetModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "dataAssetModelLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataAssetModel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetDataAssetModelForLineage" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetDataAssetNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "dataAssetNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/dataAssetNamespace> ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """In the older version this function got the default data asset namespace to use in the lineage model data asset produced triples. To do so, it searched first to find the config file, which is either the one declared from the user in Server Administration Custom Config Parameters or the default http://edg.topbraidlive.org/1.0/config/importers
The body was
SELECT ?dataAssetNamespace
WHERE {
    BIND (lib-importer:GetConfigBaseUri() AS ?configBaseUri) .
    BIND (spl:objectInGraph(config-importers:DefaultLineageConfigurationTemplate, config-importers:dataAssetNamespace, ?configBaseUri) AS ?dataAssetNamespace) .
}""" ;
  rdfs:label "get data asset namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetDataAssetNamespaceForCompliance
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetConfigBaseUri ;
              ] ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 <http://edg.topbraidlive.org/config/importers#DefaultComplianceConfigurationExecutableTemplate> ;
                sp:arg2 <http://edg.topbraidlive.org/config/importers#dataAssetNamespace> ;
                sp:arg3 [
                    sp:varName "configBaseUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function gets the default data asset namespace to use in the compliance model data asset produced triples. To do so, it searches first to find the confgi file, which is either the one declared from the user in Server Administration Custom Config Parameters or the default http://edg.topbraidlive.org/1.0/config/importers" ;
  rdfs:label "get data asset namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetDefaultNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a spl:objectInGraph ;
            sp:arg1 [
                sp:varName "graph" ;
              ] ;
            sp:arg2 <http://topbraid.org/swa#defaultNamespace> ;
            sp:arg3 [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "This function returns the default namespace of the input graph" ;
  rdfs:label "GetDefaultNamespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetEnterpriseAssetModelForLineage
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "enterpriseAssetModel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "enterpriseAssetModelLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/enterpriseAssetModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "enterpriseAssetModelLabel" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        sp:varName "enterpriseAssetModelLabel" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "enterpriseAssetModel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetEnterpriseAssetModelForLineage" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetEnterpriseAssetNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "enterpriseAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "enterpriseAssetNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/enterpriseAssetNamespace> ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "See comment for older version in GetDataAssetNamespace" ;
  rdfs:label "Get Enterprise Asset Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetEnterpriseAssetNamespaceForCompliance
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "enterpriseAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetConfigBaseUri ;
              ] ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 <http://edg.topbraidlive.org/config/importers#DefaultComplianceConfigurationExecutableTemplate> ;
                sp:arg2 <http://edg.topbraidlive.org/config/importers#enterpriseAssetNamespace> ;
                sp:arg3 [
                    sp:varName "configBaseUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "enterpriseAssetNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function gets the default enterprise asset namespace to use in the compliance model data asset produced triples. To do so, it searches first to find the config file, which is either the one declared from the user in Server Administration Custom Config Parameters or the default http://edg.topbraidlive.org/1.0/config/importers" ;
  rdfs:label "Get Enterprise Asset Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetExecutableAcronym
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableAcronym" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate <http://edg.topbraid.solutions/model/name> ;
            sp:subject [
                sp:varName "executableClassUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableAcronym" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/model/acronym> ;
            sp:subject [
                sp:varName "executableClassUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type" ;
    ] ;
  rdfs:label "GetExecutableAcronym" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetExecutableClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableClassUri" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate <http://edg.topbraid.solutions/model/name> ;
            sp:subject [
                sp:varName "executableClassUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type" ;
    ] ;
  rdfs:label "GetExecutableClass" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetExecutableSystemType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableSystemType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "executableSystemType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://edg.topbraid.solutions/1.0/codelist/technical-assets> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable type" ;
    ] ;
  rdfs:label "GetExecutableSystemType" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetHistoryOrWorkingCopyGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:if ;
            sp:arg1 [
                a sp:strstarts ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 "urn:x-evn-master:" ;
              ] ;
            sp:arg2 [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:masterGraphForCurrentUser ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:arg3 [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the specified graph with change tracking enabled. If it's a working copy, return it immediately. If it's a master graph, return its team buffering graph for the current user. Otherwise, behaviour is undefined." ;
  rdfs:label "get Model" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetLineageModel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "lineageModel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "currentLineageModelLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/lineageModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "currentLineageModelLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lineageModel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetLineageModel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetLineageModelNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "lineageModelNamespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetConfigBaseUri ;
              ] ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 <http://edg.topbraidlive.org/config/importers#DefaultLineageConfigurationTemplate> ;
                sp:arg2 <http://edg.topbraidlive.org/config/importers#lineageModelNamespace> ;
                sp:arg3 [
                    sp:varName "configBaseUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lineageModelNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function gets the default model namespace to use in the lineage model data asset produced triples. To do so, it searches first to find the config file, which is either the one declared from the user in Server Administration Custom Config Parameters or the default http://edg.topbraidlive.org/1.0/config/importers" ;
  rdfs:label "Get Lineage Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetModel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "model" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetConfigBaseUri ;
              ] ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraidlive.org/config/importers#serverName> ;
                  sp:subject [
                      sp:varName "mappingUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraidlive.org/config/importers#schemaName> ;
                  sp:subject [
                      sp:varName "mappingUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "model" ;
                    ] ;
                  sp:predicate <http://edg.topbraidlive.org/config/importers#mapsToModel> ;
                  sp:subject [
                      sp:varName "mappingUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "configBaseUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """this is the server name
""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "this is the scheme name" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "This function gets the physical model ( or logical or report model) based on server and scheme from the config mapping" ;
  rdfs:label "get Model" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDataContainerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataContainerUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "dataContainerClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  a sp:TriplePath ;
                  sp:object <http://edg.topbraid.solutions/model/DataContainer> ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "dataContainerClass" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data container name" ;
    ] ;
  rdfs:label "GetStandardDataContainerUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseColumn
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "columnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseColumn> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "columnUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "columnUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "datasetUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/columnOf> ;
                  sp:subject [
                      sp:varName "columnUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "column name" ;
    ] ;
  rdfs:label "GetStandardDatabaseColumn" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseSchemaUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "schemaUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg3 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseSchema> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg2 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/specificationFor> ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  rdfs:comment "*needs more work on the model to declare that a schema belongs to a database*" ;
  rdfs:label "GetStandardDatabaseSchemaUri " ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseSynonymColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseSynonymColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "SRV_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServer" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg3 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServer" ;
                      ] ;
                    sp:arg2 "DB_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg4 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabase" ;
                      ] ;
                    sp:arg2 "SCH_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg4 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabase" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceOrServerOrDatabaseSchema" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg5 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceOrServerOrDatabaseSchema" ;
                      ] ;
                    sp:arg2 "SYN_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 spin:_arg5 ;
                      ] ;
                    sp:arg4 "--" ;
                  ] ;
                sp:arg3 [
                    sp:varName "namespaceOrServerOrDatabaseSchema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "namespaceServerOrDatabaseOrSchemaOrTable" ;
                      ] ;
                    sp:arg2 "COL_" ;
                    sp:arg3 [
                        a sp:encode_for_uri ;
                        sp:arg1 [
                            sp:varName "arg6" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseSynonymColumnUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "data asset namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "synonym (dataset) column" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "column name" ;
    ] ;
  rdfs:label "GetStandardDatabaseSynonymColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a lib-importer:GetStandardDatabaseUriWithServer ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:iri ;
                    sp:arg1 [
                        a lib-importer:GetStandardDatabaseUriWithoutServer ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "server uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  rdfs:label "GetStandardDatabaseUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseUriWithServer
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  a sp:TriplePath ;
                  sp:object <http://edg.topbraid.solutions/model/Database> ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/hostedOn> ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "server uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  rdfs:label ":GetStandardDatabaseUriWithServer" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardDatabaseUriWithoutServer
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "databaseUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  a sp:TriplePath ;
                  sp:object <http://edg.topbraid.solutions/model/Database> ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database name" ;
    ] ;
  rdfs:label ":GetStandardDatabaseUriWithServer" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExecutableIFPC-SSISUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object <http://edg.topbraid.solutions/model/SoftwareExecutable> ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "executableClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "executableClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "technicalGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetStandardExecutableIFPC-SSISUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExecutableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object <http://edg.topbraid.solutions/model/SoftwareExecutable> ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "executableClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "executableClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/residesIn> ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object spin:_arg3 ;
                        sp:predicate <http://edg.topbraid.solutions/model/belongsToSchema> ;
                        sp:subject [
                            sp:varName "executableUri" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "technicalGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "executable data container" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "executable schema" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetStandardExecutableScriptUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetStandardExistingLabelFromDataGraph ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "labelFromDataGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetStandardExistingLabelFromTechnicalGraph ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "labelFromTechnicalGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetStandardExistingLabelFromEnterpriseGraph ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "labelFromEnterpriseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetStandardExistingLabelFromLineageGraph ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "labelFromLineageGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "labelFromDataGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "labelFromDataGraph" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "labelFromTechnicalGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "labelFromTechnicalGraph" ;
                      ] ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "labelFromEnterpriseGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "labelFromEnterpriseGraph" ;
                          ] ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 [
                                    sp:varName "labelFromLineageGraph" ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                sp:varName "labelFromLineageGraph" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "none" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input uri" ;
    ] ;
  rdfs:label "GetStandardExistingLabel" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingLabelFromDataGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "dataGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "dataGraph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input uri" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "GetStandardExistingLabelFromDataGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingLabelFromEnterpriseGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetEnterpriseAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "enterpriseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "enterpriseGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "enterpriseGraph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input uri" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "GetStandardExistingLabelFromEnterpriseGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingLabelFromLineageGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object <http://edg.topbraid.solutions/model/LineageModel> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 rdfs:label ;
                sp:arg3 [
                    sp:varName "lineageModel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input uri" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "GetStandardExistingLabelFromLineageGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingLabelFromTechnicalGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "technicalGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "technicalGraph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input uri" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "GetStandardExistingLabelFromTechnicalGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardExistingName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "name" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a lib-importer:GetDataAssetModelForLineage ;
                      ] ;
                    sp:variable [
                        sp:varName "dataGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "dataGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spl:objectInGraph ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 <http://edg.topbraid.solutions/model/name> ;
                            sp:arg3 [
                                sp:varName "dataGraph" ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            sp:varName "none" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "name" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a lib-importer:GetTechnicalAssetModelForLineage ;
                      ] ;
                    sp:variable [
                        sp:varName "technicalGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "technicalGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spl:objectInGraph ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 <http://edg.topbraid.solutions/model/name> ;
                            sp:arg3 [
                                sp:varName "technicalGraph" ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            sp:varName "none" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "name" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a lib-importer:GetEnterpriseAssetModelForLineage ;
                      ] ;
                    sp:variable [
                        sp:varName "enterpriseGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "enterpriseGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spl:objectInGraph ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 <http://edg.topbraid.solutions/model/name> ;
                            sp:arg3 [
                                sp:varName "technicalGraph" ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            sp:varName "none" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "name" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "input uri" ;
    ] ;
  rdfs:label "GetStandardExistingName" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileColumnUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileColumnUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FileAsset> ;
                  sp:predicate rdf:type ;
                  sp:subject spin:_arg1 ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/residesIn> ;
                  sp:subject [
                      sp:varName "fileTableUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/FileTable> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileTableUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "fileTableUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/columnOf> ;
                  sp:subject [
                      sp:varName "fileColumnUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/TableColumn> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileColumnUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "fileColumnUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "file uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "file column" ;
    ] ;
  rdfs:label "GetStandardFileColumnUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileSystemUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileSystemUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg2 [
                    a lib-importer:GetStandardFileSystemUriWithServer ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 spin:_arg2 ;
                  ] ;
                sp:arg3 [
                    a lib-importer:GetStandardFileSystemUriWithoutServer ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "file system name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "server uri" ;
    ] ;
  rdfs:label "GetStandardFileSystemUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileSystemUriWithServer
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileSystemUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FileSystem> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/hostedOn> ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "file system name" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "server uri" ;
    ] ;
  rdfs:label "GetStandardFileSystemUriWithServer" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileSystemUriWithoutServer
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileSystemUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FileSystem> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "file system name" ;
    ] ;
  rdfs:label "GetStandardFileSystemUriWithoutServer" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileTableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileTableUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FileAsset> ;
                  sp:predicate rdf:type ;
                  sp:subject spin:_arg1 ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/residesIn> ;
                  sp:subject [
                      sp:varName "fileTableUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/FileTable> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileTableUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "file uri" ;
    ] ;
  rdfs:label "GetStandardFileTableUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardFileUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fileUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/FileAsset> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "fileUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/residesIn> ;
                  sp:subject [
                      sp:varName "fileUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "file system" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "file name" ;
    ] ;
  rdfs:label "GetStandardFileUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardServerUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "serverUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "serverUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/Server> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "serverUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "technicalGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "server name" ;
    ] ;
  rdfs:label "GetStandardServerUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardSoftwareFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "drmpUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/input> ;
                  sp:subject [
                      sp:varName "drmpUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg3 ;
                  sp:predicate <http://edg.topbraid.solutions/model/output> ;
                  sp:subject [
                      sp:varName "drmpUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "drmpUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/usesSoftwareFunction> ;
                  sp:subject spin:_arg1 ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "technicalGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "executable uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "input element uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "output uri" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetStandardSoftwareFunction" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardSynonymUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a lib-importer:GetStandardSynonymUriWithSchema ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg2 ;
                        sp:arg3 spin:_arg3 ;
                      ] ;
                    sp:arg3 [
                        a lib-importer:GetStandardSynonymUriWithoutSchema ;
                        sp:arg1 spin:_arg2 ;
                        sp:arg2 spin:_arg3 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "table name" ;
    ] ;
  rdfs:label "GetStandardSynonymUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardSynonymUriWithSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseSynonym> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg3 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "schemaUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/belongsToSchema> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg2 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/specificationFor> ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/synonymOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset name" ;
    ] ;
  rdfs:label "GetStandardSynonymUriWithSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardSynonymUriWithoutSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseSynonym> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/synonymOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "datasetUri" ;
    ] ;
  rdfs:label "GetStandardSynonymUriWithoutSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardTableUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a lib-importer:GetStandardTableUriWithSchema ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg2 ;
                        sp:arg3 spin:_arg3 ;
                      ] ;
                    sp:arg3 [
                        a lib-importer:GetStandardTableUriWithoutSchema ;
                        sp:arg1 spin:_arg2 ;
                        sp:arg2 spin:_arg3 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "table name" ;
    ] ;
  rdfs:label "GetStandardTableUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardTableUriWithSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg3 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseTable> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "schemaUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/belongsToSchema> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg2 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/specificationFor> ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/tableOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset name" ;
    ] ;
  rdfs:label "GetStandardTableUriWithSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardTableUriWithoutSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseTable> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/tableOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "datasetUri" ;
    ] ;
  rdfs:label "liGetStandardTableUriWithoutSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardViewUri
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a lib-importer:GetStandardViewUriWithSchema ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg2 ;
                        sp:arg3 spin:_arg3 ;
                      ] ;
                    sp:arg3 [
                        a lib-importer:GetStandardViewUriWithoutSchema ;
                        sp:arg1 spin:_arg2 ;
                        sp:arg2 spin:_arg3 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetUri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "table name" ;
    ] ;
  rdfs:label "GetStandardViewUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardViewUriWithSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg3 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseView> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "schemaUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/belongsToSchema> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg2 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/specificationFor> ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/viewOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "schema uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "container uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "dataset name" ;
    ] ;
  rdfs:label "GetStandardViewUriWithSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardViewUriWithoutSchema
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datasetUri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetDataAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "dataGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://edg.topbraid.solutions/model/DatabaseView> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate <http://edg.topbraid.solutions/model/name> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:iri ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseUri" ;
                    ] ;
                  sp:predicate <http://edg.topbraid.solutions/model/viewOf> ;
                  sp:subject [
                      sp:varName "datasetUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "dataGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "database uri" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "datasetUri" ;
    ] ;
  rdfs:label "GetStandardViewUriWithoutSchema" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetTechnicalAssetModelForLineage
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "technicalAssetModel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "technicalAssetModelLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/technicalAssetModel> ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "technicalAssetModelLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetModel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "GetTechnicalAssetModelForLineage" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetTechnicalAssetNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "technicalAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "technicalAssetNamespace" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject <http://temp.com/technicalAssetNamespace> ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "See comment for older version in GetDataAssetNamespace" ;
  rdfs:label "Get Technical Asset Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetTechnicalAssetNamespaceForCompliance
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "technicalAssetNamespace" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a lib-importer:GetConfigBaseUri ;
              ] ;
            sp:variable [
                sp:varName "configBaseUri" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 <http://edg.topbraidlive.org/config/importers#DefaultComplianceConfigurationExecutableTemplate> ;
                sp:arg2 <http://edg.topbraidlive.org/config/importers#technicalAssetNamespace> ;
                sp:arg3 [
                    sp:varName "configBaseUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "This function gets the default technical asset namespace to use in the compliance model data asset produced triples. To do so, it searches first to find the config file, which is either the one declared from the user in Server Administration Custom Config Parameters or the default http://edg.topbraidlive.org/1.0/config/importers" ;
  rdfs:label "Get Technical Asset Namespace" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:IsExistingConstraintViolation
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:ConstraintViolation ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphViolations ;
          ]
        ) ;
    ] ;
  rdfs:label "isExistingConstraintViolation" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:NormalizeString
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "normalizedStr" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:encode_for_uri ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "normalizedStrWithSpaces" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:regex ;
                sp:arg1 [
                    sp:varName "normalizedStrWithSpaces" ;
                  ] ;
                sp:arg2 "%20" ;
                sp:arg3 "_" ;
              ] ;
            sp:variable [
                sp:varName "normalizedStr" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The string we want to normalize before we use it in as part of a uri" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "function to normalize a string before we use it as part of a uri" ;
  rdfs:subClassOf spin:Functions ;
.
<http://edg.topbraid.solutions/importer/lib/GMD_lib>
  a <http://www.linkedmodel.org/schema/vaem#GraphMetaData> ;
.
arg:graph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
sp:arg6
  a rdf:Property ;
  rdfs:comment "The sixth argument of a function call. Only declared in here but still using the sp namepsace" ;
  rdfs:label "arg6" ;
  rdfs:subPropertyOf sp:arg ;
.
sp:arg7
  a rdf:Property ;
  rdfs:comment "The seventh argument of a function call. Only declared in here but still using the sp namepsace" ;
  rdfs:label "arg7" ;
  rdfs:subPropertyOf sp:arg ;
.
