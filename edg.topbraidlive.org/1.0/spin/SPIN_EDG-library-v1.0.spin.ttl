# baseURI: http://edg.topbraid.solutions/1.0/spin/library
# imports: http://edg.topbraid.solutions/1.0/schema/core
# imports: http://edg.topbraid.solutions/1.0/schema/datamodels
# imports: http://edg.topbraidlive.org/1.0/config/diagrams
# imports: http://spinrdf.org/spinx
# imports: http://spinrdf.org/spr
# imports: http://topbraid.org/tables
# imports: http://uispin.org/ui
# imports: http://www.w3.org/ns/shacl#

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraid.solutions/1.0/spin/library>
  a owl:Ontology ;
  vaem:hasGraphMetadata <http://edg.topbraid.solutions/spin/library/GMD_library> ;
  rdfs:label "EDG SPIN Library - main" ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/core> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/datamodels> ;
  owl:imports <http://edg.topbraidlive.org/1.0/config/diagrams> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports <http://spinrdf.org/spr> ;
  owl:imports <http://topbraid.org/tables> ;
  owl:imports <http://uispin.org/ui> ;
  owl:imports sh: ;
.
edg:AskTemplates
  a spin:AskTemplate ;
  rdfs:label "Ask templates" ;
  rdfs:subClassOf spin:AskTemplates ;
.
edg:CommaSeparatedEncodedNodeAggregatorStepFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:gt ;
                    sp:arg1 [
                        a fn:string-length ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 [
                    a fn:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "," ;
                    sp:arg3 [
                        a ui:encodeNode ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a ui:encodeNode ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated encoded node aggregator step function" ;
  rdfs:subClassOf spr:AggregatorStepFunctions ;
.
edg:CommaSeparatedEncodedNodeList
  a spr:Aggregator ;
  spr:stepFunction edg:CommaSeparatedEncodedNodeAggregatorStepFunction ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated encoded node list" ;
.
edg:CommaSeparatedList
  a spr:Aggregator ;
  spr:stepFunction edg:CommaSeparatedListAggregatorStepFunction ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated list" ;
.
edg:CommaSeparatedListAggregatorStepFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:gt ;
                    sp:arg1 [
                        a fn:string-length ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 [
                    a fn:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "," ;
                    sp:arg3 spin:_arg2 ;
                  ] ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated encoded node aggregator step function" ;
  rdfs:subClassOf spr:AggregatorStepFunctions ;
.
edg:CommaSeparatedResourceLabelAggregatorStepFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a sp:if ;
                  sp:arg1 [
                      a sp:gt ;
                      sp:arg1 [
                          a fn:string-length ;
                          sp:arg1 spin:_arg1 ;
                        ] ;
                      sp:arg2 0 ;
                    ] ;
                  sp:arg2 [
                      a fn:concat ;
                      sp:arg1 spin:_arg1 ;
                      sp:arg2 "," ;
                      sp:arg3 [
                          a ui:label ;
                          sp:arg1 spin:_arg2 ;
                        ] ;
                    ] ;
                  sp:arg3 [
                      a ui:label ;
                      sp:arg1 spin:_arg2 ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "result" ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated resource label aggregator step function" ;
  rdfs:subClassOf spr:AggregatorStepFunctions ;
.
edg:CommaSeparatedResourceLabelList
  a spr:Aggregator ;
  spr:stepFunction edg:CommaSeparatedResourceLabelAggregatorStepFunction ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Comma separated resource label list" ;
.
edg:ConstructParameterlessRESTcall
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "call" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 "http://server.topbraidlive.org/dynamic/config" ;
              ] ;
            sp:variable [
                sp:varName "configGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 config:configuration ;
                sp:arg2 cfg:serverURL ;
                sp:arg3 [
                    sp:varName "configGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeServerURL" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:ends-with ;
                    sp:arg1 [
                        sp:varName "maybeServerURL" ;
                      ] ;
                    sp:arg2 "/" ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "maybeServerURL" ;
                      ] ;
                    sp:arg2 "edg/" ;
                  ] ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "maybeServerURL" ;
                      ] ;
                    sp:arg2 "/edg/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeServerURL2" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a smf:isTBL ;
                  ] ;
                sp:arg2 [
                    sp:varName "maybeServerURL2" ;
                  ] ;
                sp:arg3 "http://localhost:8083/" ;
              ] ;
            sp:variable [
                sp:varName "serverURL" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "serverURL" ;
                  ] ;
                sp:arg2 "tbl/swp?_viewClass=" ;
                sp:arg3 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "name" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "call" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Construct parameterless REST call" ;
  rdfs:subClassOf edg:Functions ;
.
edg:Elements
  rdfs:subClassOf rdfs:Resource ;
.
edg:FileAsset
  edg:typeTag "file" ;
.
edg:FindDatatype
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dt" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 <http://edg.topbraid.solutions/1.0/collection/datatypes> ;
              ] ;
            sp:variable [
                sp:varName "allDatatypeGraphs" ;
              ] ;
          ]
          (
            [
              a sp:NamedGraph ;
              sp:elements (
                  [
                    a sp:TriplePath ;
                    sp:object edg:Datatype ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dtClass" ;
                      ] ;
                  ]
                  (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "dtClass" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "dt" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dtName" ;
                              ] ;
                            sp:predicate edg:name ;
                            sp:subject [
                                sp:varName "dt" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                a fn:lower-case ;
                                sp:arg1 [
                                    sp:varName "dtName" ;
                                  ] ;
                              ] ;
                            sp:variable [
                                sp:varName "lcName" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                a spif:trim ;
                                sp:arg1 [
                                    sp:varName "name" ;
                                  ] ;
                              ] ;
                            sp:variable [
                                sp:varName "n1" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                a spif:regex ;
                                sp:arg1 [
                                    sp:varName "n1" ;
                                  ] ;
                                sp:arg2 "^([a-z][a-z0-9]+)\\\\s*?(\\\\(.*\\\\)|$)" ;
                                sp:arg3 "$1" ;
                              ] ;
                            sp:variable [
                                sp:varName "n2" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                a fn:lower-case ;
                                sp:arg1 [
                                    sp:varName "n2" ;
                                  ] ;
                              ] ;
                            sp:variable [
                                sp:varName "dtString" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "lcName" ;
                                  ] ;
                                sp:arg2 [
                                    sp:varName "dtString" ;
                                  ] ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "graph" ;
                        ] ;
                    ]
                  )
                ) ;
              sp:graphNameNode [
                  sp:varName "allDatatypeGraphs" ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:name ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """Test with:

SELECT *
WHERE
{ 
BIND (\"varchar\" AS ?t) .
BIND(edg:FindDatatype(<http://edg.topbraid.solutions/1.0/datatypes/oracle>,?t) AS ?x)
}""" ;
  rdfs:label "Find datatype" ;
  rdfs:subClassOf edg:Functions ;
.
edg:Functions
  a spin:Function ;
  rdfs:label "Functions" ;
  rdfs:subClassOf spin:Functions ;
.
edg:GetDataDependents
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dependent" ;
          ]
          [
            sp:varName "dependentType" ;
          ]
          [
            sp:varName "parent" ;
          ]
          [
            sp:varName "containmentProperty" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "dependent" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependentType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "dependent" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependentType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a edg:highestDepictionForSoftwareExecutable ;
                        sp:arg1 [
                            sp:varName "dependent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "parent" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object provo:wasDerivedFrom ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "provenanceProperty" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "provenanceProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "dependent" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependentType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "dependent" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "dependent" ;
                            ] ;
                          sp:predicate [
                              sp:varName "containmentProperty" ;
                            ] ;
                          sp:subject [
                              sp:varName "parent" ;
                            ] ;
                        ]
                        [
                          a sp:TriplePath ;
                          sp:object edg:compositionProperty ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 1 ;
                              sp:subPath rdfs:subPropertyOf ;
                            ] ;
                          sp:subject [
                              sp:varName "containmentProperty" ;
                            ] ;
                        ]
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns dependents of a given data resource" ;
  rdfs:label "get data dependents" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetEntitiesInLogicalRelation
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "association" ;
          ]
          [
            sp:varName "entity1" ;
          ]
          [
            sp:varName "entity2" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "participant1" ;
              ] ;
            sp:predicate edg:participant ;
            sp:subject [
                sp:varName "association" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity1" ;
              ] ;
            sp:predicate edg:logicalEntity ;
            sp:subject [
                sp:varName "participant1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "logicalModel" ;
              ] ;
            sp:predicate edg:entityOflogicalDataModel ;
            sp:subject [
                sp:varName "entity1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "participant2" ;
              ] ;
            sp:predicate edg:participant ;
            sp:subject [
                sp:varName "association" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "participant1" ;
                  ] ;
                sp:arg2 [
                    sp:varName "participant2" ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "entity2" ;
              ] ;
            sp:predicate edg:logicalEntity ;
            sp:subject [
                sp:varName "participant2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "logicalModel" ;
              ] ;
            sp:predicate edg:entityOflogicalDataModel ;
            sp:subject [
                sp:varName "entity2" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:association ;
      spl:valueType edg:LogicalRelation ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:logicalModel ;
      spl:valueType edg:LogicalDataModel ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Class ;
  rdfs:label "get root class" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetLogicalEntities
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "entity" ;
          ]
          [
            sp:varName "entityName" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:entityOflogicalDataModel ;
            sp:subject [
                sp:varName "entity" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "entity" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "entityName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:LogicalDataModel ;
    ] ;
  spin:private true ;
  rdfs:label "Get logical entities" ;
  rdfs:subClassOf edg:Templates ;
.
edg:GetLogicalEntityAssociations
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "association" ;
          ]
          [
            sp:varName "associationName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "specificResource" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "specificResource" ;
                      ] ;
                    sp:variable [
                        sp:varName "association" ;
                      ] ;
                  ]
                )
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:not ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "specificResource" ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "logicalEntity" ;
                      ] ;
                    sp:predicate edg:logicalEntity ;
                    sp:subject [
                        sp:varName "participatingResource" ;
                      ] ;
                  ]
                  [
                    sp:object edg:LogicalRelationParticipant ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "participatingResource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "participatingResource" ;
                      ] ;
                    sp:predicate edg:participant ;
                    sp:subject [
                        sp:varName "association" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "association" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "associationName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:logicalEntity ;
      spl:valueType edg:LogicalEntity ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:specificResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Get logical entity associations" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GovernanceFramework
  edg:typeTag "framework" ;
.
edg:Infrastructure
  edg:typeTag "infrastructure" ;
.
edg:MagicProperties
  a spin:MagicProperty ;
  rdfs:label "Magic properties" ;
  rdfs:subClassOf spin:MagicProperties ;
.
edg:MergeLists
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  spinx:javaScriptFile "lgfunctions.js" ;
  rdfs:label "Merge lists" ;
  rdfs:subClassOf spin:Functions ;
.
edg:ObjectsForGivenPropertySubject
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "object" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all objects where the given subject has at least one value for a given property." ;
  rdfs:label "objects for a given property and subject" ;
  rdfs:seeAlso edg:SubjectsForGivenPropertyObject ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:ResultSetSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Result set select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:RowsOfResultSetFilteredByGivenColumnNumberAndValue
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "rowIndex" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "rowIndex" ;
              ] ;
            sp:predicate spr:rowIndices ;
            sp:subject [
                sp:varName "resultSet" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 [
                    sp:varName "column" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "testValue" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "testValue" ;
                  ] ;
                sp:arg2 [
                    sp:varName "value" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Rows of result set filtered by given column number and value" ;
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:SelectTemplates
  a spin:SelectTemplate ;
  spin:abstract true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf edg:Templates ;
.
edg:ServiceFramework
  edg:typeTag "framework" ;
.
edg:SoftwareComponent
  edg:typeTag "software" ;
.
edg:SoftwareFunction
  edg:typeTag "function" ;
.
edg:SubjectsForGivenPropertyObject
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all subjects where the given object has at least one value for a given property." ;
  rdfs:label "subjects for a given property and object" ;
  rdfs:seeAlso edg:ObjectsForGivenPropertySubject ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:SubjectsForObject
  a spin:SelectTemplate ;
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "returns resources and properties that refer to a given object" ;
  rdfs:label "subjects for object" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:Templates
  a spin:Template ;
  rdfs:label "Templates" ;
  rdfs:subClassOf spin:Templates ;
.
edg:Transform
  edg:typeTag "transform" ;
.
edg:UsedObjectPredicates
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "predicate" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "predicate" ;
          ]
          [
            sp:varName "o" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "o" ;
                      ] ;
                    sp:predicate [
                        sp:varName "predicate" ;
                      ] ;
                    sp:subject [
                        sp:varName "subject" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:ne ;
                                    sp:arg1 [
                                        sp:varName "predicate" ;
                                      ] ;
                                    sp:arg2 rdf:subject ;
                                  ] ;
                                sp:arg2 [
                                    a sp:ne ;
                                    sp:arg1 [
                                        sp:varName "predicate" ;
                                      ] ;
                                    sp:arg2 rdf:predicate ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:ne ;
                                sp:arg1 [
                                    sp:varName "predicate" ;
                                  ] ;
                                sp:arg2 rdf:object ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "predicate" ;
                              ] ;
                            sp:arg2 rdf:type ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object spin:MagicProperty ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "predicate" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "domain" ;
                      ] ;
                    sp:predicate rdfs:domain ;
                    sp:subject [
                        sp:varName "predicate" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "domain" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "subject" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all predicates where the given subject actually has at least one value for, plus all magic properties with matching rdfs:domains." ;
  rdfs:label "Used object predicates" ;
  rdfs:subClassOf swa:ObjectPredicateSelectionTemplates ;
.
edg:aggregateCol
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "" ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg2 ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 [
                                a spr:rowCount ;
                                sp:arg1 spin:_arg2 ;
                              ] ;
                            sp:arg2 0 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "" ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:and ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 spin:_arg2 ;
                            ] ;
                          sp:arg2 [
                              a sp:gt ;
                              sp:arg1 [
                                  a spr:rowCount ;
                                  sp:arg1 spin:_arg2 ;
                                ] ;
                              sp:arg2 0 ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "stepFunction" ;
                      ] ;
                    sp:predicate spr:stepFunction ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spr:startValue ;
                      ] ;
                    sp:variable [
                        sp:varName "maybeStartValue" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "maybeStartValue" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "startValue" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "resultFunction" ;
                            ] ;
                          sp:predicate spr:resultFunction ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spr:rowCount ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:variable [
                        sp:varName "rowCount" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spr:visitCol ;
                        sp:arg1 spin:_arg2 ;
                        sp:arg2 spin:_arg3 ;
                        sp:arg3 0 ;
                        sp:arg4 [
                            a sp:sub ;
                            sp:arg1 [
                                sp:varName "rowCount" ;
                              ] ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg5 [
                            sp:varName "stepFunction" ;
                          ] ;
                        sp:arg6 [
                            sp:varName "startValue" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "stepped" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "resultFunction" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "resultFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "stepped" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "rowCount" ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            sp:varName "stepped" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType spr:Aggregator ;
      rdfs:comment "The aggregator to perform." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType spr:Table ;
      rdfs:comment "The spr:Table to iterate over." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The column index." ;
    ] ;
  rdfs:comment "Applies the spr:Aggregator ?arg1 to all rows of column ?arg3 of spr:Table ?arg2." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "aggregate row" ;
  rdfs:subClassOf spr:Functions ;
.
edg:aspectClasses
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "aspectClass" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate edg:immediateParents ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object edg:AspectClass ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "parent" ;
                      ] ;
                    sp:variable [
                        sp:varName "aspectClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "parent" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate edg:aspectClasses ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "aspectClass" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
    ] ;
  rdfs:label "aspect classes" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:buildOracleDatatype
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "localName" ;
          ]
          [
            sp:varName "typeClass" ;
          ]
          [
            sp:varName "precision" ;
          ]
          [
            sp:varName "scale" ;
          ]
          [
            sp:varName "chars" ;
          ]
          [
            sp:varName "charOrByte" ;
          ]
          [
            sp:varName "qualifier" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "DATE" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_DATE" ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDateTimeDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "CHAR(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^CHAR\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_CHAR-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleCharacterType ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "NCHAR(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^NCHAR\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_NCHAR-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleStringDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:in ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "BFILE" ;
                        sp:arg3 "BLOB" ;
                        sp:arg4 "CLOB" ;
                        sp:arg5 "NCLOB" ;
                        sp:arg6 "ROWID" ;
                        sp:arg7 "UROWID" ;
                        sp:arg8 "INTERVAL" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_" ;
                        sp:arg2 [
                            sp:varName "ucName" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "FLOAT" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "(" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_FLOAT" ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "FLOAT(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^FLOAT\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_FLOAT-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "TIMESTAMP" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "ORACLE_TIMESTAMP" ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDateTimeDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "LONG" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "RAW" ;
                          ] ;
                        sp:arg2 "-RAW" ;
                        sp:arg3 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "qualifier" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_LONG" ;
                        sp:arg2 [
                            sp:varName "qualifier" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "RAW(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^RAW\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_RAW-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "NVARCHAR2(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^NVARCHAR2\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_NVARCHAR2-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleVarchar2 ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "TIMESTAMP(" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^TIMESTAMP\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "qualifier" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:replaceAll ;
                        sp:arg1 [
                            sp:varName "qualifier" ;
                          ] ;
                        sp:arg2 " " ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:variable [
                        sp:varName "qualifier2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_TIMESTAMP-" ;
                        sp:arg2 [
                            sp:varName "qualifier2" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDateTimeDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "TIMESTAMP WITH" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^TIMESTAMP\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "qualifier" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:replaceAll ;
                        sp:arg1 [
                            sp:varName "qualifier" ;
                          ] ;
                        sp:arg2 " " ;
                        sp:arg3 "-" ;
                      ] ;
                    sp:variable [
                        sp:varName "qualifier2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_" ;
                        sp:arg2 [
                            sp:varName "qualifier2" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDateTimeDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:or ;
                            sp:arg1 [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "INTEGER" ;
                              ] ;
                            sp:arg2 [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "INT" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "REAL" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_" ;
                        sp:arg2 [
                            sp:varName "ucName" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "NUMBER" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "," ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_NUMBER" ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "NUMBER(" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:contains ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "," ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^NUMBER\\((.*),(.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^NUMBER\\((.*),(.*)\\)" ;
                        sp:arg3 "$2" ;
                      ] ;
                    sp:variable [
                        sp:varName "scale" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_NUMBER-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                        sp:arg3 "-" ;
                        sp:arg4 [
                            sp:varName "scale" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "DECIMAL(" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:contains ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "," ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^DECIMAL\\((.*),(.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^DECIMAL\\((.*),(.*)\\)" ;
                        sp:arg3 "$2" ;
                      ] ;
                    sp:variable [
                        sp:varName "scale" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_DECIMAL-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                        sp:arg3 "-" ;
                        sp:arg4 [
                            sp:varName "scale" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleDecimalDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "NUMBER(" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "," ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                          ] ;
                        sp:arg2 "^NUMBER\\((.*)\\)" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "precision" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_NUMBER-" ;
                        sp:arg2 [
                            sp:varName "precision" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleNumericDatatype ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a fn:starts-with ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "VARCHAR2" ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a fn:contains ;
                                    sp:arg1 [
                                        sp:varName "ucName" ;
                                      ] ;
                                    sp:arg2 "BYTE" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 " CHAR" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^VARCHAR2\\(([1-9][0-9]*)\\)\\s*$" ;
                        sp:arg3 "$1" ;
                        sp:arg4 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "chars" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_VARCHAR2-" ;
                        sp:arg2 [
                            sp:varName "chars" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "chars" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleVarchar2 ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a fn:starts-with ;
                            sp:arg1 [
                                sp:varName "ucName" ;
                              ] ;
                            sp:arg2 "VARCHAR2" ;
                          ] ;
                        sp:arg2 [
                            a sp:or ;
                            sp:arg1 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "BYTE" ;
                              ] ;
                            sp:arg2 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 " CHAR" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^([A-Z][A-Z0-9]*)\\s*(\\(.*\\))$" ;
                        sp:arg3 "$2" ;
                      ] ;
                    sp:variable [
                        sp:varName "args1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 [
                            sp:varName "args1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "args2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "args2" ;
                          ] ;
                        sp:arg2 "^\\(\\s*([0-9]*)\\s*(BYTE|CHAR)\\s*\\)$" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "chars" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "args2" ;
                              ] ;
                            sp:arg2 "BYTE" ;
                          ] ;
                        sp:arg2 "BYTE" ;
                        sp:arg3 "CHAR" ;
                      ] ;
                    sp:variable [
                        sp:varName "charOrByte" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_VARCHAR2-" ;
                        sp:arg2 [
                            sp:varName "chars" ;
                          ] ;
                        sp:arg3 "-" ;
                        sp:arg4 [
                            sp:varName "charOrByte" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleVarchar2 ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a fn:starts-with ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "VARCHAR" ;
                              ] ;
                            sp:arg2 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:not ;
                                    sp:arg1 [
                                        a fn:contains ;
                                        sp:arg1 [
                                            sp:varName "ucName" ;
                                          ] ;
                                        sp:arg2 "VARCHAR2" ;
                                      ] ;
                                  ] ;
                                sp:arg2 [
                                    a sp:not ;
                                    sp:arg1 [
                                        a fn:contains ;
                                        sp:arg1 [
                                            sp:varName "ucName" ;
                                          ] ;
                                        sp:arg2 "BYTE" ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 " CHAR" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^VARCHAR\\(([1-9][0-9]*)\\)\\s*$" ;
                        sp:arg3 "$1" ;
                        sp:arg4 "" ;
                      ] ;
                    sp:variable [
                        sp:varName "chars" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_VARCHAR-" ;
                        sp:arg2 [
                            sp:varName "chars" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "chars" ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleVarchar ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "myArg1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a fn:upper-case ;
                        sp:arg1 [
                            sp:varName "myArg1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "ucName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a fn:starts-with ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "VARCHAR" ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a fn:contains ;
                                    sp:arg1 [
                                        sp:varName "ucName" ;
                                      ] ;
                                    sp:arg2 "VARCHAR2" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:or ;
                            sp:arg1 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 "BYTE" ;
                              ] ;
                            sp:arg2 [
                                a fn:contains ;
                                sp:arg1 [
                                    sp:varName "ucName" ;
                                  ] ;
                                sp:arg2 " CHAR" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "ucName" ;
                          ] ;
                        sp:arg2 "^([A-Z][A-Z0-9]*)\\s*(\\(.*\\))$" ;
                        sp:arg3 "$2" ;
                      ] ;
                    sp:variable [
                        sp:varName "args1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:trim ;
                        sp:arg1 [
                            sp:varName "args1" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "args2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:regex ;
                        sp:arg1 [
                            sp:varName "args2" ;
                          ] ;
                        sp:arg2 "^\\(\\s*([0-9]*)\\s*(BYTE|CHAR)\\s*\\)$" ;
                        sp:arg3 "$1" ;
                      ] ;
                    sp:variable [
                        sp:varName "chars" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a fn:contains ;
                            sp:arg1 [
                                sp:varName "args2" ;
                              ] ;
                            sp:arg2 "BYTE" ;
                          ] ;
                        sp:arg2 "BYTE" ;
                        sp:arg3 "CHAR" ;
                      ] ;
                    sp:variable [
                        sp:varName "charOrByte" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "ORACLE_VARCHAR-" ;
                        sp:arg2 [
                            sp:varName "chars" ;
                          ] ;
                        sp:arg3 "-" ;
                        sp:arg4 [
                            sp:varName "charOrByte" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "localName" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:OracleVarchar ;
                    sp:variable [
                        sp:varName "typeClass" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment """<p>This SPIN magic property takes a datatype name as a string, and returns a local name for an ORACLE resource along with the type class of the ORACLE type., and any additional qualifiers, such as precision, scale or number of characters. For axample \"varchar2(30)\" is translated to \"ns/ORACLE_VARCHAR2-30\" and \"number(20,5)\" to \"ns/ORACLE_NUMBER-20-5\"</p>
<p>Test with:</p>
<pre>


SELECT ?test ?ln ?tc ?precision ?scale ?chars ?qualifier
WHERE {
{BIND(\"BFILE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"BLOB\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"CHAR(2000)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"CLOB\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"DATE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"FLOAT\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"FLOAT(53)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"FLOAT(126)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"INT\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"INTERVAL\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"LONG\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"LONG RAW\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NCHAR(1000)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NCLOB\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NUMBER\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NUMBER(38)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NUMBER(38,18)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"NVARCHAR2(2000)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"RAW(2000)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"REAL\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"ROWID\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP(7)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP(9)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP WITH TIME ZONE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP WITH LOCAL TIME ZONE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP(9) WITH TIME ZONE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP WITH LOCAL TIME ZONE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"TIMESTAMP(9) WITH LOCAL TIME ZONE\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"UROWID\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"VARCHAR2(4000)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"VARCHAR2(3000 BYTE)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"VARCHAR2(2000 CHAR)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"DECIMAL(15,2)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
UNION { BIND(\"VARCHAR(101)\" AS ?test) .  (?test) edg:buildOracleDatatype  (?ln ?tc  ?precision ?scale ?chars ?qualifier) . }
}
</pre>"""^^rdf:HTML ;
  rdfs:label "build oracle datatype" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:countOfColumnsInTable
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:distinct true ;
            sp:expression [
                sp:varName "dbc" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "table" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "dbc" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:table ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "count of columns in table" ;
  rdfs:subClassOf edg:Functions ;
.
edg:countOfFamilyMembers
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:distinct true ;
            sp:expression [
                sp:varName "member" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:belongsTo ;
            sp:subject [
                sp:varName "member" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "count of family members" ;
  rdfs:subClassOf edg:Functions ;
.
edg:countOfTablesInTableContainer
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:distinct true ;
            sp:expression [
                sp:varName "dbt" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:tableOf ;
            sp:subject [
                sp:varName "dbt" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "count of tables in table container" ;
  rdfs:subClassOf edg:Functions ;
.
edg:countStringListElements
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Count ;
            sp:expression [
                sp:varName "element" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "element" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "list" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "separator" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:separator ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:label "count string list elements" ;
  rdfs:subClassOf edg:Functions ;
.
edg:currentUser
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "user" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a smf:hasCurrentUser ;
                  ] ;
                sp:arg2 [
                    a smf:currentUserName ;
                  ] ;
                sp:arg3 "Anonymous" ;
              ] ;
            sp:variable [
                sp:varName "userName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-tb-users:" ;
                    sp:arg2 [
                        sp:varName "userName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "current user" ;
  rdfs:subClassOf edg:Functions ;
.
edg:findResultSetCell
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:gt ;
                  sp:arg1 [
                      sp:varName "rowCount" ;
                    ] ;
                  sp:arg2 0 ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "index" ;
                  ] ;
                sp:arg3 [
                    sp:varName "keyColumn" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "keyColumnValue" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "keyColumnValue" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "key" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spr:cell ;
                    sp:arg1 [
                        sp:varName "resultSet" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "index" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "valueColumn" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "index" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "rowCount" ;
                          ] ;
                      ] ;
                    sp:arg2 () ;
                    sp:arg3 [
                        a edg:findResultSetCell ;
                        arg:index [
                            a sp:add ;
                            sp:arg1 [
                                sp:varName "index" ;
                              ] ;
                            sp:arg2 1 ;
                          ] ;
                        arg:key [
                            sp:varName "key" ;
                          ] ;
                        arg:keyColumn [
                            sp:varName "keyColumn" ;
                          ] ;
                        arg:resultSet [
                            sp:varName "resultSet" ;
                          ] ;
                        arg:rowCount [
                            sp:varName "rowCount" ;
                          ] ;
                        arg:valueColumn [
                            sp:varName "valueColumn" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "value" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:index ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:key ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:keyColumn ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rowCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:valueColumn ;
      spl:valueType xsd:integer ;
    ] ;
  rdfs:label "Find ResultSet cell" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getAspectClassProperties
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "property" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object () ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?1" ;
                    ] ;
                  sp:predicate edg:relevantPropertyAtClass ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "subject" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
                [
                  sp:object () ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:unionGraph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get aspect classes" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getCardinalityInstance
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "cardinality" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg1 ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg2 ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_ANY-OR-NONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg2 ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_AT-LEAST-ONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg2 ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_ANY-OR-NONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 spin:_arg2 ;
                            sp:arg2 1 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_EXACTLY-ONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 [
                            a sp:eq ;
                            sp:arg1 spin:_arg2 ;
                            sp:arg2 1 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_AT-MOST-ONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 [
                            a sp:gt ;
                            sp:arg1 spin:_arg2 ;
                            sp:arg2 1 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_ANY-OR-NONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:gt ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 [
                            a sp:gt ;
                            sp:arg1 spin:_arg2 ;
                            sp:arg2 1 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:CRDNLTY_AT-LEAST-ONE ;
                    sp:variable [
                        sp:varName "cardinality" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:integer ;
      rdfs:comment "min cardinality" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "max cardinality" ;
    ] ;
  rdfs:comment "Given a min and max cardinality, returns a cardinality instance" ;
  rdfs:label "get cardinality instance" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getClassInstanceCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "instance" ;
                  ] ;
              ] ;
            sp:varName "instanceCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "class" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get class instance count" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getClassInversePropertyValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "referent" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:predicate spin:_arg2 ;
            sp:subject [
                sp:varName "referent" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current subclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:comment "Finds nearest parent class with an inverse value for given property" ;
  rdfs:label "get class inverse property value" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getClassPropertyValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "value" ;
              ] ;
            sp:predicate spin:_arg2 ;
            sp:subject [
                sp:varName "parentClass" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current subclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:comment "Finds nearest parent class for given property" ;
  rdfs:label "class property value" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getClassWithPropertyValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object spin:_arg4 ;
                    sp:predicate spin:_arg3 ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "class" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object spin:_arg4 ;
                              sp:predicate spin:_arg3 ;
                              sp:subject spin:_arg1 ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "parentClass" ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject spin:_arg1 ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:exists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "parentMetaClass" ;
                                        ] ;
                                      sp:predicate rdf:type ;
                                      sp:subject [
                                          sp:varName "parentClass" ;
                                        ] ;
                                    ]
                                    [
                                      a sp:Values ;
                                      sp:bindings (
                                          (
                                            edg:AssetClass
                                          )
                                          (
                                            edg:EnumerationClass
                                          )
                                          (
                                            edg:CustomEnumerationClass
                                          )
                                          (
                                            rdfs:Class
                                          )
                                        ) ;
                                      sp:varNames (
                                          "parentMetaClass"
                                        ) ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            sp:object spin:_arg4 ;
                            sp:predicate spin:_arg3 ;
                            sp:subject [
                                sp:varName "parentClass" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "parentClass" ;
                              ] ;
                            sp:variable [
                                sp:varName "class" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object [
                                sp:varName "parentClass" ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject spin:_arg1 ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object spin:_arg4 ;
                                      sp:predicate spin:_arg3 ;
                                      sp:subject [
                                          sp:varName "parentClass" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:exists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "parentMetaClass" ;
                                        ] ;
                                      sp:predicate rdf:type ;
                                      sp:subject [
                                          sp:varName "parentClass" ;
                                        ] ;
                                    ]
                                    [
                                      a sp:Values ;
                                      sp:bindings (
                                          (
                                            edg:AssetClass
                                          )
                                          (
                                            edg:EnumerationClass
                                          )
                                          (
                                            edg:CustomEnumerationClass
                                          )
                                          (
                                            rdfs:Class
                                          )
                                        ) ;
                                      sp:varNames (
                                          "parentMetaClass"
                                        ) ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                a sp:if ;
                                sp:arg1 [
                                    a sp:ne ;
                                    sp:arg1 [
                                        sp:varName "parentClass" ;
                                      ] ;
                                    sp:arg2 spin:_arg2 ;
                                  ] ;
                                sp:arg2 [
                                    a edg:getClassWithPropertyValue ;
                                    sp:arg1 [
                                        sp:varName "parentClass" ;
                                      ] ;
                                    sp:arg2 spin:_arg2 ;
                                    sp:arg3 spin:_arg3 ;
                                    sp:arg4 spin:_arg4 ;
                                  ] ;
                                sp:arg3 edg:UNKNOWN-TYPE ;
                              ] ;
                            sp:variable [
                                sp:varName "class" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current subclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "last superclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Finds nearest class with a given value for a given property" ;
  rdfs:label "get class with property value" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getClassesForGivenMetaclass
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "metaclass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "classType" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "classType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:metaclass ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get classes for given metaclass" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getClassesWithInstances
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "instanceCount" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "instance" ;
                  ] ;
              ] ;
            sp:varName "instanceCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "class" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
                [
                  a sp:SubQuery ;
                  sp:query [
                      a sp:Select ;
                      sp:resultVariables (
                          [
                            sp:varName "class" ;
                          ]
                          [
                            sp:varName "label" ;
                          ]
                        ) ;
                      sp:where (
                          [
                            a sp:NamedGraph ;
                            sp:elements (
                                [
                                  a sp:TriplePath ;
                                  sp:object [
                                      sp:varName "metaclass" ;
                                    ] ;
                                  sp:path [
                                      a sp:ModPath ;
                                      sp:modMax -2 ;
                                      sp:modMin 0 ;
                                      sp:subPath rdfs:subClassOf ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "classType" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "classType" ;
                                    ] ;
                                  sp:predicate rdf:type ;
                                  sp:subject [
                                      sp:varName "class" ;
                                    ] ;
                                ]
                                [
                                  a sp:Bind ;
                                  sp:expression [
                                      a ui:label ;
                                      sp:arg1 [
                                          sp:varName "class" ;
                                        ] ;
                                    ] ;
                                  sp:variable [
                                      sp:varName "label" ;
                                    ] ;
                                ]
                              ) ;
                            sp:graphNameNode ui:graph ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:metaclass ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get classes with instances" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getControlledProjectType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "projectType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "projectType" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 edg.c:controlledBy ;
                sp:path2 edg.c:controlsProjectType ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get controlled project type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getCountOfResourcesFromResultSet
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:distinct true ;
                sp:expression [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "rowIndex" ;
              ] ;
            sp:predicate spr:rowIndices ;
            sp:subject [
                sp:varName "resultSet" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 [
                    sp:varName "column" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "Get count of resources from resultset" ;
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:getCountOfSHACLviolations
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "result" ;
                  ] ;
              ] ;
            sp:varName "errorCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object sh:ValidationResult ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "result" ;
                        ] ;
                      sp:arg2 sh:resultSeverity ;
                    ] ;
                  sp:variable [
                      sp:varName "severity" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:not ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "severity" ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:eq ;
                          sp:arg1 [
                              sp:varName "severity" ;
                            ] ;
                          sp:arg2 sh:Violation ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding validation check results" ;
    ] ;
  spin:private true ;
  rdfs:label "get count of SHACL violations" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getDistinctResourcesFromResultSet
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "rowIndex" ;
              ] ;
            sp:predicate spr:rowIndices ;
            sp:subject [
                sp:varName "resultSet" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 [
                    sp:varName "column" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 "" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "get distinct resources from resultset" ;
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:getEDGresourceType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resourceType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resourceType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentTypeMetaClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resourceType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "resourceType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resourceTypeMetaClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resourceType" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentTypeMetaClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resourceTypeMetaClass" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Values ;
            sp:bindings (
                (
                  edg:ConstructClass
                )
                (
                  edg:ModelClass
                )
              ) ;
            sp:varNames (
                "parentTypeMetaClass"
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource" ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Returns the resource type avoiding non-EDG model classes such as sh:NodeShape. This is used in place of spl:object(?resource, rdf:type)." ;
  rdfs:label "get EDG resource type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getGraphRole
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graphRole" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "myGraphRole" ;
                            ] ;
                          sp:path [
                              a sp:AltPath ;
                              sp:path1 vaem:hasGraphRole ;
                              sp:path2 [
                                  a sp:SeqPath ;
                                  sp:path1 vaem:hasGraphMetadata ;
                                  sp:path2 vaem:hasGraphRole ;
                                ] ;
                            ] ;
                          sp:subject [
                              sp:varName "graph" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          sp:object [
                              sp:varName "graph" ;
                            ] ;
                          sp:predicate vaem:isMetadataFor ;
                          sp:subject [
                              sp:varName "graphMD" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "myGraphRole" ;
                            ] ;
                          sp:predicate vaem:hasGraphRole ;
                          sp:subject [
                              sp:varName "graphMD" ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "myGraphRole" ;
                  ] ;
                sp:arg2 vaem:UnknownGraphRole ;
              ] ;
            sp:variable [
                sp:varName "graphRole" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "graph" ;
    ] ;
  rdfs:comment "Finds the graph role from the graph metadata" ;
  rdfs:label "get graph role" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getGraphsForPermissibleValueClasses
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "graphLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "graphType" ;
                            ] ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "graph" ;
                            ] ;
                        ]
                        [
                          a sp:Values ;
                          sp:bindings (
                              (
                                <http://rdm.topbraidlive.org/rdmprojects#ReferenceDataset>
                              )
                              (
                                edg:EnumerationsProject
                              )
                            ) ;
                          sp:varNames (
                              "graphType"
                            ) ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "projectGraph" ;
                      ] ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "returns graphs that could hold permissible value classes" ;
  rdfs:label "get graphs for permissible value classes" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getHighestParentOfDatabaseColunm
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "parent" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                    sp:arg2 edg:tableOf ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeDatabaseAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeDatabaseAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg3 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parent" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:DatabaseColumn ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Returns the highset parent of a resource." ;
  rdfs:label "get highest parent of database column" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getHighestParentOfResource
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "parent" ;
                                ] ;
                              sp:predicate [
                                  sp:varName "property" ;
                                ] ;
                              sp:subject [
                                  sp:varName "resource" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "resource" ;
                      ] ;
                    sp:variable [
                        sp:varName "subject" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "parent" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object edg:partOf ;
                    sp:predicate rdfs:subPropertyOf ;
                    sp:subject [
                        sp:varName "parentProperty" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentProperty" ;
                      ] ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "propertyShape" ;
                      ] ;
                    sp:predicate sh:property ;
                    sp:subject [
                        sp:varName "class" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "class" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a edg:getHighestParentOfResource ;
                        arg:property [
                            sp:varName "parentProperty" ;
                          ] ;
                        arg:resource [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "subject" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "parent" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object edg:partOf ;
                              sp:predicate rdfs:subPropertyOf ;
                              sp:subject [
                                  sp:varName "parentProperty" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "parentProperty" ;
                                ] ;
                              sp:predicate sh:path ;
                              sp:subject [
                                  sp:varName "propertyShape" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "propertyShape" ;
                                ] ;
                              sp:predicate sh:property ;
                              sp:subject [
                                  sp:varName "class" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "class" ;
                                ] ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "parent" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "parent" ;
                      ] ;
                    sp:variable [
                        sp:varName "subject" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:DatabaseColumn ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Returns the highset parent of a resource." ;
  rdfs:label "get highest parent of a resource" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getInstancesOfSuperClass
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "myClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "myClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "get instances of super-class" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getInverseLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "inverseLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybeInverseLabel" ;
                    ] ;
                  sp:predicate edg:inverseLabel ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeInverseLabel" ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "property" ;
                          ] ;
                      ] ;
                    sp:arg2 " (inverse)" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "inverseLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "Theproperty to get the inverse label of" ;
    ] ;
  rdfs:label "get inverse label" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getNonAspectClassProperties
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "precedence" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "property" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object () ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?1" ;
                    ] ;
                  sp:predicate edg:relevantPropertyAtNonAspectClass ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "subject" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
                [
                  sp:object () ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:unionGraph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get non-aspect classes" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getOtherEntityInLogicalRelation
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "otherEntity" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "participant1" ;
                ] ;
              sp:predicate edg:participant ;
              sp:subject [
                  sp:varName "association" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "participant2" ;
                ] ;
              sp:predicate edg:participant ;
              sp:subject [
                  sp:varName "association" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:ne ;
                  sp:arg1 [
                      sp:varName "participant1" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "participant2" ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:logicalEntity ;
            sp:subject [
                sp:varName "participant1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "otherEntity" ;
              ] ;
            sp:predicate edg:logicalEntity ;
            sp:subject [
                sp:varName "participant2" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:association ;
      spl:valueType edg:LogicalRelation ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:LogicalEntity ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:label "get root class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getPropertyTargetObjects
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "target" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "target" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "target" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "get property values" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getPropertyValueOnGivenProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "value" ;
              ] ;
            sp:predicate spin:_arg2 ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "property" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
      rdfs:comment "property to find value of" ;
    ] ;
  rdfs:comment "Returns property value on a given property, traversing the sub-property chain." ;
  rdfs:label "get property value on given property" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getPropertyValuesForResource
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "aProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "value" ;
              ] ;
            sp:predicate [
                sp:varName "aProperty" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "value" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "valueClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "value" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns values for a given resource and property. Includes sub-properties of the specified property." ;
  rdfs:label "get property values for resource" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getRelationshipsForPropertyPair
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
          [
            sp:varName "childResource" ;
          ]
          [
            sp:varName "inverse" ;
          ]
          [
            sp:varName "case" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resource2" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression false ;
                    sp:variable [
                        sp:varName "inverse" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "childResource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "childResource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource2" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:compositionProperty ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression false ;
                    sp:variable [
                        sp:varName "inverse" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "composite" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "resource2" ;
                                ] ;
                              sp:predicate [
                                  sp:varName "property" ;
                                ] ;
                              sp:subject [
                                  sp:varName "resource1" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource1" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression true ;
                    sp:variable [
                        sp:varName "inverse" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "inverse-direct" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:lineageSourceRelationship ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentAsset" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource2" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:lineageTargetRelationship ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "lineageTargetRelationship" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentAsset" ;
                      ] ;
                    sp:predicate [
                        sp:varName "lineageTargetRelationship" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource1" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression false ;
                    sp:variable [
                        sp:varName "inverse" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "inferred-case-1" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:lineageTargetRelationship ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "softwareExecutable" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource2" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:lineageTargetRelationship ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "lineageTargetRelationship" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentAsset" ;
                      ] ;
                    sp:predicate [
                        sp:varName "lineageTargetRelationship" ;
                      ] ;
                    sp:subject [
                        sp:varName "resource1" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentAsset" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:output ;
                        sp:path2 edg:producesInformationAsset ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareExecutable" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression false ;
                    sp:variable [
                        sp:varName "inverse" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "inferred-case-2" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource2 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "get property values" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getResourceTypeInViewGadget
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resourceType" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "propertyShape" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resourceType" ;
              ] ;
            sp:predicate sh:targetClass ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "viewGadget" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 sh:group ;
                sp:path2 <http://topbraid.org/tosh#viewGadget> ;
              ] ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate <http://topbraid.org/tosh#viewGadget> ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Returns the resource type involved in a tosh:ViewWidget." ;
  rdfs:label "get resource type in view gadget" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getRootClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                    sp:arg2 teamwork:mainClass ;
                  ] ;
                sp:arg2 [
                    a edg:projectTypeRootClass ;
                    arg:projectType [
                        a teamwork:getProjectType ;
                        arg:projectGraph [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Gets the root class of a given vocabulary. This currently assumes that the result is either the locally overwritten value of teamwork:mainClass at the vocabulary or stored together with the ProjectType in the ui:graph via edg.c:rootClass. Falls back to edg:Construct as default." ;
  rdfs:label "get root class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getSubjectAreasForCurrentUser
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "subjectArea" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subjectArea" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "subjectArea" ;
                    ] ;
                  sp:predicate edg:subjectArea ;
                  sp:subject [
                      sp:varName "projectGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get subject areas for current user" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getSubjectsForGivenPropertyAndObject
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "aProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate [
                sp:varName "aProperty" ;
              ] ;
            sp:subject [
                sp:varName "value" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "value" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "valueClass" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "filterFunction" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spif:invoke ;
                    sp:arg1 [
                        sp:varName "filterFunction" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "value" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns subjects for a given resource, as object, and property. Includes sub-properties of the specified property." ;
  rdfs:label "get subjects for given property and object" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getSubjectsWithPropertyAndObject
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "subjectLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
          [
            sp:varName "subjectLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "subject" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "subjectLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns subjects for a given resource, as object, and property" ;
  rdfs:label "get subjects with given property and object" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getTableContainers
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "tableContainer" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object edg:PhysicalDataModel ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "tableContainer" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:Database ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "container" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "container" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "tableContainer" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "get table containers" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getTablesInContainer
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "table" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "table" ;
          ]
        ) ;
      sp:where (
          [
            sp:object edg:DatabaseTable ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "table" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:tableOf ;
            sp:subject [
                sp:varName "table" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "get tables in container" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:graphsAndRolesForGivenSubjectAreaAndUser
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "projectGraph" ;
          ]
          [
            sp:varName "teamGraph" ;
          ]
          [
            sp:varName "roles" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:groupBy (
                    [
                      sp:varName "projectGraph" ;
                    ]
                    [
                      sp:varName "teamGraph" ;
                    ]
                  ) ;
                sp:orderBy (
                    [
                      sp:varName "projectGraph" ;
                    ]
                  ) ;
                sp:resultVariables (
                    [
                      sp:expression [
                          a sp:GroupConcat ;
                          sp:expression [
                              a ui:encodeNode ;
                              sp:arg1 [
                                  sp:varName "role" ;
                                ] ;
                            ] ;
                          sp:separator "," ;
                        ] ;
                      sp:varName "roles" ;
                    ]
                    [
                      sp:varName "projectGraph" ;
                    ]
                    [
                      sp:varName "teamGraph" ;
                    ]
                  ) ;
                sp:where (
                    (
                      (
                        [
                          sp:object [
                              sp:varName "?0" ;
                            ] ;
                          sp:predicate teamwork:readableGraphsUnderTeamControl ;
                          sp:subject () ;
                        ]
                        [
                          sp:object [
                              sp:varName "projectGraph" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?0" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "?1" ;
                            ] ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?0" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "teamGraph" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?1" ;
                            ] ;
                        ]
                        [
                          sp:object () ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?1" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ] ;
                        ]
                      )
                      [
                        a sp:NamedGraph ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "mySubjectArea" ;
                                ] ;
                              sp:predicate edg:subjectArea ;
                              sp:subject [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ]
                          ) ;
                        sp:graphNameNode [
                            sp:varName "projectGraph" ;
                          ] ;
                      ]
                    )
                    [
                      sp:object spin:_arg2 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?3" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "projectGraph" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?4" ;
                        ] ;
                      sp:predicate edg:rolesForGivenPartyInGivenProjectGraph ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "role" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?4" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?4" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:eq ;
                          sp:arg1 [
                              sp:varName "mySubjectArea" ;
                            ] ;
                          sp:arg2 spin:_arg1 ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:SubjectArea ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "user" ;
    ] ;
  rdfs:comment "Returns the project graphs and roles for a given subject area and user. The subject area is passed as 'arg1', and the user as 'arg2'." ;
  rdfs:label "graphs and roles for given subject area" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:graphsInGivenSubjectAreaReadableByGivenUser
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "projectGraph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "projectGraph" ;
          ]
          [
            sp:varName "teamGraph" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate teamwork:readableGraphsUnderTeamControl ;
              sp:subject () ;
            ]
            [
              sp:object [
                  sp:varName "projectGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "teamGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:exists ;
                  sp:elements (
                      [
                        a sp:NamedGraph ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "subjectArea" ;
                                ] ;
                              sp:predicate edg:subjectArea ;
                              sp:subject [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ]
                          ) ;
                        sp:graphNameNode [
                            sp:varName "projectGraph" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  rdfs:comment "returns the project graphs and roles for a given subject area and user." ;
  rdfs:label "get graphs in given subject area readable by given user" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:hasInstance
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "has instance" ;
  rdfs:subClassOf edg:Functions ;
.
edg:hasViewWidget
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewWidget" ;
              ] ;
            sp:predicate <http://topbraid.org/tosh#viewWidget> ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "propertyShape" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "parentType" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parentType" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "type" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Returns true if a resource is of a type that for the given property has a property shape with a tosh view widget" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "has view widget" ;
  rdfs:subClassOf edg:Functions ;
.
edg:immediateParents
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "parent" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      a sp:Values ;
                      sp:bindings (
                          (
                            owl:Thing
                          )
                          (
                            rdfs:Resource
                          )
                        ) ;
                      sp:varNames (
                          "parent"
                        ) ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parent" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "parentClass" ;
                  ] ;
                sp:arg2 edg:ViewpointClass ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
    ] ;
  rdfs:label "immediate parents" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:inheritanceDepth
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "d" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "x" ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "x" ;
                          ] ;
                        sp:arg2 spin:_arg2 ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "x" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object spin:_arg2 ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "inc" ;
                      ] ;
                    sp:predicate edg:inheritanceDepth ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:add ;
                        sp:arg1 [
                            sp:varName "inc" ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                    sp:variable [
                        sp:varName "d" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object spin:_arg2 ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "d" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 spin:_arg2 ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 0 ;
                    sp:variable [
                        sp:varName "d" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current subclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current superclass" ;
    ] ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:integerString
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "^0*(\\d{" ;
                sp:arg2 [
                    a sp:str ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg3 ",})$" ;
              ] ;
            sp:variable [
                sp:varName "matchString" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "000000" ;
                sp:arg2 [
                    a sp:str ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "arg1S" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:replace ;
                sp:arg1 [
                    sp:varName "arg1S" ;
                  ] ;
                sp:arg2 [
                    sp:varName "matchString" ;
                  ] ;
                sp:arg3 "$1" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue 4 ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "number of decimal places" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number to format" ;
    ] ;
  rdfs:comment "Formats an integer as a string padding the string with leading zeros. An optional integer parameter determines the number of decimal characters in the resultant string. This has a default value of '4'. Test with \"SELECT ?X ?string  { VALUES ?X { 0 1 10 100 800 9999} . BIND(edg:integerString(?X,4) AS ?string) .}\"" ;
  rdfs:label "integer string" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isInstance
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:instance ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "is instance" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isKnownClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "type" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "class" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "is known class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isNotAbstract
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object true ;
                      sp:predicate <http://datashapes.org/dash#abstract> ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "is not abstract" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isNull
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    a fn:lower-case ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
                sp:arg2 "null" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:label "is null" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isNullOrFalse
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "value" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            a fn:lower-case ;
                            sp:arg1 [
                                sp:varName "value" ;
                              ] ;
                          ] ;
                        sp:arg2 "false" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:not ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
    ] ;
  rdfs:label "is null or false" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isSingleColumnViewRow
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parent" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              a sp:Values ;
                              sp:bindings (
                                  (
                                    sh:property
                                  )
                                  (
                                    spin:body
                                  )
                                  (
                                    spin:query
                                  )
                                  (
                                    spin:rule
                                  )
                                  (
                                    ui:instanceView
                                  )
                                ) ;
                              sp:varNames (
                                  "parent"
                                ) ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "viewWidget" ;
                      ] ;
                    sp:predicate <http://topbraid.org/tosh#viewWidget> ;
                    sp:subject [
                        sp:varName "propertyShape" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "propertyShape" ;
                      ] ;
                    sp:predicate sh:property ;
                    sp:subject [
                        sp:varName "parentType" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentType" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "type" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Returns false if a resource has a property that should be shown as a single column view row" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "is single column view row" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isViewpointClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object edg:ViewpointClass ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "is viewpoint class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:makeClassInstancesCountSummary
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:metaclass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  ui:prototype [
      a ui:group ;
      ui:child [
          a ui:if ;
          ui:child [
              a ui:call ;
              arg:graph [
                  sp:varName "graph" ;
                ] ;
              arg:metaclass [
                  sp:varName "metaclass" ;
                ] ;
              ui:child [
                  a ui:return ;
                  ui:childIndex 0 ;
                  ui:result [
                      a ui:concat ;
                      sp:arg1 [
                          a edg:mapFunctionOverResultSet ;
                          sp:arg1 edg:makeClassInstancesCountText ;
                          sp:arg2 [
                              sp:varName "classes" ;
                            ] ;
                          sp:arg3 0 ;
                          sp:arg4 0 ;
                          sp:arg5 ", " ;
                          sp:arg6 "" ;
                        ] ;
                      sp:arg2 " " ;
                    ] ;
                ] ;
              ui:childIndex 0 ;
              ui:template edg:getClassesWithInstances ;
              ui:varName "classes" ;
            ] ;
          ui:childIndex 0 ;
          ui:condition [
              a sp:bound ;
              sp:arg1 [
                  sp:varName "graph" ;
                ] ;
            ] ;
        ] ;
    ] ;
  rdfs:label "Make class instances count summary" ;
  rdfs:subClassOf ui:Functions ;
.
edg:makeClassInstancesCountText
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 spin:_arg2 ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 spin:_arg2 ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 spin:_arg2 ;
                sp:arg3 2 ;
              ] ;
            sp:variable [
                sp:varName "instancesCount" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "instancesCount" ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "label" ;
                      ] ;
                    sp:arg2 " [" ;
                    sp:arg3 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "instancesCount" ;
                          ] ;
                      ] ;
                    sp:arg4 "]" ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType spr:Table ;
      rdfs:comment "The spr:Table to iterate over." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The row index." ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "make class instances count text" ;
  rdfs:subClassOf spr:Functions ;
.
edg:makeEncodedURI
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:coalesce ;
                    sp:arg1 [
                        sp:varName "occurrence" ;
                      ] ;
                    sp:arg2 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:occurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "make encoded URI" ;
  rdfs:subClassOf edg:Functions ;
.
edg:makeJSONfriendlyQName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "qname" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a smf:qname ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 ":" ;
                sp:arg3 "_" ;
              ] ;
            sp:variable [
                sp:varName "t" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "t" ;
                  ] ;
                sp:arg2 "-" ;
                sp:arg3 "_" ;
              ] ;
            sp:variable [
                sp:varName "qname" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "make JSON friendly QName" ;
  rdfs:subClassOf edg:Functions ;
.
edg:mapFunctionOverResultSet
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "function to call" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType spr:Table ;
      rdfs:comment "resultset" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
      rdfs:comment "Row index" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType xsd:integer ;
      rdfs:comment "Column index" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:string ;
      rdfs:comment "separator" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg6 ;
      spl:valueType xsd:string ;
      rdfs:comment "The list being built. First call should have this as and empty string." ;
    ] ;
  spin:returnType xsd:string ;
  ui:prototype [
      a ui:group ;
      let:maxRow [
          a spr:rowCount ;
          sp:arg1 spin:_arg2 ;
        ] ;
      ui:child [
          a ui:else ;
          ui:child [
              a ui:group ;
              let:result [
                  a spif:invoke ;
                  sp:arg1 spin:_arg1 ;
                  sp:arg2 spin:_arg2 ;
                  sp:arg3 spin:_arg3 ;
                  sp:arg4 spin:_arg4 ;
                ] ;
              ui:child [
                  a ui:group ;
                  let:newList [
                      a sp:if ;
                      sp:arg1 [
                          a sp:eq ;
                          sp:arg1 [
                              sp:varName "arg6" ;
                            ] ;
                          sp:arg2 "" ;
                        ] ;
                      sp:arg2 [
                          a sp:str ;
                          sp:arg1 [
                              sp:varName "result" ;
                            ] ;
                        ] ;
                      sp:arg3 [
                          a sp:concat ;
                          sp:arg1 [
                              sp:varName "arg6" ;
                            ] ;
                          sp:arg2 spin:_arg5 ;
                          sp:arg3 [
                              a sp:str ;
                              sp:arg1 [
                                  sp:varName "result" ;
                                ] ;
                            ] ;
                        ] ;
                    ] ;
                  ui:child [
                      a ui:return ;
                      ui:childIndex 0 ;
                      ui:result [
                          a edg:mapFunctionOverResultSet ;
                          sp:arg1 spin:_arg1 ;
                          sp:arg2 spin:_arg2 ;
                          sp:arg3 [
                              a sp:add ;
                              sp:arg1 spin:_arg3 ;
                              sp:arg2 1 ;
                            ] ;
                          sp:arg4 spin:_arg4 ;
                          sp:arg5 spin:_arg5 ;
                          sp:arg6 [
                              sp:varName "newList" ;
                            ] ;
                        ] ;
                    ] ;
                  ui:childIndex 0 ;
                ] ;
              ui:childIndex 0 ;
            ] ;
          ui:childIndex 1 ;
        ] ;
      ui:child [
          a ui:if ;
          ui:child [
              a ui:return ;
              ui:childIndex 0 ;
              ui:result [
                  sp:varName "arg6" ;
                ] ;
            ] ;
          ui:childIndex 0 ;
          ui:condition [
              a sp:eq ;
              sp:arg1 spin:_arg3 ;
              sp:arg2 [
                  sp:varName "maxRow" ;
                ] ;
            ] ;
        ] ;
    ] ;
  rdfs:comment "Map a function over a result set return a string. The parameter 'arg6' holds the results for each iteration." ;
  rdfs:label "map funciton over a result set" ;
  rdfs:subClassOf ui:Functions ;
.
edg:maxCountForClassProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Min ;
                sp:expression [
                    sp:varName "aMaxCount" ;
                  ] ;
              ] ;
            sp:varName "maxCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "shape" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "shape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "aMaxCount" ;
              ] ;
            sp:predicate sh:maxCount ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "max count for class property" ;
  rdfs:subClassOf edg:Functions ;
.
edg:maxReach
  a rdf:Property ;
  rdfs:label "max reach" ;
  rdfs:subPropertyOf sp:arg ;
.
edg:menuConfigGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "menuConfigGraph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "http://edg.topbraid.solutions/1.0/config/menus" ;
            sp:variable [
                sp:varName "menuConfigGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "menu config graph" ;
  rdfs:subClassOf edg:Functions ;
.
edg:minCountForClassProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Max ;
                sp:expression [
                    sp:varName "aMinCount" ;
                  ] ;
              ] ;
            sp:varName "minCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "shape" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "shape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "aMinCount" ;
                    ] ;
                  sp:predicate sh:minCount ;
                  sp:subject [
                      sp:varName "ps" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "min count for class property" ;
  rdfs:subClassOf edg:Functions ;
.
edg:modelsGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "modelsGraph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "http://edg.topbraid.solutions/1.0/collection/schema-models" ;
            sp:variable [
                sp:varName "modelsGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "models graph" ;
  rdfs:subClassOf edg:Functions ;
.
edg:mySubjectAreas
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "subjectArea" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subjectArea" ;
          ]
          [
            sp:varName "projectGraph" ;
          ]
          [
            sp:varName "teamGraph" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
                sp:arg2 edg:subjectArea ;
                sp:arg3 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "subjectArea" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "user" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?4" ;
              ] ;
            sp:predicate edg:rolesForGivenPartyInGivenProjectGraph ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "role" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "my subject areas" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:partyAndRoleInGivenProjectGraph
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "party" ;
          ]
          [
            sp:varName "predicate" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg1 ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:predicate edg:subjectArea ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            a teamwork:platformGovernanceGraph ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "pg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath edg:subArea ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "pg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all parties that are assigned with any governance role for a given project graph - either via direct triples or from the subject areas assigned to the project graph." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/dashboards/governance> ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:propertyValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "value" ;
                      ] ;
                    sp:predicate spin:_arg3 ;
                    sp:subject spin:_arg1 ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "value" ;
                                ] ;
                              sp:predicate spin:_arg3 ;
                              sp:subject spin:_arg1 ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:predicate edg:immediateParents ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "value" ;
                              ] ;
                            sp:predicate spin:_arg3 ;
                            sp:subject [
                                sp:varName "parentClass" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "someValue" ;
                                        ] ;
                                      sp:predicate spin:_arg3 ;
                                      sp:subject [
                                          sp:varName "parentClass" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            a sp:Union ;
                            sp:elements (
                                (
                                  (
                                    [
                                      a sp:Filter ;
                                      sp:expression [
                                          a sp:ne ;
                                          sp:arg1 [
                                              sp:varName "parentClass" ;
                                            ] ;
                                          sp:arg2 spin:_arg2 ;
                                        ] ;
                                    ]
                                  )
                                  [
                                    a sp:Bind ;
                                    sp:expression [
                                        a edg:propertyValue ;
                                        sp:arg1 [
                                            sp:varName "parentClass" ;
                                          ] ;
                                        sp:arg2 spin:_arg2 ;
                                        sp:arg3 spin:_arg3 ;
                                      ] ;
                                    sp:variable [
                                        sp:varName "value" ;
                                      ] ;
                                  ]
                                )
                                (
                                  (
                                    [
                                      a sp:Filter ;
                                      sp:expression [
                                          a sp:eq ;
                                          sp:arg1 [
                                              sp:varName "parentClass" ;
                                            ] ;
                                          sp:arg2 spin:_arg2 ;
                                        ] ;
                                    ]
                                  )
                                  [
                                    a sp:Bind ;
                                    sp:expression "" ;
                                    sp:variable [
                                        sp:varName "value" ;
                                      ] ;
                                  ]
                                )
                              ) ;
                          ]
                        )
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Current subclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "last superclass" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:comment "Finds nearest parent class for given property" ;
  rdfs:label "property value" ;
  rdfs:subClassOf edg:Functions ;
.
edg:reificationInstanceForGivenStatement
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "instance" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate rdf:subject ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate rdf:predicate ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate rdf:object ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "instance" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object rdf:Statement ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "type" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "object" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "property" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "subject" ;
    ] ;
  spin:private true ;
  rdfs:comment "returns one or more reification instances for a given statement." ;
  rdfs:label "subjects for a given property and object" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:relevantClassOfProperty
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "relevantClass" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "relevantClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate swa:directRelevantClassOfProperty ;
            sp:subject [
                sp:varName "relevantClass" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to get the properties of." ;
    ] ;
  spin:returnType rdf:Property ;
  rdfs:comment "Finds the properties that are attached to a given class or its superclasses." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "relevant class of property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
edg:relevantProperty
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "relevantClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate swa:directRelevantClassOfProperty ;
            sp:subject [
                sp:varName "relevantClass" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to get the properties of." ;
    ] ;
  spin:returnType rdf:Property ;
  rdfs:comment "Finds the properties that are attached to a given class or its superclasses." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "relevant  property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
edg:relevantPropertyAtClass
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "precedence" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object true ;
                      sp:predicate edg:disabled ;
                      sp:subject spin:_arg1 ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "superClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "constraint" ;
              ] ;
            sp:predicate spin:constraint ;
            sp:subject [
                sp:varName "superClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate spl:predicate ;
            sp:subject [
                sp:varName "constraint" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 [
                        sp:varName "property" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "anyDomain" ;
                            ] ;
                          sp:predicate rdfs:domain ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "superClass" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "constraint" ;
                  ] ;
                sp:arg2 edg.v:formPrecedence ;
              ] ;
            sp:variable [
                sp:varName "precedence" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are \"relevant\" for the class. Relevant means that they have the class in their domain and/or constraints, including superclasses and sub-properties (unless they define their own domain). Note that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept ." ;
  rdfs:label "relevant property at class" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:relevantPropertyAtNonAspectClass
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "superClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object edg:AspectClass ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "superClass" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "constraint" ;
              ] ;
            sp:predicate spin:constraint ;
            sp:subject [
                sp:varName "superClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate spl:predicate ;
            sp:subject [
                sp:varName "constraint" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 [
                        sp:varName "property" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "anyDomain" ;
                            ] ;
                          sp:predicate rdfs:domain ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are \"relevant\" for the class. Relevant means that they have the class in their domain and/or constraints, including superclasses and sub-properties (unless they define their own domain). Note that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept ." ;
  rdfs:label "relevant property at non-aspect class" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:rolesForGivenPartyInGivenProjectGraph
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "predicate" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          sp:object spin:_arg1 ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject spin:_arg2 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg2 ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:predicate edg:subjectArea ;
                          sp:subject spin:_arg2 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg2 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            a teamwork:platformGovernanceGraph ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "pg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath edg:subArea ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                        [
                          sp:object spin:_arg1 ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "pg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Party" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all governance roles for a given party and project graph - either via direct triples or from the subject areas assigned to the project graph." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/dashboards/governance> ;
  rdfs:label "roles for given party in given project graph" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:stripSurroundingCharacters
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    a fn:substring ;
                    sp:arg1 [
                        sp:varName "text" ;
                      ] ;
                    sp:arg2 1 ;
                    sp:arg3 [
                        a sp:sub ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "text" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg2 2 ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:text ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment "Removes the first and last characters from a string." ;
  rdfs:label "strip surrounding characters" ;
  rdfs:subClassOf spin:Functions ;
.
<http://edg.topbraid.solutions/spin/library/GMD_library>
  a vaem:GraphMetaData ;
  dcterms:modified "2016-12-18"^^xsd:date ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  vaem:hasGraphRole vaem:SPINlibraryGraph ;
  vaem:hasLicenseType <voag:TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:hasOwner vaem:TopQuadrant ;
  vaem:hasSteward vaem:TopQuadrant ;
  vaem:isMetadataFor <http://edg.topbraid.solutions/1.0/spin/library> ;
  vaem:name "EDG" ;
  vaem:namespace "http://edg.topbraid.solutions/model/" ;
  vaem:namespacePrefix "edg" ;
  vaem:owner "TopQuadrant, Inc." ;
  vaem:releaseDate "2016-12-18"^^xsd:date ;
  vaem:revision "1.0" ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:author ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:withAttributionTo "Any references to this ontology should give attribution to TopQuadrant, Inc." ;
.
arg:association
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:function
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:index
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:key
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:keyColumn
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:list
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:logicalEntity
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:logicalModel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:logicalRelation
  a rdf:Property ;
  rdfs:label "logical relation" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:metaclass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:name
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:namespace
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:object
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resource
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resource1
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resource2
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resultSet
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:rowCount
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:separator
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:specificResource
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subject
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subjectArea
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:test
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:text
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:value
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:valueColumn
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
