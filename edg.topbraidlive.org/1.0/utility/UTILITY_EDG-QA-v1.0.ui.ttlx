# baseURI: http://edg.topbraidlive.org/1.0/utility/qa
# imports: http://edg.topbraid.solutions/1.0/project/common
# imports: http://edg.topbraid.solutions/1.0/schema/core
# imports: http://edg.topbraid.solutions/1.0/swp/diagrams/models
# imports: http://edg.topbraid.solutions/1.0/swp/library
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix debug-swa: <http://debug.topbraidlive.org/1.0/swa/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.avro: <http://edg.topbraidlive.org/avro/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edg.xform.html: <http://edg.topbraid.solutions/transfrom/html/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix o2o: <http://lib.topquadrant.com/owl/srg/o2o#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix suggestions: <http://edg.topbraidlive.org/1.0/spin/suggestions#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xhtml1: <http://www.w3.org/1999/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

graphql:publicClass
  a rdf:Property ;
  rdfs:label "graphQL public class" ;
.
edg:Asset
  spin:query [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object edg:Asset ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "aComment" ;
                        ] ;
                      sp:predicate rdfs:comment ;
                      sp:subject [
                          sp:varName "class" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "Find classes with no rdfs:comment" ;
    ] ;
  spin:query [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "parent1" ;
          ]
          [
            sp:varName "parent2" ;
          ]
          [
            sp:varName "commonClass" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object edg:Asset ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          (
            [
              a sp:TriplePath ;
              sp:object [
                  sp:varName "parent1" ;
                ] ;
              sp:path [
                  a sp:ModPath ;
                  sp:modMax -2 ;
                  sp:modMin 1 ;
                  sp:subPath rdfs:subClassOf ;
                ] ;
              sp:subject [
                  sp:varName "class" ;
                ] ;
            ]
            [
              a sp:TriplePath ;
              sp:object [
                  sp:varName "parent2" ;
                ] ;
              sp:path [
                  a sp:ModPath ;
                  sp:modMax -2 ;
                  sp:modMin 1 ;
                  sp:subPath rdfs:subClassOf ;
                ] ;
              sp:subject [
                  sp:varName "class" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:ne ;
                  sp:arg1 [
                      sp:varName "parent1" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "parent2" ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "commonClass" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "parent1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "commonClass" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "parent2" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notIn ;
                sp:arg1 [
                    sp:varName "commonClass" ;
                  ] ;
                sp:arg2 edg:Asset ;
                sp:arg3 edg:Aspect ;
                sp:arg4 owl:Thing ;
                sp:arg5 rdfs:Resource ;
              ] ;
          ]
        ) ;
      rdfs:comment "Find redundant inheritance classes" ;
    ] ;
.
edg:AssetClass
  ui:instanceView """
<ui:group>
    <edg-qa:ClassPropertyGroupsReport arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:ExtractGraphTypeFromBaseURI
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graphType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:regex ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "baseURI" ;
                      ] ;
                  ] ;
                sp:arg2 "^http://(edg.topbraid.solutions|edg.topbraidlive.org)/1.0/([A-Za-z]+)/?.*$" ;
                sp:arg3 "$2" ;
              ] ;
            sp:variable [
                sp:varName "maybeGraphType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:contains ;
                    sp:arg1 [
                        sp:varName "maybeGraphType" ;
                      ] ;
                    sp:arg2 "http" ;
                  ] ;
                sp:arg2 "UNKNOWN" ;
                sp:arg3 [
                    a fn:upper-case ;
                    sp:arg1 [
                        sp:varName "maybeGraphType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseURI ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf edg:Functions ;
.
edg:Functions
  a spin:Function ;
  rdfs:label "Functions" ;
  rdfs:subClassOf spin:Functions ;
.
edg:Label
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The RDF node to display the label of." ;
    ] ;
  ui:prototype """
<span class=\"swa-label\">
    <ui:if ui:condition=\"{= isLiteral(?node) }\">{= ui:label(?node) }</ui:if>
    <ui:else>
        <ui:resourceView ui:matchIds=\"label\" ui:resource=\"{= ?node }\"/>
    </ui:else>
</span>
"""^^ui:Literal ;
  rdfs:comment "A span that inserts an instance view of a given resource with match id \"label\". If the node is a literal it will simply render the ui:label of the literal." ;
  rdfs:label "Label" ;
  rdfs:subClassOf swa:Elements ;
.
edg:Link
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelOverride ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional override to the label." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI resource to link to." ;
    ] ;
  ui:prototype """
<ui:group let:uid=\"{= ui:uniqueId() }\">
    <ui:group let:link=\"{= swa:createLink(?resource, ?uid) }\">
        <div class=\"float-left\">
            <ui:if ui:condition=\"{= bound(?link) }\">
                <a class=\"swa-link\" href=\"javascript:void(0)\" id=\"{= ?uid }\" onclick=\"{= ?link }\">
                    <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
                    <ui:else>
                        <edg:Label arg:node=\"{= ?resource }\"/>
                    </ui:else>
                </a>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= bound(?labelOverride) }\">{= ?labelOverride }</ui:if>
                <ui:else>
                    <edg:Label arg:node=\"{= ?resource }\"/>
                </ui:else>
            </ui:else>
            <div class=\"edg-triangle-right float-left edg-qa-reference\"/>
        </div>
        <div class=\"clear-both\"/>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a hyperlink to switch the current view to a given resource. This element should be used to create all hyperlinks in SWA applications, because this single place provides greater flexibility to make adjustments to the links. In particular, the semantics of what should happen if the user clicks on a link may be different for each application or even within different parts of a single application: in some cases the application may want to replace a form on the screen, while in other cases the selected resource should be opened in a modal dialog. The SPIN function swa:createLink is used to define the link. If this function retuns nothing, then no link is displayed, but rather an swa:Label." ;
  rdfs:label "Link" ;
  rdfs:subClassOf swa:Elements ;
.
edg:MultiColumnList
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:titleFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:columns ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group let:count=\"{= spr:rowCount(?resultSet) }\" let:myTitleFunction=\"{= COALESCE(?titleFunction, ui:contextValue(&quot;title-function&quot;), edg:defaultTitleFunction) }\">
    <ui:if ui:condition=\"{= ?count &gt; 0 }\">
        <div class=\"edg-index-table\">
            <div class=\"container-fluid\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?resultSet }\">
                    <ui:group let:cell=\"{= spr:cell(?resultSet, ?index, 0) }\">
                        <div class=\"{= ?columns }\">
                            <swa:Link arg:resource=\"{= ?cell }\"/>
                        </div>
                    </ui:group>
                </ui:forEach>
            </div>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf edg:SubElements ;
.
edg:PropertyGroupsForClass
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"edg-heading size18px\">
        <span>Class: </span>
        <swa:Link arg:resource=\"{= ?class }\"/>
    </div>
    <p>QName is <span class=\"edg-boxed-text\">{= smf:qname(?class) }</span>
    </p>
    <ui:group let:classDesc=\"{= spl:object(?class, edg:description) }\">
        <ui:if ui:condition=\"{= bound(?classDesc) }\">
            <swa:ObjectsBody arg:predicate=\"{= edg:description }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
        </ui:if>
        <ui:else>
            <div class=\"pl20px\">
                <p class=\"swa-color-orange\">No description.</p>
                <p class=\"swa-color-orange\">Add using <swa:Link arg:labelOverride=\"edg:description\" arg:resource=\"{= edg:description }\"/>
                </p>
            </div>
        </ui:else>
    </ui:group>
    <ui:group letrs:propertyGroups=\"{#
            SELECT DISTINCT ?pg ?pgOrder ?pgLabel ?pgDesc
            WHERE {
                ?class swa:shapesForType ?shape .
                FILTER NOT EXISTS {
                    ?shape a edg:RootClass .
                } .
                ?shape sh:property ?pc .
                ?pc sh:group ?pg .
                BIND (spl:object(?pg, sh:order) AS ?pgOrder) .
                BIND (spl:object(?pg, rdfs:label) AS ?pgLabel) .
                BIND (spl:object(?pg, sh:description) AS ?pgDesc) .
            }
            ORDER BY (?pgOrder) }\">
        <ui:if ui:condition=\"{= spr:rowCount(?propertyGroups) &gt; 0 }\">
            <div class=\"pad10px\">
                <h3>Property Groups:</h3>
            </div>
            <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?propertyGroups }\">
                <div class=\"box-rounded\">
                    <div class=\"edg-heading size14px\">
                        <a id=\"PG-{= ui:label(?pg) }\">
                            <span>Property Group: </span>
                            <swa:Link arg:resource=\"{= ?pg }\"/>
                        </a>
                    </div>
                    <p>(1) QName is <span class=\"edg-boxed-text\">{= smf:qname(?pg) }</span>
                    </p>
                    <p>(2) Check for group order</p>
                    <div class=\"pl20px\" let:order=\"{= spl:object(?pg, sh:order) }\">
                        <ui:if ui:condition=\"{= bound(?order) }\">
                            <p>Order is <span class=\"edg-boxed-text\">{= ?order }</span>
                            </p>
                        </ui:if>
                        <ui:else>
                            <p class=\"swa-color-orange\">No order on property group.</p>
                            <p class=\"swa-color-orange\">Add using <swa:Link arg:labelOverride=\"sh:order\" arg:resource=\"{= sh:order }\"/>
                            </p>
                        </ui:else>
                    </div>
                    <p>(3) Check for label</p>
                    <div class=\"pl20px\" let:label=\"{= spl:object(?pg, rdfs:label) }\">
                        <ui:if ui:condition=\"{= bound(?label) }\">
                            <p>Label is <span class=\"edg-boxed-text\">{= ?label }</span>
                            </p>
                        </ui:if>
                        <ui:else>
                            <p class=\"swa-color-orange\">No label on property group.</p>
                            <p class=\"swa-color-orange\">Add using rdfs:label\"</p>
                        </ui:else>
                    </div>
                    <p>(4) Check for property group description</p>
                    <div class=\"pl20px\">
                        <ui:if ui:condition=\"{= bound(?pgDesc) }\">
                            <swa:ObjectsBody arg:predicate=\"{= sh:description }\" arg:subject=\"{= ?pg }\" ui:args=\"*\"/>
                        </ui:if>
                        <ui:else>
                            <p class=\"swa-color-orange\">No description on property group.</p>
                            <p class=\"swa-color-orange\">Add using <swa:Link arg:labelOverride=\"sh:description\" arg:resource=\"{= sh:description }\"/>
                            </p>
                        </ui:else>
                    </div>
                    <p>(5) Check for <em>openable</em> flag</p>
                    <p>If set to true, then the corresponding form section shall be openable/closable (and show up closed).</p>
                    <ui:group let:openable=\"{= spl:object(?pg, tosh:openable) }\">
                        <div class=\"pl20px\">
                            <ui:if ui:condition=\"{= !bound(?openable) }\">
                                <span class=\"swa-color-orange\">Warning: No <em>openable</em> statement = group will always be open</span>
                            </ui:if>
                            <ui:else>
                                <ui:if ui:condition=\"{= ?openable }\">
                                    <swa:Link arg:resource=\"{= tosh:openable }\"/> is <span class=\"edg-boxed-text\">true</span> - group can be opened</ui:if>
                                <ui:else>
                                    <swa:Link arg:resource=\"{= tosh:openable }\"/> is <span class=\"edg-boxed-text\">false</span> - group will be either open or closed depending on <em>open</em> flag.</ui:else>
                            </ui:else>
                        </div>
                    </ui:group>
                    <p>(6) Check for <em>open</em> flag</p>
                    <ui:group let:open=\"{= spl:object(?pg, tosh:open) }\">
                        <div class=\"pl20px pb10px\">
                            <ui:if ui:condition=\"{= !bound(?open) }\">
                                <span class=\"swa-color-orange\">Warning: No <em>open</em> statement - group will be open or closed depending on value of tosh:openable</span>
                            </ui:if>
                            <ui:else>
                                <ui:if ui:condition=\"{= ?open }\">
                                    <swa:Link arg:resource=\"{= tosh:open }\"/> is <span class=\"edg-boxed-text\">true</span> - the form section will be open by default. This only has an effect if sh:openable is set to true as well.</ui:if>
                                <ui:else>
                                    <swa:Link arg:resource=\"{= tosh:open }\"/> is <span class=\"edg-boxed-text\">false</span> - group will be initially closed</ui:else>
                            </ui:else>
                        </div>
                    </ui:group>
                    <p>(7) Property Checks</p>
                    <edg:RelevantPropertiesInPropertyGroup arg:group=\"{= ?pg }\" arg:resource=\"{= ?class }\"/>
                </div>
            </ui:forEach>
        </ui:if>
        <ui:else>
            <p>No property groups set for this shape</p>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "property groups for class" ;
  rdfs:subClassOf edg:SubElements ;
.
edg:PropertyGroupsForShape
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"edg-heading size18px\">
        <ui:if ui:condition=\"{= ?class = ?shape }\">
            <span>Shape (of Class): </span>
        </ui:if>
        <ui:else>
            <span>Shape: </span>
        </ui:else>
        <swa:Link arg:resource=\"{= ?shape }\"/>
    </div>
    <p>QName is <span class=\"edg-boxed-text\">{= smf:qname(?shape) }</span>
    </p>
    <ui:group letrs:propertyGroups=\"{#
            SELECT DISTINCT ?pg ?pgOrder ?pgLabel ?pgDesc
            WHERE {
                ?shape sh:property ?pc .
                ?pc sh:group ?pg .
                BIND (spl:object(?pg, sh:order) AS ?pgOrder) .
                BIND (spl:object(?pg, rdfs:label) AS ?pgLabel) .
                BIND (spl:object(?pg, sh:description) AS ?pgDesc) .
            }
            ORDER BY (?pgOrder) }\">
        <ui:if ui:condition=\"{= spr:rowCount(?propertyGroups) &gt; 0 }\">
            <ui:forEach ui:resultSet=\"{= ?propertyGroups }\">
                <p>Check for property group description</p>
                <div class=\"pl20px\">
                    <ui:if ui:condition=\"{= bound(?pgDesc) }\">
                        <swa:ObjectsBody arg:predicate=\"{= sh:description }\" arg:subject=\"{= ?pg }\" ui:args=\"*\"/>
                    </ui:if>
                    <ui:else>
                        <p class=\"swa-color-orange\">No description on property group.</p>
                        <p class=\"swa-color-orange\">Add using <swa:Link arg:labelOverride=\"sh:description\" arg:resource=\"{= sh:description }\"/>
                        </p>
                    </ui:else>
                </div>
                <p>Check for openable flag</p>
                <ui:group let:openable=\"{= spl:object(?pg, tosh:openable) }\">
                    <dd>
                        <ui:if ui:condition=\"{= !bound(?openable) }\">
                            <span class=\"swa-color-orange\">Warning: Group will always be open</span>
                        </ui:if>
                        <ui:else>
                            <ui:if ui:condition=\"{= ?openable }\">
                                <swa:Link arg:resource=\"{= tosh:openable }\"/> is true - group will be initially closed</ui:if>
                            <ui:else>
                                <swa:Link arg:resource=\"{= tosh:openable }\"/> is false - group will be initially open</ui:else>
                        </ui:else>
                    </dd>
                </ui:group>
                <p>Check for open flag</p>
                <ui:group let:open=\"{= spl:object(?pg, tosh:open) }\">
                    <dd>
                        <ui:if ui:condition=\"{= !bound(?open) }\">
                            <span class=\"swa-color-orange\">Warning: Group will be open or closed depending on value of tosh:openable</span>
                        </ui:if>
                        <ui:else>
                            <ui:if ui:condition=\"{= ?open }\">
                                <swa:Link arg:resource=\"{= tosh:open }\"/> is true - group will be initially open</ui:if>
                            <ui:else>
                                <swa:Link arg:resource=\"{= tosh:open }\"/> is false - group will be initially closed</ui:else>
                        </ui:else>
                    </dd>
                </ui:group>
                <edg:RelevantPropertiesInPropertyGroup arg:group=\"{= ?pg }\" arg:resource=\"{= ?class }\" arg:shape=\"{= ?shape }\"/>
            </ui:forEach>
        </ui:if>
        <ui:else>
            <p>No property groups set for this shape</p>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "property groups for shape" ;
  rdfs:subClassOf edg:SubElements ;
.
edg:QAelements
  a ui:NodeClass ;
  ui:headIncludes """
<ui:group>
    <title>EDG Models QA</title>
    <script src=\"{= ui:lib() }/edg/build/edg.bundle.js\"/>
    <script>$.jqplot.config.enablePlugins = true;</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf ui:Element ;
.
edg:RelevantPropertiesInPropertyGroup
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:allGraphs=\"{= IRI(&quot;http://edg.topbraid.solutions/1.0/collection/all&quot;) }\">
    <ui:group letrs:propertyConstraints=\"{#
            SELECT DISTINCT ?pc ?pcOrder ?pcP ?datatype ?class ?pcGraph ?pcDeactivated ?editWidget ?viewWidget ?pDesc
            WHERE {
                ?resource swa:shapesForType ?shape .
                ?shape sh:property ?pc .
                ?pc sh:group ?group .
                ?pc sh:path ?pcP .
                BIND (spl:object(?pc, rdfs:isDefinedBy) AS ?pcGraph) .
                BIND (spl:object(?pc, sh:datatype) AS ?datatype) .
                BIND (spl:object(?pc, sh:class) AS ?class) .
                BIND (spl:object(?pc, sh:order) AS ?pcOrder) .
                BIND (spl:object(?pc, sh:deactivated) AS ?pcDeactivated) .
                BIND (spl:object(?pc, tosh:editWidget) AS ?editWidget) .
                BIND (spl:object(?pc, tosh:viewWidget) AS ?viewWidget) .
                BIND (spl:object(?pcP, rdfs:comment) AS ?pDesc) .
            }
            ORDER BY (?pcOrder) }\">
        <table class=\"edg-relevant-properties-in-property-group-table\">
            <thead class=\"dg-relevant-properties-in-property-group-thead\">
                <tr>
                    <th>Property</th>
                    <th class=\"edg-relevant-properties-in-property-group-th-order\">Property Order</th>
                    <th class=\"edg-relevant-properties-in-property-group-th-description\">Description</th>
                    <th>Datatype, Class, or Class List</th>
                    <th>Deactivated</th>
                    <th>Defining and Shaping Graph(s)</th>
                </tr>
            </thead>
            <tbody class=\"edg-relevant-properties-in-property-group-tbody\">
                <ui:forEach ui:resultSet=\"{= ?propertyConstraints }\">
                    <tr class=\"edg-relevant-properties-in-property-group-table\">
                        <td class=\"edg-relevant-properties-in-property-group-td\">{= smf:qname(?pcP) }</td>
                        <td class=\"edg-relevant-properties-in-property-group-td\">
                            <ui:if ui:condition=\"{= bound(?pcOrder) }\">{= ?pcOrder }</ui:if>
                            <ui:else>
                                <span class=\"text-danger\">MISSING.<br/>
                                    <edg:SearchForObjectInGraph arg:graph=\"{= ?allGraphs }\" arg:predicate=\"{= sh:order }\" arg:subject=\"{= ?pc }\"/>
                                </span>
                            </ui:else>
                        </td>
                        <td class=\"edg-relevant-properties-in-property-group-td\">
                            <ui:if ui:condition=\"{= bound(?pDesc) }\">{= ?pDesc }</ui:if>
                            <ui:else>
                                <edg:SearchForObjectInGraph arg:graph=\"{= ?allGraphs }\" arg:predicate=\"{= rdfs:comment }\" arg:subject=\"{= ?pcP }\"/>
                            </ui:else>
                        </td>
                        <td class=\"edg-relevant-properties-in-property-group-td\">
                            <ui:if ui:condition=\"{= bound(?datatype) }\">{= smf:qname(?datatype) }</ui:if>
                            <ui:else>
                                <ui:if ui:condition=\"{= bound(?class) }\">
                                    <edg:Link arg:labelOverride=\"{= smf:qname(?class) }\" arg:resource=\"{= ?class }\"/>
                                </ui:if>
                                <ui:else>
                                    <edg:SearchForObjectInGraph arg:graph=\"{= ?allGraphs }\" arg:predicate=\"{= sh:datatype }\" arg:subject=\"{= ?pc }\"/>
                                </ui:else>
                                <div class=\"clear-both\"/>
                            </ui:else>
                        </td>
                        <td class=\"edg-relevant-properties-in-property-group-td\">{= bound(?pcDeactivated) &amp;&amp; ?pcDeactivated }</td>
                        <td class=\"edg-relevant-properties-in-property-group-td\">
                            <swa:Object arg:predicate=\"{= rdfs:isDefinedBy }\" arg:subject=\"{= ?pc }\"/>
                            <swa:Object arg:predicate=\"{= sh:shapesGraph }\" arg:subject=\"{= ?pc }\"/>
                        </td>
                    </tr>
                    <ui:if ui:condition=\"{= bound(?viewWidget) || bound(?editWidget) }\">
                        <tr>
                            <td/>
                            <td colspan=\"3\">
                                <strong>Edit Widget:</strong>
                                <swa:Link arg:labelOverride=\"{= ui:encodeNode(?editWidget) }\" arg:resource=\"{= ?editWidget }\"/>
                            </td>
                            <td colspan=\"3\">
                                <strong>View Widget:</strong>
                                <swa:Link arg:labelOverride=\"{= ui:encodeNode(?viewWidget) }\" arg:resource=\"{= ?viewWidget }\"/>
                            </td>
                        </tr>
                    </ui:if>
                </ui:forEach>
            </tbody>
        </table>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "relevant properties in property group" ;
  rdfs:subClassOf edg:SubElements ;
.
edg:SearchForObjectInGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:errorPrototype """
<ui:group>
    <ui:if ui:condition=\"{= !bound(?graph) }\">
        <p>No graph specified</p>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group>
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graph) }\">
        <ui:group letrs:objects=\"{#
                SELECT ?g ?o
                WHERE {
                    ?subject ?predicate ?o .
                    ( ?subject ?predicate ?o ) tops:statementDefinedIn ?g .
                } }\">
            <ui:if ui:condition=\"{= spr:rowCount(?objects) &gt; 0 }\">
                <ui:forEach ui:resultSet=\"{= ?objects }\">Found:<br/>
                    <span class=\"light-blue-background swa-font-italic\">{= ?o }</span>
                    <br/>In graph:<br/>
                    <span class=\"light-blue-background swa-font-italic\">{= ?g }</span>.<br/>
                </ui:forEach>
            </ui:if>
            <ui:else>
                <p class=\"size8px\">Not found in graph closure:<br/>
                    <span class=\"light-blue-background swa-font-italic\">{= ?graph }</span>
                </p>
                <p>Add using <swa:Link arg:labelOverride=\"rdfs:comment\" arg:resource=\"{= rdfs:comment }\"/>
                </p>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Search for object in graph" ;
  rdfs:subClassOf edg:SubElements ;
.
edg:SubElements
  a ui:NodeClass ;
  rdfs:label "Sub elements" ;
  rdfs:subClassOf ui:Element ;
.
edg:camelCaseWords
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "word" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:unCamelCase ;
                sp:arg1 [
                    sp:varName "name" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "unccName" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate tops:split ;
            sp:subject [
                sp:varName "aWord" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unccName" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object " " ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:upper-case ;
                sp:arg1 [
                    sp:varName "aWord" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "word" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:label "camemcase words" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:defaultTitleFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "title" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 dcterms:description ;
                  ] ;
                sp:arg2 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 rdfs:comment ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "title" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf edg:Functions ;
.
edg:getDatatypeFamilies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "family" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "family" ;
          ]
        ) ;
      sp:where (
          [
            sp:object edg:DatatypeFamilyType ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "family" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get datatype families" ;
  rdfs:subClassOf edg:Templates ;
.
edg:getDeactivatedProperties
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "aspect" ;
          ]
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "parent" ;
          ]
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "ps1" ;
          ]
          [
            sp:varName "ps2" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ps1" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "parent" ;
              ] ;
          ]
          [
            sp:object sh:PropertyShape ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ps1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps2" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "ps1" ;
                  ] ;
                sp:arg2 [
                    sp:varName "ps2" ;
                  ] ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate sh:deactivated ;
            sp:subject [
                sp:varName "ps2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps2" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get deactivated properties" ;
  rdfs:subClassOf edg:Templates ;
.
edg:getNearestInstanceView
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "iv" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "iv" ;
              ] ;
            sp:predicate ui:instanceView ;
            sp:subject [
                sp:varName "parentClass" ;
              ] ;
          ]
          [
            sp:object spin:_arg2 ;
            sp:predicate ui:id ;
            sp:subject [
                sp:varName "iv" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "id for match" ;
    ] ;
  rdfs:comment "Finds nearest instance view" ;
  rdfs:label "get nearest instance view" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getRestrictedRangeProperties
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "aspect" ;
          ]
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "parent" ;
          ]
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "originalRange" ;
          ]
          [
            sp:varName "subclassRange" ;
          ]
          [
            sp:varName "ps1" ;
          ]
          [
            sp:varName "ps2" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ps1" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "parent" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a fn:contains ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:arg2 "qudt" ;
                  ] ;
              ] ;
          ]
          [
            sp:object sh:PropertyShape ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ps1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps2" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "ps1" ;
                  ] ;
                sp:arg2 [
                    sp:varName "ps2" ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "originalRange" ;
              ] ;
            sp:predicate sh:class ;
            sp:subject [
                sp:varName "ps1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subclassRange" ;
              ] ;
            sp:predicate sh:class ;
            sp:subject [
                sp:varName "ps2" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "originalRange" ;
                  ] ;
                sp:arg2 [
                    sp:varName "subclassRange" ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps2" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get restricted range properties" ;
  rdfs:subClassOf edg:Templates ;
.
edg:incrementVariable
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:add ;
            sp:arg1 [
                sp:varName "currentValue" ;
              ] ;
            sp:arg2 1 ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:contextValue ;
                sp:arg1 [
                    sp:varName "name" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "currentValue" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:subClassOf edg:Functions ;
.
edg:lookupAcronymnInGlossary
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a fn:upper-case ;
                sp:arg1 [
                    a spr:cell ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 spin:_arg2 ;
                    sp:arg3 spin:_arg3 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "word" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  a sp:NamedGraph ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "word" ;
                          ] ;
                        sp:predicate rdfs:label ;
                        sp:subject [
                            sp:varName "gterm" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "edgAcronym" ;
                          ] ;
                        sp:predicate edg:acronym ;
                        sp:subject [
                            sp:varName "gterm" ;
                          ] ;
                      ]
                    ) ;
                  sp:graphNameNode <urn:x-evn-master:edg_acronyms_glossary> ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "edgAcronym" ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "?" ;
                    sp:arg2 [
                        sp:varName "word" ;
                      ] ;
                    sp:arg3 "?" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType spr:Table ;
      rdfs:comment "The spr:Table to iterate over." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The row index." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
      rdfs:comment "column index" ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "lookup acronymn in dictionary" ;
  rdfs:subClassOf spr:Functions ;
.
edg:makeAcronym
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  ui:prototype """
<ui:group>
    <ui:call arg:name=\"{= ?name }\" ui:template=\"{= edg:camelCaseWords }\" ui:varName=\"words\">
        <ui:return ui:result=\"{= edg:mapFunctionOverResultSet(edg:lookupAcronymnInGlossary, ?words, 0, 0, &quot;&quot;, &quot;&quot;) } \"/>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Make acronym" ;
  rdfs:subClassOf ui:Functions ;
.
<http://edg.topbraidlive.org/1.0/utility/qa>
  a owl:Ontology ;
  vaem:hasGraphMetadata edg-qa:GMD_qa ;
  owl:imports <http://edg.topbraid.solutions/1.0/project/common> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/core> ;
  owl:imports <http://edg.topbraid.solutions/1.0/swp/diagrams/models> ;
  owl:imports <http://edg.topbraid.solutions/1.0/swp/library> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
.
edg-qa:AssetCatalogSummary
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <h2>{= ui:label(?resource) }</h2>
    <div class=\"pad5px size20px\" let:desc=\"{= spl:object(?resource, edg:description) }\">
        <ui:if ui:condition=\"{= fn:string-length(smf:cast(?desc, xsd:string)) &gt; 0 }\">
            <swa:ObjectsBody arg:predicate=\"{= edg:description }\" arg:subject=\"{= ?resource }\" ui:args=\"*\"/>
        </ui:if>
        <ui:else let:comment=\"{= spl:object(?resource, rdfs:comment) }\">
            <ui:if ui:condition=\"{= fn:string-length(?comment) &gt; 0 }\">
                <swa:ObjectsBody arg:predicate=\"{= rdfs:comment }\" arg:subject=\"{= ?resource }\" ui:args=\"*\"/>
            </ui:if>
            <ui:else>
                <p class=\"text-danger\">No description on project type.</p>
                <p class=\"text-danger\">Add using <swa:Link arg:labelOverride=\"rdfs:comment\" arg:resource=\"{= rdfs:comment }\"/>
                </p>
            </ui:else>
        </ui:else>
    </div>
    <div class=\"edg-boxed-text\">
        <edg-qa:ShowPropertyValue arg:property=\"{= teamwork:vocabularyType }\" arg:resource=\"{= ?resource }\" arg:style=\"swa-color-orange\"/>
        <ui:group let:vocabularyType=\"{= spl:object(?resource, teamwork:vocabularyType) }\">
            <edg-qa:ShowPropertyValue arg:property=\"{= graphql:publicClass }\" arg:resource=\"{= ?vocabularyType }\" arg:style=\"swa-color-orange\"/>
            <edg-qa:ShowPropertyValue arg:property=\"{= graphql:name }\" arg:resource=\"{= ?vocabularyType }\" arg:style=\"swa-color-orange\"/>
        </ui:group>
        <edg-qa:ShowPropertyValue arg:property=\"{= teamwork:mainClass }\" arg:resource=\"{= ?resource }\" arg:style=\"swa-color-orange\"/>
        <edg-qa:ShowPropertyValue arg:property=\"{= edg:selectResourceType }\" arg:resource=\"{= ?resource }\" arg:style=\"swa-color-orange\"/>
        <edg-qa:ShowPropertyValue arg:property=\"{= teamwork:pluralLabel }\" arg:resource=\"{= ?resource }\" arg:style=\"swa-color-orange\"/>
        <edg-qa:ShowPropertyValue arg:property=\"{= teamwork:singularLabel }\" arg:resource=\"{= ?resource }\" arg:style=\"swa-color-orange\"/>
    </div>
    <edg-qa:GraphIndex arg:projectType=\"{= ?resource }\" arg:property=\"{= edg:requiredProjectType }\" arg:title=\"Required Asset Collections\"/>
    <edg-qa:GraphIndex arg:projectType=\"{= ?resource }\" arg:property=\"{= edg:permittedProjectType }\" arg:title=\"Permitted Asset Collections\"/>
    <h3>Imported Graphs</h3>
    <ui:group letrs:importedGraphs='{#
            SELECT (IRI(?g))
            WHERE {
                ?resource teamwork:owlImports ?gList .
                ?gRaw spif:split ( ?gList \" \" ) .
                BIND (spif:trim(?gRaw) AS ?g) .
            } }'>
        <edg:MultiColumnList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:resultSet=\"{= ?importedGraphs }\"/>
    </ui:group>
    <div class=\"pad10px\">
        <a href=\"#{= ?projectTypeId }\">
            <div class=\"edg-triangle-up\"/>
        </a>
    </div>
    <hr/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Asset Catalog Summary" ;
  rdfs:subClassOf edg-qa:SubElements ;
.
edg-qa:AssetCatalogTypes
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>EDG Asset Catalogs - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <ui:call arg:class=\"{= teamwork:ProjectType }\" ui:template=\"{= edg:getInstancesOfSuperClass }\" ui:varName=\"catalogs\">
                        <p class=\"text-info\">There are {= spr:rowCount(?catalogs) } catalog types</p>
                        <div class=\"row\">
                            <ui:forEach ui:resultSet=\"{= ?catalogs }\">
                                <div class=\"col-xs-12 col-md-4 col-lg-3\">{= ?label }</div>
                            </ui:forEach>
                        </div>
                        <ui:forEach ui:resultSet=\"{= ?catalogs }\">
                            <ui:resourceView ui:matchIds=\"catalog-summary\" ui:resource=\"{= ?resource }\"/>
                        </ui:forEach>
                    </ui:call>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Asset Catalog Types" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:ClassPropertyGroupsReport
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:errors=\"{= spif:cast(&quot;0&quot;, xsd:integer) }\">
    <ui:setContext ui:varName=\"errors\" ui:varValue=\"{= ?errors }\">
        <div class=\"edg-main-block\">
            <div class=\"edgQAhomelink pad10px\">
                <div class=\"edg-triangle-left\"/>
            </div>
            <a id=\"edg-class-qa-top\">
                <h1>QA - {= ui:label(?resource) }</h1>
            </a>
            <!--swa:ClassFormBody arg:resource=\"{= ?resource }\"/-->
            <h2>Class Specification for {= smf:qname(?resource) }</h2>
            <p>The class specification is organized by the property groups of the class. A diagram showing the class inheritance and first level of associations is also generated.</p>
            <ui:group letrs:groups=\"{#
                    SELECT DISTINCT ?pg ?pgOrder
                    WHERE {
                        {
                            ?resource swa:shapesForType ?shape .
                            FILTER NOT EXISTS {
                                ?shape a edg:RootClass .
                            } .
                        } .
                        ?shape sh:property ?pc .
                        ?pc sh:group ?pg .
                        BIND (spl:object(?pg, sh:order) AS ?pgOrder) .
                    }
                    ORDER BY (?pgOrder) }\">
                <ol>
                    <ui:forEach ui:resultSet=\"{= ?groups }\">
                        <li class=\"size18px pad5px\">
                            <!--swa:Link arg:resource=\"{= ?pg }\"/-->
                            <a href=\"#PG-{= ui:label(?pg) }\">{= ui:label(?pg) } ({= ?pgOrder })</a>
                        </li>
                    </ui:forEach>
                </ol>
            </ui:group>
            <hr/>
            <h2>Shapes that participate in specification for {= smf:qname(?resource) }</h2>
            <ui:group letrs:shapes=\"{#
                    SELECT DISTINCT ?shape
                    WHERE {
                        {
                            ?resource swa:shapesForType ?shape .
                            FILTER NOT EXISTS {
                                ?shape a edg:RootClass .
                            } .
                        } .
                    }
                    ORDER BY (ui:label(?shape)) }\">
                <edg:MultiColumnList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:resultSet=\"{= ?shapes }\"/>
                <hr/>
                <h2>Property Groups for {= smf:qname(?this) }</h2>
                <ui:resourceView arg:class=\"{= ?resource }\" ui:matchIds=\"edgQA\" ui:resource=\"{= ?resource }\"/>
                <div class=\"pad5px\">
                    <a href=\"#edg-class-qa-top\">
                        <div class=\"edg-triangle-up\"/>
                    </a>
                </div>
                <hr/>
            </ui:group>
            <h2>Inheritance Class Diagram</h2>
            <edg:ClassDiagramShowingInheritance arg:attributesFilterFunction=\"{= edg:NoAttributesFilterFunction }\" arg:focusClass=\"{= ?resource }\" arg:systemLabels=\"{= false }\"/>
            <h2>Assocations Class Diagram</h2>
            <edg:ClassDiagramShowingAssociations arg:degreeOfSeparation=\"{= 1 }\" arg:focusClass=\"{= ?resource }\" arg:showClassInheritance=\"{= false }\" arg:systemLabels=\"{= false }\"/>
        </div>
    </ui:setContext>
    <script>edgqa.init()</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Class property groups report" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:ClassesReport
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:clasSelectedEvent=\"edgqa.classSelected\" let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(IRI(?graphCollection)), ui:graphWithImports(IRI(?codelists))) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>EDG Classes - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <teamwork:DataTable arg:additionalClasses=\"my-custom-table\" arg:dataColumnsEndpoint=\"edg-qa:ClassesReportColumns\" arg:dataEndpoint=\"edg-qa:ClassesReportContent\" arg:editable=\"{= false }\" arg:exports=\"{= true }\" arg:hasViewableDetails=\"{= false }\" arg:id=\"ClassesReport\" arg:multiSelect=\"{= false }\" arg:resourceSelectedEvent=\"{= ?clasSelectedEvent }\" arg:resourceType=\"{= edg:AssetClass }\" arg:selectAll=\"{= false }\"/>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Classes Report" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:ClassesReportColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Class\"/>
            <swon:Value arg:name=\"data\" arg:value=\"qname\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Label\"/>
            <swon:Value arg:name=\"data\" arg:value=\"label\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Acronym\"/>
            <swon:Value arg:name=\"data\" arg:value=\"acronym\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Abstract\"/>
            <swon:Value arg:name=\"data\" arg:value=\"abstract\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Description\"/>
            <swon:Value arg:name=\"data\" arg:value=\"desc\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Graph\"/>
            <swon:Value arg:name=\"data\" arg:value=\"graph\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Classes Report Columns" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:ClassesReportContent
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet='{#
                                SELECT ?class ?encodedClass ?label ?acronym ?graph ?comment ?abstract
                                WHERE {
                                    {
                                        ?assetClass (rdfs:subClassOf)* edg:AssetClass .
                                        ?class a ?assetClass .
                                    }
                                    UNION
                                    {
                                        ?enumClass (rdfs:subClassOf)* edg:EnumerationClass .
                                        ?class a ?enumClass .
                                    } .
                                    OPTIONAL {
                                        ?class rdfs:label ?label .
                                    } .
                                    OPTIONAL {
                                        ?class edg:acronym ?acronym .
                                    } .
                                    OPTIONAL {
                                        ?class rdfs:comment ?comment .
                                    } .
                                    OPTIONAL {
                                        ?class dash:abstract ?abstract .
                                    } .
                                    ( ?class rdf:type ?assetClass ) tops:statementDefinedIn ?graph .
                                    FILTER fn:contains(?graph, \"edg.topbraid.solutions\") .
                                    BIND (ui:encodeNode(?class) AS ?encodedClass) .
                                    FILTER fn:starts-with(?encodedClass, \"edg\") .
                                }
                                ORDER BY (?encodedClass) }'>
                            <swon:Object>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= str(?class) }\"/>
                                <swon:Value arg:name=\"qname\" arg:value=\"{= ?encodedClass }\"/>
                                <ui:if ui:condition=\"{= bound(?acronym) }\">
                                    <swon:Value arg:name=\"acronym\" arg:value=\"{= ui:label(?acronym) }\"/>
                                </ui:if>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                                <swon:Value arg:name=\"abstract\" arg:value=\"{= ?abstract }\"/>
                                <swon:Value arg:name=\"desc\" arg:value=\"{= ?comment }\"/>
                                <swon:Value arg:name=\"graph\" arg:value=\"{= ?graph }\"/>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:setContext>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Classes Report Content" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:ClassesWithInstances
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>EDG Classes with Instances - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <edg-qa:ClassesWithInstancesForGivenMetaclass arg:graph=\"{= ?graphCollection }\" arg:metaclass=\"{= edg:AssetClass }\"/>
                    <edg-qa:ClassesWithInstancesForGivenMetaclass arg:graph=\"{= ?graphCollection }\" arg:metaclass=\"{= edg:AspectClass }\"/>
                    <edg-qa:ClassesWithInstancesForGivenMetaclass arg:graph=\"{= ?graphCollection }\" arg:metaclass=\"{= edg:EnumerationClass }\"/>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Classes with instances" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:ClassesWithInstancesForGivenMetaclass
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:metaclass ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <h3>
        <swa:Link arg:resource=\"{= ?metaclass }\"/>
    </h3>
    <ui:group let:result=\"{= edg:makeClassInstancesCountSummary(?graph, ?metaclass) }\">
        <div class=\"row\">
            <ui:forEach ui:resultSet='{#
                    SELECT ?class
                    WHERE {
                        {
                            FILTER (?result != \"\") .
                            ?class spif:split ( ?result \",\" ) .
                        } .
                    } }'>
                <div class=\"col-xs-12 col-md-4 col-lg-3\">{= ?class }</div>
            </ui:forEach>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Classes with instances for given metaclass" ;
  rdfs:subClassOf edg-qa:SubElements ;
.
edg-qa:CreateGraphMetadata
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:try let:graphU=\"{= IRI(?graph) }\">
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        GRAPH ?graphU {
                            ?gmd a vaem:GraphMetaData .
                            ?graphU vaem:hasGraphMetadata ?gmd .
                            ?gmd vaem:withAttributionTo ?l2 .
                            ?gmd vaem:namespace ?ns .
                            ?gmd vaem:namespacePrefix &quot;edg&quot; .
                            ?gmd dcterms:rights ?tqRights .
                            ?gmd vaem:hasLicenseType &lt;voag:TopQuadrant_ONTOLOGY-LICENSE&gt; .
                            ?gmd vaem:hasOwner vaem:TopQuadrant .
                            ?gmd vaem:hasSteward vaem:TopQuadrant .
                            ?gmd vaem:isMetadataFor ?graphU .
                            ?gmd vaem:name &quot;EDG&quot; .
                            ?gmd vaem:namespace &quot;http://edg.topbraid.solutions/model/&quot; .
                            ?gmd vaem:namespacePrefix &quot;edg&quot; .
                            ?gmd vaem:owner &quot;TopQuadrant, Inc.&quot; .
                            ?gmd vaem:revision &quot;1.0&quot; .
                            ?gmd vaem:usesNonImportedResource dcterms:abstract .
                            ?gmd vaem:usesNonImportedResource dcterms:author .
                            ?gmd vaem:usesNonImportedResource dcterms:rights .
                            ?gmd vaem:usesNonImportedResource dcterms:created .
                            ?gmd vaem:usesNonImportedResource dcterms:modified .
                            ?gmd vaem:usesNonImportedResource dcterms:title .
                            ?gmd vaem:usesNonImportedResource voag:TopQuadrant_ONTOLOGY-LICENSE .
                            ?gmd vaem:hasGraphRole vaem:UnspecifiedGraphRole .
                        } .
                    }
                    WHERE {
                        BIND (afn:localname(?graphU) AS ?gLN) .
                        BIND (spif:regex(str(?graph), &quot;/[0-9]+(\\\\.[0-9])*&quot;, &quot;&quot;) AS ?base) .
                        BIND (IRI(CONCAT(?base, &quot;/GMD_&quot;, ?gLN)) AS ?gmd) .
                        BIND (&quot;This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing.&quot; AS ?l1) .
                        BIND (str(&quot;Any references to this ontology should give attribution to TopQuadrant, Inc.&quot;) AS ?l2) .
                        BIND (&quot;The license agreement can be found at &lt;a href='http://www.topquadrant.com/docs/legal/EULA.pdf'&gt;http://www.topquadrant.com/docs/legal/EULA.pdf.&quot; AS ?l3) .
                        BIND (spif:cast(CONCAT(&quot;&lt;p&gt;&quot;, ?l1, &quot; &quot;, ?l3, &quot;&lt;/p&gt;&quot;), rdf:HTML) AS ?tqRights) .
                        BIND (str(&quot;http://edg.topbraid.solutions/model/&quot;) AS ?ns) .
                    } }\"/>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <p>Exception: {= ?exception }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Create Graph Metadata" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:Datatypes
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(&lt;http://edg.topbraid.solutions/1.0/collection/datatypes&gt;), ui:graphWithImports(&lt;http://edg.topbraid.solutions/1.0/codelist/datatypes&gt;)) }\">
        <div class=\"edg-main-block\">
            <h1>Quality Assurance of EDG Datatypes - version 0.93</h1>
            <p>Date: {= afn:now() }</p>
            <h2>Choose Target Datatype Family</h2>
            <ui:call ui:template=\"{= edg:getDatatypeFamilies }\" ui:varName=\"families\">
                <ui:group let:count=\"{= spr:rowCount(?families) }\">
                    <ui:if ui:condition=\"{= ?families = 0 }\">
                        <p>No Datatype Families</p>
                    </ui:if>
                    <ui:else>
                        <div class=\"d-inline-block\">
                            <table class=\"swa-relevant-properties\">
                                <thead class=\"swa-relevant-properties\">
                                    <tr class=\"swa-relevant-properties\">
                                        <th class=\"swa-relevant-properties\">Family</th>
                                        <th class=\"swa-relevant-properties\">Members</th>
                                        <th class=\"swa-relevant-properties\">Graph</th>
                                    </tr>
                                </thead>
                                <tbody class=\"swa-relevant-properties\">
                                    <ui:forEach ui:resultSet=\"{= ?families }\">
                                        <ui:group let:id=\"{= ui:uniqueId() }\">
                                            <tr class=\"swa-relevant-properties\" let:rowId=\"{= fn:concat(&quot;CB_&quot;, ?id) }\">
                                                <td class=\"swa-relevant-properties\" let:description=\"{= spl:object(?family, edg:description) }\">
                                                    <label for=\"{= ?rowId }\" title=\"{= ?description }\">{= ui:label(?family) }</label>
                                                </td>
                                                <td class=\"swa-relevant-properties\">{= edg:countOfFamilyMembers(?family) }</td>
                                                <td class=\"swa-relevant-properties\">{= spl:object(?family, edg:graph) }</td>
                                            </tr>
                                        </ui:group>
                                    </ui:forEach>
                                </tbody>
                            </table>
                            <p>Make a selection:</p>
                            <div>
                                <select class=\"form-control chosen-select edg-qa-datatypes-select-width\" id=\"datatype-family-selector\" tabindex=\"2\">
                                    <option disabled=\"disabled\" selected=\"true\" value=\"\">Choose a Datatype Family ...</option>
                                    <ui:forEach ui:resultSet=\"{= ?families }\">
                                        <option data-datatype-family=\"{= spl:object(?family, edg:graph) }\" value=\"{= ?family }\">{= spl:object(?family, dtype:literal) }</option>
                                    </ui:forEach>
                                </select>
                            </div>
                            <div id=\"edg-exporter-canvas\"/>
                        </div>
                    </ui:else>
                </ui:group>
            </ui:call>
            <div id=\"edg-qa-datatype-tests\"/>
        </div>
    </ui:setContext>
    <script>edgqa.init()</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:DeactivatedProertiesReportColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Parent\"/>
            <swon:Value arg:name=\"data\" arg:value=\"parent\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Class\"/>
            <swon:Value arg:name=\"data\" arg:value=\"class\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Property\"/>
            <swon:Value arg:name=\"data\" arg:value=\"property\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Original Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"originalShape\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Overriding Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"overridingShape\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Deactivated Properties Report Columns" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:DeactivatedPropertiesReportContent
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:call ui:template=\"{= edg:getDeactivatedProperties }\" ui:varName=\"results\">
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"uri\" arg:value=\"{= str(?parent) }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ui:encodeNode(?parent) }\"/>
                                    <swon:Value arg:name=\"class\" arg:value=\"{= ui:encodeNode(?class) }\"/>
                                    <swon:Value arg:name=\"property\" arg:value=\"{= ui:encodeNode(?property) }\"/>
                                    <swon:Value arg:name=\"originalShape\" arg:value=\"{= ui:encodeNode(?ps1) }\"/>
                                    <swon:Value arg:name=\"overridingShape\" arg:value=\"{= ui:encodeNode(?ps2) }\"/>
                                </swon:Object>
                            </ui:forEach>
                        </ui:call>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:setContext>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Deactivated Properties Report Content" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:DeleteGraphMetadata
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:fid=\"{= ui:uniqueId() }\">
    <ui:try let:graphU=\"{= IRI(?graph) }\">
        <h3>Updating {= ?graph }</h3>
        <ui:if ui:condition=\"{= !isIRI(spl:objectInGraph(?graphU, rdf:type, ?graphU)) }\">
            <p>Malformed graph</p>
        </ui:if>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\" ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
            <ui:group let:gmd=\"{= spl:object(?graphU, vaem:hasGraphMetadata) }\">
                <ui:if ui:condition=\"{= bound(?gmd) }\">
                    <ui:group let:gmd=\"{= spl:subjectInGraph(rdf:type, vaem:GraphMetaData, ?graphU) }\">
                        <ui:update ui:updateQuery=\"{!
                                DELETE {
                                    GRAPH ?graphU {
                                        ?graphU vaem:hasGraphMetadata ?gmd .
                                        ?gmd ?p ?o .
                                    } .
                                }
                                WHERE {
                                    OPTIONAL {
                                        ?graphU vaem:hasGraphMetadata ?gmd .
                                    } .
                                    ?gmd ?p ?o .
                                } }\"/>
                    </ui:group>
                </ui:if>
            </ui:group>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <p>Exception: {= ?exception }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Delete Graph Metadata" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:GMD_qa
  a vaem:GraphMetaData ;
  dcterms:modified "2016-12-18"^^xsd:date ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  vaem:hasGraphRole vaem:UtilityGraph ;
  vaem:hasLicenseType <voag:TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:hasOwner vaem:TopQuadrant ;
  vaem:hasSteward vaem:TopQuadrant ;
  vaem:isMetadataFor <http://edg.topbraidlive.org/1.0/utility/qa> ;
  vaem:name "EDG" ;
  vaem:namespace "http://edg.topbraid.solutions/model/" ;
  vaem:namespacePrefix "edg" ;
  vaem:owner "TopQuadrant, Inc." ;
  vaem:releaseDate "2016-12-18"^^xsd:date ;
  vaem:revision "1.0" ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:author ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource voag:TopQuadrant_ONTOLOGY-LICENSE ;
  vaem:withAttributionTo "Any references to this ontology should give attribution to TopQuadrant, Inc." ;
.
edg-qa:GenerateClassAcronymsGraph
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:edgGlossary=\"{= IRI(&quot;urn:x-evn-master:edg_acronyms_glossary&quot;) }\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(IRI(?graphCollection)), ui:graphWithImports(IRI(?codelists))) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>Generate EDG Class Acronyms Graph - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <table class=\"swa-relevant-properties\">
                        <thead>
                            <tr class=\"swa-relevant-properties\">
                                <th class=\"swa-relevant-properties\">#</th>
                                <th class=\"swa-relevant-properties\">LocalName/<br/>Abbreviation</th>
                                <th class=\"swa-relevant-properties\">Example URIs</th>
                            </tr>
                        </thead>
                        <tbody>
                            <ui:forEach ui:indexVar=\"index\" ui:resultSet='{#
                                    SELECT ?class ?acronym ?localName ?localNamePartUC ?name ?generatedAcronym
                                    WHERE {
                                        {
                                            ?assetClass (rdfs:subClassOf)* edg:AssetClass .
                                            ?class a ?assetClass .
                                        }
                                        UNION
                                        {
                                            ?enumClass (rdfs:subClassOf)* edg:EnumerationClass .
                                            ?class a ?enumClass .
                                        } .
                                        OPTIONAL {
                                            ?class edg:acronym ?acronym .
                                        } .
                                        ( ?class rdf:type ?assetClass ) tops:statementDefinedIn ?graph .
                                        FILTER fn:contains(?graph, \"edg.topbraid.solutions\") .
                                        BIND (ui:encodeNode(?class) AS ?encodedClass) .
                                        FILTER fn:starts-with(?encodedClass, \"edg\") .
                                        BIND (afn:localname(?class) AS ?localName) .
                                        OPTIONAL {
                                            GRAPH ?edgGlossary {
                                                ?gterm rdfs:label ?localName .
                                                ?gterm edg:acronym ?edgAcronym .
                                            } .
                                        } .
                                        BIND (IF(bound(?edgAcronym), ?edgAcronym, edg:makeAcronym(?localName)) AS ?generatedAcronym) .
                                    }
                                    ORDER BY (?localName) }'>
                                <tr class=\"swa-relevant-properties\">
                                    <td class=\"swa-relevant-properties\">{= ?index + 1 }</td>
                                    <td class=\"swa-relevant-properties\">
                                        <b>{= ?localName }</b>
                                        <br/>{= ?generatedAcronym }</td>
                                    <td class=\"swa-relevant-properties\" let:hashCode=\"{= spif:generateUUID() }\">
                                        <b>{= CONCAT(fn:upper-case(?localName), \"_\", ?hashCode) }</b>
                                        <br/>{= CONCAT(fn:upper-case(?generatedAcronym), \"_\", ?hashCode) }</td>
                                </tr>
                            </ui:forEach>
                        </tbody>
                    </table>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Generate Class Acronymns Graph" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:GetGraphRole
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:graphU=\"{= IRI(?graph) }\">
    <ui:group letrs:roles=\"{#
            SELECT ?roleLabel
            WHERE {
                GRAPH ?graphU {
                    ?graphU vaem:hasGraphMetadata ?gmd .
                    ?gmd vaem:hasGraphRole ?role .
                    GRAPH &lt;http://www.linkedmodel.org/schema/vaem&gt; {
                        ?role rdfs:label ?roleLabel .
                    } .
                } .
            } }\">
        <ui:forEach ui:resultSet=\"{= ?roles }\" ui:separator=\", \">{= ?roleLabel }</ui:forEach>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Get graph role (experiment)" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:GetMetadataResourceForGraph
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>{= spl:subjectInGraph(rdf:type, vaem:GraphMetaData, IRI(?graph)) }</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:GraphIndex
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:group letrs:graphs=\"{#
            SELECT (IRI(?g))
            WHERE {
                ?projectType ?property ?g .
            } }\">
        <ui:if ui:condition=\"{= spr:rowCount(?graphs) &gt; 0 }\">
            <h3>{= ?title }</h3>
            <edg:MultiColumnList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:resultSet=\"{= ?graphs }\"/>
        </ui:if>
        <ui:else>
            <p class=\"swa-color-orange\">No <strong>{= ?title }</strong> specified.</p>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Graph index" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:GraphMetadataBuilder
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group letrs:graphs='{#
            SELECT ?graph
            WHERE {
                {
                    ?path tops:files ( \"/edg.topbraidlive.org/1.0/\" true ) .
                    FILTER (fn:contains(?path, \".ttl\") &amp;&amp; fn:contains(?path, \"topbraid\")) .
                } .
                BIND (str(smf:baseURI(?path)) AS ?graph) .
            }
            ORDER BY (?path) }'>
        <ui:setContext ui:queryGraph=\"{= ui:graph }\">
            <div class=\"edg-main-block\">
                <h1>EDG Graph Metadata Builder - version 0.95</h1>
                <p>Date: {= afn:now() }</p>
                <edg-qa:GraphMetadataBuilderSelectionTable arg:graphs=\"{= ?graphs }\"/>
            </div>
        </ui:setContext>
        <script/>
    </ui:group>
    <script>edgqa.init()</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "ui:unionOfGraphs(ui:graphWithImports(IRI(?schemas)), ui:graphWithImports(IRI(?shapesUi)), ui:graphWithImports(IRI(?codelists)), ui:graphWithImports(IRI(?projectCommon)), ui:graphWithImports(IRI(?controllers)))" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:GraphMetadataBuilderSelectionTable
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphs ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group let:tableId=\"edg-graphs-table\">
    <a id=\"edg-qa-top\">
        <h2>Graphs</h2>
    </a>
    <div id=\"progressMeterContainer\">
        <progress id=\"progressMeter\" max=\"100\" value=\"0\"/>
    </div>
    <div class=\"edg-qa-controls\">
        <button class=\"btn btn-primary\" onclick=\"edgqa.clearSelection()\">Clear Selections</button>
        <button class=\"btn btn-primary\" onclick=\"edgqa.selectAll()\">Select All</button>
        <button class=\"btn btn-primary\" onclick=\"edgqa.deleteAll()\">Delete Metadata</button>
        <button class=\"btn btn-primary\" onclick=\"edgqa.createAll()\">Create Metadata</button>
        <button class=\"btn btn-primary\" onclick=\"edgqa.setGraphRole()\">Set Graph Role</button>
    </div>
    <table class=\"swa-relevant-properties\" id=\"{= ?tableId }\">
        <thead class=\"swa-relevant-properties\">
            <tr class=\"swa-relevant-properties\">
                <th class=\"swa-relevant-properties\">#</th>
                <th class=\"swa-relevant-properties\">
                    <div class=\"float-left\">Graph</div>
                    <div class=\"float-right\">
                        <button class=\"btn btn-secondary\" onclick=\"edgqa.filterRows('edgqa-graph')\">Filter</button>
                    </div>
                    <div class=\"clear-both\"/>
                </th>
                <th class=\"swa-relevant-properties\">Graph Role</th>
                <th class=\"swa-relevant-properties\">Metadata</th>
                <th class=\"swa-relevant-properties\">Create/Update</th>
                <th class=\"swa-relevant-properties\">Delete</th>
                <th class=\"swa-relevant-properties\">Select</th>
            </tr>
        </thead>
        <tbody class=\"swa-relevant-properties\">
            <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?graphs }\">
                <tr class=\"swa-relevant-properties graphRow\" data-graph=\"{= ?graph }\" let:gmd=\"{= spl:subjectInGraph(rdf:type, vaem:GraphMetaData, IRI(?graph)) }\" let:id=\"{= ui:uniqueId() }\">
                    <td class=\"swa-relevant-properties\">{= ?index + 1 }</td>
                    <td class=\"swa-relevant-properties edgqa-graph\">{= ?graph }</td>
                    <td class=\"swa-relevant-properties\" data-post-service=\"edg-qa:GetGraphRole\">
                        <edg-qa:GetGraphRole arg:graph=\"{= ?graph }\"/>
                    </td>
                    <td class=\"swa-relevant-properties\" data-post-service=\"edg-qa:GetMetadataResourceForGraph\">
                        <edg-qa:GetMetadataResourceForGraph arg:graph=\"{= ?graph }\"/>
                    </td>
                    <td class=\"swa-relevant-properties\" data-update-container=\"\">
                        <button class=\"btn btn-primary\" data-service=\"edg-qa:UpdateGraphMetadata\">
                            <ui:if ui:condition=\"{= bound(?gmd) }\">Update</ui:if>
                            <ui:else>Create</ui:else>
                        </button>
                    </td>
                    <td class=\"swa-relevant-properties\" data-delete-container=\"\">
                        <ui:if ui:condition=\"{= bound(?gmd) }\">
                            <button class=\"btn btn-primary\" data-service=\"edg-qa:DeleteGraphMetadata\" type=\"button\">Delete</button>
                        </ui:if>
                        <ui:else>
                            <button class=\"btn btn-primary\" data-service=\"edg-qa:DeleteGraphMetadata\" disabled=\"disabled\" type=\"button\">Delete</button>
                        </ui:else>
                    </td>
                    <td class=\"swa-relevant-properties\">
                        <div class=\"checkbox\">
                            <input class=\"graphCheckbox\" id=\"{= fn:concat(&quot;CB_&quot;, ?id) }\" name=\"{= fn:concat(&quot;CB_&quot;, ?id) }\" type=\"checkbox\" value=\"None\"/>
                        </div>
                    </td>
                </tr>
            </ui:forEach>
        </tbody>
    </table>
    <div id=\"swa-dialog-parent\"/>
    <ui:loadable ui:loadId=\"edg-QA-MainCanvas\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Graph Metadata Builder Selection Table" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:GraphRolesDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:group letrs:roles=\"{#
            SELECT ?gRole ?gRoleLabel
            WHERE {
                GRAPH &lt;http://www.linkedmodel.org/schema/vaem&gt; {
                    ?gRole a vaem:GraphRole .
                    ?gRole rdfs:label ?gRoleLabel .
                } .
            }
            ORDER BY (?gRoleLabel) }\">
        <div class=\"modal fade\" id=\"graphRolesModalDialog\" role=\"dialog\" tabindex=\"-1\">
            <div class=\"modal-dialog modal-lg\" role=\"document\">
                <div class=\"modal-content\">
                    <div class=\"modal-header\">
                        <button aria-label=\"Close\" class=\"btn btn-default btn-xs close\" data-dismiss=\"modal\" type=\"button\">
                            <span aria-hidden=\"true\">&times;</span>
                        </button>
                        <h4 class=\"modal-title\">Selection of Graph Role</h4>
                    </div>
                    <div class=\"modal-body\">
                        <select class=\"form-control\" id=\"graph-role-selector\">
                            <option disabled=\"disabled\" selected=\"true\">Choose a Graph Role</option>
                            <ui:forEach ui:resultSet=\"{= ?roles }\">
                                <option value=\"{= ?gRole }\">{= ?gRoleLabel }</option>
                            </ui:forEach>
                        </select>
                    </div>
                    <div class=\"modal-footer\">
                        <div class=\"edg-qa-controls\">
                            <button class=\"btn btn-default\" data-dismiss=\"modal\" id=\"set-graph-role-cancelled\" type=\"button\">Cancel</button>
                            <button class=\"btn btn-default\" data-dismiss=\"modal\" id=\"set-graph-role-done\" type=\"button\">Done</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Graph Roles Dialog" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:Graphs
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:projectGraph=\"{= IRI(&quot;urn:x-evn-master:test_am_mm_04&quot;) }\">
    <ui:try>
        <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:group let:theTemplate=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph)) }\">
                <p>Template = {= ?theTemplate }</p>
                <h1>List All Graphs</h1>
                <ui:group>
                    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                        <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= ?theTemplate }\" ui:varName=\"raw\">
                            <p>We have {= spr:rowCount(?raw) } graphs</p>
                            <ui:group letrs:rs='{#
                                    SELECT DISTINCT ?graph ?label
                                    WHERE {
                                        {
                                            ?raw spr:rowIndices ?rowIndex .
                                            BIND (spr:cell(?raw, ?rowIndex, 0) AS ?graph) .
                                            BIND (spr:cell(?raw, ?rowIndex, 1) AS ?label) .
                                        }
                                        UNION
                                        {
                                            GRAPH ui:graph {
                                                ?projectType teamwork:owlImports ?str .
                                                ?uri spif:split ( ?str \" \" ) .
                                                BIND (IRI(?uri) AS ?graph) .
                                                BIND (teamwork:graphLabel(?graph) AS ?label) .
                                            } .
                                        } .
                                    }
                                    ORDER BY (?label) (?graph) }'>
                                <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                                        <ui:group let:maybeProjectType=\"{= teamwork:getProjectType(?graph) }\">
                                            <ui:if ui:condition=\"{= bound(?maybeProjectType) }\">
                                                <dd let:projectType=\"{= teamwork:getProjectType(?graph) }\">
                                                    <br/>Graph {= ?label } of type {= spl:object(?projectType, teamwork:singularLabel) }</dd>
                                            </ui:if>
                                            <ui:else>
                                                <dd>Graph {= ?label }</dd>
                                            </ui:else>
                                        </ui:group>
                                    </ui:forEach>
                                </ui:setContext>
                            </ui:group>
                        </ui:call>
                    </ui:setContext>
                </ui:group>
            </ui:group>
        </ui:group>
    </ui:try>
    <ui:catch>
        <p>{= ?exception }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Edit imports service" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:GraphsAsService
  a ui:NodeClass ;
  ui:prototype """
<swon:Object>
    <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?projectGraph }\"/>
    <swon:Value arg:name=\"projectLabel\" arg:value=\"{= teamwork:projectLabel(?projectGraph) }\"/>
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
            <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:varName=\"raw\">
                <ui:group letrs:rs='{#
                        SELECT DISTINCT ?graph ?label
                        WHERE {
                            {
                                ?raw spr:rowIndices ?rowIndex .
                                BIND (spr:cell(?raw, ?rowIndex, 0) AS ?graph) .
                                BIND (spr:cell(?raw, ?rowIndex, 1) AS ?label) .
                            }
                            UNION
                            {
                                GRAPH ui:graph {
                                    ?projectType teamwork:owlImports ?str .
                                    ?uri spif:split ( ?str \" \" ) .
                                    BIND (IRI(?uri) AS ?graph) .
                                    BIND (teamwork:graphLabel(?graph) AS ?label) .
                                } .
                            } .
                        }
                        ORDER BY (?label) (?graph) }'>
                    <swon:Values arg:name=\"importedGraphs\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <ui:if ui:condition=\"{= EXISTS {
                                ?projectGraph owl:imports ?graph .
                            } }\">
                                <ui:if ui:condition=\"{= !teamwork:isNotImportable(?graph) }\">
                                    <ui:group let:type=\"{= teamwork:getProjectType(?graph) }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"importedGraph\" arg:value=\"{= ?graph }\"/>
                                            <swon:Value arg:name=\"importedLabel\" arg:value=\"{= ?label }\"/>
                                            <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                                            <ui:if ui:condition=\"{= teamwork:isMandatoryImport(?graph, ?projectType) }\">
                                                <swon:Value arg:name=\"mandatory\" arg:value=\"{= true }\"/>
                                            </ui:if>
                                        </swon:Object>
                                    </ui:group>
                                </ui:if>
                            </ui:if>
                        </ui:forEach>
                    </swon:Values>
                    <swon:Values arg:name=\"availableGraphs\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <ui:group let:type=\"{= teamwork:getProjectType(?graph) }\">
                                <ui:if ui:condition=\"{= NOT EXISTS {
                                    ?projectGraph owl:imports ?graph .
                                } &amp;&amp; (!STRSTARTS(str(?graph), &quot;urn:x-evn-pub:&quot;)) }\">
                                    <ui:if ui:condition=\"{= !teamwork:isNotImportable(?graph) }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"availableGraph\" arg:value=\"{= ?graph }\"/>
                                            <swon:Value arg:name=\"availableLabel\" arg:value=\"{= ?label }\"/>
                                            <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                                        </swon:Object>
                                    </ui:if>
                                </ui:if>
                            </ui:group>
                        </ui:forEach>
                    </swon:Values>
                </ui:group>
            </ui:call>
        </ui:setContext>
    </ui:group>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Edit imports service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
edg-qa:LineageGramClassDataProviderColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Class\"/>
            <swon:Value arg:name=\"data\" arg:value=\"qname\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Description\"/>
            <swon:Value arg:name=\"data\" arg:value=\"desc\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Dataprovider\"/>
            <swon:Value arg:name=\"data\" arg:value=\"dataProvider\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Data Service\"/>
            <swon:Value arg:name=\"data\" arg:value=\"dataService\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Responder\"/>
            <swon:Value arg:name=\"data\" arg:value=\"responder\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Responder's Graph\"/>
            <swon:Value arg:name=\"data\" arg:value=\"respondersGraph\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Priority\"/>
            <swon:Value arg:name=\"data\" arg:value=\"priority\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"string\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "LineageGram Class Data Provider Columns" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:LineageGramClassDataProviderContent
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet='{#
                                SELECT ?class ?encodedClass ?graph ?comment ?resourceViewResponder ?dataService ?responder ?respondersGraph ?priority
                                WHERE {
                                    ?assetClass (rdfs:subClassOf)* edg:AssetClass .
                                    ?class a ?assetClass .
                                    ( ?class rdf:type ?assetClass ) tops:statementDefinedIn ?graph .
                                    FILTER fn:contains(?graph, \"edg.topbraid.solutions\") .
                                    BIND (ui:encodeNode(?class) AS ?encodedClass) .
                                    FILTER fn:starts-with(?encodedClass, \"edg\") .
                                    OPTIONAL {
                                        ?class rdfs:comment ?comment .
                                    } .
                                    BIND (edg:getNearestInstanceView(?class, \"lineagegram-data-provider\") AS ?instanceView) .
                                    ?resourceViewResponder ui:instanceView ?instanceView .
                                    ( ?resourceViewResponder ui:instanceView ?instanceView ) tops:statementDefinedIn ?respondersGraph .
                                    OPTIONAL {
                                        ?instanceView ui:child/arg:dataProvider ?dataService .
                                    } .
                                    OPTIONAL {
                                        ?instanceView ui:child/arg:provider ?responder .
                                    } .
                                    OPTIONAL {
                                        ?instanceView ui:priority ?priority .
                                    } .
                                }
                                ORDER BY (?encodedClass) }'>
                            <swon:Object>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= str(?class) }\"/>
                                <swon:Value arg:name=\"qname\" arg:value=\"{= ?encodedClass }\"/>
                                <swon:Value arg:name=\"desc\" arg:value=\"{= ?comment }\"/>
                                <swon:Value arg:name=\"dataProvider\" arg:value=\"{= IF(bound(?resourceViewResponder), ui:encodeNode(?resourceViewResponder), &quot;Missing&quot;) }\"/>
                                <swon:Value arg:name=\"dataService\" arg:value=\"{= IF(bound(?dataService), ui:encodeNode(?dataService), &quot;Missing&quot;) }\"/>
                                <swon:Value arg:name=\"responder\" arg:value=\"{= IF(bound(?responder), ui:encodeNode(?responder), &quot;Missing&quot;) }\"/>
                                <swon:Value arg:name=\"respondersGraph\" arg:value=\"{= ?respondersGraph }\"/>
                                <swon:Value arg:name=\"priority\" arg:value=\"{= ?priority }\"/>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:setContext>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "LineageGram Class Data Provider Content" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:LineageGramDataProviders
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>EDG LineageGram Data Providers - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <teamwork:DataTable arg:additionalClasses=\"my-custom-table\" arg:dataColumnsEndpoint=\"edg-qa:LineageGramClassDataProviderColumns\" arg:dataEndpoint=\"edg-qa:LineageGramClassDataProviderContent\" arg:editable=\"{= false }\" arg:exports=\"{= true }\" arg:hasViewableDetails=\"{= false }\" arg:id=\"ClassesReport\" arg:multiSelect=\"{= false }\" arg:resourceSelectedEvent=\"{= ?mappingSelectedEvent }\" arg:resourceType=\"{= edg:AssetClass }\" arg:selectAll=\"{= false }\"/>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "LineageGram Data Providers" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:Pages
  a ui:NodeClass ;
  rdfs:subClassOf edg:QAelements ;
.
edg-qa:ProjectTypes
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <a id=\"edg-qa-top\">
        <h2>Asset Collections</h2>
    </a>
    <ui:group letrs:projectTypes='{#
            SELECT DISTINCT ?projectType ?prefix
            WHERE {
                ?projectTypeClass (rdfs:subClassOf)* teamwork:ProjectType .
                ?projectType a ?projectTypeClass .
                BIND (afn:namespace(?projectType) AS ?projectTypeNS) .
                OPTIONAL {
                    ?projectTypeNS spif:prefix ?maybePrefix .
                } .
                BIND (COALESCE(?maybePrefix, \"noprefix\") AS ?prefix) .
            }
            ORDER BY (ui:label(?projectType)) }'>
        <ol id=\"ProjectTypesList\">
            <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?projectTypes }\">
                <li class=\"size18px pad5px\">
                    <a href=\"#ui-id-{= (?index + ?index) + 1 }\">{= COALESCE(spl:object(?projectType, teamwork:pluralLabel), ui:label(?projectType)) }</a>
                </li>
            </ui:forEach>
        </ol>
        <hr/>
        <div id=\"accordion\">
            <edg-qa:ShowProjectTypes arg:resultSet=\"{= ?projectTypes }\"/>
        </div>
    </ui:group>
    <div id=\"edg-shacl-details\"/>
    <script>$( function() {
$( \"#accordion\" ).accordion({
  collapsible: true
});
  } );</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Project types" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:Report
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group let:controllers='{#
            SELECT ?controllerGraph
            WHERE {
                {
                    ?path tops:files ( \"/\" true ) .
                    FILTER CONTAINS(?path, \"CONTROLLER\") .
                } .
                BIND (smf:baseURI(?path) AS ?controllerGraph) .
            } }'>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>Quality Assurance of EDG Models - version 0.98.01</h1>
                    <p>Date: {= afn:now() }</p>
                    <ui:loadable ui:loadId=\"edg-QA-MainCanvas\">
                        <edg-qa:ProjectTypes/>
                    </ui:loadable>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:ReportGraphMetadata
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:try let:graphU=\"{= IRI(?graph) }\">
        <h3>Reporting {= ?graph }</h3>
        <ui:if ui:condition=\"{= !isIRI(spl:objectInGraph(?graphU, rdf:type, ?graphU)) }\">
            <p>Malformed graph</p>
        </ui:if>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\">
            <ui:group let:gmd=\"{= spl:object(?graphU, vaem:hasGraphMetadata) }\">
                <ui:if ui:condition=\"{= !bound(?gmd) }\">
                    <p>No Metadata attached. Check for orphaned instance of Graph Metadata.</p>
                    <ui:group let:gmd=\"{= spl:subject(rdf:type, vaem:GraphMetaData) }\">
                        <ui:if ui:condition=\"{= !bound(?gmd) }\">
                            <p>No instance of Graph Metdata</p>
                        </ui:if>
                    </ui:group>
                    <ui:group let:gmd=\"{= spl:subject(rdf:type, vaem:GraphMetaData) }\">
                        <p>Attach instance to Graph</p>
                        <!--ui:resourceView ui:matchIds=\"form\" ui:resource=\"{= ?gmd }\"/-->
                    </ui:group>
                </ui:if>
                <ui:else>
                    <ui:resourceView ui:matchIds=\"form\" ui:resource=\"{= ?gmd }\"/>
                </ui:else>
            </ui:group>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <p>Exception: {= ?exception }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Report Graph Metadata" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:RestrictedRangeProertiesReportColumns
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group ui:id=\"datatable-columns\" ui:priority=\"{= -1 }\">
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Parent\"/>
            <swon:Value arg:name=\"data\" arg:value=\"parent\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Class\"/>
            <swon:Value arg:name=\"data\" arg:value=\"class\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Property\"/>
            <swon:Value arg:name=\"data\" arg:value=\"property\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Original Range\"/>
            <swon:Value arg:name=\"data\" arg:value=\"originalRange\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Subclass Range\"/>
            <swon:Value arg:name=\"data\" arg:value=\"subclassRange\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Original Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"originalShape\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Overriding Shape\"/>
            <swon:Value arg:name=\"data\" arg:value=\"overridingShape\"/>
            <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
            <swon:Value arg:name=\"type\" arg:value=\"label\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Restricted Range Properties Report Columns" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:RestrictedRangePropertiesReportContent
  a swa:DeleteResourcesService ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graphCollection)) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:call ui:template=\"{= edg:getRestrictedRangeProperties }\" ui:varName=\"results\">
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"uri\" arg:value=\"{= str(?parent) }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ui:encodeNode(?parent) }\"/>
                                    <swon:Value arg:name=\"class\" arg:value=\"{= ui:encodeNode(?class) }\"/>
                                    <swon:Value arg:name=\"property\" arg:value=\"{= ui:encodeNode(?property) }\"/>
                                    <swon:Value arg:name=\"originalRange\" arg:value=\"{= ui:encodeNode(?originalRange) }\"/>
                                    <swon:Value arg:name=\"subclassRange\" arg:value=\"{= ui:encodeNode(?subclassRange) }\"/>
                                    <swon:Value arg:name=\"originalShape\" arg:value=\"{= ui:encodeNode(?ps1) }\"/>
                                    <swon:Value arg:name=\"overridingShape\" arg:value=\"{= ui:encodeNode(?ps2) }\"/>
                                </swon:Object>
                            </ui:forEach>
                        </ui:call>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:setContext>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Restricted Range Properties Report Content" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:Services
  a ui:Service ;
  rdfs:subClassOf ui:Services ;
.
edg-qa:ShowProjectTypes
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:forEach ui:indexVar=\"projectTypeNumber\" ui:resultSet=\"{= ?resultSet }\">
        <ui:group let:projectTypeId=\"PT-{= ui:label(?projectType) }\">
            <h3 class=\"edg-heading size14px pl40px\">{= ?projectTypeNumber + 1 }) {= COALESCE(spl:object(?projectType, teamwork:pluralLabel), ui:label(?projectType)) }</h3>
            <div>
                <a id=\"{= ?projectTypeId }\">
                    <swa:Link arg:resource=\"{= ?projectType }\"/>
                </a>
                <ui:group let:mainClass=\"{= spl:object(?projectType, teamwork:mainClass) }\">
                    <ui:if ui:condition=\"{= !bound(?mainClass) }\">
                        <div class=\"pad10px\">
                            <p class=\"text-danger\">No viewpoint class specified. Add to the controller.</p>
                        </div>
                    </ui:if>
                    <ui:else>
                        <div class=\"pad5px\">
                            <span>Viewpoint Class is </span>
                            <span class=\"edg-boxed-text\">
                                <swa:Link arg:labelOverride=\"{= smf:qname(?mainClass) }\" arg:resource=\"{= ?mainClass }\"/>
                            </span>
                        </div>
                        <div class=\"pad5px size20px\" let:desc=\"{= spl:object(?projectType, edg:description) }\">
                            <ui:if ui:condition=\"{= fn:string-length(smf:cast(?desc, xsd:string)) &gt; 0 }\">
                                <swa:ObjectsBody arg:predicate=\"{= edg:description }\" arg:subject=\"{= ?projectType }\" ui:args=\"*\"/>
                            </ui:if>
                            <ui:else let:comment=\"{= spl:object(?projectType, rdfs:comment) }\">
                                <ui:if ui:condition=\"{= fn:string-length(?comment) &gt; 0 }\">
                                    <swa:ObjectsBody arg:predicate=\"{= rdfs:comment }\" arg:subject=\"{= ?projectType }\" ui:args=\"*\"/>
                                </ui:if>
                                <ui:else>
                                    <p class=\"text-danger\">No description on project type.</p>
                                    <p class=\"text-danger\">Add using <swa:Link arg:labelOverride=\"edg:description\" arg:resource=\"{= edg:description }\"/> and rdfs:comment
</p>
                                </ui:else>
                            </ui:else>
                        </div>
                        <edg-qa:GraphIndex arg:projectType=\"{= ?projectType }\" arg:property=\"{= edg:requiredProjectType }\" arg:title=\"Required Asset Collections\"/>
                        <edg-qa:GraphIndex arg:projectType=\"{= ?projectType }\" arg:property=\"{= edg:permittedProjectType }\" arg:title=\"Permitted Asset Collections\"/>
                        <h3>Imported Graphs</h3>
                        <ui:group letrs:importedGraphs='{#
                                SELECT (IRI(?g))
                                WHERE {
                                    ?projectType teamwork:owlImports ?gList .
                                    ?gRaw spif:split ( ?gList \" \" ) .
                                    BIND (spif:trim(?gRaw) AS ?g) .
                                } }'>
                            <edg:MultiColumnList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:resultSet=\"{= ?importedGraphs }\"/>
                            <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?importedGraphs) }\">
                                <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(&lt;http://edg.topbraid.solutions/1.0/schema/core&gt;)) }\">
                                    <ui:group letrs:assetClasses=\"{#
                                            SELECT DISTINCT ?assetClass ?assetClassLabel
                                            WHERE {
                                                ?assetClass (rdfs:subClassOf)* ?mainClass .
                                                BIND (ui:label(?assetClass) AS ?assetClassLabel) .
                                            }
                                            ORDER BY (?assetClassLabel) }\">
                                        <h3>Classes in the Viewpoint hierarchy</h3>
                                        <edg:MultiColumnList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:resultSet=\"{= ?assetClasses }\"/>
                                    </ui:group>
                                </ui:setContext>
                            </ui:setContext>
                        </ui:group>
                    </ui:else>
                </ui:group>
                <div class=\"pad10px\">
                    <a href=\"#{= ?projectTypeId }\">
                        <div class=\"edg-triangle-up\"/>
                    </a>
                </div>
            </div>
        </ui:group>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Show project types" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:ShowPropertyValue
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:value=\"{= spl:object(?resource, ?property) }\">
    <ui:if ui:condition=\"{= !bound(?value) }\">
        <div class=\"pad10px\">
            <p class=\"{= ?style }\">No value for {= ui:label(?property) } property specified.</p>
        </div>
    </ui:if>
    <ui:else let:myLabel=\"{= COALESCE(?label, smf:qname(?value)) }\">
        <div class=\"float-left pad5px\">{= ui:label(?property) }:</div>
        <div class=\"float-left pad5px\">
            <swa:Link arg:labelOverride=\"{= ?myLabel }\" arg:resource=\"{= ?value }\"/>&nbsp;( 
<ui:forEach ui:resultSet=\"{#
                    SELECT ?g
                    WHERE {
                        ( ?resource ?property ?value ) tops:statementDefinedIn ?g .
                    } }\" ui:separator=\", \">statement defined in {= COALESCE(?g, \"???\") }</ui:forEach>&nbsp;)
</div>
        <div class=\"clear-both\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Show property value" ;
  rdfs:subClassOf edg-qa:SubElements ;
.
edg-qa:SubElements
  a ui:NodeClass ;
  rdfs:subClassOf edg:QAelements ;
.
edg-qa:SubclassConstrainedPropertiesReport
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:graphCollection=\"http://edg.topbraid.solutions/1.0/collection/all\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:group>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(IRI(?graphCollection)), ui:graphWithImports(IRI(?codelists))) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <div class=\"edg-main-block\">
                    <h1>EDG Subclass-constrained Properties Report - version 6.0</h1>
                    <p>Date: {= afn:now() }</p>
                    <h2>Deactivations</h2>
                    <teamwork:DataTable arg:additionalClasses=\"my-custom-table\" arg:dataColumnsEndpoint=\"edg-qa:DeactivatedProertiesReportColumns\" arg:dataEndpoint=\"edg-qa:DeactivatedPropertiesReportContent\" arg:editable=\"{= false }\" arg:exports=\"{= true }\" arg:hasViewableDetails=\"{= false }\" arg:id=\"DeactivatedPropertiesReport\" arg:multiSelect=\"{= false }\" arg:resourceSelectedEvent=\"{= ?mappingSelectedEvent }\" arg:resourceType=\"{= edg:AssetClass }\" arg:selectAll=\"{= false }\"/>
                    <h2>Restricted Ranges</h2>
                    <teamwork:DataTable arg:additionalClasses=\"my-custom-table\" arg:dataColumnsEndpoint=\"edg-qa:RestrictedRangeProertiesReportColumns\" arg:dataEndpoint=\"edg-qa:RestrictedRangePropertiesReportContent\" arg:editable=\"{= false }\" arg:exports=\"{= true }\" arg:hasViewableDetails=\"{= false }\" arg:id=\"RestrictedRangeReport\" arg:multiSelect=\"{= false }\" arg:resourceSelectedEvent=\"{= ?mappingSelectedEvent }\" arg:resourceType=\"{= edg:AssetClass }\" arg:selectAll=\"{= false }\"/>
                </div>
            </ui:setContext>
        </ui:setContext>
        <script>edgqa.init()</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Subclass-constrained Properties Report" ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:TestReport
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:codelists=\"http://edg.topbraid.solutions/1.0/collection/codelists\" let:controllers=\"http://edg.topbraid.solutions/1.0/collection/controllers\" let:projectCommon=\"http://edg.topbraid.solutions/1.0/project/common\" let:schemas=\"http://edg.topbraid.solutions/1.0/collection/schemas\" let:shapesUi=\"http://edg.topbraid.solutions/1.0/collection/shapes\">
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(IRI(?schemas)), ui:graphWithImports(IRI(?shapesUi)), ui:graphWithImports(IRI(?codelists)), ui:graphWithImports(IRI(?projectCommon)), ui:graphWithImports(IRI(?controllers))) }\">
        <div class=\"edg-main-block\">
            <h1>Tests</h1>
            <div id=\"accordion\">
                <h3>Section 1</h3>
                <div>
                    <p>
Mauris mauris ante, blandit et, ultrices a, suscipit eget, quam. Integer
ut neque. Vivamus nisi metus, molestie vel, gravida in, condimentum sit
amet, nunc. Nam a nibh. Donec suscipit eros. Nam mi. Proin viverra leo ut
odio. Curabitur malesuada. Vestibulum a velit eu ante scelerisque vulputate.
</p>
                </div>
                <h3>Section 2</h3>
                <div>
                    <p>
Sed non urna. Donec et ante. Phasellus eu ligula. Vestibulum sit amet
purus. Vivamus hendrerit, dolor at aliquet laoreet, mauris turpis porttitor
velit, faucibus interdum tellus libero ac justo. Vivamus non quam. In
suscipit faucibus urna.
</p>
                </div>
                <h3>Section 3</h3>
                <div>
                    <p>
Nam enim risus, molestie et, porta ac, aliquam ac, risus. Quisque lobortis.
Phasellus pellentesque purus in massa. Aenean in pede. Phasellus ac libero
ac tellus pellentesque semper. Sed ac felis. Sed commodo, magna quis
lacinia ornare, quam ante aliquam nisi, eu iaculis leo purus venenatis dui.
</p>
                    <ul>
                        <li>List item one</li>
                        <li>List item two</li>
                        <li>List item three</li>
                    </ul>
                </div>
                <h3>Section 4</h3>
                <div>
                    <p>
Cras dictum. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Vestibulum ante ipsum primis in
faucibus orci luctus et ultrices posuere cubilia Curae; Aenean lacinia
mauris vel est.
</p>
                    <p>
Suspendisse eu nisl. Nullam ut libero. Integer dignissim consequat lectus.
Class aptent taciti sociosqu ad litora torquent per conubia nostra, per
inceptos himenaeos.
</p>
                </div>
            </div>
        </div>
    </ui:setContext>
    <script>edgqa.init()</script>
    <script>$( function() {
$( \"#accordion\" ).accordion();
  } );</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf edg-qa:Pages ;
.
edg-qa:Tests
  a ui:NodeClass ;
  rdfs:subClassOf ui:Element ;
.
edg-qa:UpdateGraphMetadata
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:editing ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:fid=\"{= ui:uniqueId() }\">
    <ui:try let:graphU=\"{= IRI(?graph) }\">
        <h3>Updating {= ?graph }</h3>
        <ui:if ui:condition=\"{= !isIRI(spl:objectInGraph(?graphU, rdf:type, ?graphU)) }\">
            <p>Bad graph</p>
        </ui:if>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\" ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
            <ui:group let:gmd=\"{= spl:objectInGraph(?graphU, vaem:hasGraphMetadata, ?graphU) }\">
                <ui:if ui:condition=\"{= !bound(?gmd) }\">
                    <p>No Metadata attached. Check for orphaned instance of Graph Metadata.</p>
                    <ui:group let:gmd=\"{= spl:subjectInGraph(rdf:type, vaem:GraphMetaData, ?graphU) }\">
                        <ui:if ui:condition=\"{= !bound(?gmd) }\">
                            <p>No instance of Graph Metadata - make one</p>
                            <edg-qa:CreateGraphMetadata arg:graph=\"{= ?graph }\"/>
                        </ui:if>
                    </ui:group>
                    <ui:group let:gmd=\"{= spl:subjectInGraph(rdf:type, vaem:GraphMetaData, ?graphU) }\">
                        <p>Attach instance to Graph</p>
                        <ui:update ui:updateQuery=\"{!
                                INSERT {
                                    GRAPH ?graphU {
                                        ?graphU vaem:hasGraphMetadata ?gmd .
                                        ?gmd vaem:releaseDate ?date .
                                        ?gmd dcterms:modified ?date .
                                    } .
                                }
                                WHERE {
                                    BIND (afn:now() AS ?dt) .
                                    BIND (spif:regex(str(?dt), &quot;^(.*)T.*$&quot;, &quot;$1&quot;) AS ?d) .
                                    BIND (STRDT(?d, xsd:date) AS ?date) .
                                } }\"/>
                    </ui:group>
                </ui:if>
                <ui:else>
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\">
                        <swa:SwitchableForm arg:allowHistoryMode=\"{= false }\" arg:allowLogMessage=\"{= false }\" arg:allowProvenanceMode=\"{= false }\" arg:editable=\"{= (!bound(?readOnly)) || (!?readOnly) }\" arg:editing=\"{= ?editing }\" arg:formId=\"{= ?fid }\" arg:matchIds=\"{= ?matchIds }\" arg:resource=\"{= ?gmd }\" arg:showFooter=\"{= true }\" arg:showResourceActions=\"{= ?showResourceActions }\" arg:showURI=\"{= true }\" arg:suppressHeader=\"{= true }\"/>
                        <swa:Subscribe arg:code=\"swa.handleChangeForSwitchableFormGadget(data, '{= ?fid }', '{= swa:currentWindowId() }')\" arg:event=\"org.topbraid.swa.change\"/>
                        <swa:SubscribeArgument arg:argumentName=\"resource\" arg:event=\"{= ?resourceSelectedEvent }\" arg:filter=\"swa.getFormResourceURI('{= ?fid }') != data {= IF(bound(?refreshFilterFunction), CONCAT(&quot; &amp;&amp; &quot;, ?refreshFilterFunction, &quot;(data)&quot;), ?none) }\"/>
                    </ui:setContext>
                </ui:else>
            </ui:group>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <p>Exception: {= ?exception }</p>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Update Graph Metadata" ;
  rdfs:subClassOf edg:SubElements ;
.
edg-qa:UpdateGraphRole
  a swa:DeleteResourcesService ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:graphU=\"{= IRI(?graph) }\" let:roleU=\"{= IRI(?role) }\">
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?graphU) }\">
            <ui:throw ui:message=\"Bad graph: {= ?graph }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?roleU) }\">
            <ui:throw ui:message=\"Bad role: {= ?role }\"/>
        </ui:if>
        <swon:Object let:gmd=\"{= spl:objectInGraph(?graphU, vaem:hasGraphMetadata, ?graphU) }\">
            <ui:if ui:condition=\"{= bound(?gmd) }\">
                <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graphU) }\">
                    <ui:setContext ui:silentTransactions=\"{= true }\">
                        <ui:transaction>
                            <ui:update ui:updateQuery=\"{!
                                    DELETE {
                                        GRAPH ?graphU {
                                            ?gmd vaem:hasGraphRole ?oldRole .
                                        } .
                                    }
                                    WHERE {
                                        GRAPH ?graphU {
                                            ?gmd vaem:hasGraphRole ?oldRole .
                                        } .
                                    } }\"/>
                            <ui:update ui:updateQuery=\"{!
                                    INSERT {
                                        GRAPH ?graphU {
                                            ?gmd vaem:hasGraphRole ?roleU .
                                        } .
                                    }
                                    WHERE {
                                    } }\"/>
                        </ui:transaction>
                    </ui:setContext>
                </ui:setContext>
                <swon:Value arg:name=\"success\" arg:value=\"Graph Role updated\"/>
            </ui:if>
            <ui:else>
                <ui:throw ui:message=\"No Graph Metadata\"/>
            </ui:else>
        </swon:Object>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"failure\" arg:value=\"?exception\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "update graph role" ;
  rdfs:subClassOf edg-qa:Services ;
.
edg-qa:createLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:currentQueryGraph ;
              ] ;
            sp:variable [
                sp:varName "baseURI" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "swa.navigateTo('" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 "', '" ;
                sp:arg4 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "baseURI" ;
                      ] ;
                  ] ;
                sp:arg5 "')" ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "create link" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
arg:columns
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:provider
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:titleFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
teamwork:ProjectType
  ui:instanceView """
<ui:group ui:id=\"catalog-summary\" ui:priority=\"{= -1 }\">
    <edg-qa:AssetCatalogSummary arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
.
sh:PropertyGroup
  ui:instanceView """
<ui:group ui:id=\"edgQA\" ui:priority=\"{= 1 }\">
    <div class=\"pl10px pt5px\" let:pgDesc=\"{= spl:object(?this, sh:description) }\">
   TODO</div>
</ui:group>
"""^^ui:Literal ;
.
sh:Shape
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:instanceView """
<ui:group ui:id=\"edgQA\" ui:priority=\"{= -100 }\">
    <edg:PropertyGroupsForShape arg:class=\"{= ?class }\" arg:shape=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"edgQA\" ui:priority=\"{= 2 }\">
    <edg:PropertyGroupsForClass arg:class=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
.
sh:shapesGraph
  a rdf:Property ;
  rdfs:label "shapes graph" ;
.
