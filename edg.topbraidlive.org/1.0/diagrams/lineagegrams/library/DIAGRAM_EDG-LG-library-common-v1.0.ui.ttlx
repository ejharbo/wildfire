# baseURI: http://edg.topbraid.solutions/1.0/diagram/lg/library-common
# imports: http://debug.topbraidlive.org/1.0/swa
# imports: http://edg.topbraid.solutions/1.0/diagram/lg/data-asset
# imports: http://edg.topbraid.solutions/1.0/schema/core
# imports: http://edg.topbraid.solutions/1.0/schema/diagrams
# imports: http://edg.topbraid.solutions/1.0/schema/lineage-models
# imports: http://edg.topbraid.solutions/1.0/schema/technical-assets
# imports: http://edg.topbraid.solutions/1.0/spin/jsfunctions
# imports: http://edg.topbraid.solutions/1.0/spin/library
# imports: http://spinrdf.org/spinx
# imports: http://topbraid.org/saf/
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix debug-swa: <http://debug.topbraidlive.org/1.0/swa/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix frbr: <http://purl.org/vocab/frbr/core#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix o2o: <http://lib.topquadrant.com/owl/srg/o2o#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparql: <http://datashapes.org/sparql#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraid.solutions/1.0/diagram/lg/library-common>
  a owl:Ontology ;
  owl:imports <http://debug.topbraidlive.org/1.0/swa> ;
  owl:imports <http://edg.topbraid.solutions/1.0/diagram/lg/data-asset> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/core> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/diagrams> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/lineage-models> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/technical-assets> ;
  owl:imports <http://edg.topbraid.solutions/1.0/spin/jsfunctions> ;
  owl:imports <http://edg.topbraid.solutions/1.0/spin/library> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports saf: ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TBC" ;
.
edg:AbstractLineageGramPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:abstract true ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Abstract LineageGram Page" ;
  rdfs:subClassOf swa:ScriptElements ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
edg:ActionNotSupportedInThisReleaseAlert
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <div>
        <p class=\"text-info\">This action is not supported in the current release</p>
    </div>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Action not supported in this release alert" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:Asset
  ui:instanceView """
<ui:group let:depictedResourceForFocusNode=\"{= ?this }\" let:myViewFrameStructure=\"{= COALESCE(?viewFrameStructure, edg:VFS_LG-ProvenanceModel) }\" ui:id=\"asset-provenance\" ui:priority=\"{= 10 }\">
    <ui:group let:theExplanation=\"{= COALESCE(?explanation, &quot;provenance link&quot;) }\">
        <ui:group let:viewFrameForDependent=\"{= COALESCE(?targetViewFrame, edg:VF_ResourcesFrame) }\" let:viewFrameForDepictedResource=\"{= edg:VF_ResourcesFrame }\">
            <!--ui:dumpScope ui:message=\"AAA: edg:Asset - dependency on {= ?this }\"/-->
            <edg:MakeViewFrameResourceNodeLink arg:property=\"{= ?property }\" edg:dependencyType=\"{= ?dependencyType }\" edg:explanation=\"{= ?theExplanation }\" edg:resource=\"{= ?depictedResourceForFocusNode }\" edg:targetNode=\"{= ?targetNode }\" edg:targetViewFrame=\"{= ?viewFrameForDependent }\" edg:viewFrame=\"{= ?viewFrameForDepictedResource }\"/>
            <edg:DetermineProvenanceForAsset arg:dependencyTemplate=\"{= edg:GetTableProvenance }\" arg:focusNode=\"{= ?this }\" edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach - 1 }\" edg:viewFrame=\"{= ?viewFrameForDepictedResource }\" edg:viewFrameStructure=\"{= ?myViewFrameStructure }\"/>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?this) }\" arg:node=\"{= ?this }\"/>
    <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-for-data-element\" ui:priority=\"{= 10 }\">
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-activity\" ui:priority=\"{= -1 }\">
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-application\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:Asset from {= ?this } to {= ?rightNode }\"/-->
    <edg:GenericNodeToNodeMapDetails arg:explanation=\"Generated by edg:Asset from {= ?this } to {= ?rightNode }\" arg:leftNode=\"{= ?leftNode }\" arg:link=\"depends on\" arg:reverseNodes=\"{= true }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-lineage-model\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA3: edg:Asset from {= ?this } to {= ?rightNode }\"/-->
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:Asset from {= ?this } to {= ?rightNode }\"/-->
    <edg:GenericNodeToNodeMapDetails arg:explanation=\"Generated by edg:Asset from {= ?this } to {= ?rightNode }\" arg:leftNode=\"{= ?leftNode }\" arg:link=\"depends on\" arg:reverseNodes=\"{= true }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"downstream-impact\" ui:priority=\"{= -9 }\">
    <!--ui:dumpScope ui:message=\"AAA: edg:Asset - downstream-impact\"/-->
    <edg:DetermineDownstreamDependenciesForResource arg:dependencyTemplate=\"{= edg:GetDependenciesOfDataElement }\" arg:focusNode=\"{= ?this }\" edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach }\" edg:sourceViewFrame=\"{= ?sourceViewFrame }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"impact-diagram\" ui:priority=\"{= 1 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:Asset - downstream-impact - {= ui:label(?this) }\"/-->
    <edg:LineageGramTemplate arg:dataProvider=\"{= edg:BuildImpactGramForAsset }\" arg:focusNode=\"{= ?this }\" arg:graph=\"{= ?graph }\" edg:viewFrameStructure=\"{= edg:VFS_LG-ProvenanceModel }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\">
        <ui:insert ui:into=\"header\">
            <edg:LineageGramHeader arg:title=\"ImpactGram&trade; for: {= ui:label(spl:object(?this, rdf:type)) } {= ui:label(?this) }\"/>
        </ui:insert>
    </edg:LineageGramTemplate>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-data-provider\" ui:priority=\"{= 20 }\">
    <edg:BuildJSONforLineageGramDataProviderDataService arg:dataProvider=\"{= edg:BuildLineageGramForAsset }\" arg:provider=\"{= edg:Asset }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-viewframes\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramViewFramesDataService arg:provider=\"{= edg:Asset }\" edg:viewFrameStructure=\"{= edg:VFS_LG-ProvenanceModel }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram\" ui:priority=\"{= 1 }\">
    <edg:LineageGramTemplate arg:dataProvider=\"{= edg:BuildLineageGramForAsset }\" arg:focusNode=\"{= ?this }\" arg:graph=\"{= ?graph }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFrameStructure=\"{= edg:VFS_LG-ProvenanceModel }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\">
        <ui:insert ui:into=\"header\">
            <edg:LineageGramHeader arg:title=\"Lineage for '{= ui:label(edg:getEDGresourceType(?this)) }':  {= ui:label(?this) }\"/>
        </ui:insert>
    </edg:LineageGramTemplate>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"more-downstream\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= true }\" arg:label=\"more dependents\" arg:leftNode=\"{= edg:PHMDS-SURROGATE }\" arg:rightNode=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"more-fanin\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= false }\" arg:label=\"more fan-in\" arg:leftNode=\"{= edg:PHMFI-SURROGATE }\" arg:rightNode=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"more-fanout\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= false }\" arg:label=\"more fan-out\" arg:leftNode=\"{= ?this }\" arg:rightNode=\"{= edg:PHMFO-SURROGATE }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"more-upstream\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= true }\" arg:label=\"more dependencies\" arg:leftNode=\"{= ?this }\" arg:rightNode=\"{= edg:PHMUS-SURROGATE }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:BuildDownstreamDiagramForResource
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:dataGraph=\"{= teamwork:unionGraphForCurrentUser() }\" let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myFocusNode=\"{= IRI(spif:decodeURL(?focusNode)) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:myReach=\"{= COALESCE(?reach, 10) }\" let:mySourceViewFrame=\"{= COALESCE(?viewFrame, edg:VF_SourceFrame) }\">
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?myFocusNode) }\">
            <ui:throw ui:message=\"Error with focus node: {= ?focusNode }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
            <ui:throw ui:message=\"No data graph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?focusNode) }\">
            <ui:throw ui:message=\"No focus node specified\"/>
        </ui:if>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?dataGraph) }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                <ui:group let:depictedResourceForFocusNode=\"{= ?myFocusNode }\">
                    <!--ui:dumpScope ui:message=\"AAA: BuildDownstreamDiagramForResource\"/-->
                    <edg:MakeSingleViewFrameResourceOccurrence edg:activeResource=\"{= ?myFocusNode }\" edg:resource=\"{= ?myFocusNode }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
                    <edg:DetermineDownstreamDependenciesForResource arg:dependencyTemplate=\"{= edg:GetDataDependents }\" arg:focusNode=\"{= ?myFocusNode }\" edg:breadth=\"{= ?myBreadth }\" edg:offset=\"{= ?myOffset }\" edg:reach=\"{= ?myReach }\" edg:sourceViewFrame=\"{= ?mySourceViewFrame }\"/>
                    <edg:GenerateJSONforLineageGram arg:diagramType=\"{= edg:DIAGTYPE_DOWNSTREAM-LINEAGEGRAM }\" edg:activeResource=\"{= ?myFocusNode }\" edg:resource=\"{= ?depictedResourceForFocusNode }\"/>
                </ui:group>
            </ui:setContext>
        </ui:setContext>
        <edg:DumpTempGraphForLineageGram/>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"exception\" arg:value=\"{= ?exception }\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Builds a diagram of downstream dependencies for a single resource." ;
  rdfs:label "Build downstream diagram for resource" ;
  rdfs:subClassOf edg:DownstreamTraceabilityElements ;
.
edg:BuildFirstTierNodesAndLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= !spr:isEmpty(?resultSet) }\">
        <ui:forEach ui:resultSet=\"{= ?resultSet }\">
            <ui:call arg:list=\"{= ?inputs }\" ui:template=\"{= edg:GetResourcesInStringList }\" ui:varName=\"softwareInputs\">
                <ui:forEach ui:resultSet=\"{= ?softwareInputs }\">
                    <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= edg:DEPTYPE_DATA-INPUT }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?software }\" edg:targetViewFrame=\"{= edg:VF_SoftwareFrame }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\"/>
                </ui:forEach>
            </ui:call>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Build software dependencies nodes and links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforBusinessApplicationDownstreamTraceabilityDiagram
  rdfs:subClassOf edg:ImpactGramServices ;
.
edg:BuildJSONforDataElementCompositeNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:ultimateParent=\"{= ?parent }\">
    <ui:group letrs:compositeParent=\"{#
            SELECT ?compositeParent ?compositionProperty
            WHERE {
                ?node edg:getCompositeParent ( ?compositeParent ?compositionProperty ) .
            } }\">
        <!--ui:dumpResultSet ui:message=\"AAA1 - edg:BuildJSONforDataElementCompositeNode\"
  ui:resultSet=\"{= ?compositeParent }\"/-->
        <ui:if ui:condition=\"{= !spr:isEmpty(?compositeParent) }\">
            <ui:forEach ui:resultSet=\"{= ?compositeParent }\">
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?compositeParent) }\" arg:node=\"{= ?compositeParent }\" arg:parent=\"{= ?ultimateParent }\"/>
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?compositeParent }\"/>
            </ui:forEach>
        </ui:if>
        <ui:else>
            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= COALESCE(?label, ui:label(?node)) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?ultimateParent }\"/>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for data element composite node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDataElementNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Value arg:name=\"nodes\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(edg:getEDGresourceType(?leftNode)) }\"/>
                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?leftNode, rdf:type)) }\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?rightNode }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightNode) }\"/>
                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(edg:getEDGresourceType(?rightNode)) }\"/>
                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?rightNode, rdf:type)) }\"/>
            </swon:Object>
            <ui:if ui:condition=\"{= !spr:isEmpty(?resultSet) }\">
                <swon:Comma/>
                <ui:forEach ui:resultSet=\"{= ?resultSet }\" ui:separator=\",\">
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?element }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?element) }\"/>
                        <swon:Value arg:name=\"parent\" arg:value=\"{= ?table }\"/>
                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?elementType) }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?elementType) }\"/>
                    </swon:Object>
                    <ui:if ui:condition=\"{= bound(?table) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?table }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?table) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= IF(bound(?schema), ?schema, ?database) }\"/>
                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?tableType) }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?tableType) }\"/>
                        </swon:Object>
                        <ui:if ui:condition=\"{= bound(?database) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?database }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?database) }\"/>
                                <swon:Value arg:name=\"anyRelation\" arg:value=\"edg:hostedOn\"/>
                                <swon:Value arg:name=\"parent\" arg:value=\"{= ?server }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?databaseType) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?databaseType) }\"/>
                            </swon:Object>
                        </ui:if>
                        <ui:if ui:condition=\"{= bound(?schema) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?schema }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?schema) }\"/>
                                <swon:Value arg:name=\"parent\" arg:value=\"{= ?dataBase }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?schemaType) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?schemaType) }\"/>
                            </swon:Object>
                        </ui:if>
                        <ui:if ui:condition=\"{= bound(?server) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?server }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?server) }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?serverType) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?serverType) }\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:if>
                    <ui:if ui:condition=\"{= bound(?leftObject) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?leftObject }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftObject) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?leftNode }\"/>
                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?leftObjectType) }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?leftObjectType) }\"/>
                        </swon:Object>
                    </ui:if>
                    <ui:if ui:condition=\"{= bound(?rightObject) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?rightObject }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightObject) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?rightNode }\"/>
                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?rightObjectType) }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?rightObjectType) }\"/>
                        </swon:Object>
                    </ui:if>
                </ui:forEach>
            </ui:if>
        </swon:Array>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for data element node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDatabaseColumnCompositeNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:ultimateParent=\"{= ?parent }\">
    <ui:group let:table=\"{= spl:object(?node, edg:columnOf) }\">
        <ui:if ui:condition=\"{= bound(?table) }\">
            <ui:group let:database=\"{= spl:object(?table, edg:tableOf) }\" let:schema=\"{= spl:object(?table, edg:belongsToSchema) }\">
                <ui:if ui:condition=\"{= bound(?database) }\">
                    <ui:group let:server=\"{= spl:object(?database, edg:hostedOn) }\">
                        <ui:if ui:condition=\"{= bound(?server) }\">
                            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?server) }\" arg:node=\"{= ?server }\" arg:parent=\"{= ?ultimateParent }\"/>
                            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?server }\"/>
                        </ui:if>
                        <ui:else>
                            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?ultimateParent }\"/>
                        </ui:else>
                        <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?table) }\" arg:node=\"{= ?table }\" arg:parent=\"{= ?database }\"/>
                    </ui:group>
                </ui:if>
                <ui:elseif ui:condition=\"{= bound(?schema) }\">
                    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?schema) }\" arg:node=\"{= ?schema }\" arg:parent=\"{= ?ultimateParent }\"/>
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?table) }\" arg:node=\"{= ?table }\" arg:parent=\"{= ?schema }\"/>
                </ui:elseif>
                <ui:else>
                    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?table) }\" arg:node=\"{= ?table }\" arg:parent=\"{= ?ultimateParent }\"/>
                </ui:else>
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?table }\"/>
            </ui:group>
        </ui:if>
        <ui:else>
            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= COALESCE(?label, ui:label(?node)) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?ultimateParent }\"/>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for database column node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDatabaseDerivationMapDependencies
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1 - edg:BuildJSONforDatabaseDerivationMapDependencies - {= ?upstreamNode }\"/-->
    <ui:if ui:condition=\"{= bound(?downstreamNode) }\">
        <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?downstreamNode }\"/>
        <ui:call arg:resource=\"{= ?upstreamNode }\" arg:software=\"{= ?downstreamNode }\" ui:template=\"{= edg:GetSoftwareExecutableDatabaseInputs }\" ui:varName=\"inputs\">
            <!--ui:dumpResultSet ui:message=\"AAA1 - BuildJSONforDatabaseNode - {= ?downstreamNode }\"
  ui:resultSet=\"{= ?inputs }\"/-->
            <edg:BuildJSONforDatabaseInputNodes arg:database=\"{= ?upstreamNode }\" arg:downstreamNode=\"{= ?downstreamNode }\" arg:resultSet=\"{= ?inputs }\"/>
            <ui:group let:countOfMappingCollections=\"{= edg:getCountOfResourcesFromResultSet(6, ?inputs) }\">
                <!--ui:dumpScope ui:message=\"AAA2 - BuildJSONforDatabaseDerivationMapDependencies - {= ?downstreamNode }\"/-->
                <ui:if ui:condition=\"{= ?countOfMappingCollections != 0 }\">
                    <edg:BuildJSONforMappingCollections arg:downstreamNode=\"{= ?downstreamNode }\" arg:resultSet=\"{= ?inputs }\"/>
                </ui:if>
                <ui:group let:programs=\"{= edg:getCountOfResourcesFromResultSet(3, ?inputs) }\">
                    <ui:if ui:condition=\"{= ?programs != 0 }\">
                        <ui:group let:programDependencieslId=\"ProgramDependencies\">
                            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"Program Dependencies\" arg:node=\"{= ?programDependencieslId }\" arg:parent=\"{= ?downstreamNode }\"/>
                            <ui:call arg:column=\"{= 3 }\" arg:resultSet=\"{= ?inputs }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"programs\">
                                <!--ui:dumpResultSet ui:message=\"AAA5 - BuildJSONforDatabaseDerivationMapDependencies - {= ?downstreamNode }\"
  ui:resultSet=\"{= ?programs }\"/-->
                                <ui:forEach ui:resultSet=\"{= ?programs }\">
                                    <ui:setContext ui:varName=\"softwareProgram\" ui:varValue=\"{= ui:encodeNode(?resource) }\">
                                        <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-cog\" arg:label=\"{= ui:label(?resource) }\" arg:node=\"{= ?resource }\" arg:parent=\"{= ?programDependencieslId }\"/>
                                        <ui:call arg:column=\"{= 3 }\" arg:resultSet=\"{= ?inputs }\" arg:value=\"{= ?resource }\" ui:template=\"{= edg:FilteredSoftwareExecutableDependencies }\" ui:varName=\"inputsFilteredByProgram\">
                                            <!--ui:dumpResultSet ui:message=\"AAA6 - BuildJSONforDatabaseDerivationMapDependencies - {= ?resource }\"
  ui:resultSet=\"{= ?inputsFilteredByProgram }\"/-->
                                            <ui:if ui:condition=\"{= ?inputsFilteredByProgram != 0 }\">
                                                <ui:group let:functions=\"{= edg:getCountOfResourcesFromResultSet(4, ?inputsFilteredByProgram) }\">
                                                    <ui:if ui:condition=\"{= ?functions != 0 }\">
                                                        <ui:call arg:column=\"{= 4 }\" arg:resultSet=\"{= ?inputsFilteredByProgram }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"functions\">
                                                            <!--ui:dumpResultSet ui:message=\"AAA7 - BuildJSONforDatabaseDerivationMapDependencies - {= ?resource }\"
  ui:resultSet=\"{= ?functions }\"/-->
                                                            <ui:forEach ui:resultSet=\"{= ?functions }\">
                                                                <ui:call arg:column=\"{= 4 }\" arg:resultSet=\"{= ?inputsFilteredByProgram }\" arg:value=\"{= ?resource }\" ui:template=\"{= edg:FilteredSoftwareExecutableDependencies }\" ui:varName=\"inputsFilteredByFunction\">
                                                                    <!--ui:dumpResultSet ui:message=\"AAA8 - BuildJSONforDatabaseDerivationMapDependencies - {= ?resource }\"
  ui:resultSet=\"{= ?inputsFilteredByFunction }\"/-->
                                                                    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-cog\" arg:label=\"{= ui:label(?softwareFunction) }\" arg:node=\"{= ?resource }\" arg:parent=\"{= ui:decodeNode(ui:contextValue(&quot;softwareProgram&quot;)) }\"/>
                                                                    <ui:if ui:condition=\"{= ?inputsFilteredByFunction != 0 }\">
                                                                        <edg:MakeDerivationMapLink arg:id=\"{= ui:uniqueId() }\" arg:label=\"input\" edg:source=\"{= ?resource }\" edg:target=\"{= str(?softwareFunction) }\"/>
                                                                    </ui:if>
                                                                </ui:call>
                                                            </ui:forEach>
                                                        </ui:call>
                                                    </ui:if>
                                                    <ui:else>
                                                        <!--ui:dumpResultSet ui:message=\"AAA9 - BuildJSONforDatabaseDerivationMapDependencies - {= ?resource }\"
  ui:resultSet=\"{= ?inputsFilteredByProgram }\"/-->
                                                    </ui:else>
                                                </ui:group>
                                            </ui:if>
                                        </ui:call>
                                    </ui:setContext>
                                </ui:forEach>
                                <!--- finished with programs -->
                            </ui:call>
                        </ui:group>
                    </ui:if>
                </ui:group>
            </ui:group>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Analyzes the dependencies that a software program (downstream also referred to as the  right node) has on tables and columns of a specific database (upstream also referred to as the left node)." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for database derivation map dependencies" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDatabaseInputNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:container ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Outermost container for holding the table structure. This could be the database itself or a mappings collection, or a program/function dependency." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:occurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:database ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "database the table belongs to" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:databaseOccurrence=\"{= IF(bound(?occurrence), CONCAT(str(?database), ?occurrence), &quot;&quot;) }\" let:server=\"{= spl:object(?database, edg:hostedOn) }\" let:tables=\"{= edg:getCountOfResourcesFromResultSet(0, ?resultSet) }\">
    <!--ui:dumpScope ui:message=\"AAA1 - BuildJSONforDatabaseInputNodes - {= ?database }\"/-->
    <ui:if ui:condition=\"{= ?tables != 0 }\">
        <ui:if ui:condition=\"{= bound(?server) }\">
            <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?server) }\" arg:node=\"{= ?server }\"/>
            <edg:MakeDerivationMapLink arg:id=\"{= CONCAT(str(?database), &quot;~~&quot;, str(?server)) }\" arg:label=\"{= ui:label(edg:hostedOn) }\" edg:source=\"{= str(?database) }\" edg:target=\"{= str(?server) }\"/>
        </ui:if>
        <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\"/>
        <ui:group let:tablesId=\"TABLES_{= ui:uniqueId() }\">
            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-table\" arg:label=\"Tables\" arg:node=\"{= ?tablesId }\" arg:parent=\"{= ?database }\"/>
            <ui:call arg:column=\"{= 0 }\" arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"tables\">
                <!--ui:dumpResultSet ui:message=\"AAA2 - BuildJSONforDatabaseInputNodes - {= ?database }\"
  ui:resultSet=\"{= ?tables }\"/-->
                <ui:forEach ui:resultSet=\"{= ?tables }\">
                    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-table\" arg:label=\"{= ui:label(?resource) }\" arg:node=\"{= ?resource }\" arg:occurrence=\"{= ?occurrence }\" arg:parent=\"{= ?tablesId }\"/>
                    <edg:MakeDerivationMapLink arg:id=\"LINK_{= ui:uniqueId() }\" arg:label=\"input(s)\" edg:source=\"{= str(?downstreamNode) }\" edg:target=\"{= ?tablesId }\"/>
                    <ui:call arg:column=\"{= 0 }\" arg:resultSet=\"{= ?resultSet }\" arg:value=\"{= ?resource }\" ui:template=\"{= edg:FilteredSoftwareExecutableDependencies }\" ui:varName=\"tableRows\">
                        <!--ui:dumpResultSet ui:message=\"AAA3 - BuildJSONforDatabaseInputNodes - {= ?downstreamNode }\"
  ui:resultSet=\"{= ?tableRows }\"/-->
                        <ui:forEach ui:resultSet=\"{= ?tableRows }\">
                            <edg:BuildJSONforLineageGramNode arg:icon=\"fa fa-columns\" arg:label=\"{= ui:label(?input) }\" arg:node=\"{= ?input }\" arg:parent=\"{= ?resource }\"/>
                            <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?input }\"/>
                        </ui:forEach>
                    </ui:call>
                </ui:forEach>
            </ui:call>
        </ui:group>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Builds a hierarchical JSON strructure for the columns of a table in a given database that are used by a software executable. The econtainer for the structure may have no parent or may be a sub-structure of a container.  For cases where the same resource may appear in more than one place in the diagram an 'occurrence' property is used to specify a suffix on the node name. The template is passed a result set that holds the details of the database table. This result set should have the following columns: \"?table ?inputType ?input ?softwareProgram ?softwareFunction ?serviceEndpoint ?directMappingsCollection ?mapping\" , as provided, for example, by 'edg:GetSoftwareExecutableDatabaseInputs'." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for database input nodes" ;
  rdfs:seeAlso edg:GetSoftwareExecutableDatabaseInputs ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDatabaseNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:BuildJSONforDatabaseNode\"/-->
    <ui:call arg:resource=\"{= ?node }\" arg:software=\"{= ?software }\" ui:template=\"{= edg:GetSoftwareExecutableDatabaseInputs }\" ui:varName=\"inputs\">
        <!--ui:dumpResultSet ui:message=\"AAA1 - BuildJSONforDatabaseNode - {= ?software }\" ui:resultSet=\"{= ?inputs }\"/-->
        <edg:BuildJSONforDatabaseInputNodes arg:database=\"{= ?node }\" arg:resultSet=\"{= ?inputs }\"/>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for database node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDatabaseTableCompositeNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:ultimateParent=\"{= ?parent }\">
    <ui:group let:database=\"{= spl:object(?node, edg:tableOf) }\" let:schema=\"{= spl:object(?node, edg:belongsToSchema) }\">
        <ui:if ui:condition=\"{= bound(?database) }\">
            <ui:group let:server=\"{= spl:object(?database, edg:hostedOn) }\">
                <ui:if ui:condition=\"{= bound(?server) }\">
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?server) }\" arg:node=\"{= ?server }\" arg:parent=\"{= ?ultimateParent }\"/>
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?server }\"/>
                </ui:if>
                <ui:else>
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?ultimateParent }\"/>
                </ui:else>
                <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?table) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?database }\"/>
            </ui:group>
        </ui:if>
        <ui:elseif ui:condition=\"{= bound(?schema) }\">
            <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?schema) }\" arg:node=\"{= ?schema }\" arg:parent=\"{= ?ultimateParent }\"/>
            <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?schema }\"/>
        </ui:elseif>
        <ui:else>
            <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?ultimateParent }\"/>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for database table composite node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforDerivationMapDataStructure
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:datastructure=\"{= spl:object(?leftNode, edg:dataElementOf) }\">
    <ui:if ui:condition=\"{= !bound(?datastructure) }\">
        <swon:Object>
            <swon:Value arg:name=\"id\" arg:value=\"{= ENCODE_FOR_URI(str(?leftNode)) }\"/>
            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
            <swon:Value arg:name=\"resource\" arg:value=\"{= ENCODE_FOR_URI(str(?leftNode)) }\"/>
            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?leftNode, rdf:type)) }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?leftNode, rdf:type)) }\"/>
            <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(spl:object(?leftNode, rdf:type), edg:glyph) }\"/>
        </swon:Object>
    </ui:if>
    <ui:else>
        <swon:Object let:dataStructureType=\"{= spl:object(?datastructure, rdf:type) }\">
            <swon:Value arg:name=\"id\" arg:value=\"{= ENCODE_FOR_URI(str(?dataStructure)) }\"/>
            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?datastructure) }\"/>
            <swon:Value arg:name=\"anyRelation\" arg:value=\"edg:dataElementOf\"/>
            <swon:Value arg:name=\"parent\" arg:value=\"{= ?datastructure }\"/>
            <swon:Value arg:name=\"resource\" arg:value=\"{= ENCODE_FOR_URI(str(?dataStructure)) }\"/>
            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?dataStructureType) }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?dataStructureType) }\"/>
            <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?dataStructureType, edg:glyph) }\"/>
        </swon:Object>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map data structure" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapDatabaseView
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Value arg:name=\"nodes\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?rightNode }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightNode) }\"/>
                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?rightNode, rdf:type)) }\"/>
                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?rightNode, rdf:type)) }\"/>
            </swon:Object>
            <swon:Comma/>
            <ui:group let:database=\"{= spl:object(?leftNode, edg:viewOf) }\">
                <ui:if ui:condition=\"{= !bound(?database) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?leftNode, rdf:type)) }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?leftNode, rdf:type)) }\"/>
                    </swon:Object>
                </ui:if>
                <ui:else>
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?database) }\"/>
                        <swon:Value arg:name=\"anyRelation\" arg:value=\"edg:tableOf\"/>
                        <swon:Value arg:name=\"parent\" arg:value=\"{= ?database }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?database, rdf:type)) }\"/>
                    </swon:Object>
                    <ui:group let:schema=\"{= spl:object(?leftNode, edg:belongsToSchema) }\">
                        <ui:if ui:condition=\"{= bound(?schema) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?schema }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?schema) }\"/>
                                <swon:Value arg:name=\"parent\" arg:value=\"{= ?dataBase }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?schema, rdf:type)) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?schema, rdf:type)) }\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:group>
                    <ui:group let:server=\"{= spl:object(?database, edg:hostedOn) }\">
                        <ui:if ui:condition=\"{= bound(?server) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?server }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?server) }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?server, rdf:type)) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?server, rdf:type)) }\"/>
                            </swon:Object>
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?database }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?database) }\"/>
                                <swon:Value arg:name=\"anyRelation\" arg:value=\"edg:hostedOn\"/>
                                <swon:Value arg:name=\"parent\" arg:value=\"{= ?server }\"/>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?database, rdf:type)) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?database, rdf:type)) }\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:group>
                </ui:else>
            </ui:group>
        </swon:Array>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map database view" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapEnterpriseOutputs
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:call arg:resource1=\"{= ?leftNode }\" arg:resource2=\"{= ?rightNode }\" ui:template=\"{= edg:getRelationshipsForPropertyPair }\" ui:varName=\"relationships\">
        <swon:Object>
            <swon:Values arg:name=\"nodes\">
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?leftNode) }\" arg:node=\"{= ?leftNode }\"/>
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?rightNode) }\" arg:node=\"{= ?rightNode }\"/>
                <ui:forEach ui:resultSet=\"{= ?relationships }\">
                    <ui:if ui:condition=\"{= bound(?compositionProperty) }\">
                        <ui:forEach ui:resultSet=\"{#
                                SELECT ?childItem ?childItemLabel
                                WHERE {
                                    ?leftNode ?property ?childItem .
                                    BIND (ui:label(?childItem) AS ?childItemLabel) .
                                }
                                ORDER BY (?childItemLabel) }\">
                            <edg:BuildJSONforLineageGramNode arg:label=\"{= ?childItemLabel }\" arg:node=\"{= ?childItem }\" arg:parent=\"{= ?rightNode }\"/>
                        </ui:forEach>
                    </ui:if>
                </ui:forEach>
            </swon:Values>
            <swon:Values arg:name=\"edges\">
                <!--ui:dumpResultSet ui:message=\"AAA: edg:BuildJSONforDerivationMapEnterpriseOutputs\"
  ui:resultSet=\"{= ?relationships }\"/-->
                <ui:if ui:condition=\"{= spr:isEmpty(?relationships) }\">
                    <edg:BuildJSONforDerviationMapLink arg:label=\"?\" arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
                </ui:if>
                <ui:else>
                    <ui:forEach ui:resultSet=\"{= ?relationships }\">
                        <edg:BuildJSONforDerviationMapLink arg:leftNode=\"{= IF(?inverse, ?rightNode, ?leftNode) }\" arg:property=\"{= ?property }\" arg:rightNode=\"{= IF(?inverse, ?leftNode, ?rightNode) }\" edg:compositionProperty=\"{= ?compositionProperty }\"/>
                    </ui:forEach>
                </ui:else>
            </swon:Values>
        </swon:Object>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map enterprise outputs" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapLeftAndRightNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1 - BuildJSONforDerivationMapLeftAndRightNodes - {= ?downstreamNode } - {= ?upstreamNode }\"/-->
    <ui:resourceView arg:downstreamNode=\"{= ?downstreamNode }\" arg:upstreamNode=\"{= ?upstreamNode }\" ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?upstreamNode }\"/>
    <ui:resourceView arg:downstreamNode=\"{= ?downstreamNode }\" arg:upstreamNode=\"{= ?upstreamNode }\" ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?downstreamNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Generate JSON for the left and right nodes using delegation based on instance views." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map left and right nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (!bound(?resultSet)) || spr:isEmpty(?resultSet) }\">
        <swon:Value arg:name=\"edges\">
            <swon:Object/>
        </swon:Value>
    </ui:if>
    <ui:else>
        <swon:Value arg:name=\"edges\">
            <swon:Array>
                <ui:if ui:condition=\"{= spr:rowCount(?resultSet) &gt; 0 }\">
                    <ui:forEach ui:indexVar=\"rowIndex\" ui:resultSet=\"{= ?resultSet }\" ui:separator=\",\">
                        <ui:group let:id=\"{= ui:uniqueId() }\">
                            <ui:if ui:condition=\"{= bound(?element) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= CONCAT(&quot;output_&quot;, ?id) }\"/>
                                    <swon:Value arg:name=\"target\" arg:value=\"{= ?element }\"/>
                                    <swon:Value arg:name=\"source\" arg:value=\"{= ?leftNode }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"output\"/>
                                </swon:Object>
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= CONCAT(&quot;input_&quot;, ?id) }\"/>
                                    <swon:Value arg:name=\"target\" arg:value=\"{= ?rightNode }\"/>
                                    <swon:Value arg:name=\"source\" arg:value=\"{= ?element }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"input\"/>
                                </swon:Object>
                                <ui:if ui:condition=\"{= ?element = ?leftObjectOutput }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"id\" arg:value=\"{= CONCAT(&quot;output_LO-&quot;, ?id) }\"/>
                                        <swon:Value arg:name=\"target\" arg:value=\"{= ?element }\"/>
                                        <swon:Value arg:name=\"source\" arg:value=\"{= ?leftObject }\"/>
                                        <swon:Value arg:name=\"label\" arg:value=\"output\"/>
                                    </swon:Object>
                                </ui:if>
                                <ui:if ui:condition=\"{= ?element = ?rightObjectInput }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"id\" arg:value=\"{= CONCAT(&quot;input_RO-&quot;, ?id) }\"/>
                                        <swon:Value arg:name=\"target\" arg:value=\"{= ?rightObject }\"/>
                                        <swon:Value arg:name=\"source\" arg:value=\"{= ?element }\"/>
                                        <swon:Value arg:name=\"label\" arg:value=\"input\"/>
                                    </swon:Object>
                                </ui:if>
                            </ui:if>
                        </ui:group>
                    </ui:forEach>
                </ui:if>
            </swon:Array>
        </swon:Value>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map links" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (!bound(?resultSet)) || spr:isEmpty(?resultSet) }\">
        <swon:Value arg:name=\"nodes\">
            <swon:Object/>
        </swon:Value>
    </ui:if>
    <ui:else>
        <ui:group let:leftNodeType=\"{= edg:getEDGresourceType(?leftNode) }\" let:rightNodeType=\"{= edg:getEDGresourceType(?rightNode) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:BuildJSONforDerivationMapNodes\"/-->
            <swon:Value arg:name=\"nodes\">
                <swon:Array>
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?leftNodeType) }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?leftNodeType) }\"/>
                        <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?leftNodeType, edg:glyph) }\"/>
                    </swon:Object>
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?rightNode }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightNode) }\"/>
                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?rightNodeType) }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?rightNodeType) }\"/>
                        <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?rightNodeType, edg:glyph) }\"/>
                    </swon:Object>
                    <ui:if ui:condition=\"{= !spr:isEmpty(?resultSet) }\">
                        <swon:Comma/>
                        <ui:forEach ui:resultSet=\"{= ?resultSet }\" ui:separator=\",\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?element }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?element) }\"/>
                                <ui:if ui:condition=\"{= bound(?table) }\">
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ?table }\"/>
                                </ui:if>
                                <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?elementType) }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?elementType) }\"/>
                                <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?elementType, edg:glyph) }\"/>
                            </swon:Object>
                            <ui:if ui:condition=\"{= bound(?table) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?table }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?table) }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= IF(bound(?schema), ?schema, ?database) }\"/>
                                    <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?tableType) }\"/>
                                    <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?tableType) }\"/>
                                    <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?tableType, edg:glyph) }\"/>
                                </swon:Object>
                                <ui:if ui:condition=\"{= bound(?database) }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"id\" arg:value=\"{= ?database }\"/>
                                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?database) }\"/>
                                        <swon:Value arg:name=\"anyRelation\" arg:value=\"edg:hostedOn\"/>
                                        <ui:if ui:condition=\"{= bound(?server) }\">
                                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?server }\"/>
                                        </ui:if>
                                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?databaseType) }\"/>
                                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?databaseType) }\"/>
                                        <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?databaseType, edg:glyph) }\"/>
                                    </swon:Object>
                                    <ui:if ui:condition=\"{= bound(?schema) }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"id\" arg:value=\"{= ?schema }\"/>
                                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?schema) }\"/>
                                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?dataBase }\"/>
                                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?schemaType) }\"/>
                                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?schemaType) }\"/>
                                            <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?schemaType, edg:glyph) }\"/>
                                        </swon:Object>
                                    </ui:if>
                                    <ui:if ui:condition=\"{= bound(?server) }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"id\" arg:value=\"{= ?server }\"/>
                                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?server) }\"/>
                                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?serverType) }\"/>
                                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?serverType) }\"/>
                                            <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?serverType, edg:glyph) }\"/>
                                        </swon:Object>
                                    </ui:if>
                                </ui:if>
                            </ui:if>
                            <ui:if ui:condition=\"{= bound(?leftObject) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?leftObject }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftObject) }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ?leftNode }\"/>
                                    <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?leftObjectType) }\"/>
                                    <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?leftObjectType) }\"/>
                                    <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?leftObjectType, edg:glyph) }\"/>
                                </swon:Object>
                            </ui:if>
                            <ui:if ui:condition=\"{= bound(?rightObject) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?rightObject }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightObject) }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ?rightNode }\"/>
                                    <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?rightObjectType) }\"/>
                                    <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?rightObjectType) }\"/>
                                    <swon:Value arg:name=\"icon\" arg:value=\"{= edg:getClassPropertyValue(?rightObjectType, edg:glyph) }\"/>
                                </swon:Object>
                            </ui:if>
                        </ui:forEach>
                    </ui:if>
                </swon:Array>
            </swon:Value>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSONfor derivation map nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerivationMapNonResourceNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:collapsed ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Object>
        <swon:Value arg:name=\"id\" arg:value=\"{= ENCODE_FOR_URI(str(?node)) }\"/>
        <ui:if ui:condition=\"{= bound(?collapsed) }\">
            <swon:Value arg:name=\"collapsed\" arg:value=\"{= ?collapsed }\"/>
        </ui:if>
        <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
        <swon:Value arg:name=\"resourceType\" arg:value=\"\"/>
        <swon:Value arg:name=\"resource\" arg:value=\"{= rdf:nil }\"/>
        <swon:Value arg:name=\"type\" arg:value=\"{= rdf:nil }\"/>
        <ui:if ui:condition=\"{= bound(?parent) &amp;&amp; (?parent != rdf:nil) }\">
            <swon:Value arg:name=\"parent\" arg:value=\"{= ENCODE_FOR_URI(str(?parent)) }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?icon) }\">
            <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
        </ui:if>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for lineagegram node" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforDerivationMapResourceAspects
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:BuildJSONfoDerivationMapResourceAspects\"/-->
    <ui:group letrs:aspectClasses=\"{#
            SELECT DISTINCT ?aspectClass
            WHERE {
                ?resource a ?resourceType .
                ?resourceType edg:aspectClasses ?aspectClass .
            } }\">
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:BuildJSONfoDerivationMapResourceAspects - {= ?resource }\"
                  ui:resultSet=\"{= ?aspectClasses }\"/-->
        <ui:forEach ui:resultSet=\"{= ?aspectClasses }\">
            <ui:classView ui:class=\"{= ?aspectClass }\" ui:matchIds=\"derivation-map-aspect\" ui:resource=\"{= ?resource }\"/>
        </ui:forEach>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "The service returns a JSON structure for nodes and links that provide a visualization of the aspects of a given resource." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for Derivation Map Resource Aspects" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforDerviationMapLink
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:compositionProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:reverseNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:sourceOccurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:targetOccurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:aSourceOccurrence=\"{= COALESCE(?sourceOccurrence, &quot;&quot;) }\" let:aTargetOccurrence=\"{= COALESCE(?targetOccurrence, &quot;&quot;) }\" let:compositionSuffix=\"{= IF(bound(?compositionProperty), CONCAT(&quot; (&quot;, ui:label(?compositionProperty), &quot;)&quot;), &quot;&quot;) }\" let:id=\"{= CONCAT(&quot;LINK_&quot;, ui:uniqueId()) }\">
    <swon:Object>
        <swon:Value arg:name=\"id\" arg:value=\"{= ?id }\"/>
        <swon:Value arg:name=\"label\" arg:value=\"{= CONCAT(COALESCE(?label, ui:label(?property)), ?compositionSuffix) }\"/>
        <ui:if ui:condition=\"{= ?reverseNodes }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:BuildJSONforDerviationMapLink\"/-->
            <swon:Value arg:name=\"source\" arg:value=\"{= ENCODE_FOR_URI(str(?rightNode)) }{= ?aTargetOccurrence }\"/>
            <swon:Value arg:name=\"target\" arg:value=\"{= ENCODE_FOR_URI(str(?leftNode)) }{= ?aSourceOccurrence }\"/>
        </ui:if>
        <ui:else>
            <!--ui:dumpScope ui:message=\"AAA2: edg:BuildJSONforDerviationMapLink\"/-->
            <swon:Value arg:name=\"target\" arg:value=\"{= ENCODE_FOR_URI(str(?rightNode)) }{= ?aTargetOccurrence }\"/>
            <swon:Value arg:name=\"source\" arg:value=\"{= ENCODE_FOR_URI(str(?leftNode)) }{= ?aSourceOccurrence }\"/>
        </ui:else>
        <ui:if ui:condition=\"{= bound(?explanation) }\">
            <swon:Value arg:name=\"explanation\" arg:value=\"{= ?explanation }\"/>
        </ui:if>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for derivation map link" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforInitialPairOfDerivationMapNodesLink
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:provider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:viewFramesGraph=\"{= IRI(COALESCE(?graph, &quot;http://edg.topbraidlive.org/1.0/config/diagrams&quot;)) }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?viewFramesGraph) }\">
        <swon:Object>
            <swon:Value arg:name=\"dataProvider\" arg:value=\"{= ui:encodeNode(?dataProvider) }\"/>
            <swon:Value arg:name=\"provider\" arg:value=\"{= ui:encodeNode(?provider) }\"/>
        </swon:Object>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram data provider data service" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforLineageGramDataProviderDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:provider ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:viewFramesGraph=\"{= IRI(COALESCE(?graph, &quot;http://edg.topbraidlive.org/1.0/config/diagrams&quot;)) }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?viewFramesGraph) }\">
        <swon:Object>
            <swon:Value arg:name=\"dataProvider\" arg:value=\"{= ui:encodeNode(?dataProvider) }\"/>
            <swon:Value arg:name=\"provider\" arg:value=\"{= ui:encodeNode(?provider) }\"/>
        </swon:Object>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram data provider data service" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLineageGramNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:collapsed ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:occurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:anOccurrence=\"{= COALESCE(?occurrence, &quot;&quot;) }\" let:myResource=\"{= COALESCE(?resource, ?node) }\">
    <ui:group let:encodedNode=\"{= ENCODE_FOR_URI(str(?myResource)) }\" let:myResourceType=\"{= IF(bound(?resourceType), ?resourceType, IF(isIRI(?myResource), edg:getEDGresourceType(?myResource), ?none)) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:BuildJSONforLineageGramNode {= ?myResource }\"/-->
        <swon:Object>
            <swon:Value arg:name=\"id\" arg:value=\"{= ENCODE_FOR_URI(str(?myResource)) }{= ?anOccurrence }\"/>
            <ui:if ui:condition=\"{= bound(?collapsed) }\">
                <swon:Value arg:name=\"collapsed\" arg:value=\"{= ?collapsed }\"/>
            </ui:if>
            <swon:Value arg:name=\"label\" arg:value=\"{= COALESCE(?label, ui:label(?myResource)) }\"/>
            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ?myResourceType }\"/>
            <swon:Value arg:name=\"resource\" arg:value=\"{= ?encodedNode }\"/>
            <swon:Value arg:name=\"type\" arg:value=\"{= IF(bound(?myResourceType), ui:label(?myResourceType), &quot;unknown&quot;) }\"/>
            <ui:if ui:condition=\"{= bound(?parent) &amp;&amp; (?parent != rdf:nil) }\">
                <swon:Value arg:name=\"parent\" arg:value=\"{= ENCODE_FOR_URI(str(?parent)) }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?icon) }\">
                <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
            </ui:if>
            <ui:elseif ui:condition=\"{= bound(?myResourceType) &amp;&amp; (?myResourceType != rdf:nil) }\">
                <swon:Value arg:name=\"icon\" arg:value=\"{= COALESCE(edg:getClassPropertyValue(?myResourceType, edg:glyph), &quot;far fa-gem&quot;) }\"/>
            </ui:elseif>
        </swon:Object>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for lineagegram node" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforLineageGramNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
    <ui:forEach ui:resultSet=\"{= ?rs }\">
        <swon:Object>
            <swon:Value arg:name=\"id\" arg:value=\"{= ui:encodeNode(?resource) }\"/>
            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?resource) }\"/>
            <swon:Value arg:name=\"typeId\" arg:value=\"{= ui:label(spl:object(?resource, rdf:type)) }\"/>
        </swon:Object>
    </ui:forEach>
</ui:call>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram nodes (DEPRECATE?)" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLineageGramNodesUsingOccurrences
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?list) }\">
        <ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <swon:Object>
                    <swon:Value arg:name=\"id\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, ?viewFrame) }\"/>
                    <swon:Value arg:name=\"viewFrame\" arg:value=\"{= ui:encodeNode(?viewFrame) }\"/>
                    <swon:Value arg:name=\"resource\" arg:value=\"{= ui:encodeNode(?resource) }\"/>
                    <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?resourceType) }\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?resource) }\"/>
                    <swon:Value arg:name=\"typeId\" arg:value=\"{= ui:encodeNode(edg:getClassWithPropertyValue(?resourceType, edg:Asset, edg:isDepictionType, true)) }\"/>
                </swon:Object>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "DEPRECATED" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram nodes using occurrences" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLineageGramViewFrames
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  ui:prototype """
<ui:group let:viewFramesGraph=\"{= IRI(COALESCE(?graph, &quot;http://edg.topbraidlive.org/1.0/config/diagrams&quot;)) }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?viewFramesGraph) }\">
        <ui:bind let:monochromeColor=\"{= spl:object(?viewFrameStructure, edg:monchromeColor) }\">
            <ui:stringify ui:format=\"{= ui:JSON }\" ui:varName=\"viewFrames\">
                <ui:call edg:viewFrameStructure=\"{= ?viewFrameStructure }\" ui:template=\"{= edg:getViewFramesDetails }\" ui:varName=\"viewFramesSpecs\">
                    <swon:Array>
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?viewFramesSpecs }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ui:encodeNode(?viewFrame) }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                                <swon:Value arg:name=\"borderColor\" arg:value=\"{= IF(bound(?monochromeColor), &quot;rgb(0,0,0,0.4)&quot;, ?borderColor) }\"/>
                                <swon:Value arg:name=\"backgroundColor\" arg:value=\"{= IF(bound(?monochromeColor), ?monochromeColor, ?backgroundColor) }\"/>
                                <swon:Value arg:expression=\"{= ?spaceShare }\" arg:name=\"spaceShare\"/>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </ui:call>
            </ui:stringify>
            <ui:return ui:result=\"{= ?viewFrames }\"/>
        </ui:bind>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram view frames" ;
  rdfs:subClassOf edg:UIfunctions ;
.
edg:BuildJSONforLineageGramViewFramesBasedOnCounts
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?viewFramesGraph) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(?viewFramesGraph)) }\">
            <swon:Values arg:name=\"viewFrames\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                        SELECT ?viewFrame ?label ?name ?color ?backgroundColor ?spaceShare ?count
                        WHERE {
                            {
                                ?diagramViewFramesShape edg:viewFrame ?viewFrame .
                                BIND (ui:globalVarValue(ui:encodeNode(?viewFrame)) AS ?count) .
                                FILTER (?count &gt; 0) .
                            } .
                            ?viewFrame edg:borderColor ?color .
                            ?viewFrame edg:backgroundColor ?backgroundColor .
                            ?viewFrame edg:label ?label .
                            ?viewFrame edg:name ?name .
                            ?viewFrame edg:spaceShare ?spaceShare .
                            ?viewFrame sh:order ?order .
                        }
                        ORDER BY (?order) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"name\" arg:value=\"{= ?name }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                        <swon:Value arg:name=\"borderColor\" arg:value=\"{= ?borderColor }\"/>
                        <swon:Value arg:name=\"backgroundColor\" arg:value=\"{= ?backgroundColor }\"/>
                        <swon:Value arg:expression=\"1\" arg:name=\"spaceShare\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Values>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <ui:throw ui:message=\"No configuration graph\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """{
      \"name\":\"dataPanel\",
      \"label\":\"Tables\",
      \"borderColor\":\"#23b0f4\",
      \"backgroundColor\":\"#f4f4ff\",
      \"acceptedTypes\":[
         \"table\"
      ],
      \"spaceShare\":1
   },""" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram view frames based on counts" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLineageGramViewFramesDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:provider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:monochromeColor=\"{= spl:object(?viewFrameStructure, edg:monchromeColor) }\" let:viewFramesGraph=\"{= IRI(COALESCE(?graph, &quot;http://edg.topbraidlive.org/1.0/config/diagrams&quot;)) }\">
    <ui:call edg:viewFrameStructure=\"{= ?viewFrameStructure }\" ui:template=\"{= edg:getViewFramesDetails }\" ui:varName=\"viewFramesSpecs\">
        <swon:Object>
            <!--swon:Value arg:name=\"context\">
<swon:Array>
<swon:Object>
<swon:Value arg:name=\"framesProvider\" arg:value=\"{= ui:encodeNode(?provider) }\"/>
<swon:Value arg:name=\"frameStructure\" arg:value=\"{= ui:encodeNode(?viewFrameStructure) }\"/>
<swon:Value arg:name=\"queryGraph\" arg:value=\"{= str(ui:currentQueryGraph()) }\"/>
<swon:Value arg:name=\"contextNodeURI\" arg:value=\"{= ENCODE_FOR_URI(str(?this)) }\"/>
<swon:Value arg:name=\"contextNodeLabel\" arg:value=\"{= ui:label(?this) }\"/>
<swon:Value arg:name=\"contextNodeType\"
arg:value=\"{= ENCODE_FOR_URI(str(spl:object(?this, rdf:type))) }\"/>
</swon:Object>
</swon:Array>
</swon:Value-->
            <swon:Value arg:name=\"frames\">
                <swon:Array>
                    <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?viewFramesSpecs }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ui:encodeNode(?viewFrame) }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                            <swon:Value arg:name=\"borderColor\" arg:value=\"{= IF(bound(?monochromeColor), &quot;rgb(0,0,0,0.4)&quot;, ?borderColor) }\"/>
                            <swon:Value arg:name=\"backgroundColor\" arg:value=\"{= IF(bound(?monochromeColor), ?monochromeColor, ?backgroundColor) }\"/>
                            <swon:Value arg:expression=\"{= ?spaceShare }\" arg:name=\"spaceShare\"/>
                        </swon:Object>
                    </ui:forEach>
                </swon:Array>
            </swon:Value>
        </swon:Object>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram view frames data service" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLineageGramViewFramesUsingOccurrences
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?viewFramesGraph) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(?viewFramesGraph)) }\">
            <swon:Values arg:name=\"viewFrames\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                        SELECT ?viewFrame ?label ?name ?color ?backgroundColor ?spaceShare ?count
                        WHERE {
                            {
                                ?diagramViewFramesShape edg:viewFrame ?viewFrame .
                                BIND (ui:globalVarValue(ui:encodeNode(?viewFrame)) AS ?count) .
                                FILTER (?count &gt; 0) .
                            } .
                            ?viewFrame edg:borderColor ?color .
                            ?viewFrame edg:backgroundColor ?backgroundColor .
                            ?viewFrame edg:label ?label .
                            ?viewFrame edg:name ?name .
                            ?viewFrame edg:spaceShare ?spaceShare .
                            ?viewFrame sh:order ?order .
                        }
                        ORDER BY (?order) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"name\" arg:value=\"{= ?name }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                        <swon:Value arg:name=\"borderColor\" arg:value=\"{= ?borderColor }\"/>
                        <swon:Value arg:name=\"backgroundColor\" arg:value=\"{= ?backgroundColor }\"/>
                        <swon:Value arg:expression=\"1\" arg:name=\"spaceShare\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Values>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <ui:throw ui:message=\"No configuration graph\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for LineageGram view frames using occurrences" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforLogicalAttributeCompositeNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:ultimateParent=\"{= ?parent }\">
    <ui:group let:logicalEntity=\"{= spl:object(?node, edg:attributeOf) }\">
        <ui:if ui:condition=\"{= bound(?logicalEntity) }\">
            <ui:group let:logicalModel=\"{= spl:object(?logicalEntity, edg:logicalModel) }\">
                <ui:if ui:condition=\"{= bound(?logicalModel) }\">
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?logicalModel) }\" arg:node=\"{= ?logicalModel }\" arg:parent=\"{= ?ultimateParent }\"/>
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?logicalEntity) }\" arg:node=\"{= ?logicalEntity }\" arg:parent=\"{= ?logicalModel }\"/>
                </ui:if>
                <ui:else>
                    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?logicalEntity) }\" arg:node=\"{= ?logicalEntity }\" arg:parent=\"{= ?ultimateParent }\"/>
                </ui:else>
                <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?logicalEntity }\"/>
            </ui:group>
        </ui:if>
        <ui:else>
            <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?ultimateParent }\"/>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for logical attribute composite node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforMappingCollections
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:directMappingsId=\"DirectMappings_{= ui:uniqueId() }\">
    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-map\" arg:label=\"Endpoint Mappings\" arg:node=\"{= ?directMappingsId }\" arg:parent=\"{= ?downstreamNode }\"/>
    <ui:call arg:column=\"{= 6 }\" arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"mappingCollections\">
        <!--ui:dumpResultSet ui:message=\"AAA19 - BuildJSONforMappingCollections - {= ?downstreamNode }\"
  ui:resultSet=\"{= ?mappingCollections }\"/-->
        <ui:forEach ui:resultSet=\"{= ?mappingCollections }\">
            <ui:call arg:column=\"{= 6 }\" arg:resultSet=\"{= ?resultSet }\" arg:value=\"{= ?resource }\" ui:template=\"{= edg:FilteredSoftwareExecutableDependencies }\" ui:varName=\"mappingRows\">
                <ui:group let:countOfMappings=\"{= spr:rowCount(?mappingRows) }\">
                    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= ui:label(?resource) } [{= ?countOfMappings }]\" arg:node=\"{= ?resource }\" arg:parent=\"{= ?directMappingsId }\"/>
                    <!--ui:dumpResultSet ui:message=\"AAA20 - BuildJSONforMappingCollections - {= ?resource }\"
  ui:resultSet=\"{= ?mappingRows }\"/-->
                    <ui:forEach ui:resultSet=\"{= ?mappingRows }\">
                        <ui:group let:inputOfMapping=\"{= spl:object(?mapping, edg:input) }\" let:outputOfMapping=\"{= spl:object(?mapping, edg:output) }\" let:sourceOccurrence=\"{= CONCAT(&quot;--&quot;, str(?mapping)) }\">
                            <edg:BuildJSONforLineageGramNode arg:icon=\"glyphicon glyphicon-saved\" arg:label=\"{= ui:label(?outputOfMapping) }\" arg:node=\"{= ?outputOfMapping }\" arg:occurrence=\"{= ?sourceOccurrence }\" arg:parent=\"{= ?resource }\"/>
                            <edg:MakeDerivationMapLink arg:id=\"{= str(?mapping) }\" arg:label=\"=\" edg:source=\"{= str(?inputOfMapping) }\" edg:target=\"{= str(?outputOfMapping) }{= ?sourceOccurrence }\"/>
                        </ui:group>
                    </ui:forEach>
                </ui:group>
            </ui:call>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for mapping collections" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:BuildJSONforPairOfDerivationMapNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Object>
        <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?leftNode, rdf:type)) }\"/>
        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?leftNode, rdf:type)) }\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"id\" arg:value=\"{= ?rightNode }\"/>
        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightNode) }\"/>
        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(spl:object(?rightNode, rdf:type)) }\"/>
        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(spl:object(?rightNode, rdf:type)) }\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for pair of derivation map nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:BuildJSONforPipelineStepLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:pipelineStep ;
      spl:valueType edg:PipelineStep ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?software ?infoAsset
            WHERE {
                ?pipelineStep edg:usesSoftwareExecutable|edg:usesSoftwareProgram ?software .
                OPTIONAL {
                    ?pipelineStep edg:producesInformationAsset ?infoAsset .
                } .
            } }\">
        <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
            <ui:if ui:condition=\"{= bound(?infoAsset) }\">
                <swon:Object>
                    <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-PLtoIA\"/>
                    <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?pipelineStep, edg:VF_SoftwareFrame) }\"/>
                    <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?infoAsset, edg:VF_EnterpriseFrame) }\"/>
                </swon:Object>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?software) }\">
                <swon:Object>
                    <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-PLStoSW\"/>
                    <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?software, edg:VF_SoftwareFrame) }\"/>
                    <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?pipelineStep, edg:VF_SoftwareFrame) }\"/>
                </swon:Object>
            </ui:if>
        </ui:group>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for pipeline step links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforReportFrameDatasetLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:report ;
      spl:valueType edg:Report ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
    <ui:forEach ui:resultSet=\"{= ?rs }\">
        <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
            <ui:if ui:condition=\"{= bound(?resource) }\">
                <swon:Object>
                    <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-DStoRPT\"/>
                    <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, edg:VF_EnterpriseFrame) }\"/>
                    <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?report, edg:VF_EnterpriseFrame) }\"/>
                </swon:Object>
            </ui:if>
        </ui:group>
    </ui:forEach>
</ui:call>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for report frame dataset links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforResourceFrameLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?list) }\">
        <ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\" ui:varName=\"resources\">
            <ui:forEach ui:resultSet=\"{= ?resources }\">
                <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
                    <ui:if ui:condition=\"{= bound(?resource) }\">
                        <ui:if ui:condition=\"{= edg:doesSoftwareExecutableNeedGivenInput(?resource, ?software) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-RtoSW\"/>
                                <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, edg:VF_ResourcesFrame) }\"/>
                                <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?software, edg:VF_SoftwareFrame) }\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:if>
                </ui:group>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for resource frame links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforSoftwareCapabilityLineageGram
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforSoftwareFrameLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?list) }\">
        <ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?source
                        WHERE {
                            ?resource edg:GetSourceSoftwareExecutable ?source .
                        } }\">
                    <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-SWtoSW\"/>
                            <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?source, edg:VF_SoftwareFrame) }\"/>
                            <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, edg:VF_SoftwareFrame) }\"/>
                        </swon:Object>
                    </ui:group>
                </ui:forEach>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for software frame links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforSoftwareOutputLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?list) }\">
        <ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <ui:call arg:software=\"{= ?resource }\" ui:template=\"{= edg:GetSoftwareExecutableEnterpriseWorkProductOutputs }\" ui:varName=\"outputs\">
                    <!--ui:dumpResultSet ui:message=\"edg:BuildJSONforSoftwareFrameLinks - Software Executable Assets: {= ?resource }\"
  ui:resultSet=\"{= ?outputs }\"/-->
                    <ui:forEach ui:resultSet=\"{= ?outputs }\">
                        <ui:group let:id=\"LINK_{= ui:uniqueId() }\" let:target=\"{= edg:GetResourceOccurrenceInViewFrame(?output, ?frame) }\">
                            <ui:if ui:condition=\"{= bound(?target) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-SWtoOP\"/>
                                    <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, edg:VF_SoftwareFrame) }\"/>
                                    <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?output, ?frame) }\"/>
                                </swon:Object>
                            </ui:if>
                        </ui:group>
                    </ui:forEach>
                </ui:call>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for software output links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforSourceAndTargetNodeLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceList ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetList ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?sourceList) }\">
        <ui:call arg:list=\"{= ?sourceList }\" ui:template=\"{= edg:GetResourcesInStringList }\" ui:varName=\"sources\">
            <ui:call arg:list=\"{= ?targetList }\" ui:template=\"{= edg:GetResourcesInStringList }\" ui:varName=\"targets\">
                <ui:forEach ui:resultSet=\"{= ?sources }\">
                    <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
                        <ui:if ui:condition=\"{= bound(?resource) }\">
                            <ui:if ui:condition=\"{= edg:doesSoftwareExecutableNeedGivenInput(?resource, ?software) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-RtoSW\"/>
                                    <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, edg:VF_ResourcesFrame) }\"/>
                                    <swon:Value arg:name=\"target\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?software, edg:VF_SoftwareFrame) }\"/>
                                </swon:Object>
                            </ui:if>
                        </ui:if>
                    </ui:group>
                </ui:forEach>
            </ui:call>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  vaem:todo "To be finished - not sure we should do this" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for source and target node links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildJSONforSourceToTargetViewFrameLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:call arg:list=\"{= ?list }\" ui:template=\"{= edg:GetResourcesInStringList }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <ui:call arg:resource=\"{= ?resource }\" edg:viewFrame=\"{= ?targetViewFrame }\" ui:template=\"{= edg:GetLineageGramTargetLinksInViewFrame }\" ui:varName=\"targetLinks\">
                <ui:forEach ui:resultSet=\"{= ?targetLinks }\">
                    <ui:group let:id=\"LINK_{= ui:uniqueId() }\">
                        <ui:if ui:condition=\"{= bound(?resource) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?id }-OPtoR\"/>
                                <swon:Value arg:name=\"source\" arg:value=\"{= edg:GetResourceOccurrenceInViewFrame(?resource, ?sourceViewFrame) }\"/>
                                <swon:Value arg:name=\"target\" arg:value=\"{= ?targetOccurrence }\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:group>
                </ui:forEach>
            </ui:call>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build JSON for source to target view frame links" ;
  rdfs:subClassOf edg:JSONServices ;
.
edg:BuildLineageGramForAsset
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:dataGraph=\"{= IRI(?graph) }\" let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myFocusNode=\"{= IRI(spif:decodeURL(?focusNode)) }\" let:myMaxTierNodeCount=\"{= COALESCE(?maxTierNodeCount, 20) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:myReach=\"{= COALESCE(?reach, 10) }\" let:viewFrameForFocusNode=\"{= edg:VF_TargetFrame }\">
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
            <ui:throw ui:message=\"No data graph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?myFocusNode) }\">
            <ui:throw ui:message=\"No Asset specified\"/>
        </ui:if>
        <ui:group let:myViewFrameStructure=\"{= COALESCE(?viewFrameStructure, edg:VFS_LG-ProvenanceModel) }\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?dataGraph) }\">
                <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                    <!--ui:dumpScope ui:message=\"AAA1: BuildLineageGramForAsset - {= ?myFocusNode }\"/-->
                    <ui:if ui:condition=\"{= ?myReach &gt; 1 }\">
                        <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?myFocusNode }\" edg:viewFrame=\"{= ?viewFrameForFocusNode }\"/>
                        <ui:call arg:resource=\"{= ?myFocusNode }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= edg:GetAssetProvenance }\" ui:varName=\"dependencies\">
                            <!--ui:dumpResultSet ui:message=\"AAA2: BuildLineageGramForAsset {= ?myFocusNode }\"
  ui:resultSet=\"{= ?dependencies }\"/-->
                            <ui:forEach ui:resultSet=\"{= ?dependencies }\">
                                <ui:group>
                                    <ui:resourceView arg:viewFrameStructure=\"{= ?myViewFrameStructure }\" edg:breadth=\"{= ?myBreadth }\" edg:dependencyType=\"{= ?dependencyType }\" edg:explanation=\"BuildLineageGramForAsset\" edg:offset=\"{= ?myOffset }\" edg:reach=\"{= ?myReach }\" edg:targetNode=\"{= ?myFocusNode }\" edg:targetViewFrame=\"{= ?viewFrameForFocusNode }\" edg:viewFrameStructure=\"{= ?myViewFrameStructure }\" ui:matchIds=\"asset-provenance\" ui:resource=\"{= ?dependency }\"/>
                                </ui:group>
                            </ui:forEach>
                        </ui:call>
                    </ui:if>
                    <edg:GenerateJSONforLineageGram arg:diagramType=\"{= edg:DIAGTYPE_UPSTREAM-LINEAGEGRAM }\" arg:focusNode=\"{= ?myFocusNode }\" edg:activeResource=\"{= ?myFocusNode }\" edg:resource=\"{= ?myFocusNode }\"/>
                </ui:setContext>
            </ui:setContext>
        </ui:group>
        <edg:DumpTempGraphForLineageGram/>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"exception\" arg:value=\"{= ?exception }\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Determines the upstrean dependencies of an Asset." ;
  rdfs:label "Build lineageGram for asset" ;
  rdfs:seeAlso edg:DetermineImpactOfAsset ;
  rdfs:seeAlso edg:DetermineProvenanceForAsset ;
  rdfs:subClassOf edg:Elements ;
.
edg:BuildLineageGramForInformationAsset
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:viewFrameStructure=\"{= COALESCE(ui:decodeNode(ui:getSessionAttribute(&quot;viewframes-structure&quot;)), edg:VFS_LG-ProvenanceModel) }\">
    <ui:group let:dataGraph=\"{= teamwork:unionGraphForCurrentUser() }\" let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myFocusNode=\"{= IRI(spif:decodeURL(?focusNode)) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:myReach=\"{= COALESCE(?reach, 10) }\">
        <ui:try>
            <ui:if ui:condition=\"{= !bound(?myFocusNode) }\">
                <ui:throw ui:message=\"Error with focus node: {= ?focusNode }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
                <ui:throw ui:message=\"No data graph provided\"/>
            </ui:if>
            <ui:if ui:condition=\"{= !bound(?focusNode) }\">
                <ui:throw ui:message=\"No focus node specified\"/>
            </ui:if>
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?dataGraph) }\">
                <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                    <!--ui:dumpScope ui:message=\"AAA1: BuildLineageGramForInformationAsset - {= ?myFocusNode }\"/-->
                    <edg:DetermineLineageForInformationAsset arg:focusNode=\"{= ?myFocusNode }\" edg:breadth=\"{= ?myBreadth }\" edg:dependencyType=\"{= edg:DEPTYPE_INFO-DERIVED-FROM }\" edg:offset=\"{= ?myOffset }\" edg:reach=\"{= ?myReach }\" edg:viewFrameStructure=\"{= ?viewFrameStructure }\"/>
                    <edg:GenerateJSONforLineageGram arg:diagramType=\"{= edg:DIAGTYPE_UPSTREAM-LINEAGEGRAM }\" edg:activeResource=\"{= ?myFocusNode }\" edg:resource=\"{= ?depictedResourceForFocusNode }\"/>
                </ui:setContext>
            </ui:setContext>
            <edg:DumpTempGraphForLineageGram/>
        </ui:try>
        <ui:catch>
            <swon:Object>
                <swon:Value arg:name=\"exception\" arg:value=\"{= ?exception }\"/>
            </swon:Object>
        </ui:catch>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Builds a diagram of upstrean dependencies for a single information asset. This is a fallback." ;
  rdfs:label "Build lineage diagram for information asset" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildOutputNodesAndLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  ui:prototype """
<ui:group let:myLimit=\"{= COALESCE(?limit, 100) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\">
    <ui:call arg:resource=\"{= ?resource }\" ui:limit=\"{= ?myLimit }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= edg:GetOutputsOfSoftwareExecutable }\" ui:varName=\"outputs\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?outputs) }\">
            <ui:forEach ui:resultSet=\"{= ?outputs }\">
                <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= ?dependencyType }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?output }\" edg:targetViewFrame=\"{= edg:VF_OutputsFrame }\" edg:viewFrame=\"{= edg:VF_SoftwareFrame }\"/>
            </ui:forEach>
        </ui:if>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Build output nodes and links" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildSourceNodesForPropertyAndResource
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:reverseNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group let:linkType=\"{= COALESCE(edg:getPropertyValueOnGivenProperty(?property, edg:dependencyType), edg:DEPTYPE_UNKNOWN) }\" let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:mySourceViewframe=\"{= COALESCE(?sourceViewFrame, edg:VF_SoftwareFrame) }\" let:myTargetViewframe=\"{= COALESCE(?targetViewFrame, edg:VF_EnterpriseFrame) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:BuildSourceNodesForPropertyAndResource\"/-->
    <ui:if ui:condition=\"{= !bound(?resource) }\">
        <ui:throw ui:message=\"Resource is unbound in {= CONCAT(&quot;edg:BuildSourceNodesForPropertyAndResource&quot;, &quot; trace: &quot;, ?explanation) }\"/>
    </ui:if>
    <ui:call arg:property=\"{= ?property }\" arg:resource=\"{= ?resource }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= edg:GetSourcesForPropertyAndResource }\" ui:varName=\"sources\">
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:BuildSourceNodesForPropertyAndResource\" ui:resultSet=\"{= ?sources }\"/-->
        <ui:forEach ui:resultSet=\"{= ?sources }\">
            <ui:if ui:condition=\"{= ?reverseNodes }\">
                <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= ?linkType }\" edg:resource=\"{= ?source }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= ?myTargetViewframe }\" edg:viewFrame=\"{= ?mySourceViewframe }\"/>
            </ui:if>
            <ui:else>
                <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= ?linkType }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?source }\" edg:targetViewFrame=\"{= ?myTargetViewframe }\" edg:viewFrame=\"{= ?targetViewFrame }\"/>
            </ui:else>
        </ui:forEach>
    </ui:call>
    <ui:call arg:property=\"{= ?property }\" arg:resource=\"{= ?resource }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset + ?myBreadth }\" ui:template=\"{= edg:GetSourcesForPropertyAndResource }\" ui:varName=\"maybeMoreFanoutResults\">
        <edg:DetermineNeedForMoreFanOutPlaceholderNode arg:resource=\"{= ?resource }\" arg:resultSet=\"{= ?maybeMoreFanoutResults }\" edg:breadth=\"{= ?myBreadth }\" edg:explanation=\"BuildSourceNodesForPropertyAndResource\" edg:offset=\"{= ?myOffset }\" edg:targetViewFrame=\"{= ?myTargetViewframe }\" edg:viewFrame=\"{= ?mySourceViewframe }\"/>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Creates nodes and links for the sources of a resource connected by given property." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build source nodes for property and resource" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BuildTargetNodesForGivenProperty
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:actionScript ;
      spl:valueType ui:NodeClass ;
      rdfs:comment "An optional SWP component that is called for each target." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:reverseNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group let:linkType=\"{= COALESCE(edg:getPropertyValueOnGivenProperty(?property, edg:dependencyType), edg:DEPTYPE_UNKNOWN) }\" let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:BuildTargetNodesForGivenProperty\"/-->
    <ui:call arg:property=\"{= ?property }\" arg:resource=\"{= ?resource }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= edg:GetTargetsForResourceAndProperty }\" ui:varName=\"targets\">
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:BuildTargetNodesForGivenProperty\" ui:resultSet=\"{= ?targets }\"/-->
        <ui:forEach ui:resultSet=\"{= ?targets }\">
            <ui:if ui:condition=\"{= ?reverseNodes }\">
                <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= ?linkType }\" edg:resource=\"{= ?target }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= ?sourceViewFrame }\" edg:viewFrame=\"{= ?targetViewFrame }\"/>
            </ui:if>
            <ui:else>
                <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= ?linkType }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?target }\" edg:targetViewFrame=\"{= ?targetViewFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
            </ui:else>
            <ui:if ui:condition=\"{= bound(?actionScript) }\">
                <ui:dynamicView edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:source=\"{= ?resource }\" edg:sourceViewFrame=\"{= ?sourceViewFrame }\" edg:target=\"{= ?target }\" edg:targetViewFrame=\"{= ?targetViewFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\" ui:args=\"*\" ui:class=\"{= ?actionScript }\"/>
            </ui:if>
        </ui:forEach>
        <ui:call arg:property=\"{= ?property }\" arg:software=\"{= ?resource }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset + ?myBreadth }\" ui:template=\"{= edg:GetTargetsForResourceAndProperty }\" ui:varName=\"maybeMoreFanoutResults\">
            <edg:DetermineNeedForMoreFanOutPlaceholderNode arg:resource=\"{= ?resource }\" arg:resultSet=\"{= ?maybeMoreFanoutResults }\" edg:breadth=\"{= ?myBreadth }\" edg:explanation=\"BuildTargetNodesForGivenProperty\" edg:offset=\"{= ?myOffset }\" edg:targetViewFrame=\"{= ?sourceViewFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
        </ui:call>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Creates nodes and links for the targets of a resource and property." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Build target nodes for given property" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:BusinessActivity
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-process\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= false }\" arg:label=\"uses process\" arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= false }\" arg:label=\"activity of\" arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:BusinessApplication
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-activity\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA6: edg:BusinessApplication {= ?this } to {= ?rightNode }\"/-->
    <edg:GenerateJSONforExecutableSupportsActivity arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:BusinessApplicationSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Business application select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:BusinessArea
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:CommaSeparatedStringAggregatorStepFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:gt ;
                    sp:arg1 [
                        a fn:string-length ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 [
                    a fn:concat ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "," ;
                    sp:arg3 spin:_arg2 ;
                  ] ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Comma separated string step function" ;
  rdfs:subClassOf spr:AggregatorStepFunctions ;
.
edg:CommaSeparatedStringList
  a spr:Aggregator ;
  spr:stepFunction edg:CommaSeparatedStringAggregatorStepFunction ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Comma separated string list" ;
.
edg:ComplianceAspect
  ui:instanceView """
<ui:group ui:id=\"derivation-map-aspect\" ui:priority=\"{= 1 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:ComplianceAspect for {= ?this }\"/-->
    <!--TBD: build a generic way of dealing with showing aspect properties in a derivation map-->
    <ui:group letrs:policyCompliances=\"{#
            SELECT ?value
            WHERE {
                ?aProperty (rdfs:subPropertyOf)* edg:compliesWithPolicyRequirement .
                ?this ?aProperty ?value .
            } }\">
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:ComplianceAspect for {= ?this }\"
  ui:resultSet=\"{= ?policyCompliances }\"/-->
        <ui:if ui:condition=\"{= !spr:isEmpty(?policyCompliances) }\">
            <ui:group let:policyCompliancesId=\"{= CONCAT(&quot;Policies_&quot;, ui:uniqueId()) }\">
                <!--edg:BuildJSONforLineageGramNode arg:collapsed=\"true\"
 arg:icon=\"fa fa-map\"
 arg:label=\"Policy Compliances\"
 arg:node=\"{= ?policyCompliancesId }\"
 arg:parent=\"rdf:nil\"/-->
                <ui:forEach ui:resultSet=\"{= ?policyCompliances }\">
                    <edg:BuildJSONforLineageGramNode arg:icon=\"fa fa-map\" arg:node=\"{= ?value }\"/>
                    <edg:MakeDerivationMapLink arg:id=\"LINK_{= ui:uniqueId() }\" arg:label=\"{= ui:label(edg:compliesWithPolicyRequirement) }\" edg:source=\"{= str(?this) }\" edg:target=\"{= str(?value) }\"/>
                </ui:forEach>
            </ui:group>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
.
edg:DataAsset
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-application\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:DataAsset from {= ?this } to {= ?rightNode }\"/-->
    <edg:GenericNodeToNodeMapDetails arg:explanation=\"Generated by edg:DataAsset from {= ?this } to {= ?rightNode }\" arg:leftNode=\"{= ?leftNode }\" arg:link=\"input\" arg:reverseNodes=\"{= true }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"downstream-impact\" ui:priority=\"{= 10 }\">
    <ui:group let:myViewFrame=\"{= edg:VF_ResourcesFrame }\">
        <!--ui:dumpScope ui:message=\"AAA: edg:DataAsset - downstream-impact of {= ?source } on {= ?activeResource }\"/-->
        <edg:MakeSingleViewFrameResourceOccurrence edg:activeResource=\"{= ?this }\" edg:resource=\"{= ?this }\" edg:viewFrame=\"{= ?myViewFrame }\"/>
        <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_DATA-INPUT }\" edg:resource=\"{= ?source }\" edg:targetNode=\"{= ?this }\" edg:targetViewFrame=\"{= ?myViewFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
        <edg:DetermineDownstreamDependenciesForResource arg:dependencyTemplate=\"{= edg:GetDataDependents }\" arg:focusNode=\"{= ?this }\" edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach }\" edg:sourceViewFrame=\"{= ?myViewFrame }\"/>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
.
edg:DataElement
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 1 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:DataElement - derivation-map-composite-node\"/-->
    <edg:BuildJSONforDataElementCompositeNode arg:label=\"{= COALESCE(?label, edg:MakeNodeLabel(?this)) }\" arg:node=\"{= ?this }\" arg:parent=\"{= ?parent }\"/>
    <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-for-data-element\" ui:priority=\"{= -1 }\">
    <!--ui:dumpScope ui:message=\"AAA3: edg:DataElement - derivation-map-data-service-other-node-for-data-element\"/-->
    <swon:Object>
        <swon:Values arg:name=\"nodes\">
            <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?leftNode }\"/>
            <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?rightNode }\"/>
        </swon:Values>
        <swon:Values arg:name=\"edges\">
            <edg:BuildJSONforDerviationMapLink arg:leftNode=\"{= ?this }\" arg:property=\"{= edg:getDependencyTypeLabel(?linkType) }\" arg:rightNode=\"{= ?rightNode }\"/>
            <edg:GenerateJSONforDerivationMapLinks arg:leftNode=\"{= ?this }\" arg:rightNode=\"{= ?rightNode }\"/>
        </swon:Values>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"data-element\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-output\" ui:priority=\"{= 1 }\">
    <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= edg:DEPTYPE_DATA-OUTPUT }\" edg:resource=\"{= ?focusNode }\" edg:targetNode=\"{= ?this }\" edg:targetViewFrame=\"{= edg:VF_DataElementsFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DataSet
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"dataset\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DataStructure
  ui:instanceView """
<ui:group ui:id=\"lineagegram-output\" ui:priority=\"{= 10 }\">
    <edg:MakeViewFrameResourceNodeAndLinks edg:dependencyType=\"{= edg:DEPTYPE_DATA-OUTPUT }\" edg:resource=\"{= ?focusNode }\" edg:targetNode=\"{= ?this }\" edg:targetViewFrame=\"{= edg:VF_DataElementsFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Database
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA1 - edg:Database - {= ?this }\"/-->
    <edg:BuildJSONforDatabaseNode arg:node=\"{= ?this }\" arg:software=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"database\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DatabaseColumn
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA: edg:DatabaseColumn - compodite node for {= ?this }\"/-->
    <edg:BuildJSONforDatabaseColumnCompositeNode arg:node=\"{= ?this }\" arg:parent=\"{= ?parent }\"/>
    <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"column\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DatabaseTable
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node-maker\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:DatabaseTable - {= ?this }\"/-->
    <edg:MakeDerivationMapNodesForDatabaseTableCompositeNode arg:node=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDatabaseTableCompositeNode arg:node=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"table\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DatabaseView
  ui:instanceView """
<ui:group let:inputsNode=\"Inputs_{= ui:encodeNode(?this) }\" let:outputsNode=\"Outputs_{= ui:encodeNode(?this) } }\" ui:id=\"derivation-map-container-contents\" ui:priority=\"{= 10 }\">
    <ui:call arg:property=\"{= edg:viewOutputColumn }\" arg:resource=\"{= ?this }\" ui:template=\"{= edg:getPropertyValuesForResource }\" ui:varName=\"outputs\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?outputs) }\">
            <edg:BuildJSONforLineageGramNode arg:label=\"View Outputs\" arg:node=\"{= ?outputsNode }\"/>
            <ui:forEach ui:resultSet=\"{= ?outputs }\">
                <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?value) }\" arg:node=\"{= ?value }\" arg:occurrence=\"~~output\" arg:parent=\"{= ?outputsNode }\"/>
            </ui:forEach>
        </ui:if>
    </ui:call>
    <ui:call arg:property=\"{= edg:viewInputColumn }\" arg:resource=\"{= ?this }\" ui:template=\"{= edg:getPropertyValuesForResource }\" ui:varName=\"inputs\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?inputs) }\">
            <edg:BuildJSONforLineageGramNode arg:label=\"View Inputs\" arg:node=\"{= ?inputsNode }\"/>
            <ui:forEach ui:resultSet=\"{= ?inputs }\">
                <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?value) }\" arg:node=\"{= ?value }\" arg:occurrence=\"~~input\" arg:parent=\"{= ?inputsNode }\"/>
            </ui:forEach>
        </ui:if>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group let:inputsNode=\"Inputs_{= ui:encodeNode(?this) }\" let:outputsNode=\"Outputs_{= ui:encodeNode(?this) } }\" ui:id=\"derivation-map-container-links\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerviationMapLink arg:label=\"output columns\" arg:leftNode=\"{= ?this }\" arg:property=\"{= edg:viewOutputColumn }\" arg:rightNode=\"{= ?outputsNode }\"/>
    <edg:BuildJSONforDerviationMapLink arg:label=\"input columns\" arg:leftNode=\"{= ?inputsNode }\" arg:property=\"{= edg:viewInputColumn }\" arg:rightNode=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <swon:Object>
        <edg:BuildJSONforDerivationMapDatabaseView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
        <swon:Value arg:name=\"edges\">
            <swon:Array>
                <edg:BuildJSONforDerviationMapLink arg:leftNode=\"{= ?leftNode }\" arg:property=\"{= edg:input }\" arg:rightNode=\"{= ?rightNode }\"/>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"view\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:DefaultDerivationMapDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue edg:UNKNOWN-TYPE ;
      spl:optional true ;
      spl:predicate arg:sourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue edg:UNKNOWN-TYPE ;
      spl:optional true ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:diagramLinkQueryTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:linkDetailsTemplate=\"{= COALESCE(?diagramLinkQueryTemplate, edg:getDerivationMapInformation) }\">
    <ui:call arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\" ui:template=\"{= ?linkDetailsTemplate }\" ui:varName=\"linkDetails\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:DefaultDerivationMapDataService\"/-->
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:DefaultDerivationMapDataService\" ui:resultSet=\"{= ?linkDetails }\"/-->
        <ui:group>
            <swon:Object>
                <edg:BuildJSONforDerivationMapNodes arg:leftNode=\"{= ?leftNode }\" arg:resultSet=\"{= ?linkDetails }\" arg:rightNode=\"{= ?rightNode }\"/>
                <edg:BuildJSONforDerivationMapLinks arg:leftNode=\"{= ?leftNode }\" arg:resultSet=\"{= ?linkDetails }\" arg:rightNode=\"{= ?rightNode }\"/>
            </swon:Object>
        </ui:group>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "default derivation map service" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:DependencySelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Dependency select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:DerivationMapDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:linkType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:graphContext=\"{= ui:currentQueryGraph() }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:DerivationMapDataService - {= ?graphContext }\"/-->
    <ui:try>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(teamwork:unionGraphForCurrentUser(), ?graphContext) }\">
            <!--ui:dumpScope ui:message=\"AAA2: edg:DerivationMapDataService - {= ui:currentQueryGraph() }\"/-->
            <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
            <ui:resourceView arg:leftNode=\"{= IRI(?leftNode) }\" arg:rightNode=\"{= IRI(?rightNode) }\" edg:linkType=\"{= ?linkType }\" ui:matchIds=\"derivation-map-data-service\" ui:resource=\"{= IRI(?rightNode) }\"/>
            <!--/ui:setContext-->
        </ui:setContext>
        <!--ui:dumpGraph ui:filePath=\"/www.sandbox.com/dmg.ttl\" ui:graph=\"ui:tempGraphDM\"/-->
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"exception\" arg:value=\"{= ?exception }\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "The service returns a JSON structure for nodes and links that make up a derivation map. The link between two resources in a lineage gram is a dependency link formed by querying the possible relationships that connect the up-stream resource (leftNode) with the down-stream resource (rightNode). A delegation pattern is used to determine the details of the dependency. The type of the right node is the first basis for determining the dependency. Using delegation the type of the first node then resolves the dependency by delegating to the left node. The fallback is to the instance view on  'rdfs:Resource' with  the id 'derivation-map-data-service'." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:DerivationMapSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Derivation Map select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:DerivationMapServices
  a ui:NodeClass ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Derivation map services" ;
  rdfs:subClassOf edg:JSONServices ;
.
edg:DerivationMapServicesForCompositeNodes
  a ui:NodeClass ;
  rdfs:label "Derivation map services for composite nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:DerivationMapTempGraphServices
  a ui:Service ;
  rdfs:label "Derivation Map temp graph services" ;
  rdfs:subClassOf edg:Services ;
.
edg:DetermineDownstreamDependenciesForResource
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:depictedResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:myReach=\"{= COALESCE(?reach, 10) }\" let:mySourceViewFrame=\"{= COALESCE(?sourceViewFrame, edg:VF_ResourcesFrame) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:DetermineDownstreamDependenciesForResource for {= ?focusNode } - reach is {= str(?myReach) }\"/-->
    <ui:if ui:condition=\"{= ?myReach = 1 }\">
        <edg:MakeViewFrameDownstreamPlaceholderNodeAndLinks edg:breadth=\"{= ?myBreadth }\" edg:continuation=\"{= edg:DetermineDownstreamDependenciesForResource }\" edg:dependencyType=\"{= edg:DEPTYPE_MORE-DOWNSTREAM }\" edg:explanation=\"TBD\" edg:hasMoreDownstream=\"{= true }\" edg:offset=\"{= ?myOffset }\" edg:outOfReach=\"{= true }\" edg:placeholderType=\"{= edg:PlaceholderForMoreDownstream }\" edg:resource=\"{= ?depictedResource }\" edg:targetViewFrame=\"{= ?mySourceViewFrame }\" edg:viewFrame=\"{= ?myViewFrame }\" provo:wasGeneratedBy=\"{= edg:DetermineDownstreamDependenciesForResource }\"/>
        <edg:SetViewFrameResourceNodePropertyValue arg:property=\"{= edg:hasMoreDownstream }\" arg:value=\"{= true }\" edg:resource=\"{= ?depictedResource }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
    </ui:if>
    <ui:else>
        <ui:call arg:resource=\"{= ?focusNode }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= ?dependencyTemplate }\" ui:varName=\"dependents\">
            <!--ui:dumpResultSet ui:message=\"AAA2: edg:DetermineDownstreamDependenciesForResource for {= ?focusNode }\"
  ui:resultSet=\"{= ?dependents }\"/-->
            <ui:forEach ui:resultSet=\"{= ?dependents }\">
                <ui:resourceView edg:activeResource=\"{= ?dependent }\" edg:breadth=\"{= ?myBreadth }\" edg:offset=\"{= ?myOffset }\" edg:reach=\"{= ?myReach - 1 }\" edg:source=\"{= ?focusNode }\" edg:sourceViewFrame=\"{= ?mySourceViewFrame }\" ui:matchIds=\"downstream-impact\" ui:resource=\"{= ?dependent }\"/>
            </ui:forEach>
        </ui:call>
    </ui:else>
    <edg:DetermineNeedForDownstreamPlaceholderNode arg:dependencyTemplate=\"{= ?dependencyTemplate }\" arg:resource=\"{= ?focusNode }\" edg:breadth=\"{= ?myBreadth }\" edg:dependencyType=\"{= edg:DEPTYPE_MORE-FANOUT }\" edg:offset=\"{= ?myOffset }\" edg:placeholderType=\"{= edg:PlaceholderForMoreFanout }\" edg:viewFrame=\"{= ?mySourceViewFrame }\" provo:wasGeneratedBy=\"{= edg:DetermineDownstreamDependenciesForResource }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Builds an impact lineagegram for a single resource." ;
  rdfs:label "Determine downstream dependencies for resource" ;
  rdfs:seeAlso edg:GetDependenciesOfDataElement ;
  rdfs:seeAlso edg:GetDependenciesOfDatabaseTable ;
  rdfs:subClassOf edg:DownstreamTraceabilityElements ;
.
edg:DetermineImpactOfAsset
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:dependencyType ;
      spl:valueType edg:DependencyType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myDependencyTemplate=\"{= COALESCE(?dependencyTemplate, edg:GetAssetProvenance) }\" let:viewFrameForFocusNode=\"{= edg:getViewFrameForResource(?focusNode, ?viewFrameStructure) }\">
    <!--ui:dumpScope ui:message=\"AAA1: DetermineImpactOfAsset - {= ?focusNode }\"/-->
    <ui:if ui:condition=\"{= ?reach &gt; 1 }\">
        <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?focusNode }\" edg:viewFrame=\"{= ?viewFrameForFocusNode }\"/>
        <ui:call arg:resource=\"{= ?focusNode }\" ui:limit=\"{= ?breadth }\" ui:offset=\"{= ?offset }\" ui:template=\"{= ?myDependencyTemplate }\" ui:varName=\"dependencies\">
            <!--ui:dumpResultSet ui:message=\"AAA2: DetermineImpactOfAsset {= ?focusNode }\"
  ui:resultSet=\"{= ?dependencies }\"/-->
            <ui:forEach ui:resultSet=\"{= ?dependencies }\">
                <ui:group let:myDependencyType=\"{= COALESCE(spl:object(?property, edg:dependencyType), ?dependencyType, edg:DEPTYPE_INFO-DERIVED-FROM) }\">
                    <ui:resourceView edg:breadth=\"{= ?breadth }\" edg:dependencyType=\"{= ?myDependencyType }\" edg:explanation=\"{= ui:label(?property) }, count:{= str(?countOfMappings) }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach }\" edg:sourceNode=\"{= ?focusNode }\" ui:matchIds=\"asset-impact\" ui:resource=\"{= ?dependency }\"/>
                </ui:group>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Determines the downstream dependencies of an asset." ;
  rdfs:label "Determine impact of asset" ;
  rdfs:seeAlso edg:DetermineProvenanceForAsset ;
  rdfs:subClassOf edg:Elements ;
.
edg:DetermineNeedForDownstreamPlaceholderNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:targetViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType edg:DependencyType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:outOfBreadth ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:outOfReach ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:placeholderType ;
      spl:valueType edg:Placeholder ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate provo:wasGeneratedBy ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myOffset=\"{= ?offset + ?breadth }\" let:mySourceViewFrame=\"{= COALESCE(?viewFrame, edg:VF_SoftwareFrame) }\" let:myTargetViewFrame=\"{= COALESCE(?targetViewFrame, edg:VF_SoftwareFrame) }\">
    <ui:if ui:condition=\"{= !bound(?resource) }\">
        <ui:throw ui:message=\"Unbound resource in edg:DetermineNeedForDownstreamPlaceholderNode\"/>
    </ui:if>
    <ui:group let:moreDownstreamAlreadyKnown=\"{= edg:GetViewFrameResourceNodePropertyValue(edg:hasMoreDownstream, ?resource, ?mySourceViewFrame) }\">
        <!--ui:dumpScope ui:message=\"AAA1 edg:DetermineNeedForDownstreamPlaceholderNode - {= ?resource }\"/-->
        <ui:if ui:condition=\"{= (!bound(?moreDownstreamAlreadyKnown)) || (!?moreDownstreamAlreadyKnown) }\">
            <ui:call arg:resource=\"{= ?resource }\" ui:limit=\"{= 1 }\" ui:offset=\"{= ?myOffset }\" ui:template=\"{= ?dependencyTemplate }\" ui:varName=\"lookAheadCheck\">
                <!--ui:dumpResultSet ui:message=\"AAA2 edg:DetermineNeedForDownstreamPlaceholderNode - {= ?resource }\"
  ui:resultSet=\"{= ?lookAheadCheck }\"/-->
                <ui:if ui:condition=\"{= spr:rowCount(?lookAheadCheck) &gt; 0 }\">
                    <edg:MakeViewFrameDownstreamPlaceholderNodeAndLinks edg:breadth=\"{= ?breadth }\" edg:continuation=\"{= edg:DownstreamSoftwareContinuationService }\" edg:dependencyType=\"{= ?dependencyType }\" edg:hasMoreDownstream=\"{= true }\" edg:offset=\"{= ?offset + ?breadth }\" edg:outOfBreadth=\"{= true }\" edg:placeholderType=\"{= ?placeholderType }\" edg:resource=\"{= ?resource }\" edg:targetViewFrame=\"{= ?myTargetViewFrame }\" edg:viewFrame=\"{= ?mySourceViewFrame }\" edg:viewFrameTier=\"{= ?reach }\" provo:wasGeneratedBy=\"{= ?wasGeneratedBy }\"/>
                    <edg:SetViewFrameResourceNodePropertyValue arg:property=\"{= edg:hasMoreDownstream }\" arg:value=\"{= true }\" edg:resource=\"{= ?resource }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
                </ui:if>
            </ui:call>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Determine need for downstream placeholder " ;
  rdfs:seeAlso edg:DetermineNeedForMoreFanInPlaceholderNode ;
  rdfs:seeAlso edg:DetermineNeedForMoreFanOutPlaceholderNode ;
  rdfs:subClassOf edg:DownstreamTraceabilityElements ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:DetermineNeedForMoreFanInPlaceholderNode
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:targetViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:seeAlso edg:DetermineNeedForDownstreamPlaceholderNode ;
.
edg:DetermineProvenanceForAsset
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:dependencyType ;
      spl:valueType edg:DependencyType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dependencyTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myDependencyTemplate=\"{= COALESCE(?dependencyTemplate, edg:GetAssetProvenance) }\" let:myViewFrame=\"{= COALESCE(?viewFrame, edg:VF_ResourcesFrame) }\">
    <!--ui:dumpScope ui:message=\"AAA1: DetermineProvenanceForAsset - {= ?focusNode }\"/-->
    <!-- when reach has the value 0 there is no need to determine any provenance -->
    <ui:if ui:condition=\"{= ?reach &gt; 1 }\">
        <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?focusNode }\" edg:viewFrame=\"{= ?myViewFrame }\"/>
        <ui:call arg:resource=\"{= ?focusNode }\" ui:limit=\"{= ?breadth }\" ui:offset=\"{= ?offset }\" ui:template=\"{= ?myDependencyTemplate }\" ui:varName=\"dependencies\">
            <!--ui:dumpResultSet ui:message=\"AAA2: DetermineProvenanceForAsset {= ?focusNode }\"
  ui:resultSet=\"{= ?dependencies }\"/-->
            <ui:forEach ui:resultSet=\"{= ?dependencies }\">
                <ui:group let:myDependencyType=\"{= COALESCE(spl:object(?property, edg:dependencyType), ?dependencyType, edg:DEPTYPE_DATA-DERIVED-FROM) }\">
                    <ui:resourceView edg:breadth=\"{= ?breadth }\" edg:dependencyType=\"{= ?myDependencyType }\" edg:explanation=\"{= ui:label(?property) }, mappings:{= str(?countOfMappings) }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach }\" edg:targetNode=\"{= ?focusNode }\" edg:targetViewFrame=\"{= ?myViewFrame }\" edg:viewFrameStructure=\"{= ?viewFrameStructure }\" ui:matchIds=\"asset-provenance\" ui:resource=\"{= ?dependency }\"/>
                </ui:group>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment """The script determines the provenance for an asset using the prov ontology. What constitutes provenance depends on the type of the asset. For this reason a dependency function is passed to the script in the argument 'edg:dependencyTemplate'. The function passed must return the resource that is a dependency as the variable named 'dependency'.

Optionally the type of the dependency can be returned as 'dependencyType'.

A default function , ' edg:GetAssetProvenance', is used of there is no argument passed. This default function only uses the provenance property 'prov:wasDerivedFrom', or sub-properties of.

Provenance of an asset such as a table can also be estanlished through mappings. The function 'edg:GetRelationalDatabaseProvenance' for example, passes back a count of mappings in the variable 'countOfMappings'.

The script delegates to the type of the dependency using 'ui:resourceView' with 'matchIds' set to 'asset-provenance'.""" ;
  rdfs:label "Determine provenance for asset" ;
  rdfs:seeAlso edg:DetermineImpactOfAsset ;
  rdfs:seeAlso edg:GetAssetProvenance ;
  rdfs:seeAlso edg:GetRelationalDatabaseProvenance ;
  rdfs:subClassOf edg:Elements ;
.
edg:DetermineTransitiveDownstreamSoftwareExecutableDependencies
  rdfs:subClassOf edg:DownstreamTraceabilityElements ;
.
edg:DiagramType
  ui:instanceView """
<ui:group ui:id=\"no-diagram-links\" ui:priority=\"{= 1 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:DiagramType - no-diagram-links\"/-->
    <ui:if ui:condition=\"{= (?this = edg:DIAGTYPE_UPSTREAM-DEPENDENCYGRAM) || (?this = edg:DIAGTYPE_UPSTREAM-LINEAGEGRAM) }\">
        <swon:Object let:linkId=\"LINK_UPSTREAM-HIDDEN-{= ui:uniqueId() }\" let:singleNode=\"{= CONCAT(ENCODE_FOR_URI(str(?resource)), &quot;~~&quot;, afn:localname(?focusFrame)) }\" let:unknownNode=\"{= CONCAT(&quot;edg:UNKNOWN-UPSTREAM&quot;, &quot;~~&quot;, afn:localname(edg:VF_ResourcesFrame)) }\">
            <swon:Value arg:name=\"id\" arg:value=\"{= ?linkId }\"/>
            <swon:Value arg:name=\"source\" arg:value=\"{= ?singleNode }\"/>
            <swon:Value arg:name=\"target\" arg:value=\"{= ?unknownNode }\"/>
            <swon:Value arg:name=\"linkType\" arg:value=\"unknown\"/>
        </swon:Object>
    </ui:if>
    <ui:elseif ui:condition=\"{= ?this = edg:DIAGTYPE_DOWNSTREAM-IMPACTGRAM }\">
        <swon:Object let:linkId=\"LINK_DOWNSTREAM-HIDDEN-{= ui:uniqueId() }\" let:singleNode=\"{= CONCAT(ENCODE_FOR_URI(str(?resource)), &quot;~~&quot;, afn:localname(?focusFrame)) }\" let:unknownNode=\"{= CONCAT(&quot;edg:UNKNOWN-DOWNSTREAM&quot;, &quot;~~&quot;, afn:localname(?focusFrame)) }\">
            <swon:Value arg:name=\"id\" arg:value=\"{= ?linkId }\"/>
            <swon:Value arg:name=\"source\" arg:value=\"{= ?singleNode }\"/>
            <swon:Value arg:name=\"target\" arg:value=\"{= ?unknownNode }\"/>
            <swon:Value arg:name=\"linkType\" arg:value=\"unknown\"/>
        </swon:Object>
    </ui:elseif>
    <ui:else>
        <swon:Object let:linkId=\"LINK_HIDDEN-{= ui:uniqueId() }\" let:singleNode=\"{= CONCAT(ENCODE_FOR_URI(str(?resource)), &quot;~~&quot;, afn:localname(?focusFrame)) }\" let:unknownNode=\"{= CONCAT(&quot;edg:UNKNOWN&quot;, &quot;~~&quot;, afn:localname(?focusFrame)) }\">
            <swon:Value arg:name=\"id\" arg:value=\"{= ?linkId }\"/>
            <swon:Value arg:name=\"target\" arg:value=\"{= ?singleNode }\"/>
            <swon:Value arg:name=\"source\" arg:value=\"{= ?unknownNode }\"/>
            <swon:Value arg:name=\"linkType\" arg:value=\"unknown\"/>
        </swon:Object>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"no-diagram-nodes\" ui:priority=\"{= 1 }\">
    <ui:group let:resourceNodeViewFrameLocalName=\"{= afn:localname(?focusFrame) }\">
        <ui:group let:unknownDownstreamNode=\"{= CONCAT(&quot;edg:UNKNOWN-DOWNSTREAM&quot;, &quot;~~&quot;, afn:localname(?focusFrame)) }\" let:unknownUpstreamNode=\"{= CONCAT(&quot;edg:UNKNOWN-UPSTREAM&quot;, &quot;~~&quot;, afn:localname(edg:VF_ResourcesFrame)) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:DiagramType - no-diagram-nodes\"/-->
            <ui:if ui:condition=\"{= (?this = edg:DIAGTYPE_UPSTREAM-DEPENDENCYGRAM) || (?this = edg:DIAGTYPE_UPSTREAM-LINEAGEGRAM) }\">
                <edg:GenerateLineageGramNode arg:resource=\"{= edg:UNKNOWN-UPSTREAM }\" arg:resourceType=\"{= edg:UNKNOWN-TYPE }\" edg:activeResource=\"{= edg:UNKNOWN-UPSTREAM }\" edg:breadth=\"{= ?breadth }\" edg:explanation=\"No upstream node occurrence\" edg:id=\"{= ?unknownUpstreamNode }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ui:encodeNode(edg:VF_ResourcesFrame) }\"/>
            </ui:if>
            <ui:elseif ui:condition=\"{= ?this = edg:DIAGTYPE_DOWNSTREAM-IMPACTGRAM }\">
                <edg:GenerateLineageGramNode arg:resource=\"{= edg:UNKNOWN-DOWNSTREAM }\" arg:resourceType=\"{= edg:UNKNOWN-TYPE }\" edg:activeResource=\"{= edg:UNKNOWN-DOWNSTREAM }\" edg:breadth=\"{= ?breadth }\" edg:explanation=\"Unknown node occurrence\" edg:id=\"{= ?unknownDownstreamNode }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ui:encodeNode(?resourceNodeViewFrame) }\"/>
            </ui:elseif>
            <ui:else>
                <edg:GenerateLineageGramNode arg:resource=\"{= edg:UNKNOWN }\" arg:resourceType=\"{= edg:UNKNOWN-TYPE }\" edg:activeResource=\"{= edg:UNKNOWN }\" edg:breadth=\"{= ?breadth }\" edg:explanation=\"No node occurrences\" edg:id=\"{= ?unknownUpstreamNode }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ui:encodeNode(edg:VF_ResourcesFrame) }\"/>
            </ui:else>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
.
edg:DownstreamSoftwareContinuationService
  a ui:Service ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Object>
        <swon:Value arg:name=\"continuation\" arg:value=\"TBD: Upstream software continuation\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Downstream software continuation service" ;
  rdfs:subClassOf edg:LineageGramContinuationServices ;
.
edg:DownstreamTraceabilityElements
  a ui:NodeClass ;
  rdfs:label "Downstream traceability elements" ;
  rdfs:subClassOf edg:Elements ;
.
edg:DownstreamTraceabilityGramPage_DEPRECATED
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <ui:if ui:condition=\"{= bound(?focusNodeURI) }\">
        <ui:resourceView arg:graph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"impact-diagram\" ui:resource=\"{= ?focusNodeURI }\"/>
    </ui:if>
    <ui:else>
        <script>swa.populateModalDialogAskingForBody('edg:ActionNotSupportedInThisReleaseAlert','Alert for {= ui:label(?focusNode) }',null)</script>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Downstream Traceablility Page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:DownstreamTraceabilityNotSupportedInThisReleaseAlert
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <div>
        <p class=\"text-info\">
            <em>Downstream traceability</em> for this asset type is not supported in this release</p>
    </div>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Downstream traceability not supported in this release alert" ;
  rdfs:subClassOf edg:DownstreamTraceabilityElements ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:DownstreamTraceabilityPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <!--ui:dumpScope ui:message=\"AAA: DownstreamTraceabilityPage\"/-->
    <ui:resourceView arg:graph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"impact-diagram\" ui:resource=\"{= ?focusNodeURI }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Downstream Traceability Page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:DumpTempGraphForDerivationMap
  a ui:Service ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:debug>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    GRAPH ui:tempGraphDM {
                        ui:tempGraphDM a owl:Ontology .
                        ui:tempGraphDM owl:imports &lt;http://edg.topbraid.solutions/1.0/collection/all&gt; .
                    } .
                }
                WHERE {
                } }\"/>
        <ui:dumpGraph ui:filePath=\"edg.topbraidlive.org/1.0/dynamic/debug/tempGraphDM.ttl\" ui:graph=\"{= ui:tempGraphDM }\"/>
    </ui:debug>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Dump temp graph for derivation map" ;
  rdfs:subClassOf edg:DerivationMapTempGraphServices ;
.
edg:DumpTempGraphForLineageGram
  a ui:Service ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:debug>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    GRAPH ui:tempGraphLG {
                        ui:tempGraphLG a owl:Ontology .
                        ui:tempGraphLG owl:imports &lt;http://edg.topbraid.solutions/1.0/collection/all&gt; .
                    } .
                }
                WHERE {
                } }\"/>
        <ui:dumpGraph ui:filePath=\"edg.topbraidlive.org/1.0/dynamic/debug/tempGraphLG.ttl\" ui:graph=\"{= ui:tempGraphLG }\"/>
    </ui:debug>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Dump temp graph for LineageGram" ;
  rdfs:subClassOf edg:DerivationMapTempGraphServices ;
.
edg:Elements
  a ui:ViewElement ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Elements" ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf ui:ViewElements ;
.
edg:EmitJSONforDerivationMap
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <swon:Object>
        <swon:Value arg:name=\"nodes\">
            <swon:Array>
                <edg:GenerateJSONforDerivationMapNodes/>
            </swon:Array>
        </swon:Value>
        <swon:Value arg:name=\"edges\">
            <swon:Array>
                <edg:GenerateJSONforDerivationMapLinks/>
            </swon:Array>
        </swon:Value>
    </swon:Object>
    <edg:DumpTempGraphForDerivationMap/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Emit JSONfor derivation map" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:EnterpriseWorkSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Enterprise work select templates" ;
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:EnumerationClass
  ui:instanceView """
<ui:group ui:id=\"asset-provenance\" ui:priority=\"{= 10 }\">
    <ui:group let:depictedResourceForFocusNode=\"{= ?this }\">
        <ui:group let:viewFrameForDependent=\"{= edg:getViewFrameForResource(?this, edg:VFS_LG-SingleViewport) }\" let:viewFrameForDepictedResource=\"{= edg:getViewFrameForResource(?depictedResourceForFocusNode, edg:VFS_LG-SingleViewport) }\">
            <!--ui:dumpScope ui:message=\"AAA: edg:EnumerationClass - dependency on {= ?this }\"/-->
            <edg:MakeViewFrameResourceNodeLink arg:property=\"{= ?property }\" edg:dependencyType=\"{= ?dependencyType }\" edg:explanation=\"provenance link\" edg:resource=\"{= ?depictedResourceForFocusNode }\" edg:targetNode=\"{= ?targetNode }\" edg:targetViewFrame=\"{= ?viewFrameForDepictedResource }\" edg:viewFrame=\"{= ?viewFrameForDependent }\"/>
            <edg:DetermineProvenanceForAsset arg:focusNode=\"{= ?this }\" edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach - 1 }\" edg:viewFrameStructure=\"{= edg:VFS_LG-SingleViewport }\"/>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?this) }\" arg:node=\"{= ?this }\"/>
    <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:EnumerationClass from {= ?this } to {= ?rightNode }\"/-->
    <edg:GenericNodeToNodeMapDetails arg:explanation=\"Generated by edg:EnumerationClass from {= ?this } to {= ?rightNode }\" arg:leftNode=\"{= ?leftNode }\" arg:link=\"was derived from\" arg:reverseNodes=\"{= true }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:EnumerationClass from {= ?this } to {= ?rightNode }\"/-->
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-data-provider\" ui:priority=\"{= 20 }\">
    <edg:BuildJSONforLineageGramDataProviderDataService arg:dataProvider=\"{= edg:BuildLineageGramForInformationAsset }\" arg:provider=\"{= edg:EnumerationClass }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-viewframes\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA3: edg:EnumerationClass\"/-->
    <edg:BuildJSONforLineageGramViewFramesDataService arg:provider=\"{= edg:EnumerationClass }\" edg:viewFrameStructure=\"{= edg:VFS_LG-SingleViewport }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:EnumerationClass\"/-->
    <edg:LineageGramTemplate arg:dataProvider=\"{= edg:BuildLineageGramForInformationAsset }\" arg:focusNode=\"{= ?this }\" arg:graph=\"{= ?graph }\" edg:viewFrameStructure=\"{= edg:VFS_LG-SingleViewport }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\">
        <ui:insert ui:into=\"header\">
            <edg:LineageGramHeader arg:title=\"Provenance for {= ui:label(?this) }\"/>
        </ui:insert>
    </edg:LineageGramTemplate>
</ui:group>
"""^^ui:Literal ;
.
edg:FallbackDerivationMapDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:linkType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:myLinkType=\"{= COALESCE(?linkType, &quot;impacts&quot;) }\">
    <!--ui:dumpScope ui:message=\"AAA: edg:FallbackDerivationMapDataService\"/-->
    <ui:call arg:resource1=\"{= ?leftNode }\" arg:resource2=\"{= ?rightNode }\" ui:template=\"{= edg:getRelationshipsForPropertyPair }\" ui:varName=\"relationships\">
        <!--ui:dumpResultSet ui:message=\"AAA: edg:FallbackDerivationMapDataService\" ui:resultSet=\"{= ?relationships }\"/-->
        <swon:Object>
            <swon:Values arg:name=\"nodes\">
                <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?leftNode }\"/>
                <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?rightNode }\"/>
                <ui:forEach ui:resultSet=\"{= ?relationships }\">
                    <ui:if ui:condition=\"{= bound(?compositionProperty) }\">
                        <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?childResource }\"/>
                    </ui:if>
                </ui:forEach>
            </swon:Values>
            <swon:Value arg:name=\"edges\">
                <swon:Array>
                    <ui:if ui:condition=\"{= spr:isEmpty(?relationships) }\">
                        <edg:BuildJSONforDerviationMapLink arg:explanation=\"no relationships found\" arg:label=\"{= ?myLinkType }\" arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
                    </ui:if>
                    <ui:else>
                        <ui:forEach ui:resultSet=\"{= ?relationships }\">
                            <ui:if ui:condition=\"{= ?case = &quot;composite&quot; }\">
                                <edg:BuildJSONforDerviationMapLink arg:explanation=\"{= ?case }\" arg:leftNode=\"{= ?leftNode }\" arg:property=\"{= ?property }\" arg:rightNode=\"{= ?childResource }\"/>
                                <edg:BuildJSONforDerviationMapLink arg:explanation=\"{= ?case }\" arg:leftNode=\"{= ?rightNode }\" arg:property=\"{= ?compositionProperty }\" arg:rightNode=\"{= ?childResource }\"/>
                            </ui:if>
                            <ui:elseif ui:condition=\"{= CONTAINS(?case, &quot;lineage-case&quot;) }\">
                                <edg:BuildJSONforDerviationMapLink arg:explanation=\"{= ?case }\" arg:leftNode=\"{= ?rightNode }\" arg:property=\"{= ?property }\" arg:rightNode=\"{= ?leftNode }\"/>
                            </ui:elseif>
                            <ui:else>
                                <edg:BuildJSONforDerviationMapLink arg:explanation=\"none inferred\" arg:leftNode=\"{= IF(?inverse, ?rightNode, ?leftNode) }\" arg:property=\"{= COALESCE(?property, edg:dependencyType) }\" arg:rightNode=\"{= IF(?inverse, ?leftNode, ?rightNode) }\"/>
                            </ui:else>
                        </ui:forEach>
                    </ui:else>
                    <edg:GenerateJSONforDerivationMapLinks arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
                </swon:Array>
            </swon:Value>
        </swon:Object>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Fallback derivation map data service" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:FilteredSoftwareExecutableDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "table" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "softwareProgram" ;
          ]
          [
            sp:varName "softwareFunctioon" ;
          ]
          [
            sp:varName "serviceEndpoint" ;
          ]
          [
            sp:varName "directMappingsCollection" ;
          ]
          [
            sp:varName "mapping" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "table" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "softwareProgram" ;
          ]
          [
            sp:varName "softwareFunction" ;
          ]
          [
            sp:varName "serviceEndpoint" ;
          ]
          [
            sp:varName "directMappingsCollection" ;
          ]
          [
            sp:varName "mapping" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "rowIndex" ;
                ] ;
              sp:predicate spr:rowIndices ;
              sp:subject [
                  sp:varName "resultSet" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spr:cell ;
                  sp:arg1 [
                      sp:varName "resultSet" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "rowIndex" ;
                    ] ;
                  sp:arg3 [
                      sp:varName "column" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "testValue" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "testValue" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "value" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "table" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "inputType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 2 ;
              ] ;
            sp:variable [
                sp:varName "input" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 3 ;
              ] ;
            sp:variable [
                sp:varName "softwareProgram" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 4 ;
              ] ;
            sp:variable [
                sp:varName "softwareFunction" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 5 ;
              ] ;
            sp:variable [
                sp:varName "serviceEndpoint" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 6 ;
              ] ;
            sp:variable [
                sp:varName "directMappingsCollection" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 7 ;
              ] ;
            sp:variable [
                sp:varName "mapping" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Database ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns software executable rows for given database for a derivation map using a filter constraint" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Filtered software executable dependencies" ;
  rdfs:seeAlso edg:GetFilteredSoftwareExecutablesPairDependencyDetails ;
  rdfs:seeAlso edg:GetFilteredUpstreamSoftwareExecutableDependencies ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:FinishUpstreamDependencies
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group/>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Finish upstream dependencies" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:Functions
  a spin:Function ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Functions" ;
  rdfs:subClassOf spin:Functions ;
.
edg:GenerateJSONforDerivationMapLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <edg:DumpTempGraphForDerivationMap/>
    <ui:call ui:template=\"{= edg:GetLinksFromDerivationMapGraph }\" ui:varName=\"links\">
        <!--ui:dumpResultSet ui:message=\"AAA1: edg:GenerateJSONforDerivationMapLinks\" ui:resultSet=\"{= ?links }\"/-->
        <ui:forEach ui:resultSet=\"{= ?links }\">
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?linkId }\"/>
                <ui:if ui:condition=\"{= bound(?label) &amp;&amp; (?label != &quot;&quot;) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"dependency\"/>
                </ui:else>
                <swon:Value arg:name=\"source\" arg:value=\"{= ?sourceId }\"/>
                <swon:Value arg:name=\"target\" arg:value=\"{= ?targetId }\"/>
            </swon:Object>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate JSON for derivation map links" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenerateJSONforDerivationMapNodes
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:call ui:template=\"{= edg:GetNodesFromDerivationMapGraph }\" ui:varName=\"nodes\">
        <!--ui:dumpResultSet ui:message=\"AAA1: edg:GenerateJSONforDerivationMapNodes\" ui:resultSet=\"{= ?nodes }\"/-->
        <ui:forEach ui:resultSet=\"{= ?nodes }\">
            <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= ?collapsed }\" arg:icon=\"{= ?icon }\" arg:label=\"{= ?label }\" arg:node=\"{= ?node }\" arg:occurrence=\"{= ?occurrence }\" arg:parent=\"{= ?parent }\" arg:resource=\"{= ?resource }\" arg:resourceType=\"{= ?resourceType }\"/>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate JSON for derivation map nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenerateJSONforLineageGram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The software executable in focus. The depicted resource maybe its highest parent as passed by 'resource'." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramType ;
      spl:valueType edg:DiagramType ;
    ] ;
  ui:prototype """
<ui:group let:myActiveResource=\"{= COALESCE(?activeResource, ?resource) }\" let:myFocusFrame=\"{= COALESCE(spl:object(?diagramType, edg:focusFrame), edg:VF_ResourcesFrame) }\">
    <ui:group let:myFocusNode=\"{= COALESCE(?focusNode, ?myActiveResource) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateJSONforLineageGram for {= ?myFocusNode }\"/-->
        <swon:Object>
            <swon:Value arg:name=\"focusNode\" arg:value=\"{= ENCODE_FOR_URI(str(?myFocusNode)) }\"/>
            <swon:Value arg:name=\"diagramType\" arg:value=\"{= ENCODE_FOR_URI(str(?diagramType)) }\"/>
            <edg:GenerateJSONforLineageGramNodes arg:diagramType=\"{= ?diagramType }\" arg:focusNode=\"{= ?myFocusNode }\" edg:activeResource=\"{= ?myActiveResource }\" edg:focusFrame=\"{= ?myFocusFrame }\"/>
            <edg:GenerateJSONforLineageGramLinks arg:diagramType=\"{= ?diagramType }\" edg:activeResource=\"{= ?myActiveResource }\" edg:focusFrame=\"{= ?myFocusFrame }\" edg:resource=\"{= ?myFocusNode }\"/>
        </swon:Object>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate JSON for lineageGram" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:GenerateJSONforLineageGramLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The software executable in focus. The depicted resource maybe its highest parent as passed by 'resource'." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:focusFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramType ;
      spl:valueType edg:DiagramType ;
    ] ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateJSONforLineageGramLinks\"/-->
    <swon:Values arg:name=\"links\">
        <ui:call ui:template=\"{= edg:GetLinksFromLineageGramGraph }\" ui:varName=\"links\">
            <!--ui:dumpResultSet ui:message=\"AAA1: edg:GenerateJSONforLineageGramLinks\" ui:resultSet=\"{= ?links }\"/-->
            <ui:if ui:condition=\"{= spr:isEmpty(?links) }\">
                <!--ui:dumpScope ui:message=\"AAA2: edg:GenerateJSONforLineageGramLinks\"/-->
                <ui:resourceView arg:diagramType=\"{= ?diagramType }\" edg:breadth=\"{= ?breadth }\" edg:focusFrame=\"{= ?focusFrame }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:resource=\"{= ?resource }\" ui:matchIds=\"no-diagram-links\" ui:resource=\"{= ?diagramType }\"/>
            </ui:if>
            <ui:else>
                <ui:forEach ui:resultSet=\"{= ?links }\">
                    <swon:Object let:linkId=\"LINK_{= ui:uniqueId() }\">
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?linkId }\"/>
                        <swon:Value arg:name=\"source\" arg:value=\"{= ?sourceId }\"/>
                        <swon:Value arg:name=\"target\" arg:value=\"{= ?targetId }\"/>
                        <ui:if ui:condition=\"{= bound(?dependencyType) }\">
                            <swon:Value arg:name=\"linkType\" arg:value=\"{= spl:object(?dependencyType, edg:linkType) }\"/>
                        </ui:if>
                        <ui:if ui:condition=\"{= bound(?flow) }\">
                            <swon:Value arg:name=\"flow\" arg:value=\"{= ?flow }\"/>
                        </ui:if>
                        <ui:if ui:condition=\"{= bound(?explanation) }\">
                            <swon:Value arg:name=\"explanation\" arg:value=\"{= ?explanation }\"/>
                        </ui:if>
                    </swon:Object>
                </ui:forEach>
            </ui:else>
        </ui:call>
    </swon:Values>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate JSON for lineageGram links" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:GenerateJSONforLineageGramNodes
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The software executable in focus. The depicted resource maybe its highest parent as passed by 'resource'." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:focusFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramType ;
      spl:valueType edg:DiagramType ;
    ] ;
  ui:prototype """
<ui:group let:myFocusNode=\"{= COALESCE(?focusNode, ?activeResource) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateJSONforLineageGramNodes\"/-->
    <swon:Values arg:name=\"nodes\">
        <ui:call arg:resource=\"{= ?myFocusNode }\" ui:template=\"{= edg:GetNodesFromLineageGramGraph }\" ui:varName=\"resourceNodeOccurrences\">
            <!--ui:dumpResultSet ui:message=\"AAA1 edg:GenerateJSONforLineageGramNodes {= ?myFocusNode }\"
                          ui:resultSet=\"{= ?resourceNodeOccurrences }\"/-->
            <ui:if ui:condition=\"{= spr:isEmpty(?resourceNodeOccurrences) }\">
                <edg:GenerateLineageGramNode arg:resource=\"{= ?myFocusNode }\" arg:resourceType=\"{= edg:getEDGresourceType(?myFocusNode) }\" edg:activeResource=\"{= ?activeResource }\" edg:breadth=\"{= ?breadth }\" edg:explanation=\"No focus node occurrence(s)\" edg:id=\"{= ENCODE_FOR_URI(str(?myFocusNode)) }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ?focusFrame }\"/>
            </ui:if>
            <ui:else>
                <ui:forEach ui:resultSet=\"{= ?resourceNodeOccurrences }\">
                    <edg:GenerateLineageGramNode arg:resource=\"{= ?resource }\" arg:resourceType=\"{= ?resourceType }\" edg:activeResource=\"{= ?activeResource }\" edg:breadth=\"{= ?breadth }\" edg:continuation=\"{= ?continuation }\" edg:explanation=\"Focus node occurrence\" edg:id=\"{= ?id }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ?viewFrame }\"/>
                </ui:forEach>
                <ui:call ui:template=\"{= edg:GetNodesFromLineageGramGraph }\" ui:varName=\"nodeOccurrences\">
                    <!--ui:dumpResultSet ui:message=\"AAA2: GenerateJSONforLineageGramNodes - {= ?resource }\"
                                  ui:resultSet=\"{= ?nodeOccurrences }\"/-->
                    <ui:if ui:condition=\"{= !spr:isEmpty(?nodeOccurrences) }\">
                        <ui:if ui:condition=\"{= spr:rowCount(?nodeOccurrences) = 1 }\">
                            <ui:resourceView arg:diagramType=\"{= ?diagramType }\" edg:breadth=\"{= ?breadth }\" edg:focusFrame=\"{= ?focusFrame }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" ui:matchIds=\"no-diagram-nodes\" ui:resource=\"{= ?diagramType }\"/>
                        </ui:if>
                        <ui:else>
                            <ui:forEach ui:resultSet=\"{= ?nodeOccurrences }\">
                                <ui:if ui:condition=\"{= ?resource != ?myFocusNode }\">
                                    <edg:GenerateLineageGramNode arg:resource=\"{= ?resource }\" arg:resourceType=\"{= ?resourceType }\" edg:activeResource=\"{= ?activeResource }\" edg:breadth=\"{= ?breadth }\" edg:continuation=\"{= ?continuation }\" edg:explanation=\"{= COALESCE(?explanation, CONCAT(&quot;Linked to &quot;, ui:encodeNode(?depictedResource))) }\" edg:id=\"{= ?id }\" edg:offset=\"{= ?offset }\" edg:outOfBreadth=\"{= ?outOfBreadth }\" edg:outOfReach=\"{= ?outOfReach }\" edg:viewFrame=\"{= ?viewFrame }\"/>
                                </ui:if>
                            </ui:forEach>
                        </ui:else>
                    </ui:if>
                </ui:call>
            </ui:else>
        </ui:call>
    </swon:Values>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate JSON for lineageGram nodes" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:GenerateJSONforSoftwareFunctionNodes
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:function ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:functionalCoupling ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-object-group\" arg:label=\"Functional Dependencies\" arg:node=\"{= ?functionalCoupling }\"/>
    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"{= edg:MakeNodeLabel(?function) }\" arg:node=\"{= ?function }\" arg:parent=\"{= ?functionalCoupling }\"/>
    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"Outputs\" arg:node=\"{= str(?function) }_outputs\" arg:parent=\"{= ?function }\"/>
    <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:label=\"Inputs\" arg:node=\"{= str(?function) }_inputs\" arg:parent=\"{= ?function }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?input
            WHERE {
                ?function edg:input ?input .
            }
            ORDER BY (ui:label(?input)) }\">
        <edg:BuildJSONforLineageGramNode arg:label=\"{= edg:MakeNodeLabel(?input) }\" arg:node=\"{= ?input }\" arg:occurrence=\"{= CONCAT(&quot;~~&quot;, smf:camelCase(str(?function))) }\" arg:parent=\"{= str(?function) }_inputs\"/>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generate JSON for software function nodes" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenerateJSONforTableToTableDerivationMap
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:linkType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateJSONforTableToTableDependencyDetails\"/-->
    <ui:resourceView ui:matchIds=\"derivation-map-composite-node-maker\" ui:resource=\"{= ?leftNode }\"/>
    <ui:resourceView ui:matchIds=\"derivation-map-composite-node-maker\" ui:resource=\"{= ?rightNode }\"/>
    <ui:group let:directlyMappedColumnsContainer=\"DIRECTMAPPINGS_{= ui:uniqueId() }\" let:functionallyMappedColumnsContainer=\"FUNCTIONALMAPPINGS_{= ui:uniqueId() }\" let:mappedSourceColumnsContainer=\"MAPPEDSOURCECOLUMNS_{= ui:uniqueId() }\" let:numberOfSourceColumns=\"{= edg:countOfColumnsInTable(?leftNode) }\" let:numberOfTargetColumns=\"{= edg:countOfColumnsInTable(?leftNode) }\" let:unMappedSourceColumnsContainer=\"UNMAPPEDSOURCECOLUMNS_{= ui:uniqueId() }\" let:unmappedColumnsContainer=\"UNMAPPED_{= ui:uniqueId() }\">
        <edg:GenerateJSONforTableToTableFunctionalMappingsDerivationMap arg:leftNode=\"{= ?leftNode }\" arg:mappedColumnsContainer=\"{= ?functionallyMappedColumnsContainer }\" arg:rightNode=\"{= ?rightNode }\" arg:sourceColumnsContainer=\"{= ?mappedSourceColumnsContainer }\"/>
        <ui:call arg:source=\"{= ?leftNode }\" arg:target=\"{= ?rightNode }\" ui:template=\"{= edg:GetTableToTableDirectMappingDetails }\" ui:varName=\"tableDirectMappings\">
            <!--ui:dumpResultSet ui:message=\"AAA1: edg:GenerateJSONforTableToTableDependencyDetails {= ?leftNode } to {= ?rightNode }\"
  ui:resultSet=\"{= ?tableDirectMappings }\"/-->
            <ui:forEach ui:resultSet=\"{= ?tableDirectMappings }\">
                <ui:group let:sourceLink=\"SOURCE-{= ui:uniqueId() }\" let:targetLink=\"TARGET-{= ui:uniqueId() }\">
                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?targetColumn), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?targetColumn)) }\" arg:node=\"{= ?targetColumn }\" arg:parent=\"{= ?directlyMappedColumnsContainer }\"/>
                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?sourceColumn), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?sourceColumn)) }\" arg:node=\"{= ?sourceColumn }\" arg:parent=\"{= ?mappedSourceColumnsContainer }\"/>
                    <edg:MakeDerivationMapLink arg:id=\"{= ?sourceLink }\" arg:label=\"=\" edg:source=\"{= str(?sourceColumn) }\" edg:target=\"{= str(?targetColumn) }\"/>
                </ui:group>
            </ui:forEach>
        </ui:call>
        <ui:call arg:table=\"{= ?leftNode }\" ui:template=\"{= edg:GetColumnsOfTable }\" ui:varName=\"sourceColumns\">
            <ui:forEach ui:resultSet=\"{= ?sourceColumns }\">
                <ui:if ui:condition=\"{= !edg:isKnownNodeInDerivationMap(?column) }\">
                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?column), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?column)) }\" arg:node=\"{= ?column }\" arg:parent=\"{= ?unMappedSourceColumnsContainer }\"/>
                </ui:if>
            </ui:forEach>
            <ui:group let:count=\"{= edg:numberOfChildrenOfGivenNodeInDerivationMap(?unMappedSourceColumnsContainer) }\">
                <edg:MakeDerivationMapNode arg:collapsed=\"{= true }\" arg:label=\"Other Columns [{= str(?count) }]\" arg:node=\"{= ?unMappedSourceColumnsContainer }\" arg:parent=\"{= ?leftNode }\"/>
            </ui:group>
        </ui:call>
        <ui:call arg:table=\"{= ?rightNode }\" ui:template=\"{= edg:GetColumnsOfTable }\" ui:varName=\"targetColumns\">
            <ui:forEach ui:resultSet=\"{= ?targetColumns }\">
                <ui:if ui:condition=\"{= !edg:isKnownNodeInDerivationMap(?column) }\">
                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?column), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?column)) }\" arg:node=\"{= ?column }\" arg:parent=\"{= ?unmappedColumnsContainer }\"/>
                </ui:if>
            </ui:forEach>
            <ui:group let:count=\"{= edg:numberOfChildrenOfGivenNodeInDerivationMap(?unmappedColumnsContainer) }\">
                <edg:MakeDerivationMapNode arg:collapsed=\"{= true }\" arg:label=\"Unmapped Columns [{= str(?count) }]\" arg:node=\"{= ?unmappedColumnsContainer }\" arg:parent=\"{= ?rightNode }\"/>
            </ui:group>
        </ui:call>
        <ui:group let:count=\"{= edg:numberOfChildrenOfGivenNodeInDerivationMap(?mappedSourceColumnsContainer) }\">
            <edg:MakeDerivationMapNode arg:collapsed=\"{= true }\" arg:label=\"Mapped Columns [{= str(?count) }]\" arg:node=\"{= ?mappedSourceColumnsContainer }\" arg:parent=\"{= ?leftNode }\"/>
        </ui:group>
        <ui:group let:count=\"{= edg:numberOfChildrenOfGivenNodeInDerivationMap(?directlyMappedColumnsContainer) }\">
            <edg:MakeDerivationMapNode arg:collapsed=\"{= true }\" arg:label=\"Direct-Mapped Columns [{= str(?count) }]\" arg:node=\"{= ?directlyMappedColumnsContainer }\" arg:parent=\"{= ?rightNode }\"/>
        </ui:group>
        <ui:group let:count=\"{= edg:numberOfChildrenOfGivenNodeInDerivationMap(?functionallyMappedColumnsContainer) }\">
            <edg:MakeDerivationMapNode arg:collapsed=\"{= true }\" arg:label=\"Function-Mapped Columns [{= str(?count) }]\" arg:node=\"{= ?functionallyMappedColumnsContainer }\" arg:parent=\"{= ?rightNode }\"/>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Generate JSON for table to table dependency details based on provenance and mappings showing mapped and unmapped columns." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generate JSON for table to table derivation map" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenerateJSONforTableToTableFunctionalMappingsDerivationMap
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:mappedColumnsContainer ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceColumnsContainer ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:unmappedColumnsContainer ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateJSONforTableToTableFunctionalMappingsDerivationMap\"/-->
    <ui:call arg:source=\"{= ?leftNode }\" arg:target=\"{= ?rightNode }\" edg:linkType=\"{= ?linkType }\" ui:template=\"{= edg:GetTableToTableFunctionalMappingDetails }\" ui:varName=\"tableFunctionalMappings\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?tableFunctionalMappings) }\">
            <!--ui:dumpResultSet ui:message=\"AAA3: edg:GenerateJSONforTableToTableDependencyDetails {= ?leftNode } to {= ?rightNode }\"
  ui:resultSet=\"{= ?tableFunctionalMappings }\"/-->
            <ui:group let:countOfFunctions=\"{= edg:getCountOfResourcesFromResultSet(0, ?tableFunctionalMappings) }\">
                <!--ui:dumpScope ui:message=\"AAA4: edg:GenerateJSONforTableToTableDependencyDetails\"/-->
                <ui:call arg:column=\"{= 0 }\" arg:resultSet=\"{= ?tableFunctionalMappings }\" ui:template=\"{= edg:getDistinctResourcesFromResultSet }\" ui:varName=\"softwareFunctions\">
                    <!--ui:dumpResultSet ui:message=\"AAA5: edg:GenerateJSONforTableToTableDependencyDetails {= ?leftNode } to {= ?rightNode }\"
  ui:resultSet=\"{= ?softwareFunctions }\"/-->
                    <ui:forEach ui:indexVar=\"softwareFunctionIndex\" ui:resultSet=\"{= ?softwareFunctions }\">
                        <ui:group let:softwareFunctionLabel=\"{= spl:object(?resource, rdfs:label) }\" let:softwareFunctionType=\"{= spl:object(?resource, rdf:type) }\">
                            <ui:group let:mySoftwareFunctionLabel=\"{= IF(bound(?softwareFunctionLabel), ?softwareFunctionLabel, CONCAT(ui:label(?softwareFunctionType), &quot; &quot;, str(?softwareFunctionIndex))) }\">
                                <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= ?mySoftwareFunctionLabel }\" arg:node=\"{= ?resource }\"/>
                            </ui:group>
                        </ui:group>
                        <ui:forEach ui:resultSet=\"{= ?tableFunctionalMappings }\">
                            <ui:if ui:condition=\"{= ?softwareFunction = ?resource }\">
                                <ui:group let:sourceLink=\"SOURCE-{= ui:uniqueId() }\" let:targetLink=\"TARGET-{= ui:uniqueId() }\">
                                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?targetColumn), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?targetColumn)) }\" arg:node=\"{= ?targetColumn }\" arg:parent=\"{= ?mappedColumnsContainer }\"/>
                                    <edg:MakeDerivationMapNode arg:collapsed=\"{= false }\" arg:label=\"{= CONCAT(ui:label(?sourceColumn), &quot; :: &quot;, edg:makeDerivationMapDataElementLabel(?sourceColumn)) }\" arg:node=\"{= ?sourceColumn }\" arg:parent=\"{= ?sourceColumnsContainer }\"/>
                                    <edg:MakeDerivationMapLink arg:id=\"{= ?sourceLink }\" arg:label=\"input\" edg:source=\"{= str(?sourceColumn) }\" edg:target=\"{= str(?softwareFunction) }\"/>
                                    <edg:MakeDerivationMapLink arg:id=\"{= ?targetLink }\" arg:label=\"output\" edg:source=\"{= str(?softwareFunction) }\" edg:target=\"{= str(?targetColumn) }\"/>
                                </ui:group>
                            </ui:if>
                        </ui:forEach>
                    </ui:forEach>
                </ui:call>
            </ui:group>
        </ui:if>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Generate JSON for table to table functional dependency details based on provenance and mappings showing mapped and unmapped columns." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generate JSON for table to table functional mappings derivation map" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenerateLineageGramNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:outOfBreadth ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:outOfReach ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:continuation ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate provo:wasGeneratedBy ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:typeId=\"{= ui:encodeNode(edg:getClassWithPropertyValue(?resourceType, edg:Asset, edg:isDepictionType, true)) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenerateLineageGramNode - active resource {= ?activeResource } of type {= ?resourceType }\"/-->
    <swon:Object>
        <swon:Value arg:name=\"id\" arg:value=\"{= ?id }\"/>
        <swon:Value arg:name=\"viewFrame\" arg:value=\"{= ui:encodeNode(?viewFrame) }\"/>
        <swon:Value arg:name=\"resource\" arg:value=\"{= ENCODE_FOR_URI(str(?resource)) }\"/>
        <ui:if ui:condition=\"{= bound(?activeResource) }\">
            <swon:Value arg:name=\"activeResource\" arg:value=\"{= ENCODE_FOR_URI(str(?activeResource)) }\"/>
        </ui:if>
        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?resourceType) }\"/>
        <swon:Value arg:name=\"label\" arg:value=\"{= IF((?resourceType IN (edg:PlaceholderForMoreDownstream, edg:PlaceholderForMoreUpstream)), ui:label(?resourceType), ui:label(?resource)) }\"/>
        <swon:Value arg:name=\"typeId\" arg:value=\"{= ?typeId }\"/>
        <ui:if ui:condition=\"{= bound(?breadth) }\">
            <swon:Value arg:name=\"breadth\" arg:value=\"{= ?breadth }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?offset) }\">
            <swon:Value arg:name=\"offset\" arg:value=\"{= ?offset }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?outOfBreadth) }\">
            <swon:Value arg:name=\"outOfBreadth\" arg:value=\"{= ?outOfBreadth }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?outOfReach) }\">
            <swon:Value arg:name=\"outOfReach\" arg:value=\"{= ?outOfReach }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?continuation) }\">
            <swon:Value arg:name=\"continuation\" arg:value=\"{= ENCODE_FOR_URI(str(?continuation)) }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?wasGeneratedBy) }\">
            <swon:Value arg:name=\"generator\" arg:value=\"{= str(?wasGeneratedBy) }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?explanation) }\">
            <swon:Value arg:name=\"explanation\" arg:value=\"{= ?explanation }\"/>
        </ui:if>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate lineageGram node" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:GenerateLineageGramNodeForResource
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:nodeOccurrence=\"{= edg:getResourceOccurrenceInViewFrame(?resource, ?viewFrame) }\">
    <swon:Object let:myId=\"{= COALESCE(?id, spl:objectInGraph(?nodeOccurrence, edg:name, ui:tempGraphLG), CONCAT(&quot;UNKOWN_&quot;, ui:uniqueId())) }\" let:myResourceType=\"{= COALESCE(?resourceType, spl:objectInGraph(?nodeOccurrence, edg:type, ui:tempGraphLG)) }\" let:myViewFrame=\"{= COALESCE(?viewFrame, spl:objectInGraph(?nodeOccurrence, edg:viewFrame, ui:tempGraphLG)) }\">
        <swon:Value arg:name=\"id\" arg:value=\"{= ?myId }\"/>
        <swon:Value arg:name=\"viewFrame\" arg:value=\"{= ui:encodeNode(?myViewFrame) }\"/>
        <swon:Value arg:name=\"resource\" arg:value=\"{= ui:encodeNode(?resource) }\"/>
        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ui:encodeNode(?myResourceType) }\"/>
        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?resource) }\"/>
        <swon:Value arg:name=\"typeId\" arg:value=\"{= ui:encodeNode(edg:getClassWithPropertyValue(?resourceType, edg:Asset, edg:isDepictionType, true)) }\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Generate lineageGram node for resource" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:GenerateReportOfLineageGramAction
  a swa:ResourceAction ;
  arg:appName "Editor" ;
  arg:condition false ;
  arg:iconClass "neighborgram-icon" ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI  + '&_viewClass=edg:ShowLineageGramGraphContent'+ '&focusNode=' + escape(resourceURI)  + '&dataProvider=edg:BuildJSONforLineageGramGraph' + '&graph=' + swa.queryGraphURI + '&viewFramesGraph=http://edg.topbraidlive.org/1.0/config/diagrams')" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generate Report of LineageGram™..." ;
.
edg:GenericDerivationMapDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue edg:UNKNOWN-TYPE ;
      spl:optional true ;
      spl:predicate arg:sourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue edg:UNKNOWN-TYPE ;
      spl:optional true ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:diagramLinkQueryTemplate ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:linkDetailsTemplate=\"{= COALESCE(?diagramLinkQueryTemplate, edg:getDerivationMapInformation) }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:GenericDerivationMapDataService\"/-->
    <ui:call arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\" ui:template=\"{= ?diagramLinkQueryTemplate }\" ui:varName=\"linkDetails\">
        <!--ui:dumpScope ui:message=\"AAA2: edg:GenericDerivationMapDataService\"/-->
        <!--ui:dumpResultSet ui:message=\"AAA2: edg:DefaultDerivationMapDataService\" ui:resultSet=\"{= ?linkDetails }\"/-->
        <swon:Object>
            <swon:Values arg:name=\"nodes\">
                <edg:BuildJSONforDerivationMapLeftAndRightNodes arg:downstreamNode=\"{= ?rightNode }\" arg:upstreamNode=\"{= ?leftNode }\"/>
            </swon:Values>
            <swon:Values arg:name=\"edges\">
                <edg:GenerateJSONforDerivationMapLinks arg:leftNode=\"{= ?rightNode }\" arg:rightNode=\"{= ?leftNode }\"/>
            </swon:Values>
        </swon:Object>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generic derivation map service" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GenericNodeToNodeMapDetails
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:link ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:reverseNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:linkText=\"{= IF((?link = &quot;&quot;), &quot;dependency&quot;, ?link) }\">
    <swon:Object>
        <swon:Value arg:name=\"nodes\">
            <swon:Array>
                <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?leftNode }\"/>
                <ui:resourceView ui:matchIds=\"derivation-map-composite-node\" ui:resource=\"{= ?rightNode }\"/>
            </swon:Array>
        </swon:Value>
        <swon:Value arg:name=\"edges\">
            <swon:Array>
                <!-- pick up any links generated for composite nodes -->
                <!-- left and right nodes are currently not needed - future requirement -->
                <edg:GenerateJSONforDerivationMapLinks arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
                <edg:BuildJSONforDerviationMapLink arg:explanation=\"{= ?explanation }\" arg:label=\"{= ?link }\" arg:leftNode=\"{= ?leftNode }\" arg:reverseNodes=\"{= ?reverseNodes }\" arg:rightNode=\"{= ?rightNode }\"/>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Generice node to node map details" ;
  rdfs:subClassOf edg:DerivationMapServices ;
.
edg:GetAllSoftwareExecutableDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "sw" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "sw" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 edg:usesSoftwareExecutable ;
                sp:path2 [
                    a sp:ModPath ;
                    sp:modMax -2 ;
                    sp:modMin 0 ;
                    sp:subPath edg:dependsOnDataFrom ;
                  ] ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "swType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sw" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:SoftwareExecutable ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "swType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get all software executable dependencies" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetAssetProvenance
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependency" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object provo:wasDerivedFrom ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dependency" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dependencyClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dependency" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object provo:Entity ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "dependencyClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression edg:DEPTYPE_DATA-DERIVED-FROM ;
            sp:variable [
                sp:varName "dependencyType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the provenance of an asset." ;
  rdfs:label "Get asset proevenance" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetAssetsMappedToGlossaryTerm
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "asset" ;
          ]
          [
            sp:varName "assetType" ;
          ]
          [
            sp:varName "depictionClass" ;
          ]
          [
            sp:varName "viewFrame" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "term" ;
              ] ;
            sp:predicate edg:mapsToTerm ;
            sp:subject [
                sp:varName "asset" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "assetType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "asset" ;
              ] ;
          ]
          [
            sp:object edg:AssetClass ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "assetType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:getClassWithPropertyValue ;
                sp:arg1 [
                    sp:varName "assetType" ;
                  ] ;
                sp:arg2 edg:Asset ;
                sp:arg3 edg:isDepictionType ;
                sp:arg4 true ;
              ] ;
            sp:variable [
                sp:varName "depictionClass" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "depictionClass" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrameStructure" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object 0 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate edg:getViewframeForDepictionClass ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
      rdfs:comment "Needed to find the applicable viewframe for the determined depiction class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType edg:GlossaryTerm ;
      rdfs:comment "A software executable" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the asset that have a \"maps to\" relationship to a glossary term." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get assets mapped to glossary term" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetColumnsOfTable
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "name" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "column" ;
          ]
          [
            sp:varName "name" ;
          ]
          [
            sp:varName "datatype" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "table" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "name" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "column" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "column" ;
                  ] ;
                sp:arg2 edg:physicalDatatype ;
              ] ;
            sp:variable [
                sp:varName "datatype" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:table ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Get columns of table" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetDataElementDependency
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependency" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:output ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "childItem" ;
                      ] ;
                  ]
                  [
                    sp:object edg:compositionProperty ;
                    sp:predicate rdfs:subPropertyOf ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:output ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate provo:wasDerivedFrom ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependencyClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object provo:Entity ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependencyClass" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-INPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate provo:wasDerivedFrom ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependencyClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object provo:Entity ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependencyClass" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "maybeThisDependency" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "dependency" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:variable [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_INFO-DERIVED-FROM ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression provo:wasDerivedFrom ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the software executables that produce a given data element" ;
  rdfs:label "Get data element dependency" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetDependenciesOfInformationAsset
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "parentAsset" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "focusNode" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          edg:input
                        )
                        (
                          edg:output
                        )
                        (
                          edg:requiresInformationAsset
                        )
                        (
                          edg:producesInformationAsset
                        )
                      ) ;
                    sp:varNames (
                        "property"
                      ) ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:compositionProperty ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "focusNode" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "parentAsset" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentAsset" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          edg:input
                        )
                        (
                          edg:output
                        )
                        (
                          edg:requiresInformationAsset
                        )
                        (
                          edg:producesInformationAsset
                        )
                      ) ;
                    sp:varNames (
                        "property"
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/software> ;
  rdfs:label "Get dependencies of information asset" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetDependenciesOfSoftwareExecutable
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "sourceSW" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "program" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSW" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSW" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "sourceSW" ;
                      ] ;
                    sp:predicate edg:dependsOnDataFrom ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A software executable" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the apps, the programs and data elements they depend on." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get dependencies of a software executable" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetDerivationSources
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "source" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "source" ;
              ] ;
            sp:predicate provo:wasDerivedFrom ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns all resources referred to using prov:wasDerivedFrom" ;
  rdfs:label "Get derivation sources" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetDerivationTargets
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "target" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath provo:wasDerivedFrom ;
              ] ;
            sp:subject [
                sp:varName "target" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "target" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "targetClass" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns all resources that are derived from a given resource, using prov:wasDerivedFrom" ;
  rdfs:label "Get derivation targets" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetDownstreamDependents
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "softwareDependency" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "softwareDependency" ;
          ]
          [
            sp:varName "softwareExecutableType" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "flowCount" ;
          ]
          [
            sp:varName "sourceEndpoint" ;
          ]
          [
            sp:varName "targetEndpoint" ;
          ]
          [
            sp:varName "activeExecutable" ;
          ]
          [
            sp:varName "dataDependency" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:requiresInformationAsset ;
                    sp:subject [
                        sp:varName "softwareDependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_INFO-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "softwareDependency" ;
                      ] ;
                    sp:variable [
                        sp:varName "activeExecutable" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object provo:wasDerivedFrom ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "property" ;
                      ] ;
                    sp:subject [
                        sp:varName "dataDependency" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependencyClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "dataDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object provo:Entity ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependencyClass" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-DERIVED-FROM ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:usesSoftwareExecutable ;
                    sp:subject [
                        sp:varName "softwareDependency" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependentType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "softwareDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependentType" ;
                      ] ;
                  ]
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          edg:Pipeline
                        )
                        (
                          edg:PipelineStep
                        )
                      ) ;
                    sp:varNames (
                        "parentClass"
                      ) ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_PROGRAM-USAGE ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "dependentType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            a sp:TriplePath ;
                            sp:object edg:BusinessApplication ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "dependentType" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "?0" ;
                              ] ;
                            sp:predicate edg:getDependentBusinessApplication ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "softwareDependency" ;
                              ] ;
                            sp:predicate rdf:first ;
                            sp:subject [
                                sp:varName "?0" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "?1" ;
                              ] ;
                            sp:predicate rdf:rest ;
                            sp:subject [
                                sp:varName "?0" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dependencyType" ;
                              ] ;
                            sp:predicate rdf:first ;
                            sp:subject [
                                sp:varName "?1" ;
                              ] ;
                          ]
                          [
                            sp:object () ;
                            sp:predicate rdf:rest ;
                            sp:subject [
                                sp:varName "?1" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:TriplePath ;
                            sp:object edg:SoftwareProgram ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "dependentType" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "?2" ;
                              ] ;
                            sp:predicate edg:getDependentSoftwareProgram ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "softwareDependency" ;
                              ] ;
                            sp:predicate rdf:first ;
                            sp:subject [
                                sp:varName "?2" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "?3" ;
                              ] ;
                            sp:predicate rdf:rest ;
                            sp:subject [
                                sp:varName "?2" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dependencyType" ;
                              ] ;
                            sp:predicate rdf:first ;
                            sp:subject [
                                sp:varName "?3" ;
                              ] ;
                          ]
                          [
                            sp:object () ;
                            sp:predicate rdf:rest ;
                            sp:subject [
                                sp:varName "?3" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "softwareDependency" ;
                  ] ;
                sp:arg2 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  rdfs:comment "Returns downstream dependents of a software executable" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get downstream dependents" ;
  rdfs:seeAlso edg:GetUpstreamDependencies ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetDownstreamSoftwareDependents_DEPRECATED
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "softwareDependent" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "softwareExecutableType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "software" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:BusinessApplication ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "softwareExecutableType" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:getDependentBusinessApplication ;
            sp:subject [
                sp:varName "software" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "softwareDependent" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dependencyType" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  rdfs:comment "Returns downstream software" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get downstream software  dependents" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetEnterpriseWorkProducts
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "output" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "outputType" ;
          ]
          [
            sp:varName "frame" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
          [
            sp:varName "case" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct information object" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    sp:object edg:compositionProperty ;
                    sp:predicate rdfs:subPropertyOf ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "component output" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "outputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "output" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:InformationAsset ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_InfoAssetsFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataSet ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_ResourcesFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the information assets of enterprise activities and capabilities" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable enterprise outputs" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFilteredDownstreamSoftwareExecutableDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "softwareDependent" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "softwareDependent" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "rowIndex" ;
                ] ;
              sp:predicate spr:rowIndices ;
              sp:subject [
                  sp:varName "resultSet" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spr:cell ;
                  sp:arg1 [
                      sp:varName "resultSet" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "rowIndex" ;
                    ] ;
                  sp:arg3 [
                      sp:varName "column" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "testValue" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "testValue" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "value" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "softwareDependent" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "dependencyType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Database ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns software executable dependencies from a filtereed resultset" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get filtered downstream software executable dependencies" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFilteredSoftwareExecutablesPairDependencyDetails
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "leftNodeSoftwareExecutable" ;
          ]
          [
            sp:varName "leftNodeSoftwareType" ;
          ]
          [
            sp:varName "rightNodeSoftwareType" ;
          ]
          [
            sp:varName "softwareFunction" ;
          ]
          [
            sp:varName "softwareFunctionType" ;
          ]
          [
            sp:varName "rightNodeSoftwareExecutable" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "sourceEndpoint" ;
          ]
          [
            sp:varName "targetEndpoint" ;
          ]
          [
            sp:varName "flow" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "leftNodeSoftwareExecutable" ;
          ]
          [
            sp:varName "leftNodeSoftwareType" ;
          ]
          [
            sp:varName "rightNodeSoftwareType" ;
          ]
          [
            sp:varName "softwareFunction" ;
          ]
          [
            sp:varName "softwareFunctionType" ;
          ]
          [
            sp:varName "rightNodeSoftwareExecutable" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "sourceEndpoint" ;
          ]
          [
            sp:varName "targetEndpoint" ;
          ]
          [
            sp:varName "flow" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "rowIndex" ;
                ] ;
              sp:predicate spr:rowIndices ;
              sp:subject [
                  sp:varName "resultSet" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spr:cell ;
                  sp:arg1 [
                      sp:varName "resultSet" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "rowIndex" ;
                    ] ;
                  sp:arg3 [
                      sp:varName "column" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "testValue" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "testValue" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "value" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "leftNodeSoftwareExecutable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "leftNodeSoftwareType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 2 ;
              ] ;
            sp:variable [
                sp:varName "rightNodeSoftwareType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 3 ;
              ] ;
            sp:variable [
                sp:varName "softwareFunction" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 4 ;
              ] ;
            sp:variable [
                sp:varName "softwareFunctionType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 5 ;
              ] ;
            sp:variable [
                sp:varName "rightNodeSoftwareExecutable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 6 ;
              ] ;
            sp:variable [
                sp:varName "dataElement" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 7 ;
              ] ;
            sp:variable [
                sp:varName "sourceEndpoint" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 8 ;
              ] ;
            sp:variable [
                sp:varName "targetEndpoint" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 9 ;
              ] ;
            sp:variable [
                sp:varName "flow" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Database ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get filtered software executables pair dependency details" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFilteredUpstreamSoftwareExecutableDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "softwareDependency" ;
          ]
          [
            sp:varName "softwareExecutableType" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "flow" ;
          ]
          [
            sp:varName "sourceEndpoint" ;
          ]
          [
            sp:varName "targetEndpoint" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "softwareDependency" ;
          ]
          [
            sp:varName "softwareExecutableType" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "flow" ;
          ]
          [
            sp:varName "sourceEndpoint" ;
          ]
          [
            sp:varName "targetEndpoint" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "rowIndex" ;
                ] ;
              sp:predicate spr:rowIndices ;
              sp:subject [
                  sp:varName "resultSet" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spr:cell ;
                  sp:arg1 [
                      sp:varName "resultSet" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "rowIndex" ;
                    ] ;
                  sp:arg3 [
                      sp:varName "column" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "testValue" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "testValue" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "value" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "softwareDependency" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 1 ;
              ] ;
            sp:variable [
                sp:varName "softwareExecutableType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 2 ;
              ] ;
            sp:variable [
                sp:varName "dependencyType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 3 ;
              ] ;
            sp:variable [
                sp:varName "flow" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 4 ;
              ] ;
            sp:variable [
                sp:varName "sourceEndpoint" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 [
                    sp:varName "resultSet" ;
                  ] ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 5 ;
              ] ;
            sp:variable [
                sp:varName "targetEndpoint" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Database ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns software executable dependencies from a filtereed resultset" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get filtered upstream software executable dependencies" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFinalStageSoftwareExecutablesAndDataAssets
  a spin:Template ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:LineageModel ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the pipelines, software executables and data assets that  constitute the final stage of the lineage model. Does not consider direct relationships between lineage models and software. For the latter see edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get final stage software executables and data assets" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFirstSoftwareExecutablesAndInfoAssetLists
  a spin:MagicProperty ;
  sp:query [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "app" ;
          ]
          [
            sp:varName "function" ;
          ]
          [
            sp:varName "infoList" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "edg.swe.tbb:A00,edg.swe.tbb:G04,edg.swe.tbb:E00,edg.swe.tbb:F01,edg.swe.tbb:C04,edg.swe.tbb:B04,edg.swe.tbb:A04" ;
            sp:variable [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "appAsString" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "list" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object "," ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "appAsString" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "app" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate edg:GetFirstSoftwareExecutablesAndInfoAssetLists ;
            sp:subject [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "app" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "function" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?4" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoList" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Test with:" ;
    ] ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "sourceSoftware" ;
          ]
          [
            sp:varName "infoAssetList" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:groupBy (
                    [
                      sp:varName "software" ;
                    ]
                    [
                      sp:varName "sourceSoftware" ;
                    ]
                  ) ;
                sp:resultVariables (
                    [
                      sp:varName "software" ;
                    ]
                    [
                      sp:varName "sourceSoftware" ;
                    ]
                    [
                      sp:expression [
                          a sp:GroupConcat ;
                          sp:expression [
                              sp:varName "infoAssetEncoded" ;
                            ] ;
                          sp:separator "," ;
                        ] ;
                      sp:varName "infoList" ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object [
                          sp:varName "?0" ;
                        ] ;
                      sp:predicate spif:split ;
                      sp:subject [
                          sp:varName "softwareQName" ;
                        ] ;
                    ]
                    [
                      sp:object spin:_arg1 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object "," ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a ui:decodeNode ;
                          sp:arg1 [
                              sp:varName "softwareQName" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?2" ;
                        ] ;
                      sp:predicate edg:GetRootSWresources ;
                      sp:subject [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "infoAssetEncoded" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?3" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "sourceSoftware" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:sortStringListRemovingDuplicates ;
                sp:arg1 [
                    sp:varName "infoList" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAssetList" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment "Returns the information assets that will be in the first frame of a lineagegram." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get first software executables and info asset lists" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:GetFirstSoftwareExecutablesForGivenInput
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "program" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "input" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "sourceApp" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareProgram ;
                        sp:path2 edg:usesSoftwareExecutable ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "input" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "program" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "modelAsset" ;
                    ] ;
                  sp:path [
                      a sp:SeqPath ;
                      sp:path1 [
                          a sp:SeqPath ;
                          sp:path1 edg:columnOf ;
                          sp:path2 edg:tableOf ;
                        ] ;
                      sp:path2 edg: ;
                    ] ;
                  sp:subject [
                      sp:varName "dataElement" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:input ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Given an input that is in the 'resource' frame (first frame) find the first software executables that it is linked to. That is, those software executables that do not receive this input from another software executable." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get first software executable for given input" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFirstSoftwareExecutablesInputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "software" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "inputs" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:GetFirstSoftwareExecutablesInputsList ;
            sp:subject [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "software" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "inputs" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the inputs that are the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get first software executables inputs" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetFirstSoftwareExecutablesInputsList
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "inputList" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:groupBy (
                    [
                      sp:varName "software" ;
                    ]
                  ) ;
                sp:resultVariables (
                    [
                      sp:expression [
                          a sp:GroupConcat ;
                          sp:expression [
                              sp:varName "inputEncoded" ;
                            ] ;
                          sp:separator "," ;
                        ] ;
                      sp:varName "rawIinputList" ;
                    ]
                    [
                      sp:varName "software" ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object [
                          sp:varName "?0" ;
                        ] ;
                      sp:predicate spif:split ;
                      sp:subject [
                          sp:varName "softwareQName" ;
                        ] ;
                    ]
                    [
                      sp:object spin:_arg1 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object "," ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a ui:decodeNode ;
                          sp:arg1 [
                              a sp:str ;
                              sp:arg1 [
                                  sp:varName "softwareQName" ;
                                ] ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?2" ;
                        ] ;
                      sp:predicate edg:GetSoftwareInput ;
                      sp:subject [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "inputEncoded" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:sortStringListRemovingDuplicates ;
                sp:arg1 [
                    sp:varName "rawIinputList" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "inputList" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment "Returns the information assets that will be in the first frame of a lineagegram." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get first software executable inputs list" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:GetFlowsFromLineageGramGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "id" ;
          ]
          [
            sp:varName "name" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "resourceType" ;
          ]
          [
            sp:varName "sourceId" ;
          ]
          [
            sp:varName "targetId" ;
          ]
          [
            sp:varName "viewFrame" ;
          ]
          [
            sp:varName "breadth" ;
          ]
          [
            sp:varName "offset" ;
          ]
          [
            sp:varName "generator" ;
          ]
          [
            sp:varName "contination" ;
          ]
          [
            sp:varName "outOfBreadth" ;
          ]
          [
            sp:varName "outOfReach" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object edg:ViewFrameReifiedLink ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate edg:type ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "id" ;
                      ] ;
                    sp:predicate edg:id ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "name" ;
                      ] ;
                    sp:predicate edg:name ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:resource ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "sourceNode" ;
                      ] ;
                    sp:predicate edg:sourceNode ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "sourceId" ;
                      ] ;
                    sp:predicate edg:id ;
                    sp:subject [
                        sp:varName "sourceNode" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "targetNode" ;
                      ] ;
                    sp:predicate edg:targetNode ;
                    sp:subject [
                        sp:varName "node" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "targetId" ;
                      ] ;
                    sp:predicate edg:id ;
                    sp:subject [
                        sp:varName "targetNode" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "breadth" ;
                            ] ;
                          sp:predicate edg:breadth ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "outOfBreadth" ;
                            ] ;
                          sp:predicate edg:outOfBreadth ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "outOfReach" ;
                            ] ;
                          sp:predicate edg:outOfReach ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "offset" ;
                            ] ;
                          sp:predicate edg:offset ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "continuation" ;
                            ] ;
                          sp:predicate edg:continuation ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "continuation" ;
                            ] ;
                          sp:predicate edg:continuation ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "generator" ;
                            ] ;
                          sp:predicate provo:wasGeneratedBy ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "resourceType" ;
                    ] ;
                  sp:predicate edg:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get flows from lineageGram graph" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetImmediateSoftwareDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:limit "6"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "softwareDependency" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:GetSourceSoftwareExecutable ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "softwareDependency" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get immediate software dependencies" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetImpactOfTable
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependency" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "countOfMappings" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              a sp:TriplePath ;
                              sp:object provo:wasDerivedFrom ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdfs:subPropertyOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "property" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "resource" ;
                                ] ;
                              sp:predicate [
                                  sp:varName "property" ;
                                ] ;
                              sp:subject [
                                  sp:varName "dependency" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependencyClass" ;
                                ] ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "dependency" ;
                                ] ;
                            ]
                            [
                              a sp:TriplePath ;
                              sp:object provo:Entity ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 1 ;
                                  sp:subPath rdfs:subClassOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "dependencyClass" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              sp:object [
                                  sp:varName "resource" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              a sp:TriplePath ;
                              sp:object [
                                  sp:varName "anotherColumn" ;
                                ] ;
                              sp:path [
                                  a sp:ReversePath ;
                                  sp:subPath edg:mapsToColumn ;
                                ] ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependency" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "anotherColumn" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression edg:mapsToColumn ;
                              sp:variable [
                                  sp:varName "property" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              sp:object [
                                  sp:varName "resource" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "column" ;
                                ] ;
                              sp:predicate edg:input ;
                              sp:subject [
                                  sp:varName "sofwareFunction" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "anotherColumn" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "sofwareFunction" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependency" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "anotherColumn" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression edg:dependentViaFunction ;
                              sp:variable [
                                  sp:varName "property" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Table ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the impact of a table." ;
  rdfs:label "Get impact of table" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetInformationAssetDependency
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependency" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:producesInformationAsset ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_INFO-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:output ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "childItem" ;
                      ] ;
                  ]
                  [
                    sp:object edg:compositionProperty ;
                    sp:predicate rdfs:subPropertyOf ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:output ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate provo:wasDerivedFrom ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependencyClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object provo:Entity ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependencyClass" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-INPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:predicate provo:wasDerivedFrom ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dependencyClass" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object provo:Entity ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "dependencyClass" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "maybeThisDependency" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "dependency" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "maybeThisDependency" ;
                      ] ;
                    sp:variable [
                        sp:varName "dependency" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_INFO-DERIVED-FROM ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression provo:wasDerivedFrom ;
                    sp:variable [
                        sp:varName "property" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the software executables that produce a given information asset." ;
  rdfs:label "Get information asset dependency" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetInputsOfFirstSoftwareExecutables
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "inputAsset" ;
          ]
          [
            sp:varName "program" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "input" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "sourceApp" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareProgram ;
                        sp:path2 edg:usesSoftwareExecutable ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "input" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "program" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "modelAsset" ;
                    ] ;
                  sp:path [
                      a sp:SeqPath ;
                      sp:path1 [
                          a sp:SeqPath ;
                          sp:path1 edg:columnOf ;
                          sp:path2 edg:tableOf ;
                        ] ;
                      sp:path2 edg: ;
                    ] ;
                  sp:subject [
                      sp:varName "dataElement" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "dataElement" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataElement" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "inputAsset" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get inputs of first Software Executables" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetLastSoftwareExecutablesAndInfoAssetsList
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "software" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "infoAssetsList" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:lastSoftwareExecutablesAndInfoAssets ;
            sp:subject [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "software" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoAssetsList" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the software executables and information assets that are the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get LineageGram first frame software executable and resources" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "infoAsset" ;
          ]
          [
            sp:varName "tableOrViewOrDataset" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "software" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "infoAsset" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "infoAsset" ;
                              ] ;
                            sp:predicate edg:partOf ;
                            sp:subject [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                            sp:predicate edg:output ;
                            sp:subject [
                                sp:varName "software" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object [
                                sp:varName "infoAsset" ;
                              ] ;
                            sp:predicate edg:partOf ;
                            sp:subject [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                            sp:predicate edg:columnOf ;
                            sp:subject [
                                sp:varName "dataElement" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dataElement" ;
                              ] ;
                            sp:predicate edg:output ;
                            sp:subject [
                                sp:varName "software" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            a sp:TriplePath ;
                            sp:object edg:DataElement ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "outputType" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                            sp:predicate edg:columnOf ;
                            sp:subject [
                                sp:varName "output" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "infoAsset" ;
                              ] ;
                            sp:predicate edg:partOf ;
                            sp:subject [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "output" ;
                              ] ;
                            sp:variable [
                                sp:varName "dataElement" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:TriplePath ;
                            sp:object edg:Table ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "outputType" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "output" ;
                              ] ;
                            sp:variable [
                                sp:varName "infoAsset" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:TriplePath ;
                            sp:object edg:Report ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "outputType" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "output" ;
                              ] ;
                            sp:variable [
                                sp:varName "tableOrViewOrDataset" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the software executables and data assets that are the final stage of the lineage model. Does not consuider pipelines. For pipelines see edg:GetLineageGramPipelineSoftwareExecutablesAndDataAssets." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get LineageGram final software executables and data assets" ;
  rdfs:seeAlso edg:GetFinalStageSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetLineageGramFirstSoftwareExecutablesAndResources
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "software" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "infoList" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:GetFirstSoftwareExecutablesAndInfoAssetLists ;
            sp:subject [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "software" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceSoftware" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoList" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the software executables and information assets that are the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get LineageGram first frame software executable and resources" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetLineageGramOutputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "frame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "myOutput" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_EnterpriseFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "myOutput" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_DataElementsFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:getOutputContainer ;
            sp:subject [
                sp:varName "myOutput" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "output" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the information assets produced by a node." ;
  rdfs:label "Get lineageGram outputs" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetLineageGramReportFrameInfoAssetLinks
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "infoAssetDataset" ;
          ]
          [
            sp:varName "sourceSoftware" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:partOf ;
                    sp:subject [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                    sp:predicate edg:columnOf ;
                    sp:subject [
                        sp:varName "infoAssetDatasetColumn" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAssetDatasetColumn" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSoftware" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:predicate edg:partOf ;
                    sp:subject [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSoftware" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "resource" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:output ;
                        sp:path2 edg:producesInformationAsset ;
                      ] ;
                    sp:subject [
                        sp:varName "sourceSoftware" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "info asset" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the information asset links that are the last frame of the lineage model." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get LineageGram report frame resources info asset links" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetLineageGramTargetLinksInViewFrame
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "targetOccurrence" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetOccurrence" ;
              ] ;
            sp:predicate edg:getLineageTargetsInViewFrame ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
      rdfs:comment "info asset" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "info asset" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the taget asset links for a given resource to targets in a given view frame." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get LineageGram target links in view frame." ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetLinksFromDerivationMapGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
          [
            sp:varName "linkId" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "sourceId" ;
          ]
          [
            sp:varName "targetId" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:DerivationMapLink ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "linkId" ;
                    ] ;
                  sp:predicate edg:id ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceId" ;
                    ] ;
                  sp:predicate edg:source ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetId" ;
                    ] ;
                  sp:predicate edg:target ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "label" ;
                          ] ;
                        sp:predicate edg:label ;
                        sp:subject [
                            sp:varName "link" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphDM ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get links from derivaiton map graph" ;
  rdfs:subClassOf edg:DerivationMapSelectTemplates ;
.
edg:GetLinksFromLineageGramGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
          [
            sp:varName "sourceId" ;
          ]
          [
            sp:varName "targetId" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
          [
            sp:varName "flow" ;
          ]
          [
            sp:varName "explanation" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:ViewFrameLink ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceId" ;
                    ] ;
                  sp:predicate edg:sourceNode ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetId" ;
                    ] ;
                  sp:predicate edg:targetNode ;
                  sp:subject [
                      sp:varName "link" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "flow" ;
                          ] ;
                        sp:predicate edg:flow ;
                        sp:subject [
                            sp:varName "link" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "explanation" ;
                          ] ;
                        sp:predicate edg:explanation ;
                        sp:subject [
                            sp:varName "link" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "link" ;
                            ] ;
                          sp:arg2 edg:dependencyType ;
                        ] ;
                      sp:arg2 edg:DEPTYPE_UNKNOWN ;
                    ] ;
                  sp:variable [
                      sp:varName "dependencyType" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            a sp:Values ;
                            sp:bindings (
                                (
                                  edg:DEPTYPE_FLOWLINE
                                )
                              ) ;
                            sp:varNames (
                                "dependencyType"
                              ) ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get links from lineageGram graph" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetNodesFromDerivationMapGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "collapsed" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "parent" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "occurrence" ;
          ]
          [
            sp:varName "resourceType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:DerivationMapNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "derivationMapNode" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "node" ;
                    ] ;
                  sp:predicate arg:node ;
                  sp:subject [
                      sp:varName "derivationMapNode" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "collapsed" ;
                          ] ;
                        sp:predicate arg:collapsed ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "label" ;
                          ] ;
                        sp:predicate arg:label ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "parent" ;
                          ] ;
                        sp:predicate arg:parent ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "icon" ;
                          ] ;
                        sp:predicate arg:icon ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "resource" ;
                          ] ;
                        sp:predicate arg:resource ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "occurrence" ;
                          ] ;
                        sp:predicate arg:occurrence ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "resourceType" ;
                          ] ;
                        sp:predicate arg:resourceType ;
                        sp:subject [
                            sp:varName "derivationMapNode" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphDM ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get nodes from derivaiton map graph" ;
  rdfs:seeAlso edg:MakeDerivationMapNode ;
  rdfs:subClassOf edg:DerivationMapSelectTemplates ;
.
edg:GetNodesFromLineageGramGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "node" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "id" ;
          ]
          [
            sp:varName "name" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "resourceType" ;
          ]
          [
            sp:varName "viewFrame" ;
          ]
          [
            sp:varName "breadth" ;
          ]
          [
            sp:varName "offset" ;
          ]
          [
            sp:varName "generator" ;
          ]
          [
            sp:varName "contination" ;
          ]
          [
            sp:varName "outOfBreadth" ;
          ]
          [
            sp:varName "outOfReach" ;
          ]
          [
            sp:varName "activeResource" ;
          ]
          [
            sp:varName "explanation" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resourceType" ;
                    ] ;
                  sp:predicate edg:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "id" ;
                    ] ;
                  sp:predicate edg:id ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "name" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "explanation" ;
                          ] ;
                        sp:predicate edg:explanation ;
                        sp:subject [
                            sp:varName "node" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:breadth ;
                    ] ;
                  sp:variable [
                      sp:varName "breadth" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:outOfBreadth ;
                    ] ;
                  sp:variable [
                      sp:varName "outOfBreadth" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:outOfReach ;
                    ] ;
                  sp:variable [
                      sp:varName "outOfReach" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:offset ;
                    ] ;
                  sp:variable [
                      sp:varName "offset" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:continuation ;
                    ] ;
                  sp:variable [
                      sp:varName "continuation" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 provo:wasGeneratedBy ;
                    ] ;
                  sp:variable [
                      sp:varName "generator" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "node" ;
                        ] ;
                      sp:arg2 edg:activeResource ;
                    ] ;
                  sp:variable [
                      sp:varName "activeResource" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get nodes from lineageGram graph" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetOutputsNeededByInformationAsset
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath provo:wasDerivedFrom ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "partOfOutput" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "partOfOutput" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:compositionProperty ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath provo:wasDerivedFrom ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns all outputs that are needed by a given information asset, using prov:wasDerivedFrom" ;
  rdfs:label "Get outputs needed by information asset" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetOutputsOfSoftwareExecutable
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "outputType" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_INFO-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A software executable" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the apps, the programs and data elements they depend on." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get outputs of a software executable" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetPipelineStepOutputsAndSoftware
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "informationAsset" ;
          ]
          [
            sp:varName "tableOrViewOrDataset" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "report" ;
          ]
          [
            sp:varName "frame" ;
          ]
          [
            sp:varName "outputType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              a sp:TriplePath ;
                              sp:object [
                                  sp:varName "software" ;
                                ] ;
                              sp:path [
                                  a sp:AltPath ;
                                  sp:path1 edg:usesSoftwareExecutable ;
                                  sp:path2 edg:usesSoftwareProgram ;
                                ] ;
                              sp:subject [
                                  sp:varName "resource" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate edg:getPipelineStepInfoAssets ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAsset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate edg:determineOutputType ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "informationAsset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?4" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "tableOrViewOrDataset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?5" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?5" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?6" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?5" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "report" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?6" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?7" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?6" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "frame" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?7" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?8" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?7" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?8" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?8" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "output" ;
                                ] ;
                              sp:predicate edg:producesInformationAsset ;
                              sp:subject [
                                  sp:varName "resource" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?9" ;
                      ] ;
                    sp:predicate edg:determineOutputType ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "informationAsset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?9" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?10" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?9" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "tableOrViewOrDataset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?10" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?11" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?10" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?11" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?12" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?11" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "report" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?12" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?13" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?12" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "frame" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?13" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?14" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?13" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?14" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?14" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:PipelineStep ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get pipeline step outputs and software" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetPipelineSteps
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "pipeline" ;
          ]
          [
            sp:varName "stepNumber" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "pipeline" ;
          ]
          [
            sp:varName "pipelineStep" ;
          ]
          [
            sp:varName "stepNumber" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:ne ;
                  sp:arg1 [
                      sp:varName "list" ;
                    ] ;
                  sp:arg2 "" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate spif:split ;
              sp:subject [
                  sp:varName "pipelineQName" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "list" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object "," ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "pipelineQName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lastPipelineStep" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:subject ;
                sp:arg1 edg:pipelineStep ;
                sp:arg2 [
                    sp:varName "lastPipelineStep" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipeline" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipeline" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "pipelineStep" ;
                  ] ;
                sp:arg2 edg:pipelineStep ;
              ] ;
            sp:variable [
                sp:varName "maybeStepNumber" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeStepNumber" ;
                  ] ;
                sp:arg2 0 ;
              ] ;
            sp:variable [
                sp:varName "stepNumber" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
      rdfs:comment "pipeline step list string" ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns all the pipeline steps of a pipeline given a pipeline step, including the pipeline step provided." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get pipeline steps" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetReportFrameResourcesForPipelineStep
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "infoAsset" ;
          ]
          [
            sp:varName "infoAssetDataset" ;
          ]
          [
            sp:varName "software" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate edg:getPipelineStepInfoAssets ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoAsset" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoAssetDataset" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "software" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Given a pipeline steps returns the information assets that are in the report frame." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get report frame resources for pipeline step" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetRequiredNonGeneratedEnterpriseWorkProducts
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "input" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "myInputType" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "input" ;
                ] ;
              sp:predicate edg:requiresInformationAsset ;
              sp:subject [
                  sp:varName "resource" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:notExists ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "input" ;
                          ] ;
                        sp:predicate edg:producesInformationAsset ;
                        sp:subject [
                            sp:varName "producer" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "myInputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "input" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:getClassWithPropertyValue ;
                sp:arg1 [
                    sp:varName "myInputType" ;
                  ] ;
                sp:arg2 edg:Asset ;
                sp:arg3 edg:isDepictionType ;
                sp:arg4 true ;
              ] ;
            sp:variable [
                sp:varName "inputType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get required non-generated enterprise workproducts" ;
  rdfs:subClassOf edg:EnterpriseWorkSelectTemplates ;
.
edg:GetResourceOccurrenceInViewFrame
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "nodeName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:occursIn ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
                [
                  sp:object rdf:Statement ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate rdf:subject ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object edg:occursIn ;
                  sp:predicate rdf:predicate ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate rdf:object ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "nodeName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resource occurrence in view frame" ;
  rdfs:subClassOf edg:Functions ;
.
edg:GetResourcesInStringList
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resourceQName" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "resourceType" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:ne ;
                  sp:arg1 [
                      sp:varName "list" ;
                    ] ;
                  sp:arg2 "" ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "resourceQName" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "list" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object "," ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "resourceQName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 rdf:type ;
                  ] ;
                sp:arg2 edg:UNKNOWN-TYPE ;
              ] ;
            sp:variable [
                sp:varName "resourceType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resources in string list" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetResourcesInViewFrame
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resourceType" ;
                    ] ;
                  sp:predicate edg:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resource from lineageGram graph" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetResourcesOfGivenTypeFromTempGraph
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "activeResource" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "activeResource" ;
                          ] ;
                        sp:predicate edg:activeResource ;
                        sp:subject [
                            sp:varName "node" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
          [
            sp:object [
                sp:varName "myType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "resourceType" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "myType" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "filterFunction" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "filterFunction" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "filterFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "resource" ;
                              ] ;
                            sp:arg3 [
                                sp:varName "filterFunctionArgument" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resource of given type from temp graph" ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetRootSWresources
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "infoAssetEncoded" ;
          ]
          [
            sp:varName "sourceSoftware" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "dataElement" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "sourceSoftware" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "viewFrame" ;
                            ] ;
                          sp:predicate edg:occursIn ;
                          sp:subject [
                              sp:varName "dataElement" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:tempGraphLG ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "dataElement" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataElement" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:encodeNode ;
                sp:arg1 [
                    sp:varName "infoAsset" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAssetEncoded" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get root software resources" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:GetRootSoftwareResourceDependencies
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:GroupConcat ;
            sp:expression [
                a ui:encodeNode ;
                sp:arg1 [
                    sp:varName "infoAssetEncoded" ;
                  ] ;
              ] ;
            sp:separator "," ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate edg:GetRootSWresources ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoAssetEncoded" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "program" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the programs and data elements they depend on." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get root software resource dependencies" ;
  rdfs:subClassOf edg:Functions ;
.
edg:GetSoftwareExecutableDatabaseInputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "table" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "softwareProgram" ;
          ]
          [
            sp:varName "softwareFunctioon" ;
          ]
          [
            sp:varName "serviceEndpoint" ;
          ]
          [
            sp:varName "directMappingsCollection" ;
          ]
          [
            sp:varName "mapping" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "table" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "softwareProgram" ;
          ]
          [
            sp:varName "softwareFunction" ;
          ]
          [
            sp:varName "serviceEndpoint" ;
          ]
          [
            sp:varName "directMappingsCollection" ;
          ]
          [
            sp:varName "mapping" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareProgram" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "softwareProgram" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareProgram" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "softwareFunction" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath edg:usesSoftwareFunction ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareProgram" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "softwareFunction" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "serviceEndpoint" ;
                      ] ;
                    sp:predicate edg:serviceEndpoint ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "directMappingsCollection" ;
                      ] ;
                    sp:predicate edg:mappingsCollection ;
                    sp:subject [
                        sp:varName "serviceEndpoint" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "mapping" ;
                      ] ;
                    sp:predicate edg:mapping ;
                    sp:subject [
                        sp:varName "directMappingsCollection" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "mapping" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "table" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "input" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:tableOf ;
            sp:subject [
                sp:varName "table" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "inputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "input" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Database ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  spin:private true ;
  rdfs:comment "Get software executable inputs for given database for derivation map" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable database inputs" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetSoftwareExecutableEnablements
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "enablement" ;
          ]
          [
            sp:varName "enablementType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "enablement" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 [
                    a sp:AltPath ;
                    sp:path1 [
                        a sp:AltPath ;
                        sp:path1 [
                            a sp:AltPath ;
                            sp:path1 edg:enablesBusinessCapability ;
                            sp:path2 edg:supportsBusinessActivity ;
                          ] ;
                        sp:path2 edg:supportsBusinessCapability ;
                      ] ;
                    sp:path2 edg:supportsBusinessFunction ;
                  ] ;
                sp:path2 edg:supportsParty ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "enablementType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "enablement" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns what a software executable enables or supports." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable enablements" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:BusinessApplicationSelectTemplates ;
.
edg:GetSoftwareExecutableEnterpriseWorkProductOutputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "output" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "outputType" ;
          ]
          [
            sp:varName "frame" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
          [
            sp:varName "case" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct output" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "childItem" ;
                      ] ;
                    sp:predicate [
                        sp:varName "compositionProperty" ;
                      ] ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    sp:object edg:compositionProperty ;
                    sp:predicate rdfs:subPropertyOf ;
                    sp:subject [
                        sp:varName "compositionProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "component output" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct information object" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "outputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "output" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:InformationAsset ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_InfoAssetsFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataSet ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_OutputsFrame ;
                    sp:variable [
                        sp:varName "frame" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct dataset" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Get software executable enterprise workproduct outputs" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable enterprise workproduct outputs" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:EnterpriseWorkSelectTemplates ;
.
edg:GetSoftwareExecutableInputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "input" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "activeInput" ;
          ]
          [
            sp:varName "input" ;
          ]
          [
            sp:varName "inputType" ;
          ]
          [
            sp:varName "myInputType" ;
          ]
          [
            sp:varName "case" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "activeInput" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "softwareType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct input " ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "activeInput" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 [
                            a sp:SeqPath ;
                            sp:path1 [
                                a sp:ModPath ;
                                sp:modMax -1 ;
                                sp:modMin 0 ;
                                sp:subPath edg:usesModule ;
                              ] ;
                            sp:path2 [
                                a sp:AltPath ;
                                sp:path1 edg:hasSoftwareProgram ;
                                sp:path2 edg:usesSoftwareProgram ;
                              ] ;
                          ] ;
                        sp:path2 edg:input ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "softwareType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "program input" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "activeInput" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 [
                            a sp:SeqPath ;
                            sp:path1 [
                                a sp:SeqPath ;
                                sp:path1 [
                                    a sp:ModPath ;
                                    sp:modMax -1 ;
                                    sp:modMin 0 ;
                                    sp:subPath edg:usesModule ;
                                  ] ;
                                sp:path2 [
                                    a sp:AltPath ;
                                    sp:path1 edg:hasSoftwareProgram ;
                                    sp:path2 edg:usesSoftwareProgram ;
                                  ] ;
                              ] ;
                            sp:path2 edg:usesSoftwareFunction ;
                          ] ;
                        sp:path2 edg:input ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "softwareType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "function input" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "serviceEndpoint" ;
                      ] ;
                    sp:predicate edg:serviceEndpoint ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "directMappingsCollection" ;
                      ] ;
                    sp:predicate edg:mappingsCollection ;
                    sp:subject [
                        sp:varName "serviceEndpoint" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "activeInput" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 edg:mapping ;
                        sp:path2 edg:input ;
                      ] ;
                    sp:subject [
                        sp:varName "directMappingsCollection" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "endpoint input" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "activeInput" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                    sp:arg2 edg:tableOf ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeDatabaseAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeDatabaseAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg3 [
                    sp:varName "activeInput" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "input" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "myInputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "input" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:getClassWithPropertyValue ;
                sp:arg1 [
                    sp:varName "myInputType" ;
                  ] ;
                sp:arg2 edg:Asset ;
                sp:arg3 edg:isDepictionType ;
                sp:arg4 true ;
              ] ;
            sp:variable [
                sp:varName "inputType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  spin:private true ;
  rdfs:comment "Get software executable inputs" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable inputs" ;
  rdfs:seeAlso edg:GetSoftwareExecutableOutputs ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetSoftwareExecutableOutputDataAssetsAndInfoAssets
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dataAsset" ;
          ]
          [
            sp:varName "infoAsset" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:output ;
                        sp:path2 edg:producesInformationAsset ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:InformationAsset ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "output" ;
                      ] ;
                    sp:variable [
                        sp:varName "infoAsset" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:Table ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "output" ;
                      ] ;
                    sp:variable [
                        sp:varName "dataAsset" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataSet ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "output" ;
                      ] ;
                    sp:variable [
                        sp:varName "dataAsset" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataContainer ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "output" ;
                      ] ;
                    sp:variable [
                        sp:varName "dataAsset" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataElement ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "output" ;
                      ] ;
                    sp:variable [
                        sp:varName "dataAsset" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the outputs of software executables" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable output data assets and information assets" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetSoftwareExecutableOutputs
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "output" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "outputType" ;
          ]
          [
            sp:varName "outputViewFrame" ;
          ]
          [
            sp:varName "case" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "activeOutput" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_InfoAssetsFrame ;
                    sp:variable [
                        sp:varName "outputViewFrame" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct info output" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "activeOutput" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_OutputsFrame ;
                    sp:variable [
                        sp:varName "outputViewFrame" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "direct data output" ;
                    sp:variable [
                        sp:varName "case" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "myOutputType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "activeOutput" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "activeOutput" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "maybeTableAsset" ;
                      ] ;
                    sp:arg2 edg:tableOf ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "maybeDatabaseAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeDatabaseAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg3 [
                    sp:varName "activeOutput" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "output" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:getClassWithPropertyValue ;
                sp:arg1 [
                    sp:varName "myOutputType" ;
                  ] ;
                sp:arg2 edg:Asset ;
                sp:arg3 edg:isDepictionType ;
                sp:arg4 true ;
              ] ;
            sp:variable [
                sp:varName "outputType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the data outpus and information assets produced by a software executable" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable outputs" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:seeAlso edg:GetSoftwareExecutableInputs ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetSoftwareExecutableWithDependencyOnDataInput
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "softwareDependent" ;
          ]
          [
            sp:varName "softwareDependentType" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "softwareExecutabe" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "bunsinessApplicationType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "softwareExecutabe" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:BusinessApplication ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "bunsinessApplicationType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:BusinessApplication ;
                    sp:variable [
                        sp:varName "softwareDependentType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "softwareExecutabe" ;
                      ] ;
                    sp:variable [
                        sp:varName "softwareDependent" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareProgramType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "softwareExecutabe" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareProgram ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareProgramType" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "softwareExecutabe" ;
                              ] ;
                            sp:predicate edg:usesSoftwareProgram ;
                            sp:subject [
                                sp:varName "businessApplication" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "businessApplication" ;
                              ] ;
                            sp:variable [
                                sp:varName "softwareDependent" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:BusinessApplication ;
                            sp:variable [
                                sp:varName "softwareDependentType" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "softwareExecutabe" ;
                                        ] ;
                                      sp:predicate edg:usesSoftwareProgram ;
                                      sp:subject [
                                          sp:varName "businessApplication" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "softwareExecutabe" ;
                              ] ;
                            sp:variable [
                                sp:varName "softwareDependent" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:SoftwareProgram ;
                            sp:variable [
                                sp:varName "softwareDependentType" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareFunctionType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "softwareExecutabe" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareFunction ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareFunctionType" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "softwareExecutabe" ;
                      ] ;
                    sp:predicate edg:usesSoftwareFunction ;
                    sp:subject [
                        sp:varName "softwareProgram" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "softwareProgram" ;
                              ] ;
                            sp:predicate edg:usesSoftwareProgram ;
                            sp:subject [
                                sp:varName "businessApplication" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "businessApplication" ;
                              ] ;
                            sp:variable [
                                sp:varName "softwareDependent" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:BusinessApplication ;
                            sp:variable [
                                sp:varName "softwareDependentType" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "softwareExecutabe" ;
                                        ] ;
                                      sp:predicate edg:usesSoftwareProgram ;
                                      sp:subject [
                                          sp:varName "businessApplication" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression [
                                sp:varName "softwareProgram" ;
                              ] ;
                            sp:variable [
                                sp:varName "softwareDependent" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:SoftwareProgram ;
                            sp:variable [
                                sp:varName "softwareDependentType" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          edg:SoftwareProgram
                        )
                        (
                          edg:BusinessApplication
                        )
                      ) ;
                    sp:varNames (
                        "softwareDependentType"
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:DataAsset ;
    ] ;
  rdfs:comment "Returns downstream software executables that are directly dependent on given data input. Restricts executables to programs and business applications." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software executable with dependency on data Input" ;
  rdfs:subClassOf edg:DependencySelectTemplates ;
.
edg:GetSoftwareExecutablesOutputs-DEPRECATED
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "informationAsset" ;
          ]
          [
            sp:varName "tableOrViewOrDataset" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "report" ;
          ]
          [
            sp:varName "outputType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate edg:determineOutputType ;
                    sp:subject [
                        sp:varName "output" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "informationAsset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "tableOrViewOrDataset" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "report" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "resource" ;
                      ] ;
                    sp:variable [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "output" ;
                            ] ;
                          sp:predicate edg:output ;
                          sp:subject [
                              sp:varName "software" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "?4" ;
                            ] ;
                          sp:predicate edg:determineOutputType ;
                          sp:subject [
                              sp:varName "output" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "informationAsset" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?4" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "?5" ;
                            ] ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?4" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "tableOrViewOrDataset" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?5" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "?6" ;
                            ] ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?5" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "dataElement" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?6" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "?7" ;
                            ] ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?6" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "report" ;
                            ] ;
                          sp:predicate rdf:first ;
                          sp:subject [
                              sp:varName "?7" ;
                            ] ;
                        ]
                        [
                          sp:object () ;
                          sp:predicate rdf:rest ;
                          sp:subject [
                              sp:varName "?7" ;
                            ] ;
                        ]
                      ) ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  spin:private true ;
  rdfs:comment "?resource edg:getPipelineStepsAndSoftwareExecutables ( ?pipeLine ?pipeLineStep ?software ?output ?outputType ) ." ;
  rdfs:comment "Returns the software executables and data assets that make up the final stage of a lineageGram." ;
  rdfs:label "Get software executables outputs" ;
  rdfs:subClassOf edg:SoftwareExecutableSelectTemplates ;
.
edg:GetSoftwareInput
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "inputEncoded" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "dataElement" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "dataElement" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataElement" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "input" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:encodeNode ;
                sp:arg1 [
                    sp:varName "input" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "inputEncoded" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software input" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:GetSoftwareNodesWithNoDownstreamDependents
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "activeResource" ;
          ]
          [
            sp:varName "nodeViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            a sp:TriplePath ;
                            sp:object true ;
                            sp:path [
                                a sp:AltPath ;
                                sp:path1 edg:hasMoreDownstream ;
                                sp:path2 edg:hasKnownDependenciesDownstream ;
                              ] ;
                            sp:subject [
                                sp:varName "node" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  sp:object edg:VF_SoftwareFrame ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "nodeViewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "activeResource" ;
                          ] ;
                        sp:predicate edg:activeResource ;
                        sp:subject [
                            sp:varName "node" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
          [
            sp:object [
                sp:varName "myType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:SoftwareExecutable ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "myType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the last stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software nodes with no downstream dependents" ;
  rdfs:seeAlso edg:GetSoftwareNodesWithNoUpstreamDependencies ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetSoftwareNodesWithNoUpstreamDependencies
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "activeResource" ;
          ]
          [
            sp:varName "nodeViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object true ;
                            sp:predicate edg:hasMoreUpstream ;
                            sp:subject [
                                sp:varName "node" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "nodeViewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Values ;
                  sp:bindings (
                      (
                        edg:VF_SoftwareFrame
                      )
                      (
                        edg:VF_TargetFrame
                      )
                    ) ;
                  sp:varNames (
                      "nodeViewFrame"
                    ) ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "node" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "activeResource" ;
                          ] ;
                        sp:predicate edg:activeResource ;
                        sp:subject [
                            sp:varName "node" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
          [
            sp:object [
                sp:varName "myType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:SoftwareExecutable ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "myType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the first stage of processing" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get software nodes with no upstream dependencies" ;
  rdfs:seeAlso edg:GetSoftwareNodesWithNoDownstreamDependents ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetSourceSoftwareExecutable
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "sourceSW" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "sourceSW" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "sourceSW" ;
                      ] ;
                    sp:predicate edg:dependsOnDataFrom ;
                    sp:subject spin:_arg1 ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "sourceSW" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject spin:_arg1 ;
                  ]
                )
                (
                  (
                    [
                      sp:object [
                          sp:varName "pipeLine" ;
                        ] ;
                      sp:predicate edg:usesPipeline ;
                      sp:subject spin:_arg1 ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a edg:getLastPipelineStepOfPipeline ;
                          arg:pipeline [
                              sp:varName "pipeLine" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "lastPipeLineStep" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "lastPipeLineStep" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "sourceSW" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject [
                        sp:varName "lastPipeLineStep" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "softwareExecutableType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sourceSW" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:SoftwareProgram ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "softwareExecutableType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Used by a LineageGram to find software executables that generate outputs that a given software executable uses as inputs. Excludes software functions because these are shown when a dependency is drilled-into as a \"Derviation Map\".  Software executables that are directly depended upon are also returned." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get source software executable" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:GetSourcesForPropertyAndResource
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "source" ;
          ]
          [
            sp:varName "sourceType" ;
          ]
          [
            sp:varName "aProperty" ;
          ]
          [
            sp:varName "sourceViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "aProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate [
                sp:varName "aProperty" ;
              ] ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceType" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object edg:VFS_LG-LineageModel ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object 0 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate edg:getViewframeForDepictionClass ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceViewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns sources of a given resource and property and its sub-properties." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get sources for property and resource" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetTableProvenance
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependency" ;
          ]
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "countOfMappings" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              a sp:TriplePath ;
                              sp:object provo:wasDerivedFrom ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdfs:subPropertyOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "property" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependency" ;
                                ] ;
                              sp:predicate [
                                  sp:varName "property" ;
                                ] ;
                              sp:subject [
                                  sp:varName "resource" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependencyClass" ;
                                ] ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "dependency" ;
                                ] ;
                            ]
                            [
                              a sp:TriplePath ;
                              sp:object provo:Entity ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 1 ;
                                  sp:subPath rdfs:subClassOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "dependencyClass" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              sp:object [
                                  sp:varName "resource" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "anotherColumn" ;
                                ] ;
                              sp:predicate edg:mapsToColumn ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependency" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "anotherColumn" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression edg:mapsToColumn ;
                              sp:variable [
                                  sp:varName "property" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:SubQuery ;
                    sp:query [
                        a sp:Select ;
                        sp:distinct true ;
                        sp:groupBy (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                          ) ;
                        sp:resultVariables (
                            [
                              sp:varName "dependency" ;
                            ]
                            [
                              sp:varName "property" ;
                            ]
                            [
                              sp:expression [
                                  a sp:Count ;
                                  sp:expression [
                                      sp:varName "sofwareFunction" ;
                                    ] ;
                                ] ;
                              sp:varName "countOfMappings" ;
                            ]
                          ) ;
                        sp:where (
                            [
                              sp:object [
                                  sp:varName "resource" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "column" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "column" ;
                                ] ;
                              sp:predicate edg:output ;
                              sp:subject [
                                  sp:varName "sofwareFunction" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "anotherColumn" ;
                                ] ;
                              sp:predicate edg:input ;
                              sp:subject [
                                  sp:varName "sofwareFunction" ;
                                ] ;
                            ]
                            [
                              sp:object [
                                  sp:varName "dependency" ;
                                ] ;
                              sp:predicate edg:columnOf ;
                              sp:subject [
                                  sp:varName "anotherColumn" ;
                                ] ;
                            ]
                            [
                              a sp:Bind ;
                              sp:expression edg:derivedByFunction ;
                              sp:variable [
                                  sp:varName "property" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:Table ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the provenance of a table." ;
  rdfs:label "Get table proevenance" ;
  rdfs:subClassOf edg:DerivationMapSelectTemplates ;
.
edg:GetTableToTableDirectMappingDetails
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "sourceColumn" ;
              ] ;
          ]
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "targetColumn" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "sourceColumn" ;
          ]
          [
            sp:varName "targetColumn" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "target" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "targetColumn" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceColumn" ;
              ] ;
            sp:predicate edg:mapsToColumn ;
            sp:subject [
                sp:varName "targetColumn" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "source" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "sourceColumn" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:source ;
      spl:valueType edg:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:target ;
      spl:valueType edg:Table ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the direct mappings of one table to another." ;
  rdfs:label "Get table direct mapping details" ;
  rdfs:seeAlso edg:GetTableToTableFunctionalMappingDetails ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetTableToTableFunctionalMappingDetails
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "sourceColumn" ;
              ] ;
          ]
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "targetColumn" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "softwareFunction" ;
          ]
          [
            sp:varName "sourceColumn" ;
          ]
          [
            sp:varName "targetColumn" ;
          ]
          [
            sp:varName "softwareFunctionType" ;
          ]
          [
            sp:varName "softwareFunctionLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "target" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "targetColumn" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetColumn" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "softwareFunction" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceColumn" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "softwareFunction" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "source" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "sourceColumn" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "softwareFunctionType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "softwareFunction" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "softwareFunctionLabel" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "softwareFunction" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:source ;
      spl:valueType edg:Table ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:target ;
      spl:valueType edg:Table ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns the functional mappings of one table to another." ;
  rdfs:label "Get table functional mapping details" ;
  rdfs:seeAlso edg:GetTableToTableDirectMappingDetails ;
  rdfs:subClassOf edg:LineageGraphSelectTemplates ;
.
edg:GetTargetsForResourceAndProperty
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "target" ;
          ]
          [
            sp:varName "targetType" ;
          ]
          [
            sp:varName "aProperty" ;
          ]
          [
            sp:varName "targetViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "aProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "target" ;
              ] ;
            sp:predicate [
                sp:varName "aProperty" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "target" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetType" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object edg:VFS_LG-LineageModel ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object 0 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate edg:getViewframeForDepictionClass ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetViewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns targets of a given resource and property and its sub-properties." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get targets for resource and property" ;
  rdfs:seeAlso edg:GetLineageGramFinalSoftwareExecutablesAndDataAssets ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:GetUpstreamDependencies
  rdfs:seeAlso edg:GetDownstreamDependents ;
.
edg:GetViewFrameResourceNodePropertyValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate edg:diagramNodeName ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nodeName" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nodeOccurrence" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "value" ;
                    ] ;
                  sp:predicate [
                      sp:varName "property" ;
                    ] ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  ui:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get view frame resource node with property value" ;
  rdfs:subClassOf edg:Functions ;
.
edg:ImpactAction
  a swa:VisualizationAction ;
  arg:appName "Editor" ;
  arg:condition [
      a edg:isSupportedImpactDiagramType ;
      arg:resource [
          sp:varName "resource" ;
        ] ;
    ] ;
  arg:iconClass "neighborgram-icon" ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI  + '&_viewClass=edg:ImpactDiagramPage' + '&focusNode=' + escape(resourceURI)   + '&graph=' + swa.queryGraphURI + '&viewFramesGraph=http://edg.topbraidlive.org/1.0/config/diagrams')" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Impact ..." ;
.
edg:ImpactDiagramButton
  a ui:ViewElement ;
  ui:overrides saf:ImpactDiagramButtonPlaceholder ;
  ui:prototype """
<ui:group let:graphClosure=\"{= teamwork:unionGraphForCurrentUser() }\">
    <div>
        <ui:if ui:condition=\"{= edg:isSupportedImpactDiagramType(?resource) }\">
            <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
                <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?homeGraph) }\" let:graphURI=\"{= URI(?homeGraph) }\">
                    <ui:group let:uri=\"{= teamwork:queryGraph(true, ?graphId, ?none, smf:currentUserName()) }\">
                        <button class=\"downstream-dependency-icon\" data-graph-uri=\"{= ?graphClosure }\" data-resource=\"{= ?resource }\" title=\"Downstream Traceability Diagram\"/>
                    </ui:group>
                </ui:group>
            </ui:group>
        </ui:if>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf saf:ImpactDiagramButtonPlaceholder ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:ImpactDiagramPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <!--ui:dumpScope ui:message=\"AAA: ImpactDiagramPage\"/-->
    <ui:resourceView arg:graph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"impact-diagram\" ui:resource=\"{= ?focusNodeURI }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Impact diagram page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:ImpactGramServices
  a ui:NodeClass ;
  a ui:Service ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "ImpactGram services" ;
  rdfs:subClassOf edg:JSONServices ;
.
edg:InformationAsset
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-application\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA2: edg:InformationAsset from {= ?this } to {= ?rightNode }\"/-->
    <edg:GenericNodeToNodeMapDetails arg:explanation=\"Generated by edg:InformationAsset from {= ?this } to {= ?rightNode }\" arg:leftNode=\"{= ?leftNode }\" arg:link=\"input\" arg:reverseNodes=\"{= true }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:JSONServices
  a ui:Service ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "JSONServices" ;
  rdfs:subClassOf ui:JSONServices ;
.
edg:LGviewFramesTest
  a ui:Function ;
  ui:prototype """
<ui:group let:result=\"[{'id':'dataPanel','label':'Tables','borderColor':'#23b0f4','backgroundColor':'#f4f4ff','acceptedTypes':['table'],'spaceShare':1},{'id':'viewFrame','label':'Applications','borderColor':'violet','backgroundColor':'#f4fff4','acceptedTypes':['app','unknown'],'spaceShare':4},{'id':'formColumnPanel','label':'Columns','borderColor':'red','backgroundColor':'#fff4f4','acceptedTypes':['formColumn'],'spaceShare':1},{'id':'formPanel','label':'Forms','borderColor':'orange','backgroundColor':'#fff4f4','acceptedTypes':['form'],'spaceShare':1}]\">
    <ui:return ui:result=\"{= ?result }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "LG view frames test" ;
  rdfs:subClassOf edg:UIfunctions ;
.
edg:LGviewFramesTest2
  a ui:Function ;
  ui:prototype """
<ui:group let:result=\"[{'id':'dataPanel','label':'Tables','borderColor':'#23b0f4','backgroundColor':'#f4f4ff','acceptedTypes':['table'],'spaceShare':1},{'id':'viewFrame','label':'Applications','borderColor':'violet','backgroundColor':'#f4fff4','acceptedTypes':['app','unknown'],'spaceShare':4},{'id':'formPanel','label':'Forms','borderColor':'orange','backgroundColor':'#fff4f4','acceptedTypes':['form'],'spaceShare':1}]\">
    <ui:return ui:result=\"{= ?result }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "LG view frames test 2" ;
  rdfs:subClassOf edg:UIfunctions ;
.
edg:LineageAction
  a swa:VisualizationAction ;
  arg:appName "Editor" ;
  arg:condition [
      a edg:isSupportedLineageType ;
      arg:resource [
          sp:varName "resource" ;
        ] ;
    ] ;
  arg:iconClass "neighborgram-icon" ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI  + '&_viewClass=edg:LineageGramPage' + '&focusNode=' + escape(resourceURI)   + '&graph=' + swa.queryGraphURI + '&viewFramesGraph=http://edg.topbraidlive.org/1.0/config/diagrams')" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Lineage ..." ;
.
edg:LineageGramContinuationServices
  a ui:Service ;
  dash:abstract true ;
  ui:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Lineage gram continuation services" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:LineageGramHeader
  a ui:NodeClass ;
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "Title to display in the header" ;
    ] ;
  ui:prototype """
<teamwork:Header>
    <span id=\"selectedNode\" title=\"{= ?title }\">{= ?title }</span>
</teamwork:Header>
"""^^ui:Literal ;
  rdfs:comment "A version of teamwork:Header that displays a title inside an element with the HTML id \"selectedNode\"." ;
  rdfs:label "LineageGram header" ;
  rdfs:subClassOf edg:Elements ;
.
edg:LineageGramLayout
  a edg:AssetDiagram ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Lineage gram layout" ;
.
edg:LineageGramPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <ui:resourceView arg:graph=\"{= ?graph }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"lineagegram\" ui:resource=\"{= ?focusNodeURI }\"/>
    <!--edg:LineageGramTemplate arg:graph=\"{= ?dataGraph }\" ui:args=\"*\">
<ui:insert ui:into=\"header\">
<edg:LineageGramHeader arg:title=\"LineageGram&trade; for {= ui:label(?focusNode) }\"/>
</ui:insert>
</edg:LineageGramTemplate-->
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:LineageGramPane
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:sessionGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A graph for session information" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:headIncludes """
<ui:group>
    <meta content=\"IE=Edge,chrome=1\" http-equiv=\"X-UA-Compatible\"/>
    <meta charset=\"utf-8\"/>
    <link href=\"{= ui:lib() }/assets/lib/visualizations-library/css/main.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <script src=\"{= ui:lib() }/assets/build/lib/gram-common/vendors.bundle.js\"/>
    <link href=\"{= ui:lib() }/assets/lib/lineagegram/css/main.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <script src=\"{= ui:lib() }/assets/lib/lineagegram/js/main.min.js\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group>
    <ui:group let:setResult1=\"{= ui:setSessionAttribute(&quot;viewframes-structure&quot;, ui:encodeNode(?viewFrameStructure)) }\" let:setResult2=\"{= ui:setSessionAttribute(&quot;viewframes-graph&quot;, str(?viewFramesGraph)) }\"/>
    <div class=\"tq-lg\">
        <div class=\"tq-lg_column\">
            <div class=\"tq-lg_column_graph-row\">
                <div class=\"tq-lg_column_graph-row__graph\" id=\"lineageGram\"/>
            </div>
            <div id=\"tqLgDefaultUI\"/>
        </div>
    </div>
    <ui:group let:ctag=\"{= COALESCE(teamwork:currentTag(), ?none) }\" let:viewFrames=\"{= edg:BuildJSONforLineageGramViewFrames(?viewFramesGraph, ?viewFrameStructure) }\">
        <script>swa.lineagegram = {
			viewClass: \"{= ?dataProvider }\",
			graph: \"{= ?graph }\",
			focusNode: \"{= spif:encodeURL(str(?focusNode)) }\",
			reach: \"{= COALESCE(?reach, 10) }\" ,
			breadth: \"{= COALESCE(?breadth, 10) }\" ,
			resourcePath: \"{= ui:lib() }/assets/lib/lineagegram/resources/\",
			viewframes: {= ?viewFrames },
editorLink:\"{= teamwork:editorLink(ui:graphWithoutImports(ui:currentQueryGraph()), ?none, ?ctag) }\"
		};

		swa.queryGraphURI=\"{= ui:currentQueryGraph() }\"</script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:LineageGramServices
  a ui:NodeClass ;
  a ui:Service ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "LineageGram services" ;
  rdfs:subClassOf edg:JSONServices ;
.
edg:LineageGramTempGraphServices
  a ui:Service ;
  rdfs:label "Lineage gram temp graph services" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:LineageGramTemplate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>LineageGram&trade;</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:headerLabelFunction=\"{= teamwork:NeighborGramHeaderLabelFunction }\" ui:varName=\"swaAppName\" ui:varValue=\"LineageGram\">
    <div class=\"ui-layout-north\" id=\"headerPanel\">
        <ui:insertionPoint ui:pointId=\"header\"/>
    </div>
    <div class=\"ui-layout-center\" id=\"center-pane\">
        <edg:LineageGramPane arg:dataProvider=\"{= ?dataProvider }\" arg:focusNode=\"{= ?focusNode }\" arg:graph=\"{= ?graph }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFrameStructure=\"{= ?viewFrameStructure }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\"/>
    </div>
    <script>var layout;
$(document).ready(function () {
layout = $('body').layout({
applyDefaultStyles: true,
defaults: {
resizable: true,
slidable: true
},
north: {
closable: false,
pane_spacing: 0,
resizable: false,
slidable: false,
spacing_open: 0,
togglerLength_open: 0
},
center: {},
east: {
size: window.innerWidth * 0.25
}
});
});</script>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:LineageGraphSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Lineage graph select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:LineageModel
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-business-activity\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA3: edg:LineageModel {= ?this } to {= ?rightNode }\"/-->
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:MagicProperties
  a spin:MagicProperty ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "EDG Magic properties" ;
  rdfs:subClassOf spin:MagicProperties ;
.
edg:MakeDerivationMapLink
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:source ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:target ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphDM {
                    ?link a edg:DerivationMapLink .
                    ?link edg:label ?label .
                    ?link edg:id ?linkId .
                    ?link edg:source ?sourceAsEncodedString .
                    ?link edg:target ?targetAsEncodedString .
                } .
            }
            WHERE {
                BIND (CONCAT(&quot;LINK_&quot;, ?id) AS ?linkId) .
                BIND (IRI(CONCAT(&quot;http://edg.topbraid.solutions/model/&quot;, ?linkId)) AS ?link) .
                BIND (ENCODE_FOR_URI(str(?source)) AS ?sourceAsEncodedString) .
                BIND (ENCODE_FOR_URI(str(?target)) AS ?targetAsEncodedString) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make derivation map link" ;
  rdfs:subClassOf edg:DerivationMapTempGraphServices ;
.
edg:MakeDerivationMapNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:collapsed ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:occurrence ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphDM {
                    ?derivationMapNode a edg:DerivationMapNode .
                    ?derivationMapNode arg:node ?node .
                    ?derivationMapNode arg:collapsed ?collapsed .
                    ?derivationMapNode arg:label ?label .
                    ?derivationMapNode arg:parent ?parent .
                    ?derivationMapNode arg:icon ?icon .
                    ?derivationMapNode arg:resource ?resource .
                    ?derivationMapNode arg:occurrence ?occurrence .
                    ?derivationMapNode arg:resourceType ?resourceType .
                } .
            }
            WHERE {
                BIND (CONCAT(&quot;NODE_&quot;, str(?node)) AS ?nodeId) .
                BIND (IRI(CONCAT(&quot;http://edg.topbraid.solutions/model/&quot;, ?nodeId)) AS ?derivationMapNode) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make derivation map node" ;
  rdfs:seeAlso edg:GetNodesFromDerivationMapGraph ;
  rdfs:subClassOf edg:DerivationMapTempGraphServices ;
.
edg:MakeDerivationMapNodesForDatabaseTableCompositeNode
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:downstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:upstreamNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:ultimateParent=\"{= ?parent }\">
    <ui:group let:database=\"{= spl:object(?node, edg:tableOf) }\" let:schema=\"{= spl:object(?node, edg:belongsToSchema) }\">
        <ui:if ui:condition=\"{= bound(?database) }\">
            <ui:group let:server=\"{= spl:object(?database, edg:hostedOn) }\">
                <ui:if ui:condition=\"{= bound(?server) }\">
                    <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?server) }\" arg:node=\"{= ?server }\" arg:parent=\"{= ?ultimateParent }\"/>
                    <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?server }\"/>
                </ui:if>
                <ui:else>
                    <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?database) }\" arg:node=\"{= ?database }\" arg:parent=\"{= ?ultimateParent }\"/>
                </ui:else>
                <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?table) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?database }\"/>
            </ui:group>
        </ui:if>
        <ui:elseif ui:condition=\"{= bound(?schema) }\">
            <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?schema) }\" arg:node=\"{= ?schema }\" arg:parent=\"{= ?ultimateParent }\"/>
            <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?schema }\"/>
        </ui:elseif>
        <ui:else>
            <edg:MakeDerivationMapNode arg:label=\"{= ui:label(?node) }\" arg:node=\"{= ?node }\" arg:parent=\"{= ?ultimateParent }\"/>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make derivation map nodes for database table composite node" ;
  rdfs:subClassOf edg:DerivationMapServicesForCompositeNodes ;
.
edg:MakeLineageGramLinkName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "linkName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a edg:normalizeResourceString ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 "~~" ;
                sp:arg3 [
                    a edg:normalizeResourceString ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "linkName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "resource QName" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make lineage gram link name" ;
  rdfs:subClassOf edg:Functions ;
.
edg:MakeLineageGramNodeAndLinks
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:call arg:resource=\"{= ?focusNode }\" ui:template=\"{= edg:GetLineageGramOutputs }\" ui:varName=\"outputs\">
        <ui:forEach ui:resultSet=\"{= ?outputs }\">
            <edg:MakeViewFrameResourceNodeAndLinks edg:resource=\"{= ?focusNode }\" edg:targetNode=\"{= ?output }\" edg:targetViewFrame=\"{= ?frame }\" edg:viewFrame=\"{= edg:VF_SoftwareFrame }\"/>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Make lineageGram node and links" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeLineageGramNodeAndLinksForInformationAssets
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group>
    <!-- the if statement below may in the future test an option -->
    <ui:if ui:condition=\"{= true }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?resultSet) }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:MakeLineageGramNodeAndLinksForInformationAssets - {= str(?resource) }\"/-->
            <!--ui:dumpResultSet ui:message=\"AAA2: edg:MakeLineageGramNodeAndLinksForInformationAssets - {= str(?resource) }\"
  ui:resultSet=\"{= ?resultSet }\"/-->
            <ui:forEach ui:resultSet=\"{= ?resultSet }\">
                <ui:if ui:condition=\"{= true }\">
                    <edg:MakeSingleViewFrameResourceOccurrence edg:activeResource=\"{= ?output }\" edg:resource=\"{= ?output }\" edg:viewFrame=\"{= ?frame }\"/>
                    <edg:MakeViewFrameResourceNodeLink arg:property=\"{= edg:output }\" edg:compositionProperty=\"{= ?compositionProperty }\" edg:dependencyType=\"{= edg:DEPTYPE_INFO-OUTPUT }\" edg:explanation=\"{= ?resource } property {= ?compositionProperty }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?output }\" edg:targetViewFrame=\"{= ?frame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
                </ui:if>
                <!-- TBD: make this optional? For now set to false -->
                <ui:if ui:condition=\"{= false }\">
                    <ui:call arg:property=\"{= edg:requiresInformationAsset }\" arg:resource=\"{= ?output }\" ui:template=\"{= edg:getSubjectWithGivenPropertyToObject }\" ui:varName=\"infoAssetSources\">
                        <!--ui:dumpResultSet ui:message=\"AAA3: edg:MakeLineageGramNodeAndLinksForInformationAssets\"
  ui:resultSet=\"{= ?infoAssetSources }\"/-->
                        <ui:if ui:condition=\"{= !spr:isEmpty(?infoAssetSources) }\">
                            <edg:MakeSingleViewFrameResourceOccurrence edg:activeResource=\"{= ?output }\" edg:resource=\"{= ?output }\" edg:viewFrame=\"{= ?frame }\"/>
                            <ui:forEach ui:resultSet=\"{= ?infoAssetSources }\">
                                <edg:MakeSingleViewFrameResourceOccurrence edg:activeResource=\"{= ?subject }\" edg:resource=\"{= ?subject }\" edg:viewFrame=\"{= ?subjectViewFrame }\"/>
                                <edg:MakeViewFrameResourceNodeLink arg:property=\"{= edg:requiresInformationAsset }\" edg:dependencyType=\"{= edg:DEPTYPE_INFO-INPUT }\" edg:explanation=\"{= ?subject } requires {= ?output }\" edg:resource=\"{= ?output }\" edg:targetNode=\"{= ?subject }\" edg:targetViewFrame=\"{= ?subjectViewFrame }\" edg:viewFrame=\"{= edg:VF_InfoAssetsFrame }\"/>
                            </ui:forEach>
                        </ui:if>
                    </ui:call>
                </ui:if>
            </ui:forEach>
        </ui:if>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Make lineageGram node and links for information assets" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:MakeLineageGramNodeAndLinksForLastSoftwareExecutables
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group let:mySourceViewFrame=\"{= COALESCE(?sourceViewFrame, edg:VF_SoftwareFrame) }\">
    <ui:if ui:condition=\"{= bound(?resultSet) &amp;&amp; (!spr:isEmpty(?resultSet)) }\">
        <edg:SetViewFrameResourceNodePropertyValue arg:property=\"{= edg:hasKnownOutputs }\" arg:value=\"{= true }\" edg:resource=\"{= ?focusNode }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
        <edg:SetViewFrameResourceNodePropertyValue arg:property=\"{= edg:hasKnownComposition }\" arg:value=\"{= true }\" edg:resource=\"{= ?focusNode }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
        <ui:forEach ui:resultSet=\"{= ?resultSet }\">
            <ui:if ui:condition=\"{= bound(?report) }\">
                <!--ui:dumpScope ui:message=\"AAA: MakeLineageGramNodeAndLinksForLastSoftwareExecutables\"/-->
                <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?report }\" edg:viewFrame=\"{= edg:VF_InfoAssetsFrame }\"/>
                <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_INFO-OUTPUT }\" edg:explanation=\"Created By edg:MakeLineageGramNodeAndLinksForLastSoftwareExecutables\" edg:resource=\"{= ?software }\" edg:targetNode=\"{= ?report }\" edg:targetViewFrame=\"{= edg:VF_InfoAssetsFrame }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
            </ui:if>
            <ui:elseif ui:condition=\"{= bound(?informationAsset) }\">
                <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?informationAsset }\" edg:viewFrame=\"{= edg:VF_InfoAssetsFrame }\"/>
                <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_INFO-OUTPUT }\" edg:explanation=\"Created By edg:MakeLineageGramNodeAndLinksForLastSoftwareExecutables\" edg:resource=\"{= ?software }\" edg:targetNode=\"{= ?informationAsset }\" edg:targetViewFrame=\"{= edg:VF_InfoAssetsFrame }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
            </ui:elseif>
            <ui:elseif ui:condition=\"{= bound(?tableOrViewOrDataset) }\">
                <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?tableOrViewOrDataset }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\"/>
                <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_INFO-OUTPUT }\" edg:explanation=\"Created By edg:MakeLineageGramNodeAndLinksForLastSoftwareExecutables\" edg:resource=\"{= ?software }\" edg:targetNode=\"{= ?tableOrViewOrDataset }\" edg:targetViewFrame=\"{= edg:VF_ResourcesFrame }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
            </ui:elseif>
            <ui:elseif ui:condition=\"{= bound(?dataElement) }\">
                <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?dataElement }\" edg:viewFrame=\"{= edg:VF_OutputsFrame }\"/>
                <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_DATA-OUTPUT }\" edg:explanation=\"Created By edg:MakeLineageGramNodeAndLinksForLastSoftwareExecutables\" edg:resource=\"{= ?software }\" edg:targetNode=\"{= ?dataElement }\" edg:targetViewFrame=\"{= edg:VF_OutputsFrame }\" edg:viewFrame=\"{= ?mySourceViewFrame }\"/>
            </ui:elseif>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Builds lineageGram node and links for last software executables and their dependencies." ;
  rdfs:label "Make lineageGram node and links for last software executables" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:MakeLineageGramNodeAndLinksForReports
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?resultSet) &amp;&amp; (!spr:isEmpty(?resultSet)) }\">
        <ui:forEach ui:resultSet=\"{= ?resultSet }\">
            <ui:if ui:condition=\"{= bound(?report) }\">
                <!--ui:dumpScope ui:message=\"AAA: edg:MakeLineageGramNodeAndLinksForReports\"/-->
                <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?report }\" edg:viewFrame=\"{= edg:VF_InfoAssetsFrame }\"/>
                <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_INFO-OUTPUT }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?report }\" edg:targetViewFrame=\"{= edg:VF_InfoAssetsFrame }\" edg:viewFrame=\"{= edg:VF_SoftwareFrame }\"/>
            </ui:if>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Make lineageGram node and links for reports" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:MakeLineageGramNodeName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "nodeName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a edg:normalizeResourceString ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 "~~" ;
                sp:arg3 [
                    a afn:localname ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nodeName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "resource QName" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType edg:ViewFrame ;
      rdfs:comment "view frame" ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make lineage gram node name" ;
  rdfs:subClassOf edg:Functions ;
.
edg:MakeNodeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a ui:label ;
                    sp:arg1 [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 edg:name ;
                      ] ;
                  ] ;
                sp:arg2 ": " ;
                sp:arg3 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make lineage gram node name" ;
  rdfs:subClassOf edg:Functions ;
.
edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxTierNodeCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:group let:myViewFrameStructure=\"{= COALESCE(?viewFrameStructure, edg:VFS_LG-ProvenanceModel) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs\"/-->
        <ui:call ui:template=\"{= edg:GetSoftwareNodesWithNoUpstreamDependencies }\" ui:varName=\"softwareExecutables\">
            <!--ui:dumpResultSet ui:message=\"AAA1 - MakeResourceNodesAndLinksForSoftwareExecutableInputs\"
  ui:resultSet=\"{= ?softwareExecutables }\"/-->
            <ui:if ui:condition=\"{= !spr:isEmpty(?softwareExecutables) }\">
                <ui:forEach ui:resultSet=\"{= ?softwareExecutables }\">
                    <ui:call arg:software=\"{= ?activeResource }\" ui:template=\"{= edg:GetSoftwareExecutableInputs }\" ui:varName=\"inputs\">
                        <!--ui:dumpResultSet ui:message=\"AAA2 - MakeResourceNodesAndLinksForSoftwareExecutableInputs - {= ?resource }\"
  ui:resultSet=\"{= ?inputs }\"/-->
                        <ui:forEach ui:resultSet=\"{= ?inputs }\">
                            <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_DATA-INPUT }\" edg:explanation=\"Case {= ?case } in edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs\" edg:resource=\"{= ?input }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= ?nodeViewFrame }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\"/>
                            <edg:DetermineProvenanceForAsset arg:focusNode=\"{= ?input }\" edg:breadth=\"{= ?breadth }\" edg:offset=\"{= ?offset }\" edg:reach=\"{= ?reach - 1 }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\" edg:viewFrameStructure=\"{= ?myViewFrameStructure }\"/>
                        </ui:forEach>
                    </ui:call>
                </ui:forEach>
            </ui:if>
        </ui:call>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  vaem:todo "Is this the same as edg:MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables?" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make resource nodes and links for first stage software inputs" ;
  rdfs:seeAlso edg:MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= true }\">
        <ui:call arg:filterFunction=\"{= edg:softwareHasNoUpstreamSoftwareDependencies }\" arg:filterFunctionArgument=\"{= edg:VF_SoftwareFrame }\" arg:resourceType=\"{= edg:SoftwareExecutable }\" edg:viewFrame=\"{= edg:VF_SoftwareFrame }\" ui:template=\"{= edg:GetResourcesOfGivenTypeFromTempGraph }\" ui:varName=\"softwareExecutables\">
            <!--ui:dumpScope ui:message=\"AAA1 - MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables\"/-->
            <!--ui:dumpResultSet ui:message=\"AAA2 - MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables\"
  ui:resultSet=\"{= ?softwareExecutables }\"/-->
            <ui:if ui:condition=\"{= !spr:isEmpty(?softwareExecutables) }\">
                <ui:forEach ui:resultSet=\"{= ?softwareExecutables }\">
                    <ui:call arg:software=\"{= ?activeResource }\" ui:template=\"{= edg:GetSoftwareExecutableInputs }\" ui:varName=\"inputs\">
                        <!--ui:dumpResultSet ui:message=\"AAA3 - MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables - {= ?activeResource }\"
  ui:resultSet=\"{= ?inputs }\"/-->
                        <ui:forEach ui:resultSet=\"{= ?inputs }\">
                            <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?input }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\"/>
                            <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_DATA-INPUT }\" edg:explanation=\"{= CONCAT(&quot;MakeResourceNodesAndLinksForInputsOfFirstSoftwareExecutables, &quot;, ?case) }\" edg:resource=\"{= ?input }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= edg:VF_SoftwareFrame }\" edg:viewFrame=\"{= edg:VF_ResourcesFrame }\"/>
                        </ui:forEach>
                    </ui:call>
                </ui:forEach>
            </ui:if>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  vaem:todo "Is this the same as edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs?" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make resource nodes and links for inputs of first software executables" ;
  rdfs:seeAlso edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxTierNodeCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myBreadth=\"{= COALESCE(?breadth, 10) }\" let:myOffset=\"{= COALESCE(?offset, 0) }\" let:mySourceViewframe=\"{= COALESCE(?sourceViewFrame, edg:VF_SoftwareFrame) }\" let:myTargetViewframe=\"{= edg:VF_OutputsFrame }\">
    <ui:group let:myViewFrameStructure=\"{= COALESCE(?viewFrameStructure, edg:VFS_LG-ProvenanceModel) }\">
        <!--ui:dumpScope ui:message=\"AAA1: edg:MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs\"/-->
        <ui:call ui:template=\"{= edg:GetSoftwareNodesWithNoDownstreamDependents }\" ui:varName=\"softwareExecutables\">
            <!--ui:dumpResultSet ui:message=\"AAA1 - MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs\"
  ui:resultSet=\"{= ?softwareExecutables }\"/-->
            <ui:if ui:condition=\"{= !spr:isEmpty(?softwareExecutables) }\">
                <ui:forEach ui:resultSet=\"{= ?softwareExecutables }\">
                    <ui:call arg:software=\"{= ?activeResource }\" ui:template=\"{= edg:GetSoftwareExecutableOutputs }\" ui:varName=\"outputs\">
                        <!--ui:dumpResultSet ui:message=\"AAA2 - MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs - {= ui:label(?resource) }\"
  ui:resultSet=\"{= ?outputs }\"/-->
                        <ui:forEach ui:resultSet=\"{= ?outputs }\">
                            <!--ui:dumpScope ui:message=\"AAA2: edg:MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs - {= ?output }\"/-->
                            <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_DATA-INPUT }\" edg:explanation=\"edg:MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs\" edg:resource=\"{= ?activeResource }\" edg:targetNode=\"{= ?output }\" edg:targetViewFrame=\"{= ?outputViewFrame }\" edg:viewFrame=\"{= ?nodeViewFrame }\"/>
                            <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?output }\" edg:viewFrame=\"{= ?outputViewFrame }\"/>
                            <!-- maybe there needs to be an edg:DetermineImpactOfAsset to replace what is below-->
                            <!--edg:DetermineProvenanceForAsset arg:focusNode=\"{= ?input }\"
 edg:breadth=\"{= ?breadth }\"
 edg:offset=\"{= ?offset }\"
 edg:reach=\"{= ?reach - 1 }\"
 edg:viewFrame=\"edg:VF_ResourcesFrame\"
 edg:viewFrameStructure=\"{= ?myViewFrameStructure }\"/-->
                        </ui:forEach>
                    </ui:call>
                    <ui:call arg:software=\"{= ?activeResource }\" ui:limit=\"{= ?myBreadth }\" ui:offset=\"{= ?myOffset + ?myBreadth }\" ui:template=\"{= edg:GetSoftwareExecutableOutputs }\" ui:varName=\"maybeMoreFanoutResults\">
                        <edg:DetermineNeedForMoreFanOutPlaceholderNode arg:resource=\"{= ?activeResource }\" arg:resultSet=\"{= ?maybeMoreFanoutResults }\" edg:breadth=\"{= ?myBreadth }\" edg:explanation=\"MakeResourceNodesAndLinksForLastStageSoftwareExecutableOutputs\" edg:offset=\"{= ?myOffset }\" edg:targetViewFrame=\"{= ?mySourceViewframe }\" edg:viewFrame=\"{= ?mySourceViewframe }\"/>
                    </ui:call>
                </ui:forEach>
            </ui:if>
        </ui:call>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make resource nodes and links for last stage software inputs" ;
  rdfs:seeAlso edg:MakeResourceNodesAndLinksForFirstStageSoftwareExecutableInputs ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeResourceNodesAndLinksForNonGeneratedRequiredInformationAssets
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:sourceViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:call arg:resourceType=\"{= ?resourceType }\" edg:viewFrame=\"{= ?targetViewFrame }\" ui:template=\"{= edg:GetResourcesOfGivenTypeFromTempGraph }\" ui:varName=\"targets\">
        <!--ui:dumpScope ui:message=\"AAA1 - MakeResourceNodesAndLinksForNonGeneratedRequiredInformatioAssets\"/-->
        <!--ui:dumpResultSet ui:message=\"AAA2 - MakeResourceNodesAndLinksForNonGeneratedRequiredInformatioAssets - {= ui:label(?resourceType) }\"
  ui:resultSet=\"{= ?targets }\"/-->
        <ui:if ui:condition=\"{= !spr:isEmpty(?targets) }\">
            <ui:forEach ui:resultSet=\"{= ?targets }\">
                <ui:call arg:resource=\"{= ?activeResource }\" ui:template=\"{= edg:GetRequiredNonGeneratedEnterpriseWorkProducts }\" ui:varName=\"inputs\">
                    <!--ui:dumpResultSet ui:message=\"AAA3 - MakeResourceNodesAndLinksForNonGeneratedRequiredInformatioAssets - {= ?resource }\"
  ui:resultSet=\"{= ?inputs }\"/-->
                    <ui:forEach ui:resultSet=\"{= ?inputs }\">
                        <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?input }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
                        <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= edg:DEPTYPE_INFO-INPUT }\" edg:explanation=\"{= ?case }\" edg:resource=\"{= ?input }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= ?targetViewFrame }\" edg:viewFrame=\"{= ?sourceViewFrame }\"/>
                    </ui:forEach>
                </ui:call>
            </ui:forEach>
        </ui:if>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make resource nodes and links for non-generated information assets" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeResourceNodesAndLinksForSoftwareExecutableEnterpriseOutputs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The depicted resource for the active resource, that is, the highest parent." ;
    ] ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:MakeResourceNodesAndLinksForSoftwareExecutableEnterpriseOutputs - {= str(?resource) }\"/-->
    <ui:if ui:condition=\"{= true }\">
        <ui:call arg:software=\"{= ?activeResource }\" ui:template=\"{= edg:GetSoftwareExecutableEnterpriseWorkProductOutputs }\" ui:varName=\"outputs\">
            <!--ui:dumpResultSet ui:message=\"AAA2: edg:MakeResourceNodesAndLinksForSoftwareExecutableEnterpriseOutputs - {= str(?activeResource) }\"
  ui:resultSet=\"{= ?outputs }\"/-->
            <ui:if ui:condition=\"{= spr:isEmpty(?outputs) }\">
                <edg:BuildSoftwareExecutableOutputs arg:depictedResource=\"{= ?resource }\" arg:focusNode=\"{= ?activeResource }\" edg:breadth=\"{= ?breadth }\"/>
            </ui:if>
            <ui:else>
                <edg:MakeLineageGramNodeAndLinksForInformationAssets arg:resource=\"{= ?resource }\" arg:resultSet=\"{= ?outputs }\" edg:sourceViewFrame=\"{= edg:VF_SoftwareFrame }\" edg:targetViewFrame=\"{= edg:VF_InfoAssetsFrame }\"/>
            </ui:else>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make resource nodes and links for software enterprise outputs" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeSingleViewFramePlaceholderOccurrence
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreDownstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreUpstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:placeholderType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:diagramNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphLG {
                    ?nodeOccurrence a ?nodeType .
                    ?nodeOccurrence edg:id ?nodeName .
                    ?nodeOccurrence edg:viewFrame ?viewFrame .
                    ?nodeOccurrence edg:viewFrameTier ?viewFrameTier .
                    ?nodeOccurrence edg:targetNode ?targetNodeOccurrence .
                    ?nodeOccurrence edg:name ?nodeName .
                    ?nodeOccurrence edg:resource ?resource .
                    ?nodeOccurrence edg:activeResource ?activeResource .
                    ?nodeOccurrence edg:type ?placeholderType .
                    ?nodeOccurrence edg:breadth ?breadth .
                    ?nodeOccurrence edg:offset ?offset .
                    ?nodeOccurrence edg:hasMoreDownstream ?hasMoreDownstream .
                    ?nodeOccurrence edg:hasMoreUpstream ?hasMoreUpstream .
                    ?nodeOccurrence edg:explanation ?explanation .
                } .
            }
            WHERE {
                ( ?diagramNode ?viewFrame ) edg:diagramNodeName ( ?nodeName ?nodeOccurrence ) .
                BIND (edg:ViewFrameNode AS ?nodeType) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make single view frame placeholder occurrence" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeSingleViewFrameResourceOccurrence
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreDownstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreUpstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:placeholderType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeExecutable ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the active executable is the software exectable that is contained by the parent referenced by the 'resource' property. " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:activeResource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the active resource holds the most granular resource that is contained by the parent referenced by the 'resource' property. " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphLG {
                    ?nodeOccurrence a ?nodeType .
                    ?nodeOccurrence edg:explanation ?explanation .
                    ?nodeOccurrence edg:id ?nodeName .
                    ?nodeOccurrence edg:viewFrame ?viewFrame .
                    ?nodeOccurrence edg:viewFrameTier ?viewFrameTier .
                    ?nodeOccurrence edg:targetNode ?targetNodeOccurrence .
                    ?nodeOccurrence edg:name ?nodeName .
                    ?nodeOccurrence edg:resource ?resource .
                    ?nodeOccurrence edg:activeResource ?myActiveResource .
                    ?nodeOccurrence edg:activeExecutable ?activeExecutable .
                    ?nodeOccurrence edg:type ?resourceType .
                    ?nodeOccurrence edg:placeholderType ?placeholderTyoe .
                    ?nodeOccurrence edg:breadth ?breadth .
                    ?nodeOccurrence edg:offset ?offset .
                    ?nodeOccurrence edg:hasMoreDownstream ?hasMoreDownstream .
                    ?nodeOccurrence edg:hasMoreUpstream ?hasMoreUpstream .
                } .
            }
            WHERE {
                BIND (COALESCE(?type, edg:getEDGresourceType(?resource), edg:UNKNOWN-TYPE) AS ?resourceType) .
                ( ?resource ?viewFrame ) edg:diagramNodeName ( ?nodeName ?nodeOccurrence ) .
                BIND (edg:ViewFrameNode AS ?nodeType) .
                BIND (COALESCE(?activeResource, ?resource) AS ?myActiveResource) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make single view frame resource occurrence" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeViewFrameDownstreamPlaceholderNodeAndLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreDownstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:continuation ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:placeholderType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameTier ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate provo:wasGeneratedBy ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:myActiveResource=\"{= COALESCE(?activeResource, ?resource) }\" let:targetNode=\"{= IRI(CONCAT(&quot;http://edg.topbraid.solutions/model/PHMDS_&quot;, ui:encodeNode(?resource))) }\">
    <edg:MakeSingleViewFramePlaceholderOccurrence edg:activeResource=\"{= ?myActiveResource }\" edg:breadth=\"{= ?breadth }\" edg:diagramNode=\"{= ?targetNode }\" edg:explanation=\"{= ?explanation }\" edg:hasMoreDownstream=\"{= true }\" edg:offset=\"{= ?offset }\" edg:placeholderType=\"{= ?placeholderType }\" edg:resource=\"{= ?resource }\" edg:viewFrame=\"{= ?targetViewFrame }\"/>
    <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= ?dependencyType }\" edg:resource=\"{= ?resource }\" edg:targetNode=\"{= ?targetNode }\" edg:targetViewFrame=\"{= ?targetViewFrame }\" edg:viewFrame=\"{= ?viewFrame }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make view frame placeholder node and links" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeViewFrameResourceNodeAndLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreDownstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreUpstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:reverseNodes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType edg:DependencyType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameTier ;
      spl:valueType xsd:integer ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:myReverseNodes=\"{= COALESCE(?reverseNodes, false) }\">
    <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?resource }\" edg:viewFrame=\"{= ?viewFrame }\"/>
    <edg:MakeSingleViewFrameResourceOccurrence edg:resource=\"{= ?targetNode }\" edg:viewFrame=\"{= ?targetViewFrame }\"/>
    <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= ?dependencyType }\" edg:explanation=\"{= COALESCE(?explanation, &quot;tbd&quot;) }\" edg:resource=\"{= IF(?myReverseNodes, ?targetNode, ?resource) }\" edg:targetNode=\"{= IF(?myReverseNodes, ?resource, ?targetNode) }\" edg:targetViewFrame=\"{= IF(?myReverseNodes, ?viewFrame, ?targetViewFrame) }\" edg:viewFrame=\"{= IF(?myReverseNodes, ?targetViewFrame, ?viewFrame) }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make view frame resource node and links" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeViewFrameResourceNodeLink
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:compositionProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:derivedFrom ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:flow ;
      spl:valueType edg:Flow ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType edg:DependencyType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <!--ui:dumpScope ui:message=\"AAA1: edg:MakeViewFrameResourceNodeLink - {= ?resource }\"/-->
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphLG {
                    ?linkOccurrence a edg:ViewFrameLink .
                    ?linkOccurrence edg:flow ?flow .
                    ?linkOccurrence edg:explanation ?explanation .
                    ?linkOccurrence edg:property ?property .
                    ?linkOccurrence edg:compositionProperty ?compositionProperty .
                    ?linkOccurrence edg:derivedFrom ?derivedFrom .
                    ?linkOccurrence edg:sourceNode ?nodeName .
                    ?linkOccurrence edg:targetNode ?targetNodeName .
                    ?linkOccurrence edg:dependencyType ?dependencyType .
                } .
            }
            WHERE {
                ( ?resource ?viewFrame ) edg:diagramNodeName ( ?nodeName ?nodeOccurrence ) .
                ( ?resource ?targetNode ?id ) edg:diagramLinkName ( ?linkName ?linkOccurrence ) .
                ( ?targetNode ?targetViewFrame ) edg:diagramNodeName ( ?targetNodeName ?targetNodeOccurrence ) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make view frame resource node link" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:MakeViewFrameUpstreamPlaceholderNodeAndLinks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:hasMoreUpstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:continuation ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:dependencyType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:explanation ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:outOfBreadth ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:outOfReach ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:placeholderType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:targetViewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameTier ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate provo:wasGeneratedBy ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:targetNode=\"{= IRI(CONCAT(&quot;http://edg.topbraid.solutions/model/PHMUS_&quot;, ui:encodeNode(?resource))) }\">
    <edg:MakeSingleViewFramePlaceholderOccurrence edg:activeResource=\"{= ?resource }\" edg:breadth=\"{= ?breadth }\" edg:diagramNode=\"{= ?targetNode }\" edg:explanation=\"{= ?explanation }\" edg:hasMoreUpstream=\"{= true }\" edg:offset=\"{= ?offset }\" edg:placeholderType=\"{= ?placeholderType }\" edg:resource=\"{= ?resource }\" edg:viewFrame=\"{= ?targetViewFrame }\"/>
    <edg:MakeViewFrameResourceNodeLink edg:dependencyType=\"{= ?dependencyType }\" edg:resource=\"{= ?targetNode }\" edg:targetNode=\"{= ?resource }\" edg:targetViewFrame=\"{= ?targetViewFrame }\" edg:viewFrame=\"{= ?viewFrame }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Make view frame upstream placeholder node and links" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:NoSQLdatabase
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"nosql\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:NothingKnownLineageGramTemplate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>LineageGram&trade;</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:headerLabelFunction=\"{= teamwork:NeighborGramHeaderLabelFunction }\" ui:varName=\"swaAppName\" ui:varValue=\"LineageGram\">
    <div class=\"ui-layout-north\" id=\"headerPanel\">
        <ui:insertionPoint ui:pointId=\"header\"/>
    </div>
    <div class=\"ui-layout-center\" id=\"center-pane\">
        <h3>Nothing Upstream</h3>
        <p class=\"text-info\">{= ui:label(?focusNode) } has no known dependencies</p>
    </div>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:Page
  a ui:ViewElement ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Page" ;
  rdfs:subClassOf swa:Elements ;
.
edg:Placeholder
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?this) }\" arg:node=\"{= ?this }\" arg:resourceType=\"{= edg:Placeholder }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Process
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node-from-process\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:ProcessActivity
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node-from-process\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforDerivationMapNodePair arg:inverse=\"{= false }\" arg:label=\"activity of\" arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Processable
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramNode arg:label=\"{= COALESCE(?label, CONCAT(&quot;Untyped: &quot;, edg:MakeNodeLabel(?this))) }\" arg:node=\"{= ?this }\" arg:parent=\"{= ?parent }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Protectable
  ui:instanceView """
<ui:group let:thisAsString=\"{= str(?this) }\" ui:id=\"derivation-map-aspect\" ui:priority=\"{= 1 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:Protectable for {= ?this }\"/-->
    <!--TBD: maybe build a generic way of dealing with showing aspect properties in a derivation map-->
    <ui:group letrs:dataProtectionMetadata=\"{#
            SELECT ?personalDataCategory ?personalDataUseConsent ?obfuscation
            WHERE {
                ?this edg:isPersonallyIdentifiableInformation true .
                OPTIONAL {
                    ?this edg:personalDataCategory ?personalDataCategory .
                } .
                OPTIONAL {
                    ?this edg:personalDataUseConsent ?personalDataUseConsent .
                } .
                OPTIONAL {
                    ?this edg:obfuscatedBy ?obfuscation .
                } .
            } }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?dataProtectionMetadata) }\">
            <!--ui:dumpResultSet ui:message=\"AAA2: edg:Protectable for {= ?this }\"
                  ui:resultSet=\"{= ?dataProtectionMetadata }\"/-->
            <ui:group let:dataProtectionMetadataId=\"{= CONCAT(&quot;DataProtection-&quot;, ?thisAsString) }\">
                <edg:BuildJSONforLineageGramNode arg:collapsed=\"{= true }\" arg:icon=\"fa fa-map\" arg:label=\"Personal Identifiable Info. (PII) for {= ui:label(?this) }\" arg:node=\"{= ?dataProtectionMetadataId }\" arg:parent=\"{= rdf:nil }\" arg:resourceType=\"{= edg:Protectable }\"/>
                <edg:MakeDerivationMapLink arg:id=\"{= CONCAT(?thisAsString, &quot;~~&quot;, &quot;data_protection&quot;) }\" arg:label=\"protected data properties\" edg:source=\"{= ?this }\" edg:target=\"{= ?dataProtectionMetadataId }\"/>
                <ui:forEach ui:resultSet=\"{= ?dataProtectionMetadata }\">
                    <ui:if ui:condition=\"{= bound(?personalDataCategory) }\">
                        <edg:BuildJSONforLineageGramNode arg:label=\"{= CONCAT(&quot;Category: &quot;, ui:label(?personalDataCategory)) }\" arg:node=\"{= CONCAT(str(?personalDataCategory), &quot;-&quot;, str(?this)) }\" arg:parent=\"{= ?dataProtectionMetadataId }\" arg:resourceType=\"{= COALESCE(spl:object(?personalDataCategory, rdf:type), ?none) }\"/>
                    </ui:if>
                    <ui:if ui:condition=\"{= bound(?personalDataUseConsent) }\">
                        <edg:BuildJSONforLineageGramNode arg:label=\"{= CONCAT(&quot;Use Consent: &quot;, ui:label(?personalDataUseConsent)) }\" arg:node=\"{= CONCAT(str(?personalDataUseConsent), &quot;-&quot;, str(?this)) }\" arg:parent=\"{= ?dataProtectionMetadataId }\" arg:resourceType=\"{= COALESCE(spl:object(?personalDataUseConsent, rdf:type), ?none) }\"/>
                    </ui:if>
                    <ui:if ui:condition=\"{= bound(?obfuscation) }\">
                        <edg:BuildJSONforLineageGramNode arg:label=\"{= CONCAT(&quot;Obfuscation: &quot;, ui:label(?obfuscation)) }\" arg:node=\"{= CONCAT(str(?obfuscation), &quot;-&quot;, str(?this)) }\" arg:parent=\"{= ?dataProtectionMetadataId }\" arg:resourceType=\"{= COALESCE(spl:object(?obfuscation, rdf:type), ?none) }\"/>
                    </ui:if>
                </ui:forEach>
            </ui:group>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
.
edg:RelationalDatabase
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"relational-database\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Report
  ui:instanceView """
<ui:group ui:id=\"lineageGramNodeType\" ui:priority=\"{= 1 }\">
    <swon:Value arg:name=\"type\" arg:value=\"report\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:ResultSetSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Result set select templates" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:Script
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA1: edg:Script - {= ui:currentQueryGraph() }\"/-->
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Services
  a ui:Service ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Services" ;
  rdfs:subClassOf ui:Services ;
.
edg:SetViewFrameResourceNodePropertyValue
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= !bound(?resource) }\">
        <ui:throw ui:message=\"Resource is unbound in edg:SetViewFrameResourceNodePropertyValue\"/>
    </ui:if>
    <ui:if ui:condition=\"{= !bound(?viewFrame) }\">
        <ui:throw ui:message=\"Viewframe is unbound in edg:SetViewFrameResourceNodePropertyValue\"/>
    </ui:if>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraphLG {
                    ?nodeOccurrence ?property ?value .
                } .
            }
            WHERE {
                ( ?resource ?viewFrame ) edg:diagramNodeName ( ?nodeName ?nodeOccurrence ) .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Set view frame resource node with property value" ;
  rdfs:subClassOf edg:LineageGramTempGraphServices ;
.
edg:ShowFinalStageSoftwareExecutablesAndResources
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType spr:Table ;
    ] ;
  ui:prototype """
<ui:group let:total=\"{= spr:rowCount(?resultSet) }\">
    <ui:if ui:condition=\"{= ?total = 0 }\">
        <p class=\"pad5px\">There is nothing to show.</p>
    </ui:if>
    <ui:else>
        <ui:if ui:condition=\"{= ?total &gt; ?limit }\">
            <p class=\"pad5px\">Table limited to {= ?limit } of {= ?total } rows</p>
        </ui:if>
        <table class=\"edg-debug-table\">
            <thead class=\"edg-debug-thead\">
                <tr class=\"edg-debug-row\">
                    <th class=\"edg-debug-th\">Index</th>
                    <th class=\"edg-debug-th\">Software</th>
                    <th class=\"edg-debug-th\">Software Type</th>
                    <th class=\"edg-debug-th\">Info Asset</th>
                    <th class=\"edg-debug-th\">Info Asset Type</th>
                    <th class=\"edg-debug-th\">Table, View or Dataset</th>
                    <th class=\"edg-debug-th\">Table, View or Dataset Type</th>
                    <th class=\"edg-debug-th\">Data Element</th>
                    <th class=\"edg-debug-th\">Data Element Type</th>
                    <th class=\"edg-debug-th\">Pipeline</th>
                    <th class=\"edg-debug-th\">Pipeline Step</th>
                </tr>
            </thead>
            <tbody class=\"edg-debug-tbody\">
                <ui:forEach ui:indexVar=\"index\" ui:limit=\"{= ?limit }\" ui:resultSet=\"{= ?resultSet }\">
                    <ui:group>
                        <tr class=\"edg-debug-row\">
                            <td class=\"edg-debug-td\">{= ?index + 1 }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?software) }</td>
                            <td class=\"edg-debug-td\">{= ui:label(spl:object(?software, rdf:type)) }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?infoAsset) }</td>
                            <td class=\"edg-debug-td\">{= IF(bound(?InfoAsset), ui:label(spl:object(?infoAsset, rdf:type)), \"\") }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?tableOrViewOrDataset) }</td>
                            <td class=\"edg-debug-td\">{= ui:label(spl:object(?tableOrViewOrDataset, rdf:type)) }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?dataElement) }</td>
                            <td class=\"edg-debug-td\">{= ui:label(spl:object(?dataElement, rdf:type)) }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?pipeLine) }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?pipeLineStep) }</td>
                        </tr>
                    </ui:group>
                </ui:forEach>
            </tbody>
        </table>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show final stage software executables and resources" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowFirstStageFrameResources
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= ?list = &quot;&quot; }\">
        <p>There are no software executables that have inputs with unresolved data sources in the list {= ?list }.</p>
    </ui:if>
    <ui:else>
        <table class=\"edg-debug-table\">
            <thead class=\"edg-debug-thead\">
                <tr class=\"edg-debug-row\">
                    <th class=\"edg-debug-th\">Index</th>
                    <th class=\"edg-debug-th\">SW</th>
                    <th class=\"edg-debug-th\">SW Type</th>
                    <th class=\"edg-debug-th\">Info List</th>
                    <th class=\"edg-debug-th\">Program</th>
                </tr>
            </thead>
            <tbody class=\"edg-debug-tbody\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?resultSet }\">
                    <tr class=\"edg-debug-row\" let:swType=\"{= spl:object(?swU, rdf:type) }\">
                        <td class=\"edg-debug-td\">{= ?index + 1 }</td>
                        <td class=\"edg-debug-td\">{= ui:label(?swU) }</td>
                        <td class=\"edg-debug-td\">{= ui:label(?swType) }</td>
                        <td class=\"edg-debug-td\">{= ?infoList }</td>
                        <td class=\"edg-debug-td\">{= ui:label(?program) }</td>
                    </tr>
                </ui:forEach>
            </tbody>
        </table>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show first stage frame resources" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowReportFrameResources
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group let:total=\"{= spr:rowCount(?resultSet) }\">
    <ui:if ui:condition=\"{= ?total = 0 }\">
        <p class=\"pad5px\">There is nothing to show.</p>
    </ui:if>
    <ui:else>
        <ui:if ui:condition=\"{= ?total &gt; ?limit }\">
            <p class=\"pad5px\">Table limited to {= ?limit } of {= ?total } rows</p>
        </ui:if>
        <table class=\"edg-debug-table\">
            <thead class=\"edg-debug-thead\">
                <tr class=\"edg-debug-row\">
                    <th class=\"edg-debug-th\">Index</th>
                    <th class=\"edg-debug-th\">Info Asset</th>
                    <th class=\"edg-debug-th\">Info Asset Type</th>
                    <th class=\"edg-debug-th\">Dataset</th>
                    <th class=\"edg-debug-th\">Dataset Type</th>
                </tr>
            </thead>
            <tbody class=\"edg-debug-tbody\">
                <ui:forEach ui:indexVar=\"index\" ui:limit=\"{= ?limit }\" ui:resultSet=\"{= ?resultSet }\">
                    <ui:group>
                        <tr class=\"edg-debug-row\">
                            <td class=\"edg-debug-td\">{= ?index + 1 }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?infoAsset) }</td>
                            <td class=\"edg-debug-td\">{= ui:label(spl:object(?infoAsset, rdf:type)) }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?infoAssetDataset) }</td>
                            <td class=\"edg-debug-td\">{= ui:label(spl:object(?infoAssetDataset, rdf:type)) }</td>
                        </tr>
                    </ui:group>
                </ui:forEach>
            </tbody>
        </table>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show report frame resources" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowResourcesIndex
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <h3 class=\"edg-heading\">{= ?title }</h3>
    <ui:if let:elements=\"{= edg:countStringListElements(?list, &quot;,&quot;) }\" ui:condition=\"{= ?list != &quot;&quot; }\">
        <p class=\"pad5px\">Total resources = {= ?elements }.</p>
        <edg:ShowResourcesList arg:columns=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\" arg:list=\"{= ?list }\"/>
    </ui:if>
    <ui:else>
        <p class=\"pad5px\">None</p>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show resources index" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowResourcesList
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:columns ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"edg-index-table\">
        <div class=\"container-fluid\">
            <ui:forEach ui:resultSet='{#
                    SELECT ?resourceQName
                    WHERE {
                        ?resourceQName spif:split ( ?list \",\" ) .
                    } }'>
                <div class=\"{= ?columns }\">{= ?resourceQName } [{= ui:encodeNode(edg:getClassWithPropertyValue(spl:object(ui:decodeNode(?resourceQName), rdf:type), edg:Asset, edg:isDepictionType, true)) }]</div>
            </ui:forEach>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show resources list" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowSoftwareExecutableDependencies
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group let:total=\"{= spr:rowCount(?resultSet) }\">
    <ui:if ui:condition=\"{= ?total = 0 }\">
        <p class=\"pad5px\">There are no software executable dependencies.</p>
    </ui:if>
    <ui:else>
        <ui:if ui:condition=\"{= ?total &gt; ?limit }\">
            <p class=\"pad5px\">Table listing limied to {= ?limit } software dependencies for {= ?total } software executables</p>
        </ui:if>
        <table class=\"edg-debug-table\">
            <thead class=\"edg-debug-thead\">
                <tr class=\"edg-debug-row\">
                    <th class=\"edg-debug-th\">Index</th>
                    <th class=\"edg-debug-th\">Software</th>
                    <th class=\"edg-debug-th\">Software Type</th>
                    <th class=\"edg-debug-th\">Dependencies</th>
                </tr>
            </thead>
            <tbody class=\"edg-debug-tbody\">
                <ui:forEach ui:indexVar=\"index\" ui:limit=\"{= ?limit }\" ui:resultSet=\"{= ?resultSet }\">
                    <tr class=\"edg-debug-row\">
                        <td class=\"edg-debug-td\">{= ?index + 1 }</td>
                        <td class=\"edg-debug-td\">{= ui:label(?sw) }</td>
                        <td class=\"edg-debug-td\">{= ui:label(spl:object(?sw, rdf:type)) }</td>
                        <td class=\"edg-debug-td\">{= ?swDependencies }</td>
                    </tr>
                </ui:forEach>
            </tbody>
        </table>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show software executable dependencies" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowViewFrame
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <h3 class=\"edg-heading\">{= ?title }</h3>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show view frame" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowViewFramesStructure
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:diagramViewFramesShape ;
      spl:valueType edg:ViewFramesShape ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?viewFramesGraph) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(?viewFramesGraph)) }\">
            <h3 class=\"edg-heading\">View Frames</h3>
            <table class=\"edg-debug-table\">
                <thead class=\"edg-debug-thead\">
                    <tr class=\"edg-debug-row\">
                        <th class=\"edg-debug-th\">Index</th>
                        <th class=\"edg-debug-th\">Frame</th>
                        <th class=\"edg-debug-th\">Label</th>
                        <th class=\"edg-debug-th\">Name</th>
                        <th class=\"edg-debug-th\">Color</th>
                        <th class=\"edg-debug-th\">Background Color</th>
                        <th class=\"edg-debug-th\">Space Share</th>
                        <th class=\"edg-debug-th\">Count</th>
                    </tr>
                </thead>
                <tbody class=\"edg-debug-tbody\">
                    <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                            SELECT ?viewFrame ?label ?name ?color ?backgroundColor ?spaceShare ?count
                            WHERE {
                                {
                                    ?diagramViewFramesShape edg:viewFrame ?viewFrame .
                                    BIND (ui:globalVarValue(ui:encodeNode(?viewFrame)) AS ?count) .
                                    FILTER (?count &gt; 0) .
                                } .
                                ?viewFrame edg:borderColor ?color .
                                ?viewFrame edg:backgroundColor ?backgroundColor .
                                ?viewFrame edg:label ?label .
                                ?viewFrame edg:name ?name .
                                ?viewFrame edg:spaceShare ?spaceShare .
                                ?viewFrame sh:order ?order .
                            }
                            ORDER BY (?order) }\">
                        <tr class=\"edg-debug-row\">
                            <td class=\"edg-debug-td\">{= ?index + 1 }</td>
                            <td class=\"edg-debug-td\">{= ui:encodeNode(?viewFrame) }</td>
                            <td class=\"edg-debug-td\">{= ?label }</td>
                            <td class=\"edg-debug-td\">{= ?name }</td>
                            <td class=\"edg-debug-td\">{= ?color }</td>
                            <td class=\"edg-debug-td\">{= ?backgroundColor }</td>
                            <td class=\"edg-debug-td\">{= ?spaceShare }</td>
                            <td class=\"edg-debug-td\">{= ?count }</td>
                        </tr>
                    </ui:forEach>
                </tbody>
            </table>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <p>No configuration graph supplied</p>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show view frames structure" ;
  rdfs:subClassOf swa:Elements ;
.
edg:ShowViewFramesTest
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:result=\"{= edg:BuildJSONforLineageGramViewFrames(&quot;http://edg.topbraidlive.org/1.0/config/diagrams&quot;, COALESCE(IRI(?viewFrameStructure), edg:VFS_LG-LineageModel)) }\">{= ?result }</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Show view frames test" ;
  rdfs:subClassOf swa:Elements ;
.
edg:SoftwareExecutable
  ui:instanceView """
<ui:group ui:id=\"lineagegram-data-provider\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramDataProviderDataService arg:dataProvider=\"{= edg:BuildJSONforSoftwareLineageGram }\" arg:provider=\"{= edg:SoftwareExecutable }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-viewframes\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramViewFramesDataService arg:provider=\"{= edg:SoftwareExecutable }\" edg:viewFrameStructure=\"{= edg:VFS_LG-ProvenanceModel }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:SoftwareExecutableSelectTemplates
  a spin:SelectTemplate ;
  a spin:Template ;
  rdfs:label "Software executable select templates" ;
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:SoftwareFunction
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <!--ui:dumpScope ui:message=\"AAA: edg:SoftwareFunction\"/-->
    <edg:GenerateJSONforSoftwareFunctionToSoftwareExecutableDependencyDetails arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <ui:resourceView arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?this }\" ui:matchIds=\"derivation-map-data-service-other-node\" ui:resource=\"{= ?leftNode }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:SubjectArea
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramNode arg:label=\"{= ui:label(?this) }\" arg:node=\"{= ?this }\"/>
    <edg:BuildJSONforDerivationMapResourceAspects arg:resource=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Table
  ui:instanceView """
<ui:group ui:id=\"derivation-map-composite-node-maker\" ui:priority=\"{= 10 }\">
    <edg:MakeDerivationMapNodesForDatabaseTableCompositeNode arg:node=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
.
edg:Templates
  a spin:Template ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Templates" ;
  rdfs:subClassOf spin:Templates ;
.
edg:TimeMarker
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:message ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:start ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"box-rounded-corners light-blue-background edg-time-marker-margin\">
    <ui:group let:timeInMilliSeconds=\"{= spif:currentTimeMillis() }\">
        <p class=\"pad2px\">{= ?message }</p>
        <p class=\"pad2px\">Time is {= str(afn:now()) }.</p>
        <p class=\"pad2px\">Elapsed time = {= str(((?timeInMilliSeconds - ?start) / 1000)) } seconds</p>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Time marker" ;
  rdfs:subClassOf swa:Elements ;
.
edg:TraceabilityGramPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:breadth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:reach ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFramesGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType xsd:string ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:dataGraph=\"{= IRI(?graph) }\" let:focusNodeURI=\"{= IRI(?focusNode) }\" let:projectGraph=\"{= ?projectGraph }\">
    <ui:resourceView arg:graph=\"{= ?graph }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"impact-diagram\" ui:resource=\"{= ?focusNodeURI }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "TraceabilityGram Page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:UIfunctions
  a ui:Function ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "EDG UI Functions" ;
  rdfs:subClassOf ui:Functions ;
.
edg:UpstreamDependencyDiagamButton
  a ui:ViewElement ;
  ui:overrides saf:LineageGramButtonPlaceholder ;
  ui:prototype """
<ui:group let:graphClosure=\"{= teamwork:unionGraphForCurrentUser() }\">
    <div>
        <ui:if ui:condition=\"{= edg:isSupportedLineageType(?resource) }\">
            <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
                <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?homeGraph) }\" let:graphURI=\"{= URI(?homeGraph) }\">
                    <ui:group let:uri=\"{= teamwork:queryGraph(true, ?graphId, ?none, smf:currentUserName()) }\">
                        <button class=\"lineagegram-icon\" data-graph-uri=\"{= ?graphClosure }\" data-resource=\"{= ?resource }\" title=\"Upstream Dependency Diagram\"/>
                    </ui:group>
                </ui:group>
            </ui:group>
        </ui:if>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf saf:LineageGramButtonPlaceholder ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:UpstreamSoftwareContinuationService
  a ui:Service ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <swon:Object>
        <swon:Value arg:name=\"continuation\" arg:value=\"TBD: Downstream software continuation\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Upstream software continuation service" ;
  rdfs:subClassOf edg:LineageGramContinuationServices ;
.
edg:UpstreamTraceabilityGramPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <ui:if ui:condition=\"{= bound(?focusNodeURI) }\">
        <ui:resourceView arg:graph=\"{= COALESCE(?graph, ui:currentQueryGraph()) }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"lineagegram\" ui:resource=\"{= ?focusNodeURI }\"/>
    </ui:if>
    <ui:else>
        <script>swa.populateModalDialogAskingForBody('edg:ActionNotSupportedInThisReleaseAlert','Alert for {= ui:label(?focusNode) }',null)</script>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Upstream TraceablilityGram page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:UpstreamTraceabilityNotSupportedInThisReleaseAlert
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <div>
        <p class=\"text-info\">
            <em>Upstream traceability</em> for this asset type is not supported in this release</p>
    </div>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Downstream traceability not supported in this release alert" ;
  rdfs:subClassOf edg:HelpPage ;
.
edg:UsageDiagamButton
  a ui:ViewElement ;
  ui:overrides saf:UsageDiagramButtonPlaceholder ;
  ui:prototype """
<ui:group let:graphClosure=\"{= teamwork:unionGraphForCurrentUser() }\">
    <div>
        <ui:if ui:condition=\"{= edg:isSupportedUsageDiagramType(?resource) }\">
            <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
                <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?homeGraph) }\" let:graphURI=\"{= URI(?homeGraph) }\">
                    <ui:group let:uri=\"{= teamwork:queryGraph(true, ?graphId, ?none, smf:currentUserName()) }\">
                        <button class=\"usage-icon\" data-graph-uri=\"{= ?graphClosure }\" data-resource=\"{= ?resource }\" title=\"Usage Diagram\"/>
                    </ui:group>
                </ui:group>
            </ui:group>
        </ui:if>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf saf:LineageGramButtonPlaceholder ;
  rdfs:subClassOf swa:ScriptElements ;
.
edg:UsageDiagramAction
  a swa:VisualizationAction ;
  arg:appName "Editor" ;
  arg:condition [
      a edg:isSupportedUsageDiagramType ;
      arg:resource [
          sp:varName "resource" ;
        ] ;
    ] ;
  arg:iconClass "neighborgram-icon" ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI  + '&_viewClass=edg:UsageDiagramPage' + '&focusNode=' + escape(resourceURI)   + '&graph=' + swa.queryGraphURI + '&viewFramesGraph=http://edg.topbraidlive.org/1.0/config/diagrams')" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Usage ..." ;
.
edg:UsageDiagramPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:focusNodeURI=\"{= IRI(?focusNode) }\">
    <ui:resourceView arg:graph=\"{= ?graph }\" edg:breadth=\"{= ?breadth }\" edg:reach=\"{= ?reach }\" edg:viewFramesGraph=\"{= ?viewFramesGraph }\" ui:matchIds=\"usage-diagram\" ui:resource=\"{= ?focusNodeURI }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Usage Diagram Page" ;
  rdfs:subClassOf edg:AbstractLineageGramPage ;
.
edg:aggregateCol
  a spin:Function ;
  rdfs:comment "Applies the spr:Aggregator ?arg1 to all rows of column ?arg3 of spr:Table ?arg2." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "aggregate row" ;
  rdfs:subClassOf spr:Functions ;
.
edg:buildPlaceHolderType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "type" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        sp:varName "hasMoreUpstream" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            sp:varName "outOfBreadth" ;
                          ] ;
                        sp:arg2 edg:PlaceholderForMoreFanin ;
                        sp:arg3 edg:PlaceholderForMoreUpstream ;
                      ] ;
                    sp:variable [
                        sp:varName "type" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        sp:varName "hasMoreDownstream" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            sp:varName "outOfBreadth" ;
                          ] ;
                        sp:arg2 edg:PlaceholderForMoreFanout ;
                        sp:arg3 edg:PlaceholderForMoreDownstream ;
                      ] ;
                    sp:variable [
                        sp:varName "type" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:hasMoreDownstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:hasMoreUpstream ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:outOfBreadth ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "build placeholder type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:buildViewFramesForLineageModel
  a ui:Function ;
  ui:prototype """
<ui:group>
    <ui:bind>
        <ui:stringify ui:format=\"{= ui:JSON }\" ui:varName=\"viewFrames\">
            <swon:Array>
                <swon:Object>
                    <swon:Value arg:name=\"name\" arg:value=\"dataPanel\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"Tables\"/>
                    <swon:Value arg:name=\"borderColor\" arg:value=\"#23b0f4\"/>
                    <swon:Value arg:name=\"backgroundColor\" arg:value=\"#f4f4ff\"/>
                    <swon:Values arg:name=\"acceptedTypes\">\"table\"</swon:Values>
                    <swon:Value arg:expression=\"1\" arg:name=\"spaceShare\"/>
                </swon:Object>
                <swon:Object>
                    <swon:Value arg:name=\"name\" arg:value=\"viewFrame\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"Applications\"/>
                    <swon:Value arg:name=\"borderColor\" arg:value=\"violet\"/>
                    <swon:Value arg:name=\"backgroundColor\" arg:value=\"#f4f4ff\"/>
                    <swon:Values arg:name=\"acceptedTypes\">\"app\",\"unknown\"</swon:Values>
                    <swon:Value arg:expression=\"5\" arg:name=\"spaceShare\"/>
                </swon:Object>
                <swon:Object>
                    <swon:Value arg:name=\"name\" arg:value=\"formPanel\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"Reports, Datsets and Forms\"/>
                    <swon:Value arg:name=\"borderColor\" arg:value=\"orange\"/>
                    <swon:Value arg:name=\"backgroundColor\" arg:value=\"#f4f4ff\"/>
                    <swon:Values arg:name=\"acceptedTypes\">\"form\",\"report\"</swon:Values>
                    <swon:Value arg:expression=\"2\" arg:name=\"spaceShare\"/>
                </swon:Object>
            </swon:Array>
        </ui:stringify>
        <ui:group let:sameAsAboveWithIntegersFix=\"[{'name':'dataPanel','label':'Tables','borderColor':'#23b0f4','backgroundColor':'#f4f4ff','acceptedTypes':['table'],'spaceShare':1},{'name':'viewFrame','label':'Applications','borderColor':'green','backgroundColor':'#f4fff4','acceptedTypes':['app','unknown'],'spaceShare':5},{'name':'formPanel','label':'Reports, Datsets and Forms','borderColor':'orange','backgroundColor':'#fff4f4','acceptedTypes':['form','dataset','report'],'spaceShare':2}]\">
            <!--ui:return ui:result=\"{= ?sameAsAboveWithIntegersFix }\"/-->
            <ui:return ui:result=\"{= ?viewFrames }\"/>
        </ui:group>
    </ui:bind>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "build view frames for lineage model" ;
  rdfs:subClassOf edg:UIfunctions ;
.
edg:constrainBreadth
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:integer ;
                sp:arg1 [
                    a sp:floor ;
                    sp:arg1 [
                        a sp:divide ;
                        sp:arg1 [
                            sp:varName "maxTierNodeCount" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "nextTierNodeCount" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ratio" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:gt ;
                    sp:arg1 [
                        sp:varName "ratio" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "maxBreadth" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "maxBreadth" ;
                  ] ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:gt ;
                        sp:arg1 [
                            sp:varName "ratio" ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                    sp:arg2 [
                        sp:varName "ratio" ;
                      ] ;
                    sp:arg3 2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxBreadth ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxTierNodeCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:nextTierNodeCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "constrain breadth" ;
  rdfs:subClassOf edg:Functions ;
.
edg:determineExecutableType
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "lineageModel" ;
          ]
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "outputType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:LineageModel ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "lineageModel" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "determine executable type" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:determineOutputType
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "informationAsset" ;
          ]
          [
            sp:varName "dataStructure" ;
          ]
          [
            sp:varName "dataElement" ;
          ]
          [
            sp:varName "report" ;
          ]
          [
            sp:varName "outputType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              a sp:TriplePath ;
                              sp:object edg:Report ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdfs:subClassOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "outputType" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "report" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:Report ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              a sp:TriplePath ;
                              sp:object edg:Report ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdfs:subClassOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "outputType" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              a sp:TriplePath ;
                              sp:object edg:InformationAsset ;
                              sp:path [
                                  a sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdfs:subClassOf ;
                                ] ;
                              sp:subject [
                                  sp:varName "outputType" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "informationAsset" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:Table ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "dataStructure" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataSet ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "dataStructure" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "outputType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataElement ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "outputType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "dataElement" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 edg:columnOf ;
                      ] ;
                    sp:variable [
                        sp:varName "dataStructure" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "dataStructure" ;
                          ] ;
                        sp:arg2 edg:partOf ;
                      ] ;
                    sp:variable [
                        sp:varName "informationAsset" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "determine output type" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:diagramLinkName
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "linkName" ;
          ]
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 "" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "~~" ;
                    sp:arg2 spin:_arg3 ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "maybeMultiples" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a edg:normalizeResourceString ;
                    sp:arg1 [
                        a ui:encodeNode ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                  ] ;
                sp:arg2 "~~" ;
                sp:arg3 [
                    a edg:normalizeResourceString ;
                    sp:arg1 [
                        a ui:encodeNode ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg4 [
                    sp:varName "maybeMultiples" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "linkName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/model/LINK_" ;
                    sp:arg2 [
                        a spif:encodeURL ;
                        sp:arg1 [
                            sp:varName "linkName" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "diagram link name" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:diagramNodeName
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "nodeName" ;
          ]
          [
            sp:varName "node" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                  ] ;
                sp:arg2 "~~" ;
                sp:arg3 [
                    a afn:localname ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nodeName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/model/NODE_" ;
                    sp:arg2 [
                        a spif:encodeURL ;
                        sp:arg1 [
                            sp:varName "nodeName" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "node" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "diagram node name" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:doesSoftwareExecutableNeedGivenInput
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:columnOf ;
                        sp:path2 [
                            a sp:SeqPath ;
                            sp:path1 edg:columnOf ;
                            sp:path2 [
                                a sp:AltPath ;
                                sp:path1 edg:tableOf ;
                                sp:path2 edg:viewOf ;
                              ] ;
                          ] ;
                      ] ;
                    sp:subject [
                        sp:varName "dataElement" ;
                      ] ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "dataElement" ;
                              ] ;
                            sp:predicate edg:input ;
                            sp:subject [
                                sp:varName "software" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            a sp:TriplePath ;
                            sp:object [
                                sp:varName "program" ;
                              ] ;
                            sp:path [
                                a sp:AltPath ;
                                sp:path1 edg:usesSoftwareProgram ;
                                sp:path2 edg:usesSoftwareExecutable ;
                              ] ;
                            sp:subject [
                                sp:varName "software" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dataElement" ;
                              ] ;
                            sp:predicate edg:input ;
                            sp:subject [
                                sp:varName "program" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareProgram ;
                        sp:path2 edg:usesSoftwareExecutable ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:input ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "does software executable need given input" ;
  rdfs:subClassOf edg:Functions ;
.
edg:doesSoftwareExecutableProduceGivenOutput
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:output ;
                        sp:path2 edg:producesInformationAsset ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareProgram ;
                        sp:path2 edg:usesSoftwareExecutable ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 [
                            a sp:SeqPath ;
                            sp:path1 edg:columnOf ;
                            sp:path2 edg:tableOf ;
                          ] ;
                        sp:path2 edg: ;
                      ] ;
                    sp:subject [
                        sp:varName "dataElement" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "output" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 [
                            a sp:SeqPath ;
                            sp:path1 edg:columnOf ;
                            sp:path2 edg:tableOf ;
                          ] ;
                        sp:path2 edg: ;
                      ] ;
                    sp:subject [
                        sp:varName "dataElement" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "program" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareProgram ;
                        sp:path2 edg:usesSoftwareExecutable ;
                      ] ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "program" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:output ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "does software executable produce given  output" ;
  rdfs:subClassOf edg:Functions ;
.
edg:downstreamSoftwareExecutable
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "softwareDependent" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "softwareDependent" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareProgram" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "softwareProgram" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "dataElement" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "softwareDependent" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:predicate edg:dependsOnDataFrom ;
                    sp:subject [
                        sp:varName "softwareDependent" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "showableSoftwareType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "softwareDependent" ;
              ] ;
          ]
          [
            a sp:Values ;
            sp:bindings (
                (
                  edg:SoftwareProgram
                )
                (
                  edg:BusinessApplication
                )
              ) ;
            sp:varNames (
                "showableSoftwareType"
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType edg:SoftwareExecutable ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "downstream software executable" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getCompositeParent
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "compositeParent" ;
          ]
          [
            sp:varName "compositionProperty" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate [
                sp:varName "compositionProperty" ;
              ] ;
            sp:subject [
                sp:varName "compositeParent" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:compositionProperty ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "compositionProperty" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get composite parent" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getDependencyTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "text" ;
              ] ;
            sp:predicate edg:linkType ;
            sp:subject [
                sp:varName "dependencyType" ;
              ] ;
          ]
          [
            sp:object edg:DependencyType ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dependencyType" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybeLlabel" ;
                    ] ;
                  sp:predicate edg:label ;
                  sp:subject [
                      sp:varName "dependencyType" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeLlabel" ;
                  ] ;
                sp:arg2 [
                    a spif:regex ;
                    sp:arg1 [
                        sp:varName "text" ;
                      ] ;
                    sp:arg2 "-" ;
                    sp:arg3 " " ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:text ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:label "get dependency link label" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getDependentBusinessApplication
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependentSoftware" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate edg:dependsOnDataFrom ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DIRECT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-INPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "sourceEndpoint" ;
                              ] ;
                            sp:predicate edg:serviceEndpoint ;
                            sp:subject spin:_arg1 ;
                          ]
                          [
                            sp:object [
                                sp:varName "sourceEndpoint" ;
                              ] ;
                            sp:predicate edg:source ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "targetEndpoint" ;
                              ] ;
                            sp:predicate edg:target ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "targetEndpoint" ;
                              ] ;
                            sp:predicate edg:serviceEndpoint ;
                            sp:subject [
                                sp:varName "dependentSoftware" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object spin:_arg1 ;
                            sp:predicate edg:source ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "dependentSoftware" ;
                              ] ;
                            sp:predicate edg:target ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object [
                                sp:varName "flowType" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "flowType" ;
                                  ] ;
                                sp:arg2 edg:Feedline ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:DEPTYPE_FEEDLINE ;
                            sp:variable [
                                sp:varName "dependencyType" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object [
                                sp:varName "flowType" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "flowType" ;
                                  ] ;
                                sp:arg2 edg:Dataflow ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:DEPTYPE_DATAFLOW ;
                            sp:variable [
                                sp:varName "dependencyType" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object [
                                sp:varName "flowType" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "flow" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "flowType" ;
                                  ] ;
                                sp:arg2 edg:LogicalFlow ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression edg:DEPTYPE_LOGICAL-FLOW ;
                            sp:variable [
                                sp:varName "dependencyType" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                )
                (
                  (
                    [
                      sp:object [
                          sp:varName "swp1" ;
                        ] ;
                      sp:predicate edg:usesSoftwareProgram ;
                      sp:subject spin:_arg1 ;
                    ]
                    [
                      sp:object [
                          sp:varName "fn" ;
                        ] ;
                      sp:predicate edg:usesSoftwareFunction ;
                      sp:subject [
                          sp:varName "swp1" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "data" ;
                        ] ;
                      sp:predicate edg:output ;
                      sp:subject [
                          sp:varName "fn" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "fn" ;
                        ] ;
                      sp:predicate edg:usesSoftwareFunction ;
                      sp:subject [
                          sp:varName "swp2" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:ne ;
                          sp:arg1 [
                              sp:varName "swp1" ;
                            ] ;
                          sp:arg2 [
                              sp:varName "swp2" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "swp2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "swp2" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dependentSoftware" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_FUNCTION-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "swp1" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "swp1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "swp2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "swp2" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dependentSoftware" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_PROGRAM-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "softwareExecutableType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dependentSoftware" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:BusinessApplication ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "softwareExecutableType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:BusinessApplication ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get dependent business application" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getDependentSoftwareProgram
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "dependentSoftware" ;
          ]
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate edg:dependsOnDataFrom ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DIRECT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_DATA-OUTPUT ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  (
                    [
                      sp:object [
                          sp:varName "swp1" ;
                        ] ;
                      sp:predicate edg:usesSoftwareProgram ;
                      sp:subject spin:_arg1 ;
                    ]
                    [
                      sp:object [
                          sp:varName "fn" ;
                        ] ;
                      sp:predicate edg:usesSoftwareFunction ;
                      sp:subject [
                          sp:varName "swp1" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "data" ;
                        ] ;
                      sp:predicate edg:output ;
                      sp:subject [
                          sp:varName "fn" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "fn" ;
                        ] ;
                      sp:predicate edg:usesSoftwareFunction ;
                      sp:subject [
                          sp:varName "swp2" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:ne ;
                          sp:arg1 [
                              sp:varName "swp1" ;
                            ] ;
                          sp:arg2 [
                              sp:varName "swp2" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "swp2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "swp2" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dependentSoftware" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_FUNCTION-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "swp1" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "swp1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "data" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "swp2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "swp2" ;
                      ] ;
                    sp:predicate edg:usesSoftwareProgram ;
                    sp:subject [
                        sp:varName "dependentSoftware" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "dependentSoftware" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_PROGRAM-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:BusinessApplication ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get dependent software program" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getDerivationMapInformation
  a spin:SelectTemplate ;
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "leftNodeType" ;
          ]
          [
            sp:varName "rightNodeType" ;
          ]
          [
            sp:varName "element" ;
          ]
          [
            sp:varName "elementType" ;
          ]
          [
            sp:varName "table" ;
          ]
          [
            sp:varName "tableType" ;
          ]
          [
            sp:varName "schema" ;
          ]
          [
            sp:varName "schemaType" ;
          ]
          [
            sp:varName "database" ;
          ]
          [
            sp:varName "databaseType" ;
          ]
          [
            sp:varName "server" ;
          ]
          [
            sp:varName "serverType" ;
          ]
          [
            sp:varName "leftObjectType" ;
          ]
          [
            sp:varName "rightObjectType" ;
          ]
          [
            sp:varName "leftObjectOutput" ;
          ]
          [
            sp:varName "rightObjectInput" ;
          ]
          [
            sp:varName "leftPredicate" ;
          ]
          [
            sp:varName "rightPredicate" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "leftNode" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "rightNode" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "leftNode" ;
                  ] ;
                sp:arg2 rdf:type ;
              ] ;
            sp:variable [
                sp:varName "maybeLeftNodeType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeLeftNodeType" ;
                  ] ;
                sp:arg2 edg:UNKNOWN-TYPE ;
              ] ;
            sp:variable [
                sp:varName "leftNodeType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "rightNode" ;
                  ] ;
                sp:arg2 rdf:type ;
              ] ;
            sp:variable [
                sp:varName "maybeRightNodeType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeLeftNodeType" ;
                  ] ;
                sp:arg2 edg:UNKNOWN-TYPE ;
              ] ;
            sp:variable [
                sp:varName "rightNodeType" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "element" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "rightNode" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "element" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "leftNode" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "element" ;
                          ] ;
                        sp:arg2 rdf:type ;
                      ] ;
                    sp:variable [
                        sp:varName "maybeElementType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "maybeElementType" ;
                          ] ;
                        sp:arg2 edg:UNKNOWN-TYPE ;
                      ] ;
                    sp:variable [
                        sp:varName "elementType" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "table" ;
                            ] ;
                          sp:predicate edg:columnOf ;
                          sp:subject [
                              sp:varName "element" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a spl:object ;
                              sp:arg1 [
                                  sp:varName "table" ;
                                ] ;
                              sp:arg2 rdf:type ;
                            ] ;
                          sp:variable [
                              sp:varName "maybeTableType" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  sp:varName "maybeTableType" ;
                                ] ;
                              sp:arg2 edg:UNKNOWN-TYPE ;
                            ] ;
                          sp:variable [
                              sp:varName "tableType" ;
                            ] ;
                        ]
                        [
                          a sp:Optional ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "schema" ;
                                  ] ;
                                sp:predicate edg:belongsToSchema ;
                                sp:subject [
                                    sp:varName "table" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a spl:object ;
                                    sp:arg1 [
                                        sp:varName "schema" ;
                                      ] ;
                                    sp:arg2 rdf:type ;
                                  ] ;
                                sp:variable [
                                    sp:varName "maybeSchemaType" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a sp:coalesce ;
                                    sp:arg1 [
                                        sp:varName "maybeSchemaType" ;
                                      ] ;
                                    sp:arg2 edg:UNKNOWN-TYPE ;
                                  ] ;
                                sp:variable [
                                    sp:varName "schemaType" ;
                                  ] ;
                              ]
                            ) ;
                        ]
                        [
                          a sp:Optional ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "database" ;
                                  ] ;
                                sp:predicate edg:tableOf ;
                                sp:subject [
                                    sp:varName "table" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a spl:object ;
                                    sp:arg1 [
                                        sp:varName "database" ;
                                      ] ;
                                    sp:arg2 rdf:type ;
                                  ] ;
                                sp:variable [
                                    sp:varName "maybeDatabaseType" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a sp:coalesce ;
                                    sp:arg1 [
                                        sp:varName "maybeDatabaseType" ;
                                      ] ;
                                    sp:arg2 edg:UNKNOWN-TYPE ;
                                  ] ;
                                sp:variable [
                                    sp:varName "databaseType" ;
                                  ] ;
                              ]
                            ) ;
                        ]
                      ) ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:usesSoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "leftPredicate" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "leftObject" ;
                      ] ;
                    sp:predicate [
                        sp:varName "leftPredicate" ;
                      ] ;
                    sp:subject [
                        sp:varName "leftNode" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "leftObject" ;
                          ] ;
                        sp:arg2 rdf:type ;
                      ] ;
                    sp:variable [
                        sp:varName "maybeLeftSubordinateObjectType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "maybeLeftSubordinateObjectType" ;
                          ] ;
                        sp:arg2 edg:UNKNOWN-TYPE ;
                      ] ;
                    sp:variable [
                        sp:varName "leftObjectType" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "leftObjectOutput" ;
                            ] ;
                          sp:predicate edg:output ;
                          sp:subject [
                              sp:varName "leftObject" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "leftObjectOutput" ;
                            ] ;
                          sp:predicate edg:input ;
                          sp:subject [
                              sp:varName "rightNode" ;
                            ] ;
                        ]
                      ) ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:usesSoftwareExecutable ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subPropertyOf ;
                      ] ;
                    sp:subject [
                        sp:varName "rightPredicate" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "rightObject" ;
                      ] ;
                    sp:predicate [
                        sp:varName "rightPredicate" ;
                      ] ;
                    sp:subject [
                        sp:varName "rightNode" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "rightObject" ;
                          ] ;
                        sp:arg2 rdf:type ;
                      ] ;
                    sp:variable [
                        sp:varName "maybeRightSubordinateObjectType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "maybeRightSubordinateObjectType" ;
                          ] ;
                        sp:arg2 edg:UNKNOWN-TYPE ;
                      ] ;
                    sp:variable [
                        sp:varName "rightObjectType" ;
                      ] ;
                  ]
                  [
                    a sp:Optional ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "rightObjectInput" ;
                            ] ;
                          sp:predicate edg:input ;
                          sp:subject [
                              sp:varName "rightObject" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "rightObjectInput" ;
                            ] ;
                          sp:predicate edg:output ;
                          sp:subject [
                              sp:varName "leftNode" ;
                            ] ;
                        ]
                      ) ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "leftNode" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "rightNode" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:DataElement ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "leftNodeType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "leftNode" ;
                      ] ;
                    sp:variable [
                        sp:varName "element" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "leftNodeType" ;
                      ] ;
                    sp:variable [
                        sp:varName "elementType" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:Table ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "leftNodeType" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "input" ;
                      ] ;
                    sp:predicate edg:input ;
                    sp:subject [
                        sp:varName "rightNode" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "leftNode" ;
                      ] ;
                    sp:predicate edg:columnOf ;
                    sp:subject [
                        sp:varName "input" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "leftNode" ;
                      ] ;
                    sp:variable [
                        sp:varName "element" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "leftNodeType" ;
                      ] ;
                    sp:variable [
                        sp:varName "elementType" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Determines the structure needed to show a derivation map. Currently works only for connections between software executables." ;
  rdfs:comment """TBD: Needs magic properties and functions to compute deeper structures that define dependencies. For example this is too simplistic:

  UNION
    {
        ?leftPredicate (rdfs:subPropertyOf)* edg:usesSoftwareExecutable .
        ?leftNode ?leftPredicate ?leftObject .
        BIND (spl:object(?leftObject, rdf:type) AS ?maybeLeftSubordinateObjectType) .
        BIND (COALESCE(?maybeLeftSubordinateObjectType, edg:UNKNOWN-TYPE) AS ?leftObjectType) .
        OPTIONAL {
            ?leftObject edg:output ?leftObjectOutput .
            ?rightNode edg:input ?leftObjectOutput .
        } .
    }
    UNION
    {
        ?rightPredicate (rdfs:subPropertyOf)* edg:usesSoftwareExecutable .
        ?rightNode ?rightPredicate ?rightObject .
        BIND (spl:object(?rightObject, rdf:type) AS ?maybeRightSubordinateObjectType) .
        BIND (COALESCE(?maybeRightSubordinateObjectType, edg:UNKNOWN-TYPE) AS ?rightObjectType) .
        OPTIONAL {
            ?rightObject edg:input ?rightObjectInput .
            ?leftNode edg:output ?rightObjectInput .
        } .
    }""" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get derivation map information" ;
  rdfs:subClassOf edg:DerivationMapSelectTemplates ;
.
edg:getDistinctResourcesFromResultSet
  rdfs:subClassOf edg:ResultSetSelectTemplates ;
.
edg:getLastPipelineStepOfPipeline
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "stepNumber" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "pipelineStep" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipeline" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "stepNumber" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStep" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pipeline ;
      spl:valueType edg:Pipeline ;
      rdfs:comment "pipeline" ;
    ] ;
  rdfs:comment "get last pipeline step is the last pipeline step of a given pipeline." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is last pipeline step of pipeline" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getLineageGramDataProvider
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:configGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:resourceURI=\"{= IRI(?resource) }\">
    <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
        <ui:resourceView ui:matchIds=\"lineagegram-data-provider\" ui:resource=\"{= ?resourceURI }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get lineageGram data provider" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:getLineageTargetsInViewFrame
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "nodeName" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "targetAsset" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object edg:lineageTargetRelationship ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg2 ;
                  sp:predicate edg:occursIn ;
                  sp:subject [
                      sp:varName "targetAsset" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetAsset" ;
                    ] ;
                  sp:predicate rdf:subject ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object edg:occursIn ;
                  sp:predicate rdf:predicate ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate rdf:object ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "nodeName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "source resource" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "target frame" ;
    ] ;
  rdfs:comment "Given a source node and a target frame name, uses edg:lineageTargetRelationship property to find sub-properties that point to resource occurrences. The funcion relies on the temp graph temgraphLG to look up resource occurrences in the view frame." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get lineage targets in view frame" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getMappingFlowTargetOutput
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "targetOutput" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "sourceOutput" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate edg:mapping ;
            sp:subject [
                sp:varName "mappings" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "mappings" ;
              ] ;
            sp:predicate edg:mappingsCollection ;
            sp:subject [
                sp:varName "sourceEndpoint" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceEndpoint" ;
              ] ;
            sp:predicate edg:source ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object [
                sp:varName "targetEndpoint" ;
              ] ;
            sp:predicate edg:target ;
            sp:subject spin:_arg2 ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "targetMapping" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 edg:mappingsCollection ;
                sp:path2 edg:mapping ;
              ] ;
            sp:subject [
                sp:varName "targetEndpoint" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceOutput" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "targetMapping" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetOutput" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "targetMapping" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:Mapping ;
      rdfs:comment "a mapping on the source of a flow" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType edg:Flow ;
      rdfs:comment "the flow that is on the endpoint that has the mapping" ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get mapping flow taget output" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getOutputContainer
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "output" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "myType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:InformationAsset ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "myType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "output" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "myType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:exists ;
                            sp:elements (
                                [
                                  a sp:TriplePath ;
                                  sp:object edg:DatabaseColumn ;
                                  sp:path [
                                      a sp:ModPath ;
                                      sp:modMax -2 ;
                                      sp:modMin 0 ;
                                      sp:subPath rdfs:subClassOf ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "myType" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                        sp:arg2 [
                            a spl:object ;
                            sp:arg1 spin:_arg1 ;
                            sp:arg2 edg:columnOf ;
                          ] ;
                        sp:arg3 [
                            a sp:if ;
                            sp:arg1 [
                                a sp:exists ;
                                sp:elements (
                                    [
                                      a sp:TriplePath ;
                                      sp:object edg:DataElement ;
                                      sp:path [
                                          a sp:ModPath ;
                                          sp:modMax -2 ;
                                          sp:modMin 0 ;
                                          sp:subPath rdfs:subClassOf ;
                                        ] ;
                                      sp:subject [
                                          sp:varName "myType" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                            sp:arg2 [
                                a sp:coalesce ;
                                sp:arg1 [
                                    a spl:object ;
                                    sp:arg1 spin:_arg1 ;
                                    sp:arg2 edg:dataElementOf ;
                                  ] ;
                                sp:arg2 spin:_arg1 ;
                              ] ;
                            sp:arg3 spin:_arg1 ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "output" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get output container" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getPipelineStepInfoAssets
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "infoAsset" ;
          ]
          [
            sp:varName "infoAssetDataset" ;
          ]
          [
            sp:varName "software" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "infoAsset" ;
                      ] ;
                    sp:predicate edg:producesInformationAsset ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:subject ;
                        sp:arg1 edg:partOf ;
                        sp:arg2 [
                            sp:varName "infoAsset" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:path [
                        a sp:AltPath ;
                        sp:path1 edg:usesSoftwareExecutable ;
                        sp:path2 edg:usesSoftwareProgram ;
                      ] ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "infoAssetOrDataElement" ;
                      ] ;
                    sp:predicate edg:output ;
                    sp:subject [
                        sp:varName "software" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "infoAssetOrDataElement" ;
                          ] ;
                        sp:arg2 edg:columnOf ;
                      ] ;
                    sp:variable [
                        sp:varName "infoAssetDataset" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:object ;
                        sp:arg1 [
                            sp:varName "infoAssetDataset" ;
                          ] ;
                        sp:arg2 edg:partOf ;
                      ] ;
                    sp:variable [
                        sp:varName "infoAsset" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:PipelineStep ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get pipeline step info assets" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getPipelineStepsAndSoftwareExecutables
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "pipeLine" ;
          ]
          [
            sp:varName "pipeLineStep" ;
          ]
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "output" ;
          ]
          [
            sp:varName "outputType" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "pipeLine" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "pipeLine" ;
                  ] ;
                sp:arg2 edg:pipelineStep ;
              ] ;
            sp:variable [
                sp:varName "pipeLineStep" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "software" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 [
                    a sp:ModPath ;
                    sp:modMax -1 ;
                    sp:modMin 0 ;
                    sp:subPath edg:pipelineStep ;
                  ] ;
                sp:path2 [
                    a sp:AltPath ;
                    sp:path1 edg:usesSoftwareExecutable ;
                    sp:path2 edg:usesSoftwareProgram ;
                  ] ;
              ] ;
            sp:subject [
                sp:varName "pipeLine" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybeOutput" ;
                    ] ;
                  sp:predicate edg:output ;
                  sp:subject [
                      sp:varName "software" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "maybeOutputType" ;
                          ] ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "maybeOutput" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeOutput" ;
                  ] ;
                sp:arg2 edg:UNKNOWN ;
              ] ;
            sp:variable [
                sp:varName "output" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeOutputType" ;
                  ] ;
                sp:arg2 edg:UNKNOWN-TYPE ;
              ] ;
            sp:variable [
                sp:varName "outputType" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:LineageModel ;
      rdfs:comment "pipeline step list string" ;
    ] ;
  rdfs:comment "Returns all the pipeline steps of one or more pipelines associated with a lineage model" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get pipeline steps" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getResourceOccurrenceInViewFrame
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "nodeOccurrence" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resource occurrence in view frame" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getResourceViewFrameFromTempGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "viewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:resource ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "viewFrame" ;
                    ] ;
                  sp:predicate edg:viewFrame ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
                [
                  sp:object edg:ViewFrameNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "nodeOccurrence" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Assumes one occurrence. One use case is where there is no traceability from a node." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "Get resource view frame from temp graph" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getSoftwareDependencyType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "dependencyType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:BusinessApplication ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_APPLICATION-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareProgram ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_PROGRAM-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:SoftwareFunction ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_FUNCTION-IO ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:LineageModel ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "softwareExecutableType" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:DEPTYPE_LINEAGEMODEL ;
                    sp:variable [
                        sp:varName "dependencyType" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get software dependency type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getSubjectWithGivenPropertyToObject
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
          [
            sp:varName "subjectViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "aProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate [
                sp:varName "aProperty" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "subject" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subjectType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subjectType" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object edg:VFS_LG-LineageModel ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object 0 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate edg:getViewframeForDepictionClass ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subjectViewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "For a given resource and property, returns the subject for referencing subjects. Includes sub-properties of the specified property." ;
  rdfs:label "get subject with given property to object" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getViewFrameForResource
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resourceViewFrame" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resourceType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resourceType" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrameStructure" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object 0 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate edg:getViewframeForDepictionClass ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resourceViewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "pipeline" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "pipeline" ;
    ] ;
  rdfs:comment "get view frame for resource" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get view frame for resource" ;
  rdfs:subClassOf edg:Functions ;
.
edg:getViewFramesDetails
  a spin:Template ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "viewFrame" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "borderColor" ;
          ]
          [
            sp:varName "backgroundColor" ;
          ]
          [
            sp:varName "spaceShare" ;
          ]
          [
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "viewFrame" ;
              ] ;
            sp:predicate edg:viewFrame ;
            sp:subject [
                sp:varName "viewFrameStructure" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "borderColor" ;
              ] ;
            sp:predicate edg:borderColor ;
            sp:subject [
                sp:varName "viewFrame" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "backgroundColor" ;
              ] ;
            sp:predicate edg:backgroundColor ;
            sp:subject [
                sp:varName "viewFrame" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate edg:label ;
            sp:subject [
                sp:varName "viewFrame" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "spaceShare" ;
              ] ;
            sp:predicate edg:spaceShare ;
            sp:subject [
                sp:varName "viewFrame" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "order" ;
              ] ;
            sp:predicate sh:order ;
            sp:subject [
                sp:varName "viewFrame" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrameStructure ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get view frames detailes" ;
  rdfs:subClassOf edg:SelectTemplates ;
.
edg:getViewFramesForResource
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:configGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<ui:group let:resourceURI=\"{= IRI(?resource) }\">
    <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
        <ui:resourceView ui:matchIds=\"lineagegram-viewframes\" ui:resource=\"{= ?resourceURI }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get view frames for resource" ;
  rdfs:subClassOf edg:LineageGramServices ;
.
edg:getViewframeForDepictionClass
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:orderBy (
          [
            sp:varName "depth" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "viewFrame" ;
          ]
          [
            sp:varName "depth" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate edg:assetType ;
                    sp:subject [
                        sp:varName "viewFrame" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "viewFrame" ;
                      ] ;
                    sp:predicate edg:viewFrame ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg3 ;
                    sp:variable [
                        sp:varName "depth" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "viewFrame" ;
                      ] ;
                    sp:predicate edg:viewFrame ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object spin:_arg1 ;
                              sp:predicate edg:assetType ;
                              sp:subject [
                                  sp:varName "viewFrame" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:predicate rdfs:subClassOf ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object edg:AssetClass ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "parentClass" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:add ;
                        sp:arg1 spin:_arg3 ;
                        sp:arg2 1 ;
                      ] ;
                    sp:variable [
                        sp:varName "newDepth" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "parentClass" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object spin:_arg2 ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "newDepth" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate edg:getViewframeForDepictionClass ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "viewFrame" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?4" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "depth" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 spin:_arg1 ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression edg:VF_ViewportFrame ;
                    sp:variable [
                        sp:varName "viewFrame" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg3 ;
                    sp:variable [
                        sp:varName "depth" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue 0 ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:AssetClass ;
      rdfs:comment "Asset class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType edg:ViewFramesShape ;
      rdfs:comment "viewframe structure" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get viewframe for depiction class" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getViewframeForDepictionClassv2
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "viewFrame" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "maybeViewFrame" ;
              ] ;
            sp:predicate edg:viewFrame ;
            sp:subject spin:_arg2 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "maybeViewFrame" ;
                  ] ;
                sp:arg2 edg:assetType ;
              ] ;
            sp:variable [
                sp:varName "maybeMyAssetType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "maybeMyAssetType" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    sp:varName "maybeMyAssetType" ;
                  ] ;
                sp:arg3 [
                    a edg:getViewframeForDepictionClassv2 ;
                    sp:arg1 [
                        a spl:object ;
                        sp:arg1 spin:_arg1 ;
                        sp:arg2 rdfs:subClassOf ;
                      ] ;
                    sp:arg2 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "viewFrame" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:AssetClass ;
      rdfs:comment "Asset class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType edg:ViewFramesShape ;
      rdfs:comment "viewframe structure" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "get viewframe for depiction class" ;
  rdfs:subClassOf edg:Functions ;
.
edg:highestDepictionForSoftwareExecutable
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              a sp:TriplePath ;
                              sp:object [
                                  sp:varName "software" ;
                                ] ;
                              sp:path [
                                  a sp:AltPath ;
                                  sp:path1 edg:hasSoftwareProgram ;
                                  sp:path2 edg:usesSoftwareFunction ;
                                ] ;
                              sp:subject [
                                  sp:varName "parent" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "software" ;
                      ] ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:predicate edg:hasSoftwareProgram ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a edg:highestDepictionForSoftwareExecutable ;
                        arg:software [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "software" ;
                      ] ;
                    sp:predicate edg:usesSoftwareFunction ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a edg:highestDepictionForSoftwareExecutable ;
                        arg:software [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:software ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "highest depiction for software executable" ;
  rdfs:seeAlso edg:getHighestParentOfDatabaseColunm ;
  rdfs:seeAlso edg:getHighestParentOfResource ;
  rdfs:subClassOf edg:Functions ;
.
edg:isFlowline
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:Flow ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "type" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the relationship tree" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is flowline" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isKnownNodeInDerivationMap
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:DerivationMapNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "derivationMapNode" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "node" ;
                    ] ;
                  sp:predicate arg:node ;
                  sp:subject [
                      sp:varName "derivationMapNode" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphDM ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is known node in derivation map" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isSupportedImpactDiagramType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:Provenance ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "type" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:EnumeratedValue ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the relationship tree" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Impact visualization is possible for all EDG assets that have the asspect edg:Proveance, or a subclass of edg:Provenance. The simplest form is expressed using the provernance ontoloigy property prov:wasDerivedFrom." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is supported impact diagram type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isSupportedLineageType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object edg:Provenance ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "type" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object edg:EnumeratedValue ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "resource" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the relationship tree" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Lineage is possible for all EDG assets that have the asspect edg:Proveance, or a subclass of edg:Provenance. The simplest form of lineage is expressed using the provernance ontoloigy property prov:wasDerivedFrom." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is supported lineagegram type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:isSupportedUsageDiagramType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parentClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "type" ;
              ] ;
          ]
          [
            a sp:Values ;
            sp:bindings (
                (
                  edg:GlossaryTerm
                )
              ) ;
            sp:varNames (
                "parentClass"
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the relationship tree" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is supported lineagegram type" ;
  rdfs:subClassOf edg:Functions ;
.
edg:lastInfoAssets
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "infoAssetEncoded" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "dataElement" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "dataElement" ;
                        ] ;
                      sp:predicate edg:input ;
                      sp:subject [
                          sp:varName "targetSoftware" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "dataElement" ;
                  ] ;
                sp:arg2 edg:columnOf ;
              ] ;
            sp:variable [
                sp:varName "maybeTableAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "maybeTableAsset" ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataElement" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAsset" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:encodeNode ;
                sp:arg1 [
                    sp:varName "infoAsset" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAssetEncoded" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "last info assets" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:lastSoftwareExecutablesAndInfoAssets
  a spin:MagicProperty ;
  sp:query [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "app" ;
          ]
          [
            sp:varName "function" ;
          ]
          [
            sp:varName "infoList" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "edg.swe.tbb:A00,edg.swe.tbb:G04,edg.swe.tbb:E00,edg.swe.tbb:F01,edg.swe.tbb:C04,edg.swe.tbb:B04,edg.swe.tbb:A04" ;
            sp:variable [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "appAsString" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "list" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object "," ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "appAsString" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "app" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate edg:GetFirstSoftwareExecutablesAndInfoAssetLists ;
            sp:subject [
                sp:varName "list" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "app" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "function" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?4" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "infoList" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Test with:" ;
    ] ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "software" ;
          ]
          [
            sp:varName "infoAssetList" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:groupBy (
                    [
                      sp:varName "software" ;
                    ]
                  ) ;
                sp:resultVariables (
                    [
                      sp:varName "software" ;
                    ]
                    [
                      sp:expression [
                          a sp:GroupConcat ;
                          sp:expression [
                              sp:varName "infoAssetEncoded" ;
                            ] ;
                          sp:separator "," ;
                        ] ;
                      sp:varName "infoList" ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object [
                          sp:varName "?0" ;
                        ] ;
                      sp:predicate spif:split ;
                      sp:subject [
                          sp:varName "softwareQName" ;
                        ] ;
                    ]
                    [
                      sp:object spin:_arg1 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object "," ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a ui:decodeNode ;
                          sp:arg1 [
                              sp:varName "softwareQName" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?2" ;
                        ] ;
                      sp:predicate edg:lastInfoAssets ;
                      sp:subject [
                          sp:varName "software" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "infoAssetEncoded" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a edg:sortStringListRemovingDuplicates ;
                sp:arg1 [
                    sp:varName "infoList" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "infoAssetList" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment "Returns the information assets that will be in the last frame of a lineagegram." ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "last software executables and info assets" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:makeDerivationMapDataElementLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "resourceType" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object edg:DataElement ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "resourceType" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybePhysicalDatatype" ;
                    ] ;
                  sp:predicate edg:physicalDatatype ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybeLogicalDatatype" ;
                    ] ;
                  sp:predicate edg:logicalDatatype ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maybeDatatype" ;
                    ] ;
                  sp:predicate edg:datatype ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    a sp:coalesce ;
                    sp:arg1 [
                        sp:varName "maybePhysicalDatatype" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "maybeLogicalDatatype" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "maybeDatatype" ;
                      ] ;
                    sp:arg4 edg:UNKNOWN-TYPE ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType edg:DataElement ;
    ] ;
  vaem:todo "incorporate lengths and precisions" ;
  rdfs:label "make derivation map data element label" ;
  rdfs:subClassOf edg:Functions ;
.
edg:normalizeResourceString
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:starts-with ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 "<" ;
                  ] ;
                sp:arg2 [
                    a afn:substr ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 1 ;
                    sp:arg3 [
                        a fn:string-length ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                  ] ;
                sp:arg3 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "str1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:ends-with ;
                    sp:arg1 [
                        sp:varName "str1" ;
                      ] ;
                    sp:arg2 ">" ;
                  ] ;
                sp:arg2 [
                    a afn:substr ;
                    sp:arg1 [
                        sp:varName "str1" ;
                      ] ;
                    sp:arg2 0 ;
                    sp:arg3 [
                        a sp:sub ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "str1" ;
                              ] ;
                          ] ;
                        sp:arg2 1 ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "str1" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "resource QName" ;
    ] ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "normalize resource string" ;
  rdfs:subClassOf edg:Functions ;
.
edg:numberOfChildrenOfGivenNodeInDerivationMap
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "maybeChildOfParent" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:DerivationMapNode ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "maybeChildOfParent" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "parent" ;
                    ] ;
                  sp:predicate arg:parent ;
                  sp:subject [
                      sp:varName "maybeChildOfParent" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphDM ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "number of children of given node in Derivation Map" ;
  rdfs:subClassOf edg:Functions ;
.
edg:propertyPlacementConstraintShape
  sh:in (
      "a"
      "b"
    ) ;
.
edg:report
  a owl:ObjectProperty ;
  a owl:TransitiveProperty ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "report" ;
.
edg:resultSetRowsWithColumnValue
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 spin:_arg2 ;
                sp:arg3 spin:_arg3 ;
              ] ;
            sp:variable [
                sp:varName "cell" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "cell" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:str ;
                    sp:arg1 spin:_arg2 ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType spr:Table ;
      rdfs:comment "The spr:Table to iterate over." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The row of the spr:Table" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The column of the spr:Table" ;
    ] ;
  rdfs:comment """Returns the index of a row with a given column that is non-empy.

For example for 'inputs', the resultset passed should have the following structure:

col0: ?leftNodeSoftwareExecutable
col1: ?leftNodeSoftwareType
col2: ?rightNodeSoftwareType
col3: ?softwareFunction
col4: ?softwareFunctionType
col5: ?rightNodeSoftwareExecutable
col6: ?dataElement
col7: ?sourceEndpoint
col8: ?targetEndpoint
col9: ?flow""" ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/spin/library> ;
  rdfs:label "resultSet rows with column value" ;
  rdfs:subClassOf spr:Functions ;
.
edg:softwareHasNoUpstreamSoftwareDependencies
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "viewFrame" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate edg:diagramNodeName ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nodeName" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nodeOccurrence" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "nodeId" ;
                              ] ;
                            sp:predicate edg:id ;
                            sp:subject [
                                sp:varName "nodeOccurrence" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "nodeId" ;
                              ] ;
                            sp:predicate edg:targetNode ;
                            sp:subject [
                                sp:varName "linkOccurrence" ;
                              ] ;
                          ]
                          [
                            sp:object edg:ViewFrameLink ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "linkOccurrence" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraphLG ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:viewFrame ;
      spl:valueType edg:ViewFrame ;
    ] ;
  spin:returnType xsd:boolean ;
  ui:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "software has no upstream software dependencies" ;
  rdfs:subClassOf edg:Functions ;
.
arg:actionScript
  a rdf:Property ;
  rdfs:label "action script" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:columns
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "columns" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:count
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "count" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isDownstreamPlaceholder
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is downstream placeholder" ;
  rdfs:range xsd:boolean ;
  rdfs:subPropertyOf sp:arg ;
.
arg:issUpstreamPlaceholder
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "is upstream placeholder" ;
  rdfs:range xsd:boolean ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pipeline
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "pipeline" ;
.
arg:pipelineStep
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "pipeline step" ;
.
arg:provider
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "provider" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:software
  a rdf:Property ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:label "software" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:source
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sourceList
  a rdf:Property ;
  rdfs:label "source list" ;
  rdfs:subPropertyOf arg:list ;
.
arg:target
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:targetList
  a rdf:Property ;
  rdfs:label "target list" ;
  rdfs:subPropertyOf arg:list ;
.
sml:ApplyOWLIM
  a ui:Service ;
  rdfs:label "Apply OWLIM" ;
  rdfs:subClassOf sml:Elements ;
.
swa:DerviationMapDataService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:leftNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rightNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:private true ;
  ui:prototype """
<swon:Object letrs:parentClasses=\"{#
        SELECT DISTINCT *
        WHERE {
            OPTIONAL {
                ?leftNode a ?leftNodeType .
            } .
            OPTIONAL {
                ?rightNode a ?rightNodeType .
            } .
            FILTER (!isBlank(?leftNode)) .
            FILTER (!isBlank(?rightNode)) .
            OPTIONAL {
                ?rightNode edg:input ?element .
                ?leftNode edg:output ?element .
                OPTIONAL {
                    ?element a ?elementType .
                } .
                FILTER (!isBlank(?element)) .
                OPTIONAL {
                    ?element edg:columnOf ?table .
                    OPTIONAL {
                        ?table a ?tableType .
                    } .
                    FILTER (!isBlank(?table)) .
                    OPTIONAL {
                        ?table edg:tableOf ?schema .
                        OPTIONAL {
                            ?schema a ?schemaType .
                        } .
                        FILTER (!isBlank(?schema)) .
                        OPTIONAL {
                            ?schema ?anyRelation ?dataBase .
                            OPTIONAL {
                                ?dataBase a ?dataBaseType .
                            } .
                            FILTER (!isBlank(?dataBase)) .
                            FILTER NOT EXISTS {
                                VALUES ?anyRelation {
                                    rdf:type
                                    rdfs:label
                                    edg:name
                                } .
                            } .
                            OPTIONAL {
                                ?dataBase ?anyRelation2 ?server .
                                OPTIONAL {
                                    ?server a ?serverType .
                                } .
                                FILTER (!isBlank(?server)) .
                                FILTER NOT EXISTS {
                                    VALUES ?anyRelation2 {
                                        rdf:type
                                        rdfs:label
                                        edg:name
                                    } .
                                } .
                            } .
                        } .
                    } .
                } .
            } .
            OPTIONAL {
                ?leftNode ?leftPredicat ?leftObject .
                OPTIONAL {
                    ?leftObject a ?leftObjectType .
                } .
                OPTIONAL {
                    ?leftObject edg:output ?leftObjectOutput .
                } .
                FILTER (!isBlank(?leftObject)) .
                VALUES ?leftPredicat {
                    edg:usesSoftwareFunction
                    edg:usesSoftwareProgram
                    edg:usesSoftwareExecutable
                    edg:usesPipeline
                    edg:usesScript
                } .
            } .
            OPTIONAL {
                ?rightNode ?rightPredicat ?rightObject .
                OPTIONAL {
                    ?rightObject a ?rightObjectType .
                } .
                OPTIONAL {
                    ?rightObject edg:input ?rightObjectInput .
                } .
                FILTER (!isBlank(?rightObject)) .
                VALUES ?rightPredicat {
                    edg:usesSoftwareFunction
                    edg:usesSoftwareProgram
                    edg:usesSoftwareExecutable
                    edg:usesPipeline
                    edg:usesScript
                } .
            } .
        } }\">
    <swon:Value arg:name=\"nodes\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?leftNode }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftNode) }\"/>
                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?leftNodeType) }\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"id\" arg:value=\"{= ?rightNode }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightNode) }\"/>
                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?rightNodeType) }\"/>
            </swon:Object>
            <ui:if ui:condition=\"{= spr:rowCount(?parentClasses) &gt; 0 }\">
                <swon:Comma/>
                <ui:forEach ui:resultSet=\"{= ?parentClasses }\" ui:separator=\",\">
                    <swon:Object>
                        <swon:Value arg:name=\"id\" arg:value=\"{= ?element }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?element) }\"/>
                        <swon:Value arg:name=\"parent\" arg:value=\"{= ?table }\"/>
                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?elementType) }\"/>
                    </swon:Object>
                    <ui:if ui:condition=\"{= !spr:isEmpty(?table) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?table }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?table) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?schema }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?tableType) }\"/>
                        </swon:Object>
                        <ui:if ui:condition=\"{= !spr:isEmpty(?schema) }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"{= ?schema }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?schema) }\"/>
                                <swon:Value arg:name=\"parent\" arg:value=\"{= ?dataBase }\"/>
                                <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?schemaType) }\"/>
                            </swon:Object>
                            <ui:if ui:condition=\"{= !spr:isEmpty(?dataBase) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"id\" arg:value=\"{= ?dataBase }\"/>
                                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?dataBase) }\"/>
                                    <swon:Value arg:name=\"anyRelation\" arg:value=\"{= ?anyRelation2 }\"/>
                                    <swon:Value arg:name=\"parent\" arg:value=\"{= ?server }\"/>
                                    <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?dataBaseType) }\"/>
                                </swon:Object>
                                <ui:if ui:condition=\"{= !spr:isEmpty(?server) }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"id\" arg:value=\"{= ?server }\"/>
                                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?server) }\"/>
                                        <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?serverType) }\"/>
                                    </swon:Object>
                                </ui:if>
                            </ui:if>
                        </ui:if>
                    </ui:if>
                    <ui:if ui:condition=\"{= !spr:isEmpty(?leftObject) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?leftObject }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?leftObject) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?leftNode }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?leftObjectType) }\"/>
                        </swon:Object>
                    </ui:if>
                    <ui:if ui:condition=\"{= !spr:isEmpty(?rightObject) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"{= ?rightObject }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rightObject) }\"/>
                            <swon:Value arg:name=\"parent\" arg:value=\"{= ?rightNode }\"/>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ui:label(?rightObjectType) }\"/>
                        </swon:Object>
                    </ui:if>
                </ui:forEach>
            </ui:if>
        </swon:Array>
    </swon:Value>
    <swon:Value arg:name=\"edges\">
        <swon:Array>
            <ui:if ui:condition=\"{= spr:rowCount(?parentClasses) &gt; 0 }\">
                <ui:forEach ui:indexVar=\"rowIndex\" ui:resultSet=\"{= ?parentClasses }\" ui:separator=\",\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?element) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"http://edg.topbraid.solutions/model/output\"/>
                            <swon:Value arg:name=\"target\" arg:value=\"{= ?element }\"/>
                            <swon:Value arg:name=\"source\" arg:value=\"{= ?leftNode }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"output\"/>
                        </swon:Object>
                        <swon:Object>
                            <swon:Value arg:name=\"id\" arg:value=\"http://edg.topbraid.solutions/model/input\"/>
                            <swon:Value arg:name=\"target\" arg:value=\"{= ?rightNode }\"/>
                            <swon:Value arg:name=\"source\" arg:value=\"{= ?element }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"input\"/>
                        </swon:Object>
                        <ui:if ui:condition=\"{= ?element = ?leftObjectOutput }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"http://edg.topbraid.solutions/model/output\"/>
                                <swon:Value arg:name=\"target\" arg:value=\"{= ?element }\"/>
                                <swon:Value arg:name=\"source\" arg:value=\"{= ?leftObject }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"output\"/>
                            </swon:Object>
                        </ui:if>
                        <ui:if ui:condition=\"{= ?element = ?rightObjectInput }\">
                            <swon:Object>
                                <swon:Value arg:name=\"id\" arg:value=\"http://edg.topbraid.solutions/model/input\"/>
                                <swon:Value arg:name=\"target\" arg:value=\"{= ?rightObject }\"/>
                                <swon:Value arg:name=\"source\" arg:value=\"{= ?element }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"input\"/>
                            </swon:Object>
                        </ui:if>
                    </ui:if>
                </ui:forEach>
            </ui:if>
        </swon:Array>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/diagram/lg/library-common> ;
  rdfs:subClassOf ui:JSONServices ;
.
rdfs:Resource
  edg:isDepictionType true ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service-other-node\" ui:priority=\"{= 10 }\">
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"derivation-map-data-service\" ui:priority=\"{= 10 }\">
    <edg:FallbackDerivationMapDataService arg:leftNode=\"{= ?leftNode }\" arg:rightNode=\"{= ?rightNode }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"impact-diagram\" ui:priority=\"{= -1 }\">
    <script>swa.populateModalDialogAskingForBody('edg:DownstreamTraceabilityNotSupportedInThisReleaseAlert','Alert on {= ui:label(edg:getEDGresourceType(?this)) }: {= ui:label(?this) }',null)</script>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-data-provider\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramDataProviderDataService arg:dataProvider=\"{= edg:BuildJSONforLineageModelLineageGram }\" arg:provider=\"{= rdfs:Resource }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-expansion-upstream\" ui:priority=\"{= 10 }\"/>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"lineagegram-viewframes\" ui:priority=\"{= 10 }\">
    <edg:BuildJSONforLineageGramViewFramesDataService arg:provider=\"{= rdfs:Resource }\" edg:viewFrameStructure=\"{= edg:VFS_LG-LineageModel }\"/>
</ui:group>
"""^^ui:Literal ;
.
[
  a edg:isSupportedLineageType ;
  arg:resource [
      sp:varName "resource" ;
    ] ;
].
