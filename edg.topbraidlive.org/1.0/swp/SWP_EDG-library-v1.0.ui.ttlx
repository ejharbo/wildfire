# baseURI: http://edg.topbraid.solutions/1.0/swp/library
# imports: http://edg.topbraid.solutions/1.0/schema/core
# imports: http://edg.topbraid.solutions/1.0/schema/datamodels
# imports: http://edg.topbraid.solutions/1.0/spin/library
# imports: http://edg.topbraidlive.org/1.0/config/diagrams
# imports: http://spinrdf.org/spinx
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork
# imports: http://www.w3.org/ns/shacl#

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraid.solutions/1.0/swp/library>
  rdf:type owl:Ontology ;
  rdfs:label "EDG SWP Library" ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/core> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/datamodels> ;
  owl:imports <http://edg.topbraid.solutions/1.0/spin/library> ;
  owl:imports <http://edg.topbraidlive.org/1.0/config/diagrams> ;
  owl:imports <http://spinrdf.org/spinx> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork> ;
  owl:imports sh: ;
.
edg:Elements
  rdf:type ui:NodeClass ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/swp/library> ;
  rdfs:label "Elements" ;
  rdfs:subClassOf ui:Element ;
.
edg:ExtractSubGraph
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate edg:reach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate edg:maxReach ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:myMaxReach=\"{= COALESCE(?maxReach, 100) }\">
    <ui:try>
        <ui:if ui:condition=\"{= !bound(?dataGraph) }\">
            <ui:throw ui:message=\"No datagraph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= !bound(?graph) }\">
            <ui:throw ui:message=\"No results graph provided\"/>
        </ui:if>
        <ui:if ui:condition=\"{= ?reach &lt;= ?myMaxReach }\">
            <!--ui:dumpScope ui:message=\"AAA1: edg:ExtractSubGraph - subject is {= ?subject } at reach of {= str(?reach) } with max reach of {= ?maxReach }\"/-->
            <ui:group letrs:triples=\"{#
                    SELECT ?subject ?p ?o
                    WHERE {
                        GRAPH ?dataGraph {
                            ?subject ?p ?o .
                        } .
                    } }\">
                <ui:forEach ui:resultSet=\"{= ?triples }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                GRAPH ?graph {
                                    ?subject ?p ?o .
                                } .
                            }
                            WHERE {
                                GRAPH ?dataGraph {
                                    ?subject ?p ?o .
                                } .
                            } }\"/>
                    <ui:if ui:condition=\"{= isIRI(?o) &amp;&amp; bound(?o) }\">
                        <ui:group let:isKnown=\"{= EXISTS {
                            GRAPH ?graph {
                                ?o ?someP ?someO .
                            } .
                        } }\">
                            <!--ui:dumpScope ui:message=\"AAA2: edg:ExtractSubGraph - subject is {= ?o } - is known is {= ?isKnown }\"/-->
                            <ui:if ui:condition=\"{= !?isKnown }\">
                                <edg:ExtractSubGraph arg:dataGraph=\"{= ?dataGraph }\" arg:graph=\"{= ?graph }\" arg:subject=\"{= ?o }\" edg:maxReach=\"{= ?myMaxReach }\" edg:reach=\"{= ?reach + 1 }\"/>
                            </ui:if>
                        </ui:group>
                    </ui:if>
                </ui:forEach>
            </ui:group>
        </ui:if>
    </ui:try>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Given a resource and a graph for results inserts into the graph the resources triples and those of its referenced resources. The reach arguments control the recursive execution." ;
  rdfs:label "extract subgraph" ;
  rdfs:subClassOf edg:Elements ;
.
edg:SelectTemplates
  rdf:type spin:Template ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/swp/library> ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf edg:Templates ;
.
edg:Templates
  rdf:type spin:Template ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/swp/library> ;
  rdfs:label "Templates" ;
  rdfs:subClassOf spin:Templates ;
.
edg:TestGetAssetCollections
  rdf:type ui:NodeClass ;
  ui:prototype """
<ui:group>
    <h1>Test Get Asset Collections</h1>
    <ui:call ui:template=\"{= edg:getAssetCollectionInstances }\" ui:varName=\"assetCollectionInstances\">
        <ui:if ui:condition=\"{= spr:rowCount(?assetCollectionInstances) = 0 }\">
            <p>Nothing found</p>
        </ui:if>
        <ui:else>
            <!-- p>see TBC</p -->
            <table class=\"swa-relevant-properties\">
                <tr>
                    <th class=\"swa-relevant-properties\">Ontology</th>
                    <th class=\"swa-relevant-properties\">ProjectType</th>
                    <th class=\"swa-relevant-properties\">ProjectTypeLabel</th>
                    <th class=\"swa-relevant-properties\">Data Steward</th>
                </tr>
                <ui:forEach ui:resultSet=\"{= ?assetCollectionInstances }\">
                    <tr>
                        <td class=\"swa-relevant-properties\">{= ?label }</td>
                        <td class=\"swa-relevant-properties edg-test-get-asset-collections-min-width\">
                            <swa:URIResourceViewer arg:object=\"{= ?projectType }\"/>
                        </td>
                        <td class=\"swa-relevant-properties\">{= ?projectTypeLabel }</td>
                        <!--td class=\"swa-relevant-properties\">{= ?projectTypeLabel }</td -->
                    </tr>
                </ui:forEach>
            </table>
            <!---ui:debug>
<ui:dumpResultSet ui:message=\"edg:TestGetAssetCollections\"
  ui:resultSet=\"{= ?assetCollectionInstances }\"/>
</ui:debug -->
        </ui:else>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/swp/library> ;
  rdfs:label "Test get asset collections" ;
  rdfs:subClassOf edg:Elements ;
.
edg:getAssetCollectionInstances
  rdf:type spin:SelectTemplate ;
  spin:body [
      rdf:type sp:Select ;
      sp:orderBy (
          [
            sp:varName "projectTypeLabel" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "ontology" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "projectType" ;
          ]
          [
            sp:varName "projectTypeLabel" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type swa:configGraph ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "?0" ;
                    ] ;
                  sp:predicate edg:graphsUnderTeamControl ;
                  sp:subject () ;
                ]
                [
                  sp:object [
                      sp:varName "ontology" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?1" ;
                    ] ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?0" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "teamGraph" ;
                    ] ;
                  sp:predicate rdf:first ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
                [
                  sp:object () ;
                  sp:predicate rdf:rest ;
                  sp:subject [
                      sp:varName "?1" ;
                    ] ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type teamwork:getProjectType ;
                      sp:arg1 [
                          sp:varName "ontology" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "projectType" ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:ne ;
                      sp:arg1 [
                          sp:varName "projectType" ;
                        ] ;
                      sp:arg2 ontologyprojects:ProjectType ;
                    ] ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type teamwork:projectLabel ;
                      sp:arg1 [
                          sp:varName "ontology" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "projectTypeLabel" ;
                    ] ;
                  sp:predicate teamwork:singularLabel ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/swp/library> ;
  rdfs:label "Get asset collection instances" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
edg:getSHACLvalidationResultsForPropertyShape
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "violatedPropertyShape" ;
          ]
          [
            sp:varName "validationErrors" ;
          ]
          [
            sp:varName "validationWarnings" ;
          ]
        ) ;
      sp:where (
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:resultVariables (
                    [
                      sp:varName "violatedPropertyShape" ;
                    ]
                    [
                      sp:varName "validationErrors" ;
                    ]
                    [
                      sp:varName "validationWarnings" ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object [
                          sp:varName "none" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object spin:_arg1 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?2" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object spin:_arg2 ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?3" ;
                        ] ;
                      sp:predicate edg:getValidationResultCounts ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "violatedPropertyShape" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?4" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?3" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "validationErrors" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?4" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?5" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?4" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "validationWarnings" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?5" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?5" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType sh:PropertyShape ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "validationResultsGraph - the graph holding validation check results" ;
    ] ;
  spin:private true ;
  rdfs:label "get SHACL validation results for property shape" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getValidationResultCounts
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "sourceShape" ;
          ]
          [
            sp:varName "errorCount" ;
          ]
          [
            sp:varName "warningCount" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:SubQuery ;
              sp:query [
                  a sp:Select ;
                  sp:groupBy (
                      [
                        sp:varName "sourceShape" ;
                      ]
                    ) ;
                  sp:resultVariables (
                      [
                        sp:varName "sourceShape" ;
                      ]
                      [
                        sp:expression [
                            a sp:Sum ;
                            sp:expression [
                                sp:varName "violation" ;
                              ] ;
                          ] ;
                        sp:varName "errorCount" ;
                      ]
                      [
                        sp:expression [
                            a sp:Sum ;
                            sp:expression [
                                sp:varName "warning" ;
                              ] ;
                          ] ;
                        sp:varName "warningCount" ;
                      ]
                    ) ;
                  sp:where (
                      [
                        a sp:Union ;
                        sp:elements (
                            (
                              [
                                a sp:NamedGraph ;
                                sp:elements (
                                    [
                                      sp:object sh:ValidationReport ;
                                      sp:predicate rdf:type ;
                                      sp:subject [
                                          sp:varName "report" ;
                                        ] ;
                                    ]
                                    [
                                      sp:object false ;
                                      sp:predicate sh:conforms ;
                                      sp:subject [
                                          sp:varName "report" ;
                                        ] ;
                                    ]
                                    [
                                      sp:object sh:ValidationResult ;
                                      sp:predicate rdf:type ;
                                      sp:subject [
                                          sp:varName "result" ;
                                        ] ;
                                    ]
                                    (
                                      [
                                        sp:object [
                                            sp:varName "focusNode" ;
                                          ] ;
                                        sp:predicate sh:focusNode ;
                                        sp:subject [
                                            sp:varName "result" ;
                                          ] ;
                                      ]
                                      [
                                        a sp:Filter ;
                                        sp:expression [
                                            a sp:or ;
                                            sp:arg1 [
                                                a sp:not ;
                                                sp:arg1 [
                                                    a sp:bound ;
                                                    sp:arg1 spin:_arg1 ;
                                                  ] ;
                                              ] ;
                                            sp:arg2 [
                                                a sp:and ;
                                                sp:arg1 [
                                                    a sp:bound ;
                                                    sp:arg1 spin:_arg1 ;
                                                  ] ;
                                                sp:arg2 [
                                                    a sp:eq ;
                                                    sp:arg1 [
                                                        sp:varName "focusNode" ;
                                                      ] ;
                                                    sp:arg2 spin:_arg1 ;
                                                  ] ;
                                              ] ;
                                          ] ;
                                      ]
                                    )
                                    (
                                      (
                                        [
                                          sp:object [
                                              sp:varName "sourceShape" ;
                                            ] ;
                                          sp:predicate sh:sourceShape ;
                                          sp:subject [
                                              sp:varName "result" ;
                                            ] ;
                                        ]
                                        [
                                          a sp:Filter ;
                                          sp:expression [
                                              a sp:or ;
                                              sp:arg1 [
                                                  a sp:not ;
                                                  sp:arg1 [
                                                      a sp:bound ;
                                                      sp:arg1 spin:_arg2 ;
                                                    ] ;
                                                ] ;
                                              sp:arg2 [
                                                  a sp:and ;
                                                  sp:arg1 [
                                                      a sp:bound ;
                                                      sp:arg1 spin:_arg2 ;
                                                    ] ;
                                                  sp:arg2 [
                                                      a sp:eq ;
                                                      sp:arg1 [
                                                          sp:varName "sourceShape" ;
                                                        ] ;
                                                      sp:arg2 spin:_arg2 ;
                                                    ] ;
                                                ] ;
                                            ] ;
                                        ]
                                      )
                                      [
                                        a sp:Optional ;
                                        sp:elements (
                                            [
                                              sp:object [
                                                  sp:varName "severity" ;
                                                ] ;
                                              sp:predicate sh:resultSeverity ;
                                              sp:subject [
                                                  sp:varName "result" ;
                                                ] ;
                                            ]
                                          ) ;
                                      ]
                                      [
                                        a sp:Bind ;
                                        sp:expression [
                                            a sp:if ;
                                            sp:arg1 [
                                                a sp:bound ;
                                                sp:arg1 [
                                                    sp:varName "severity" ;
                                                  ] ;
                                              ] ;
                                            sp:arg2 [
                                                a sp:if ;
                                                sp:arg1 [
                                                    a sp:eq ;
                                                    sp:arg1 [
                                                        sp:varName "severity" ;
                                                      ] ;
                                                    sp:arg2 sh:Violation ;
                                                  ] ;
                                                sp:arg2 1 ;
                                                sp:arg3 0 ;
                                              ] ;
                                            sp:arg3 0 ;
                                          ] ;
                                        sp:variable [
                                            sp:varName "violation" ;
                                          ] ;
                                      ]
                                      [
                                        a sp:Bind ;
                                        sp:expression [
                                            a sp:if ;
                                            sp:arg1 [
                                                a sp:bound ;
                                                sp:arg1 [
                                                    sp:varName "severity" ;
                                                  ] ;
                                              ] ;
                                            sp:arg2 [
                                                a sp:if ;
                                                sp:arg1 [
                                                    a sp:eq ;
                                                    sp:arg1 [
                                                        sp:varName "severity" ;
                                                      ] ;
                                                    sp:arg2 sh:Warning ;
                                                  ] ;
                                                sp:arg2 1 ;
                                                sp:arg3 0 ;
                                              ] ;
                                            sp:arg3 0 ;
                                          ] ;
                                        sp:variable [
                                            sp:varName "warning" ;
                                          ] ;
                                      ]
                                    )
                                  ) ;
                                sp:graphNameNode spin:_arg3 ;
                              ]
                            )
                            (
                              [
                                a sp:Filter ;
                                sp:expression [
                                    a sp:bound ;
                                    sp:arg1 spin:_arg2 ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression spin:_arg2 ;
                                sp:variable [
                                    sp:varName "sourceShape" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression 0 ;
                                sp:variable [
                                    sp:varName "violation" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression 0 ;
                                sp:variable [
                                    sp:varName "warning" ;
                                  ] ;
                              ]
                            )
                          ) ;
                      ]
                    ) ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Optional argument for the property shape to be matched. I not provided returns the property shape found." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:comment "get validation result counts for either a specific resource passed as arg1 or resources that are instances of arg2 or its subclasses." ;
  rdfs:label "get validation result counts" ;
  rdfs:subClassOf edg:MagicProperties ;
.
edg:getValidationResults
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
          [
            sp:varName "sourceShape" ;
          ]
          [
            sp:varName "sourceConstraintComponent" ;
          ]
          [
            sp:varName "severity" ;
          ]
          [
            sp:varName "message" ;
          ]
          [
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object sh:ValidationReport ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "report" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate sh:result ;
                    sp:subject [
                        sp:varName "report" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg1 ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:bound ;
                                sp:arg1 spin:_arg1 ;
                              ] ;
                            sp:arg2 [
                                a sp:exists ;
                                sp:elements (
                                    [
                                      sp:object spin:_arg1 ;
                                      sp:predicate sh:focusNode ;
                                      sp:subject [
                                          sp:varName "result" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "sourceShape" ;
                    ] ;
                  sp:predicate sh:sourceShape ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceConstraintComponent" ;
                    ] ;
                  sp:predicate sh:sourceConstraintComponent ;
                  sp:subject [
                      sp:varName "result" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "value" ;
                          ] ;
                        sp:predicate sh:value ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "severity" ;
                          ] ;
                        sp:predicate sh:resultSeverity ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "message" ;
                          ] ;
                        sp:predicate sh:resultMessage ;
                        sp:subject [
                            sp:varName "result" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode spin:_arg2 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to match with focusNode" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the graph holding the validation results" ;
    ] ;
  spin:private true ;
  rdfs:comment "get validation results for either a specific resource passed as arg1" ;
  rdfs:label "get validation result counts" ;
  rdfs:subClassOf edg:MagicProperties ;
.
arg:dataGraph
  a rdf:Property ;
  rdfs:label "data graph" ;
  rdfs:subPropertyOf sp:arg ;
.
