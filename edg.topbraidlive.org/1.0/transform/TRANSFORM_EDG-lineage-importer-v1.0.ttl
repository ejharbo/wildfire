# baseURI: http://edg.topbraid.solutions/1.0/transform/importer/lineage
# imports: http://edg.topbraid.solutions/1.0/collection/controllers
# imports: http://edg.topbraid.solutions/1.0/collection/schema-models
# imports: http://edg.topbraid.solutions/1.0/importer/lib
# imports: http://edg.topbraid.solutions/1.0/proxy/importer/lineage
# imports: http://edg.topbraid.solutions/1.0/schema/config/importers
# imports: http://edg.topbraidlive.org/1.0/config/importers
# imports: http://spinrdf.org/spl

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://edg.topbraid.solutions/1.0/transform/importer/lineage>
  rdf:type owl:Ontology ;
  vaem:hasGraphMetadata <http://edg.topbraid.solutions/transform/importer/lineage/GMD_lineage> ;
  owl:imports <http://edg.topbraid.solutions/1.0/collection/controllers> ;
  owl:imports <http://edg.topbraid.solutions/1.0/collection/schema-models> ;
  owl:imports <http://edg.topbraid.solutions/1.0/importer/lib> ;
  owl:imports <http://edg.topbraid.solutions/1.0/proxy/importer/lineage> ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/config/importers> ;
  owl:imports <http://edg.topbraidlive.org/1.0/config/importers> ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
lib-importer:GetCustomFromSpecificGraph
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "customElementUri" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object spin:_arg1 ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "customElementUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg2 ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "customElementUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode spin:_arg3 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "custom class" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "custom element name" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "graph uri" ;
    ] ;
  rdfs:label "GetCustomInstanceFromSpecificGraph" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:GetStandardCustomExecutableUri
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "executableUri" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:TriplePath ;
            sp:object edg:SoftwareExecutable ;
            sp:path [
                rdf:type sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "executableClass" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetModelForLineage ;
              ] ;
            sp:variable [
                sp:varName "technicalGraph" ;
              ] ;
          ]
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "executableClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "executableUri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "technicalGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "executable name" ;
    ] ;
  rdfs:label "GetStandardCustomExecutableScriptUri" ;
  rdfs:subClassOf spin:Functions ;
.
lib-importer:deliverProtoInstances
  rdf:type spin:RuleProperty ;
  rdfs:label "deliver proto instances" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:generateProtoInstances
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:specifyProtoInstancesStage1 ;
  rdfs:label "generate proto instances" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:specifyProtoInstancesStage1
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:specifyProtoInstancesStage2 ;
  rdfs:label "specify proto instances stage 1" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:specifyProtoInstancesStage2
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:specifyProtoInstancesStage3 ;
  rdfs:label "specify proto instances stage 2" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:specifyProtoInstancesStage3
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:specifyProtoInstancesStage4 ;
  rdfs:label "specify proto instances stage 3" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:specifyProtoInstancesStage4
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:specifyProtoInstancesStage5 ;
  rdfs:label "specify proto instances stage 4" ;
  rdfs:subPropertyOf spin:rule ;
.
lib-importer:specifyProtoInstancesStage5
  rdf:type spin:RuleProperty ;
  spin:nextRuleProperty lib-importer:deliverProtoInstances ;
  rdfs:label "specify proto instances stage 5" ;
  rdfs:subPropertyOf spin:rule ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#Executable>
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "executableTypeClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "database" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schema" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetSynonymParentUri" ;
              ] ;
            sp:predicate [
                sp:varName "synonymProperty" ;
              ] ;
            sp:subject [
                sp:varName "sourceSynonymParentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemTypeUri" ;
              ] ;
            sp:predicate edg:executableType ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "executableServer" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableContainer" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESCHEMANAME> ;
              ] ;
            sp:variable [
                sp:varName "executableSchema" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableServer" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableContainer" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "schema" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schema" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableSchema" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schema" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "executableType" ;
                      ] ;
                    sp:arg2 "VIEW" ;
                  ] ;
                sp:arg2 "DATABASE VIEW MAPPING" ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "executableType" ;
                          ] ;
                        sp:arg2 "SYNONYM" ;
                      ] ;
                    sp:arg2 "SYNONYM MAPPING" ;
                    sp:arg3 [
                        sp:varName "executableType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableTypeFinal" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:upperCase ;
                sp:arg1 [
                    rdf:type spl:object ;
                    sp:arg1 [
                        sp:varName "row" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemType" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:or ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "executableType" ;
                          ] ;
                        sp:arg2 "VIEW" ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "executableType" ;
                          ] ;
                        sp:arg2 "SYNONYM" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetExecutableSystemType ;
                    sp:arg1 [
                        sp:varName "executableSystemType" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemTypeUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardExecutableUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "database" ;
                  ] ;
                sp:arg3 [
                    sp:varName "schema" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardExecutableUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServer" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableContainer" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "executableTypeFinal" ;
                      ] ;
                    sp:arg6 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableContainer" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableServer" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "executableType" ;
                      ] ;
                    sp:arg2 "VIEW" ;
                  ] ;
                sp:arg2 edg:DatabaseViewMapping ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            sp:varName "executableType" ;
                          ] ;
                        sp:arg2 "SYNONYM" ;
                      ] ;
                    sp:arg2 edg:SynonymMapping ;
                    sp:arg3 [
                        rdf:type sp:iri ;
                        sp:arg1 [
                            rdf:type lib-importer:GetExecutableClass ;
                            sp:arg1 [
                                sp:varName "executableType" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableTypeClass" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "executableTypeClass" ;
                      ] ;
                    sp:arg2 edg:SynonymMapping ;
                  ] ;
                sp:arg2 edg:synonymFor ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "synonymProperty" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "sourceSynonymParentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "targetSynonymParentUri" ;
              ] ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 9001 Construct executable for store procedure, function, trigger, view, synonym etc" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableContainer>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableCustom> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "excustomU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "excustomU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDataContainer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "excustomContainerU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "excustomContainerU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "executableType" ;
                      ] ;
                  ] ;
                sp:arg2 "CUSTOM TRANSFORM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXC_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "excustomU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXCC_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "excustomContainerU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8004 - Construct Executables when executable type is Custom script" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableCustomConnector> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exfile" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exfile" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableServer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableRepository> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exrepU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exrepU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "executableType" ;
                  ] ;
                sp:arg2 "CUSTOM-CONNECTOR" ;
                sp:arg3 "FILE" ;
                sp:arg4 "TABLE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SCR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXREP_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exrepU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXFILE_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exfile" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8010 - Construct Custom connector when executable type is FILE or TABLE" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exdbU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exdbU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#Executable> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableServer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "esrvU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "esrvU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableSchema> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "eschmaU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "eschmaU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "executableType" ;
                      ] ;
                  ] ;
                sp:arg2 "SOFTWARE FUNCTION" ;
                sp:arg3 "ETL JOB" ;
                sp:arg4 "STORED PROCEDURE" ;
                sp:arg5 "SOFTWARE MACRO" ;
                sp:arg6 "SOFTWARE TRIGGER" ;
                sp:arg7 "VIEW" ;
                sp:arg8 "SYNONYM" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "executableSystemType" ;
                  ] ;
                sp:arg2 "SSIS" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXDB_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exdbU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EX_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/ESRVR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "esrvU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/ESCHMA_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "eschmaU" ;
              ] ;
          ]
        ) ;
      rdfs:comment """STEP 8003 - Construct Executables when executable type is Stored procedure, function, macro, view, synonym etc. For ETL jobs we exclude Microsoft
SSIS because it is handled in a different function""" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableInformaticaSession> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "executableType" ;
                  ] ;
                sp:arg2 "INFORMATICA SESSION" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/IS_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8001 - Construct Executables when executable type is INFORMATICA SESSION" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableMicrosoftSSIS> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ssisU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "ssisU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableServer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ssissrvU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "ssissrvU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "executableType" ;
                      ] ;
                    sp:arg2 "ETL JOB" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        sp:varName "executableSystemType" ;
                      ] ;
                    sp:arg2 "SSIS" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SSIS_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ssisU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SSISSRVR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ssissrvU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8006 - Construct Executables when executable type is MICROSOFT SSIS" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableScript> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableRepository> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "exrepU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "exrepU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "executableType" ;
                  ] ;
                sp:arg2 "SCRIPT" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SCR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exscrU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/EXREP_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "exrepU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8002 - Construct Executables when executable type is SCRIPT" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableCustom>
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Mapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardCustomExecutableUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetExecutableAcronym ;
                sp:arg1 "MAPPING" ;
              ] ;
            sp:variable [
                sp:varName "acronym" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "acronym" ;
                          ] ;
                        sp:arg3 "-" ;
                        sp:arg4 [
                            rdf:type sp:encode_for_uri ;
                            sp:arg1 [
                                sp:varName "executableName" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "executableName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2000: Construct executable if it is a custom type. We have agreed that it will write CUSTOM TRANSFORM when target is a custom object and I put it as a Functional mapping with name the executable name" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableCustomConnector>
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:CustomConnector ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemTypeUri" ;
              ] ;
            sp:predicate edg:executableType ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "repositoryUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:upperCase ;
                sp:arg1 [
                    rdf:type spl:object ;
                    sp:arg1 [
                        sp:varName "row" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemType" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetExecutableSystemType ;
                sp:arg1 [
                    sp:varName "executableSystemType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemTypeUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableRepository" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object edg:FileSystem ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableRepository" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardExecutableUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "repositoryUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardExecutableUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServer" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableRepository" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg5 "FILE" ;
                    sp:arg6 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 "CONN_" ;
                        sp:arg2 [
                            sp:varName "executableName" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableRepository" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableServer" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDataContainer>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataContainer ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDataContainerUri ;
                sp:arg1 [
                    sp:varName "executableContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataContainerUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardContainerUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 33010: Construct executable hive database" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDataWarehouse>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataWarehouse ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "executableServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "executableContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "executableDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 33010: Construct executable hive database" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDatabase>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableDataWarehouse> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type smf:upperCase ;
                    sp:arg1 [
                        sp:varName "executableSystemType" ;
                      ] ;
                  ] ;
                sp:arg2 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/HDB_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8004 -When database of executable is HIVE" ;
    ] ;
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableRelationalDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    rdf:type smf:upperCase ;
                    sp:arg1 [
                        sp:varName "executableSystemType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/RDB_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 8005 - When database of executable relational" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableInformaticaSession>
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Mapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemTypeUri" ;
              ] ;
            sp:predicate edg:executableType ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:upperCase ;
                sp:arg1 [
                    rdf:type spl:object ;
                    sp:arg1 [
                        sp:varName "row" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemType" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetExecutableSystemType ;
                sp:arg1 [
                    sp:varName "executableSystemType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemTypeUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "executableRepository" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableFolder" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESCHEMANAME> ;
              ] ;
            sp:variable [
                sp:varName "executableWorkflow" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardExecutableIFPC-SSISUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardExecutableIFPCUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableRepository" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableFolder" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableWorkflow" ;
                      ] ;
                    sp:arg5 "MAPPING" ;
                    sp:arg6 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableWorkflow" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableFolder" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableRepository" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment """Whenever we have Informatica Session in the executable type then in the  EXECUTABLE_SYSTEM_TYPE we have IFPC,
EXECUTABLE_SERVER_NAME                    IFPC Repository
EXECUTABLE_DATABASE_NAME               IFPC Folder
EXECUTABLE_SCHEMA_NAME                  IFPC Workflow
EXECUTABLE_NAME                                    IFPC Session
EXECUTABLE_TYPE                                       INFORMATICA SESSION
For now I don't create separate Instances for all the above but I am justing putting them in the URI and label of the IFPC
That needs to be revisited and create appropriate triples for the included entities""" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableMicrosoftSSIS>
  rdf:type owl:Class ;
  rdf:type sh:NodeShape ;
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:ETLjob ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemTypeUri" ;
              ] ;
            sp:predicate edg:executableType ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:upperCase ;
                sp:arg1 [
                    rdf:type spl:object ;
                    sp:arg1 [
                        sp:varName "row" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemType" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetExecutableSystemType ;
                sp:arg1 [
                    sp:varName "executableSystemType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemTypeUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "executableServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableFolder" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESCHEMANAME> ;
              ] ;
            sp:variable [
                sp:varName "executablePackage" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardExecutableIFPC-SSISUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardExecutableSSISUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableFolder" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executablePackage" ;
                      ] ;
                    sp:arg5 "ETL JOB" ;
                    sp:arg6 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executablePackage" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableFolder" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment """Whenever we have SSIS in the executable type then in the  EXECUTABLE_TYPE we have ETL Job to declare Microsoft SSIS
EXECUTABLE_SYSTEM_TYPE                      SSIS
EXECUTABLE_SERVER_NAME                    Server
EXECUTABLE_DATABASE_NAME               SSIS Folder/SSIS Project
EXECUTABLE_SCHEMA_NAME                  SSIS Package
EXECUTABLE_NAME                                    SSIS DataFlowTask
EXECUTABLE_TYPE                                       ETL JOB""" ;
    ] ;
  rdfs:label "ExecutableMicrosoftSSIS" ;
  rdfs:subClassOf <http://edg.topbraid.solutions/proxy/importer/lineage#SecondaryInstanceExecutableFactory> ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableRelationalDatabase>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:RelationalDatabase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "executableServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "executableContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "executableDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3300: Construct executable database" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableRepository>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:FileSystem ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repositoryUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableDatabaseName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "repositoryUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableDatabaseName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "repositoryUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "repositoryUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableDatabaseName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardFileSystemUri ;
                sp:arg1 [
                    sp:varName "technicalAssetNamespace" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "repositoryUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2000: Construct hierarch of directories where the script resides. It is stored in Executable Database Name" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableSchema>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseSchema ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSchemaName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "database" ;
              ] ;
            sp:predicate edg:specificationFor ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableSchemaName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESCHEMANAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseSchemaUri ;
                sp:arg1 [
                    sp:varName "executableSchemaName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "database" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "schemaExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableSchemaName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaLabel ;
                    sp:arg1 [
                        sp:varName "executableSchemaName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableContainerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaLabel" ;
              ] ;
          ]
        ) ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableScript>
  lib-importer:deliverProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Script ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableSystemTypeUri" ;
              ] ;
            sp:predicate edg:executableType ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "repositoryUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object edg:DirectMapping ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceElementUri" ;
              ] ;
            sp:predicate edg:input ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetElementUri" ;
              ] ;
            sp:predicate edg:output ;
            sp:subject [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drmpU" ;
              ] ;
            sp:predicate edg:usesSoftwareFunction ;
            sp:subject [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableUri" ;
              ] ;
            sp:predicate edg:usesSoftwareExecutable ;
            sp:subject [
                sp:varName "initialUri" ;
              ] ;
          ]
          [
            sp:object edg:PipelineStep ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStep" ;
              ] ;
            sp:predicate edg:stepNumber ;
            sp:subject [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            sp:object edg:Pipeline ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineName" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineUri" ;
              ] ;
            sp:predicate edg:usesPipeline ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pipelineStepUri" ;
              ] ;
            sp:predicate edg:pipelineStep ;
            sp:subject [
                sp:varName "pipelineUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:upperCase ;
                sp:arg1 [
                    rdf:type spl:object ;
                    sp:arg1 [
                        sp:varName "row" ;
                      ] ;
                    sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESYSTEMTYPE> ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemType" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetExecutableSystemType ;
                sp:arg1 [
                    sp:varName "executableSystemType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableSystemTypeUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "executableRepository" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object edg:FileSystem ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "executableRepository" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "repositoryUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardExecutableUri ;
                sp:arg1 [
                    sp:varName "executableName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "repositoryUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingExecutableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingExecutableUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardExecutableUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServer" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableRepository" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg5 "SCRIPT" ;
                    sp:arg6 [
                        sp:varName "executableName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingExecutableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableSchema" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "executableRepository" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "executableServer" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "executableLabel" ;
              ] ;
          ]
          [
            sp:object edg:LineageModel ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "lineageModelUri" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedSourceElement ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "sourceElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedTargetElement ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetElementName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "targetElementUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSoftwareFunction ;
                sp:arg1 [
                    sp:varName "executableUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceElementUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetElementUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "drmpUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "technicalAssetNamespace" ;
                          ] ;
                        sp:arg2 "DRMP_" ;
                        sp:arg3 [
                            rdf:type smf:generateUUID ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "drmpUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "executableName" ;
                      ] ;
                    sp:arg2 "--" ;
                    sp:arg3 [
                        sp:varName "sourceElementName" ;
                      ] ;
                    sp:arg4 "--" ;
                    sp:arg5 [
                        sp:varName "targetElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "drmpLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINESTEP> ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepStr" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#pIPELINENAME> ;
              ] ;
            sp:variable [
                sp:varName "pipelineName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:int ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStep" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineStepUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "pipelineStepStr" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    sp:varName "pipelineName" ;
                  ] ;
                sp:arg2 "--" ;
                sp:arg3 [
                    sp:varName "pipelineStepStr" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineStepLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:BuildPipelineUri ;
                    sp:arg1 [
                        sp:varName "pipelineName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pipelineUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "pipelineStepUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "pipelineStepUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "lineageModelUri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "initialUri" ;
              ] ;
          ]
        ) ;
      rdfs:comment "Whenever we have SCIRPT in the executable type, we only have the name of the executable, and in the Executable database name we have the hierarchy of the directories that the executable resides" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableServer>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Server ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "serverLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "executableServerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "executableServerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#eXECUTABLESERVERNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardServerUri ;
                sp:arg1 [
                    sp:varName "technicalAssetNamespace" ;
                  ] ;
                sp:arg2 [
                    sp:varName "executableServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingServerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingServerUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardServerUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "executableServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "executableServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2000:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#LineageTemplate>
  lib-importer:generateProtoInstances [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceElement> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "seU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "seU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetElement> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "teU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "teU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sdbU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "sdbU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tdbU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "tdbU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceServer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ssrvU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "ssrvU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetServer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tsrvU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "tsrvU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceSchema> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sschmaU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "sschmaU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetSchema> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tschmaU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "tschmaU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataset> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sdsetU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "sdsetU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataset> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tdsetU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "tdsetU" ;
              ] ;
          ]
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#ExecutableContainer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "econU" ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "econU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:generateUUID ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/SE_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "seU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/TE_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/SDB_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sdbU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/TDB_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tdbU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/SSRVR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ssrvU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/TSRVR_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tsrvU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/SSCHMA_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sschmaU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/TSCHMA_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tschmaU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/SDSET_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sdsetU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/TDSET_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tdsetU" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/ECON_" ;
                    sp:arg2 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "econU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4000: Generate proto instance factories" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceCustomElement>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "knownCustomClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object edg:CustomElement ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDataElementName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "customElementLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dataContainerUri" ;
              ] ;
            sp:predicate edg:dataElementOf ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedSourceElement ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
              ] ;
            sp:variable [
                sp:varName "sourceDataContainer" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDataElementName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "TABLE" ;
                sp:arg3 "VIEW" ;
                sp:arg4 "SYNONYM" ;
                sp:arg5 "FILE" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DataContainer ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceDataContainer" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type lib-importer:FindCustomClassInGraph ;
                    sp:arg1 [
                        sp:varName "sourceDatasetType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "knownCustomClass" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "knownCustomClass" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:FindCustomClassNamespace ;
                    sp:arg1 [
                        sp:varName "sourceDatasetType" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "dataAssetNamespace" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetCustomInstance ;
                sp:arg1 [
                    sp:varName "sourceDataElementName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceDatasetName" ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceDataContainer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingCustomUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingCustomUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardCustomElementUri ;
                    sp:arg1 [
                        sp:varName "customNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceDataContainer" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceDatasetType" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceDataElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:bound ;
                        sp:arg1 [
                            sp:varName "sourceDataContainer" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "sourceDataElementName" ;
                          ] ;
                        sp:arg2 " ( " ;
                        sp:arg3 [
                            sp:varName "sourceDataContainer" ;
                          ] ;
                        sp:arg4 " | " ;
                        sp:arg5 [
                            sp:varName "sourceDatasetType" ;
                          ] ;
                        sp:arg6 " | " ;
                        sp:arg7 [
                            sp:varName "sourceDatasetName" ;
                          ] ;
                        sp:arg8 " )" ;
                      ] ;
                    sp:arg3 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "sourceDataElementName" ;
                          ] ;
                        sp:arg2 " ( " ;
                        sp:arg3 [
                            sp:varName "sourceDatasetType" ;
                          ] ;
                        sp:arg4 " | " ;
                        sp:arg5 [
                            sp:varName "sourceDatasetName" ;
                          ] ;
                        sp:arg6 " )" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customElementLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 5100: Generate custom element. If the source dataset type exists as a class in edg then we create an instance of this class. In any case, either if the class exists or not, we also create an instance of  Custom Element." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataContainer>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataContainer ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dataContainerLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDataContainerUri ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataContainerUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardContainerUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceDatabaseType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2999 this comes only for custom types where we have a name of the container in the sourceDatabaseType and nothing in the source database name" ;
    ] ;
  rdfs:comment "This is used for custom elements. The container is coming in the database type" ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataWarehouse>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataWarehouse ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3000:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabase>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataContainer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
                sp:arg2 "HIVE" ;
                sp:arg3 "FILE SYSTEM" ;
                sp:arg4 "ORACLE" ;
                sp:arg5 "MSSQL" ;
                sp:arg6 "NETEZZA" ;
                sp:arg7 "DB2" ;
                sp:arg8 "TERADATA" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SDC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1005: In any other case, it means that we have a custom object , and in database Type we put the name they have given for the container of the object in Manta" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataWarehouse> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
                sp:arg2 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/HIVE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1004: Generate proto instances of HIVE" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceFileSystem> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FS_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1002: Generate proto instances of files" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceRelationalDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "sourceDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/RDB_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1000: Generate proto instances of relational databases" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseColumn>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDataElementName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentUri" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedSourceElement ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "sourceSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDataElementName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        rdf:type spif:upperCase ;
                        sp:arg1 [
                            sp:varName "sourceDatasetType" ;
                          ] ;
                      ] ;
                    sp:arg2 "TABLE" ;
                  ] ;
                sp:arg2 "TBL" ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "sourceDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "VIEW" ;
                      ] ;
                    sp:arg2 "VIEW" ;
                    sp:arg3 [
                        rdf:type sp:if ;
                        sp:arg1 [
                            rdf:type sp:eq ;
                            sp:arg1 [
                                rdf:type spif:upperCase ;
                                sp:arg1 [
                                    sp:varName "sourceDatasetType" ;
                                  ] ;
                              ] ;
                            sp:arg2 "SYNONYM" ;
                          ] ;
                        sp:arg2 "SYN" ;
                        sp:arg3 [
                            sp:varName "none" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetAcronym" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseColumn ;
                sp:arg1 [
                    sp:varName "parentUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceDataElementName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingColumnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardDatabaseColumnUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "sourceServerName" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "sourceContainerName" ;
                          ] ;
                        sp:arg4 [
                            sp:varName "sourceSchemaName" ;
                          ] ;
                        sp:arg5 [
                            sp:varName "sourceDatasetName" ;
                          ] ;
                        sp:arg6 [
                            sp:varName "sourceDataElementName" ;
                          ] ;
                        sp:arg7 [
                            sp:varName "datasetAcronym" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardColumnLabel ;
                    sp:arg1 [
                        sp:varName "sourceDataElementName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6010: Generate table columns (precondition: tables, parents of the columns, have been built)." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseSynonym>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseSynonym ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:synonymOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "sourceSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSynonymUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSynonymUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4003: Construct synonym" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseTable>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseTable ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:tableOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "sourceSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardTableUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseTableUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4001 Construct Database Table" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseView>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseView ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:viewOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "sourceSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardViewUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseViewUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "sourceDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4002 Construct Database View" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceDataset>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseSynonym> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "sourceDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sourceDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "SYNONYM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SYN_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6001: Generate proto instances of synonym" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseTable> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "sourceDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sourceDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "TABLE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/TBL_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6000: Generate proto instances of tables" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseView> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "sourceDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sourceDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "VIEW" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/VIEW_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6003: Generate proto instances of views" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceFile> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "sourceDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sourceDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FILE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6004: Generate proto instances of files" ;
    ] ;
  rdfs:comment "We don't have any triples for datasets" ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceElement>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceCustomElement> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "sourceDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
                sp:arg7 "FILE SYSTEM" ;
                sp:arg8 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/CE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6010: Generate proto instances of custom element when we have custom types" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceDatabaseColumn> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:or ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "sourceDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "TABLE" ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "sourceDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "VIEW" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        rdf:type spif:upperCase ;
                        sp:arg1 [
                            sp:varName "sourceDatasetType" ;
                          ] ;
                      ] ;
                    sp:arg2 "SYNONYM" ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "sourceDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
                sp:arg7 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/DBC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6000: Generate proto instances of columns when we have databases" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#SourceFileColumn> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "sourceDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6014: Generate proto instances of file column element when we have FILE SYSTEM" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceFile>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:FileAsset ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileSystemUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type sp:ucase ;
                    sp:arg1 [
                        sp:varName "sourceDatasetType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "directoryStructure" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object edg:FileSystem ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "directoryStructure" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileUri ;
                sp:arg1 [
                    sp:varName "fileSystemUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "fileName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileLabel ;
                    sp:arg1 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "fileName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6009 Construct File triples that may reside in a File System" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceFileColumn>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:TableColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileColumn" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnTableUri" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object edg:FileTable ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileTableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "filename" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedSourceElement ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromSource ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "sourceDatasetType" ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "directoryStructure" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "filename" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileColumn" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileColumnUri ;
                sp:arg1 [
                    sp:varName "fileUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileColumn" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingColumnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardFileColumnUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "directoryStructure" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "filename" ;
                          ] ;
                        sp:arg4 [
                            sp:varName "fileColumn" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:GetStandardFileTableUri ;
                        sp:arg1 [
                            sp:varName "fileUri" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardFileTableUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "directoryStructure" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "filename" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileColumnLabel ;
                    sp:arg1 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "filename" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "fileColumn" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "columnTableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "TABLE OF " ;
                    sp:arg2 [
                        sp:varName "filename" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileTableLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 7001: Generate file columns (precondition: file, parents of the columns, have been built)." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceFileSystem>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:FileSystem ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileSystemLabelFinal" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate edg:directoryPath ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type sp:ucase ;
                    sp:arg1 [
                        sp:varName "sourceContainerType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileSystemUri ;
                sp:arg1 [
                    sp:varName "sourceContainerName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "server" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileSystemUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileSystemUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileSystemUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileSystemUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "fileSystemUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileSystemLabel ;
                    sp:arg1 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemLabelFinal" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3008: Source Database type is FILE SYSTEM - In the sourceDatabaseName we have the directory structure" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceRelationalDatabase>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:RelationalDatabase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "sourceContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "sourceDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3000:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceSchema>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseSchema ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceSchemaName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "database" ;
              ] ;
            sp:predicate edg:specificationFor ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceSchemaName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASESCHEMA> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCEDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "sourceContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sourceServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseSchemaUri ;
                sp:arg1 [
                    sp:varName "sourceSchemaName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "database" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "schemaExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaLabel ;
                    sp:arg1 [
                        sp:varName "sourceSchemaName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceContainerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaLabel" ;
              ] ;
          ]
        ) ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#SourceServer>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Server ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "serverLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sourceServerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "sourceServerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#sOURCESERVERNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardServerUri ;
                sp:arg1 [
                    sp:varName "sourceServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingServerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingServerUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardServerUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "sourceServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "sourceServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2000:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetCustomElement>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "knownCustomClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object edg:CustomElement ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDataElementName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "customElementLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dataContainerUri" ;
              ] ;
            sp:predicate edg:dataElementOf ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedTargetElement ;
            sp:subject [
                sp:varName "customElementUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
              ] ;
            sp:variable [
                sp:varName "targetDataContainer" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDataElementName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "TABLE" ;
                sp:arg3 "VIEW" ;
                sp:arg4 "SYNONYM" ;
                sp:arg5 "FILE" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DataContainer ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetDataContainer" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "dataContainerUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type lib-importer:FindCustomClassInGraph ;
                    sp:arg1 [
                        sp:varName "targetDatasetType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "knownCustomClass" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "knownCustomClass" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:FindCustomClassNamespace ;
                    sp:arg1 [
                        sp:varName "targetDatasetType" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "dataAssetNamespace" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetCustomInstance ;
                sp:arg1 [
                    sp:varName "targetDataElementName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "targetDatasetName" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetDataContainer" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingCustomUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingCustomUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardCustomElementUri ;
                    sp:arg1 [
                        sp:varName "customNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetDataContainer" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetDatasetType" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetDataElementName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customElementUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingCustomUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:bound ;
                        sp:arg1 [
                            sp:varName "targetDataContainer" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "targetDataElementName" ;
                          ] ;
                        sp:arg2 " ( " ;
                        sp:arg3 [
                            sp:varName "targetDataContainer" ;
                          ] ;
                        sp:arg4 " | " ;
                        sp:arg5 [
                            sp:varName "targetDatasetType" ;
                          ] ;
                        sp:arg6 " | " ;
                        sp:arg7 [
                            sp:varName "targetDatasetName" ;
                          ] ;
                        sp:arg8 " )" ;
                      ] ;
                    sp:arg3 [
                        rdf:type sp:concat ;
                        sp:arg1 [
                            sp:varName "targetDataElementName" ;
                          ] ;
                        sp:arg2 " ( " ;
                        sp:arg3 [
                            sp:varName "targetDatasetType" ;
                          ] ;
                        sp:arg4 " | " ;
                        sp:arg5 [
                            sp:varName "targetDatasetName" ;
                          ] ;
                        sp:arg6 " )" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "customElementLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 5200: Generate custom element. If the target dataset type exists as a class in edg then we create an instance of this class. In any case, either if the class exists or not, we also create an instance of  Custom Element." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataContainer>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataContainer ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "dataContainerLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDataContainerUri ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "dataContainerUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardContainerUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetDatabaseType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "dataContainerUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataContainerLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2998 this comes only for custom types where we have a name of the container in the targetDatabaseType and nothing in the target database name" ;
    ] ;
  rdfs:comment """Not sure yet if we need to use that for custom types. For now no need. The container in database name is only used in the label of the custom element
Old code not used now, was:
# STEP 3004: This come from the custom object. And they send a database type but not a database Name. We create a data container instance with the name they send in the database type.
CONSTRUCT {
    ?dataContainerUri a edg:DataContainer .
    ?dataContainerUri rdfs:label ?targetContainerLabelFinal .
    ?dataContainerUri edg:name ?targetContainerName .
    ?dataContainerUri edg:derivedFromTarget ?row .
}
WHERE {
    ?this edg:derivedFromTarget ?row .
    ?row proxy-lineage:tARGETDATABASETYPE ?targetContainerName .
    BIND (lib-importer:GetDataAssetNamespace() AS ?dataAssetNamespace) .
    BIND (lib-importer:GetStandardDataContainerUri(?targetContainerName) AS ?dataContainerUriExisting) .
    BIND (IF(bound(?dataContainerUriExisting), ?dataContainerUriExisting, lib-importer:BuildStandardDataContainerUri(?dataAssetNamespace, ?targetContainerName)) AS ?dataContainerUri) .
    BIND (IF(bound(?dataContainerUriExisting), lib-importer:GetStandardExistingLabel(?dataContainerUri), ?targetContainerName) AS ?targetContainerLabelFinal) .
}""" ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataWarehouse>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DataWarehouse ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "targetContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3200:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabase>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataContainer> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
                sp:arg2 "HIVE" ;
                sp:arg3 "FILE SYSTEM" ;
                sp:arg4 "ORACLE" ;
                sp:arg5 "MSSQL" ;
                sp:arg6 "NETEZZA" ;
                sp:arg7 "DB2" ;
                sp:arg8 "TERADATA" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/TDC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1103: In any other case, it means that we have a custom object , and in database Type we put the name they have given for the container of the object in Manta" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataWarehouse> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
                sp:arg2 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/HIVE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1102: Generate proto instances of HIVE" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetFileSystem> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FS_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1101: Generate proto instances of files" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetRelationalDatabase> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:in ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "targetDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/RDB_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 1100: Generate proto instances of relational databases" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseColumn>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDataElementName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentUri" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedTargetElement ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "targetContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "targetSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDataElementName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        rdf:type spif:upperCase ;
                        sp:arg1 [
                            sp:varName "targetDatasetType" ;
                          ] ;
                      ] ;
                    sp:arg2 "TABLE" ;
                  ] ;
                sp:arg2 "TBL" ;
                sp:arg3 [
                    rdf:type sp:if ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "targetDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "VIEW" ;
                      ] ;
                    sp:arg2 "VIEW" ;
                    sp:arg3 [
                        rdf:type sp:if ;
                        sp:arg1 [
                            rdf:type sp:eq ;
                            sp:arg1 [
                                rdf:type spif:upperCase ;
                                sp:arg1 [
                                    sp:varName "targetDatasetType" ;
                                  ] ;
                              ] ;
                            sp:arg2 "SYNONYM" ;
                          ] ;
                        sp:arg2 "SYN" ;
                        sp:arg3 [
                            sp:varName "none" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetAcronym" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseColumn ;
                sp:arg1 [
                    sp:varName "parentUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "targetDataElementName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingColumnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardDatabaseColumnUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "targetServerName" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "targetContainerName" ;
                          ] ;
                        sp:arg4 [
                            sp:varName "targetSchemaName" ;
                          ] ;
                        sp:arg5 [
                            sp:varName "targetDatasetName" ;
                          ] ;
                        sp:arg6 [
                            sp:varName "targetDataElementName" ;
                          ] ;
                        sp:arg7 [
                            sp:varName "datasetAcronym" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardColumnLabel ;
                    sp:arg1 [
                        sp:varName "targetDataElementName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6020: Generate table columns (precondition: tables, parents of the columns, have been built)." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseSynonym>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseSynonym ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:synonymOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "targetContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "targetSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardSynonymUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSynonymUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4003: Construct synonym" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseTable>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseTable ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:tableOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "targetContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "targetSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardTableUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseTableUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4001 Construct Database Table" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseView>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseView ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "parentLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaUri" ;
              ] ;
            sp:predicate edg:belongsToSchema ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseUri" ;
              ] ;
            sp:predicate edg:viewOf ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "parentUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "targetContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASESCHEMA> ;
              ] ;
            sp:variable [
                sp:varName "targetSchemaName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "databaseUri" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object edg:DatabaseSchema ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetSchemaName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "schemaUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardViewUri ;
                sp:arg1 [
                    sp:varName "schemaUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUri" ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetDatasetName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "datasetExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "datasetExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseViewUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg5 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "datasetExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "parentUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatasetLabel ;
                    sp:arg1 [
                        sp:varName "targetDatasetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "parentLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 4002 Construct Database View" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetDataset>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseSynonym> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "targetDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "SYNONYM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/SYN_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6006: Generate proto instances of synonym" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseTable> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "targetDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "TABLE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/TBL_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6005: Generate proto instances of tables" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseView> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "targetDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "VIEW" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/VIEW_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6007: Generate proto instances of views" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetFile> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetTypeTemp" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:upperCase ;
                sp:arg1 [
                    sp:varName "targetDatasetTypeTemp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetDatasetType" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FILE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6008: Generate proto instances of files" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetElement>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetCustomElement> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notIn ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "targetDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "ORACLE" ;
                sp:arg3 "MSSQL" ;
                sp:arg4 "NETEZZA" ;
                sp:arg5 "DB2" ;
                sp:arg6 "TERADATA" ;
                sp:arg7 "FILE SYSTEM" ;
                sp:arg8 "HIVE" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/CE_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6010: Generate proto instances of custom element when we have custom types" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetDatabaseColumn> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:or ;
                    sp:arg1 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "targetDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "TABLE" ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:eq ;
                        sp:arg1 [
                            rdf:type spif:upperCase ;
                            sp:arg1 [
                                sp:varName "targetDatasetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "VIEW" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:eq ;
                    sp:arg1 [
                        rdf:type spif:upperCase ;
                        sp:arg1 [
                            sp:varName "targetDatasetType" ;
                          ] ;
                      ] ;
                    sp:arg2 "SYNONYM" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/DBC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6000: Generate proto instances of tables" ;
    ] ;
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object <http://edg.topbraid.solutions/proxy/importer/lineage#TargetFileColumn> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type spif:upperCase ;
                    sp:arg1 [
                        sp:varName "targetDatabaseType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 "http://edg.topbraid.solutions/protoinstance/FC_" ;
                    sp:arg2 [
                        rdf:type smf:generateUUID ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "protoU" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6012: Generate proto instances of file column element when we have FILE SYSTEM" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetFile>
  lib-importer:specifyProtoInstancesStage4 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:FileAsset ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileSystemUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type sp:ucase ;
                    sp:arg1 [
                        sp:varName "targetDatasetType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "directoryStructure" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object edg:FileSystem ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "directoryStructure" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "fileSystemUri" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileUri ;
                sp:arg1 [
                    sp:varName "fileSystemUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "fileName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "fileExistingUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileLabel ;
                    sp:arg1 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "fileName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 6011 Construct File triples that may reside in a File System" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetFileColumn>
  lib-importer:specifyProtoInstancesStage5 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:TableColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileColumn" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "columnTableUri" ;
              ] ;
            sp:predicate edg:columnOf ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object edg:FileTable ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileTableLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "filename" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileUri" ;
              ] ;
            sp:predicate edg:residesIn ;
            sp:subject [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedTargetElement ;
            sp:subject [
                sp:varName "columnUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedParentFromTarget ;
            sp:subject [
                sp:varName "fileUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetDatasetType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETTYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "targetDatasetType" ;
                  ] ;
                sp:arg2 "FILE" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "directoryStructure" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "filename" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATASETNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileColumn" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATAELEMENTNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileColumnUri ;
                sp:arg1 [
                    sp:varName "fileUri" ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileColumn" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingColumnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardFileColumnUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "directoryStructure" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "filename" ;
                          ] ;
                        sp:arg4 [
                            sp:varName "fileColumn" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:GetStandardFileTableUri ;
                        sp:arg1 [
                            sp:varName "fileUri" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:iri ;
                    sp:arg1 [
                        rdf:type lib-importer:BuildStandardFileTableUri ;
                        sp:arg1 [
                            sp:varName "dataAssetNamespace" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "directoryStructure" ;
                          ] ;
                        sp:arg3 [
                            sp:varName "filename" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnTableUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileColumnLabel ;
                    sp:arg1 [
                        sp:varName "directoryStructure" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "filename" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "fileColumn" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "columnLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingColumnUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "columnTableUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "TABLE OF " ;
                    sp:arg2 [
                        sp:varName "filename" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileTableLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 7002: Generate target file columns (precondition: file, parents of the columns, have been built)." ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetFileSystem>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:FileSystem ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fileSystemLabelFinal" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate edg:directoryPath ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetContainerType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type sp:ucase ;
                    sp:arg1 [
                        sp:varName "targetContainerType" ;
                      ] ;
                  ] ;
                sp:arg2 "FILE SYSTEM" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardFileSystemUri ;
                sp:arg1 [
                    sp:varName "targetContainerName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "server" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileSystemUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "fileSystemUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileSystemUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "fileSystemUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "fileSystemUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardFileSystemLabel ;
                    sp:arg1 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fileSystemLabelFinal" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3009: Target Database type is FILE SYSTEM then in the target database name Manta puts the directory structure" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetRelationalDatabase>
  lib-importer:specifyProtoInstancesStage2 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:RelationalDatabase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseType" ;
              ] ;
            sp:predicate edg:dataContainerType ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "databaseLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "server" ;
              ] ;
            sp:predicate edg:hostedOn ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "databaseUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetDatabaseType" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASETYPE> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetContainerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
              ] ;
            sp:variable [
                sp:varName "targetServerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromTarget ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseUri ;
                sp:arg1 [
                    sp:varName "server" ;
                  ] ;
                sp:arg2 [
                    sp:varName "targetContainerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUriExisting" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "databaseUriExisting" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "databaseUriExisting" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseLabel ;
                    sp:arg1 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseLabel" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:BuildStandardDatabaseType ;
                sp:arg1 [
                    sp:varName "targetDatabaseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "databaseType" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 3000:" ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetSchema>
  lib-importer:specifyProtoInstancesStage3 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:DatabaseSchema ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "schemaLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetSchemaName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "database" ;
              ] ;
            sp:predicate edg:specificationFor ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject [
                sp:varName "schemaUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFrom ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetSchemaName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASESCHEMA> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spl:object ;
                sp:arg1 [
                    sp:varName "row" ;
                  ] ;
                sp:arg2 <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETDATABASENAME> ;
              ] ;
            sp:variable [
                sp:varName "targetContainerName" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFrom ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "databaseClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetContainerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "database" ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object edg:Database ;
                  sp:path [
                      rdf:type sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "databaseClass" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "row" ;
                    ] ;
                  sp:predicate edg:derivedFromSource ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object edg:Server ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "targetServerName" ;
                    ] ;
                  sp:predicate edg:name ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetDataAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "dataAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardDatabaseSchemaUri ;
                sp:arg1 [
                    sp:varName "targetSchemaName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "database" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaExistingUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "schemaExistingUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaUri ;
                    sp:arg1 [
                        sp:varName "dataAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "schemaExistingUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardDatabaseSchemaLabel ;
                    sp:arg1 [
                        sp:varName "targetSchemaName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetContainerName" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "schemaLabel" ;
              ] ;
          ]
        ) ;
    ] ;
.
<http://edg.topbraid.solutions/proxy/importer/lineage#TargetServer>
  lib-importer:specifyProtoInstancesStage1 [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object edg:Server ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "serverLabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "targetServerName" ;
              ] ;
            sp:predicate edg:name ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromTarget ;
            sp:subject [
                sp:varName "serverUri" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "row" ;
              ] ;
            sp:predicate edg:derivedFromSource ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "targetServerName" ;
              ] ;
            sp:predicate <http://edg.topbraid.solutions/proxy/importer/lineage#tARGETSERVERNAME> ;
            sp:subject [
                sp:varName "row" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetTechnicalAssetNamespace ;
              ] ;
            sp:variable [
                sp:varName "technicalAssetNamespace" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type lib-importer:GetStandardServerUri ;
                sp:arg1 [
                    sp:varName "targetServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "existingServerUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "existingServerUri" ;
                  ] ;
                sp:arg3 [
                    rdf:type lib-importer:BuildStandardServerUri ;
                    sp:arg1 [
                        sp:varName "technicalAssetNamespace" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "targetServerName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverUri" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type lib-importer:GetStandardExistingLabel ;
                    sp:arg1 [
                        sp:varName "existingServerUri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "targetServerName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "serverLabel" ;
              ] ;
          ]
        ) ;
      rdfs:comment "STEP 2000:" ;
    ] ;
.
<http://edg.topbraid.solutions/transform/importer/lineage/GMD_lineage>
  rdf:type vaem:GraphMetaData ;
  dcterms:modified "2016-12-18"^^xsd:date ;
  dcterms:rights "<p>This ontology is issued under a restricted copyright license that prohibits reproduction, distribution, copying and any other form of sharing. The license agreement can be found at <a href='http://www.topquadrant.com/docs/legal/EULA.pdf'>http://www.topquadrant.com/docs/legal/EULA.pdf.</p>"^^rdf:HTML ;
  vaem:hasGraphRole vaem:ImporterGraph ;
  vaem:hasLicenseType <voag:TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:hasOwner vaem:TopQuadrant ;
  vaem:hasSteward vaem:TopQuadrant ;
  vaem:isMetadataFor <http://edg.topbraid.solutions/1.0/transform/importer/lineage> ;
  vaem:name "EDG" ;
  vaem:namespace "http://edg.topbraid.solutions/model/" ;
  vaem:namespacePrefix "edg" ;
  vaem:owner "TopQuadrant, Inc." ;
  vaem:releaseDate "2016-12-18"^^xsd:date ;
  vaem:revision "1.0" ;
  vaem:usesNonImportedResource dcterms:abstract ;
  vaem:usesNonImportedResource dcterms:author ;
  vaem:usesNonImportedResource dcterms:created ;
  vaem:usesNonImportedResource dcterms:modified ;
  vaem:usesNonImportedResource dcterms:rights ;
  vaem:usesNonImportedResource dcterms:title ;
  vaem:usesNonImportedResource <http://voag.linkedmodel.org/voag#TopQuadrant_ONTOLOGY-LICENSE> ;
  vaem:withAttributionTo "Any references to this ontology should give attribution to TopQuadrant, Inc." ;
.
