# baseURI: http://topbraid.org/swauml
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/swaclasses
# imports: http://uispin.org/htmlsvg
# prefix: swauml

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix email: <http://topbraid.org/email#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:associationsFilterFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:attributesFilterFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:classes
  a rdf:Property ;
  rdfs:subPropertyOf ui:resultSet ;
.
arg:focusClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:focused
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:inversePredicate
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sourceClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:superClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:systemLabels
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:targetClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
swa:AbstractClassDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:associationsFilterFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional filter function that can be used to suppress showing certain relationships. The functions should be subclass of swa:AssociationsFilterFunctions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional function(?predicate, ?sourceClass) returning true to include a given property at a given class node. Function should be subclass of swa:AttributesFilterFunctions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:systemLabels ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to use system labels (qnames and IRIs)." ;
    ] ;
  ui:abstract true ;
  rdfs:label "Abstract class diagram" ;
  rdfs:subClassOf swa:GraphElements ;
.
swa:AssociationsFilterFunctions
  a spin:Function ;
  spin:abstract true ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate of the association." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The source class of the association." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The target class of the association." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Base class for functions that can filter out certain associations from a ClassDiagram. Need to return true if the association is permitted, false to exclude it." ;
  rdfs:label "Associations filter functions" ;
  rdfs:subClassOf spin:Functions ;
.
swa:AttributesFilterFunctions
  a spin:Function ;
  spin:abstract true ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property to filter." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class hosting the property." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Abstract superclass of functions that can suppress certain attributes in ClassDiagrams. Must return true to include a property, false to exclude." ;
  rdfs:label "Attributes filter functions" ;
  rdfs:subClassOf spin:Functions ;
.
swa:ClassDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focusClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus class of interest." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classes ;
      spl:valueType sp:Select ;
      rdfs:comment "The list of classes to draw - first column of the result set called ?class must be the classes." ;
    ] ;
  ui:prototype """
<ui:setContext let:id=\"{= ui:uniqueId() }\" letrs:associationEdges=\"{#
        SELECT ?sourceClass ?targetClass ?predicate
        WHERE {
            {
                ?classes spr:rowIndices ?rowIndex .
                BIND (spr:cell(?classes, ?rowIndex, 0) AS ?sourceClass) .
            } .
            ?sourceClass swauml:property ?predicate .
            BIND (swauml:valueType(?predicate, ?sourceClass) AS ?targetClass) .
            FILTER (bound(?targetClass) &amp;&amp; swauml:contains(?classes, ?targetClass)) .
            FILTER ((!bound(?associationsFilterFunction)) || spif:invoke(?associationsFilterFunction, ?predicate, ?sourceClass, ?targetClass)) .
        } }\" letrs:superClassEdges=\"{#
        SELECT ?class ?superClass
        WHERE {
            {
                ?classes spr:rowIndices ?rowIndex .
                BIND (spr:cell(?classes, ?rowIndex, 0) AS ?class) .
            } .
            ?class rdfs:subClassOf ?superClass .
            FILTER swauml:contains(?classes, ?superClass) .
        } }\" ui:varName=\"swaSystemLabels\" ui:varValue=\"{= ?systemLabels }\">
    <div class=\"swauml-diagram\" id=\"{= ?id }\">
        <svg height=\"100%\" width=\"100%\">
            <defs>
                <marker id=\"associationMarker\" markerHeight=\"10\" markerWidth=\"10\" orient=\"auto\" refX=\"10\" refY=\"5\">
                    <path class=\"swauml-association-edge-marker\" d=\"M10,5 L0,10 L0,0 Z\"/>
                </marker>
                <marker id=\"subClassMarker\" markerHeight=\"20\" markerWidth=\"20\" orient=\"auto\" refX=\"0\" refY=\"10\">
                    <polygon class=\"swauml-subclass-edge-marker\" points=\"0,10 10,6 10,14\"/>
                </marker>
            </defs>
            <ui:forEach ui:resultSet=\"{= ?superClassEdges }\">
                <swauml:SubClassEdge arg:subClass=\"{= ?class }\" arg:superClass=\"{= ?superClass }\"/>
            </ui:forEach>
            <ui:forEach ui:resultSet=\"{= ?associationEdges }\">
                <swauml:AssociationEdge arg:predicate=\"{= ?predicate }\" arg:sourceClass=\"{= ?sourceClass }\" arg:targetClass=\"{= ?targetClass }\"/>
            </ui:forEach>
        </svg>
        <ui:forEach ui:resultSet=\"{= ?classes }\">
            <swauml:ClassNode arg:attributesFilterFunction=\"{= ?attributesFilterFunction }\" arg:class=\"{= ?class }\" arg:focused=\"{= ?class = ?focusClass }\"/>
        </ui:forEach>
        <ui:forEach ui:resultSet=\"{= ?associationEdges }\">
            <swauml:AssociationEdgeLabel arg:predicate=\"{= ?predicate }\" arg:sourceClass=\"{= ?sourceClass }\" arg:targetClass=\"{= ?targetClass }\"/>
        </ui:forEach>
    </div>
    <script>swa.initClassDiagram(\"{= ?id }\",<swon:Array>
            <ui:forEach ui:resultSet=\"{= ?superClassEdges }\" ui:separator=\",\">
                <swon:Object>
                    <swon:Value arg:name=\"superClass\" arg:value=\"{= ?superClass }\"/>
                    <swon:Value arg:name=\"subClass\" arg:value=\"{= ?class }\"/>
                </swon:Object>
            </ui:forEach>
        </swon:Array>
        <swon:Comma/>
        <swon:Array>
            <ui:forEach ui:resultSet=\"{= ?associationEdges }\" ui:separator=\",\">
                <swon:Object>
                    <swon:Value arg:name=\"sourceClass\" arg:value=\"{= ?sourceClass }\"/>
                    <swon:Value arg:name=\"targetClass\" arg:value=\"{= ?targetClass }\"/>
                    <swon:Value arg:name=\"predicate\" arg:value=\"{= ?predicate }\"/>
                </swon:Object>
            </ui:forEach>
        </swon:Array>)</script>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Class diagram" ;
  rdfs:subClassOf swa:AbstractClassDiagram ;
.
swa:FocusClassDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus class of interest." ;
    ] ;
  ui:prototype """
<ui:group letrs:cs=\"{#
        SELECT ?class
        WHERE {
            ?focusClass (rdfs:subClassOf)* ?class .
            FILTER (isIRI(?class) &amp;&amp; ((!swauml:isRootClass(?class)) || (?focusClass = ?class))) .
        } }\">
    <swa:ClassDiagram arg:classes=\"{#
            SELECT DISTINCT ?class
            WHERE {
                {
                    ?cs spr:rowIndices ?rowIndex .
                    BIND (spr:cell(?cs, ?rowIndex, 0) AS ?class) .
                }
                UNION
                {
                    ?focusClass swauml:property ?predicate .
                    BIND (swauml:valueType(?predicate, ?focusClass) AS ?class) .
                    FILTER ((bound(?class) &amp;&amp; isIRI(?class)) &amp;&amp; (!swa:isDatatypeRange(?class))) .
                    FILTER ((!bound(?associationsFilterFunction)) || spif:invoke(?associationsFilterFunction, ?predicate, ?focusClass)) .
                } .
            } }\" ui:args=\"*\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "A class diagram showing the neighborhood of a given focus class. This includes all superclasses of that class." ;
  rdfs:label "Focus class diagram" ;
  rdfs:subClassOf swa:AbstractClassDiagram ;
.
swa:SubclassesClassDiagram
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus class of interest." ;
    ] ;
  ui:prototype """
<swa:ClassDiagram arg:associationsFilterFunction=\"{= ?associationsFilterFunction }\" arg:attributesFilterFunction=\"{= ?attributesFilterFunction }\" arg:classes=\"{#
        SELECT ?class
        WHERE {
            ?class (rdfs:subClassOf)* ?focusClass .
            FILTER isIRI(?class) .
        } }\" arg:systemLabels=\"{= ?systemLabels }\"/>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "A class diagram including all subclasses of a given focus class." ;
  rdfs:label "Subclasses class diagram" ;
  rdfs:subClassOf swa:AbstractClassDiagram ;
.
<http://topbraid.org/swauml>
  a owl:Ontology ;
  rdfs:comment "Support for UML-like class diagrams in SWP." ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/swaclasses> ;
  owl:imports <http://uispin.org/htmlsvg> ;
.
swauml:AssociationEdge
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The (forward) predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The start of the association" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The end of the association." ;
    ] ;
  ui:private true ;
  ui:prototype """
<polyline about=\"{= ?sourceClass } {= ?targetClass } {= ?predicate }\" class=\"swauml-association-edge-line\"/>
"""^^ui:Literal ;
  rdfs:label "Association edge" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:AssociationEdgeLabel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The (forward) predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The start of the association" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The end of the association." ;
    ] ;
  ui:private true ;
  ui:prototype """
<div about=\"label {= ?sourceClass } {= ?targetClass } {= ?predicate }\" class=\"swauml-association-edge-label\" let:systemLabels=\"{= ui:contextValue(&quot;swaSystemLabels&quot;) }\">{= swauml:propertyLabel(?predicate, ?sourceClass, ?systemLabels) }</div>
"""^^ui:Literal ;
  rdfs:label "Association edge label" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:Attribute
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to display the attribute in." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The attribute property." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:varName=\"swaNodeClass\" ui:varValue=\"{= ?class }\">
    <div class=\"swauml-class-attribute\" let:systemLabels=\"{= ui:contextValue(&quot;swaSystemLabels&quot;) }\">
        <span class=\"swauml-class-attribute-name\">
            <swa:Link arg:labelOverride=\"{= swauml:propertyLabel(?property, ?class, ?systemLabels) }\" arg:resource=\"{= ?property }\"/>
        </span>
        <span>: </span>
        <span class=\"swauml-class-attribute-type\" let:valueType=\"{= swauml:valueType(?property, ?class) }\">
            <ui:if ui:condition=\"{= bound(?valueType) }\">
                <swa:Link arg:labelOverride=\"{= IF(?systemLabels, smf:qname(?valueType), ?none) }\" arg:resource=\"{= ?valueType }\"/>
                <swa:Space/>
            </ui:if>
        </span>
        <span>[{= COALESCE(swauml:minCount(?property, ?class), 0) }..{= COALESCE(swauml:maxCount(?property, ?class), \"*\") }]</span>
    </div>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?extras
            WHERE {
                GRAPH ui:graph {
                    ?extras rdfs:subClassOf swauml:AttributeExtras .
                } .
            }
            ORDER BY (?extras) }\">
        <ui:dynamicView arg:class=\"{= ?class }\" arg:property=\"{= ?property }\" ui:class=\"{= ?extras }\"/>
    </ui:forEach>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Attribute" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:AttributeExtras
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class of the attribute." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The attribute property." ;
    ] ;
  rdfs:comment "Abstract base class for components that can inject \"extras\" underneath an attribute's main row. Examples are OWL restrictions (owl:someValuesFrom) or SHACL constraints. Subclasses should have a prototype consisting of a <div class=\"swauml-class-attribute-extras\">...</div>." ;
  rdfs:label "Attribute extras" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:AttributeExtrasOWL
  a ui:NodeClass ;
  ui:prototype """
<ui:group letrs:rs=\"{#
        SELECT ?r
        WHERE {
            ?class rdfs:subClassOf ?r .
            ?r owl:onProperty ?property .
            FILTER NOT EXISTS {
                ?r ((owl:allValuesFrom|owl:cardinality)|owl:minCardinality)|owl:maxCardinality ?any .
            } .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <div class=\"swauml-class-attribute-extras\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <div>
                    <swa:OWLRestrictionLabel arg:resource=\"{= ?r }\" arg:suppressProperty=\"{= true }\"/>
                </div>
            </ui:forEach>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A block of extras representing relevant OWL restrictions." ;
  rdfs:label "Attribute extras OWL" ;
  rdfs:subClassOf swauml:AttributeExtras ;
.
swauml:ClassNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:attributesFilterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional function(?property, ?class) returning true to include a given property at a given class node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:focused ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have this focused." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to render." ;
    ] ;
  ui:private true ;
  ui:prototype """
<div about=\"{= ?class }\" class=\"swauml-class-node\" let:systemLabels=\"{= COALESCE(ui:contextValue(&quot;swaSystemLabels&quot;), false) }\">
    <div class=\"swauml-class-header\" letrs:metaClasses=\"{#
            SELECT ?metaClass
            WHERE {
                ?class a ?metaClass .
                FILTER (?metaClass NOT IN (rdfs:Class, owl:Class, sh:NodeShape)) .
            } }\" style=\"{= IF(?focused, &quot;font-weight: bold&quot;, ?none) }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?metaClasses) }\">
            <div class=\"swauml-class-header-metaclass\">
                <ui:forEach ui:resultSet=\"{= ?metaClasses }\" ui:separator=\"&nbsp;\">
                    <swa:Link arg:labelOverride=\"&lt;&lt;{= IF(?systemLabels, smf:qname(?metaClass), ui:label(?metaClass)) }&gt;&gt;\" arg:resource=\"{= ?metaClass }\"/>
                </ui:forEach>
            </div>
        </ui:if>
        <swa:Link arg:labelOverride=\"{= IF(?systemLabels, smf:qname(?class), ?none) }\" arg:resource=\"{= ?class }\"/>
    </div>
    <div class=\"swauml-class-attributes\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?property
                WHERE {
                    ?class swauml:property ?property .
                    FILTER ((!bound(?attributesFilterFunction)) || spif:invoke(?attributesFilterFunction, ?property, ?class)) .
                } }\">
            <swauml:Attribute arg:class=\"{= ?class }\" arg:property=\"{= ?property }\"/>
        </ui:forEach>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Class node" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:SubClassEdge
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:superClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<polyline about=\"{= ?superClass } {= ?subClass }\" class=\"swauml-subclass-edge-line\"/>
"""^^ui:Literal ;
  rdfs:label "Sub class edge" ;
  rdfs:subClassOf swa:GraphElements ;
.
swauml:contains
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "rowIndex" ;
              ] ;
            sp:predicate spr:rowIndices ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spr:cell ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 [
                    sp:varName "rowIndex" ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "cell" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "cell" ;
                  ] ;
                sp:arg2 spin:_arg2 ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType spr:Table ;
      rdfs:comment "The result set." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The item to look for." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "contains" ;
  rdfs:subClassOf spin:Functions ;
.
swauml:isRootClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 spin:_arg1 ;
                    sp:arg2 owl:Thing ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object spin:_arg1 ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 1 ;
                              sp:subPath rdfs:subClassOf ;
                            ] ;
                          sp:subject owl:Thing ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:subClassOf spin:Functions ;
.
swauml:maxCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Min ;
                sp:expression [
                    sp:varName "maxCount" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object swauml:maxCount ;
                  sp:predicate rdfs:subClassOf ;
                  sp:subject [
                      sp:varName "function" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:invoke ;
                sp:arg1 [
                    sp:varName "function" ;
                  ] ;
                sp:arg2 spin:_arg1 ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "maxCount" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "maxCount" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the maxCount of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to get the maxCount at." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:label "max count" ;
  rdfs:subClassOf spin:Functions ;
.
swauml:maxCountOWL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "maxCount" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "restriction" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "maxCount" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 owl:maxCardinality ;
                sp:path2 owl:cardinality ;
              ] ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "max count OWL" ;
  rdfs:subClassOf swauml:maxCount ;
.
swauml:maxCountRDFS
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "maxCount" ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:FunctionalProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression 1 ;
            sp:variable [
                sp:varName "maxCount" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "max count RDFS" ;
  rdfs:subClassOf swauml:maxCount ;
.
swauml:minCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Max ;
                sp:expression [
                    sp:varName "minCount" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object swauml:minCount ;
                  sp:predicate rdfs:subClassOf ;
                  sp:subject [
                      sp:varName "function" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:invoke ;
                sp:arg1 [
                    sp:varName "function" ;
                  ] ;
                sp:arg2 spin:_arg1 ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "minCount" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "minCount" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the minCount of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to get the minCount at." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:label "min count" ;
  rdfs:subClassOf spin:Functions ;
.
swauml:minCountOWL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "minCount" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "restriction" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "minCount" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 owl:minCardinality ;
                sp:path2 owl:cardinality ;
              ] ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "min count OWL" ;
  rdfs:subClassOf swauml:minCount ;
.
swauml:property
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object swauml:property ;
                  sp:predicate rdfs:subClassOf ;
                  sp:subject [
                      sp:varName "magicProperty" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:concat ;
                      sp:arg1 "<" ;
                      sp:arg2 [
                          a sp:str ;
                          sp:arg1 [
                              sp:varName "magicProperty" ;
                            ] ;
                        ] ;
                      sp:arg3 ">" ;
                    ] ;
                  sp:variable [
                      sp:varName "path" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "path" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate spif:evalPath ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a swa:isHiddenProperty ;
                    arg:property [
                        sp:varName "property" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swauml:propertyLabel ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
                sp:arg2 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to get the properties of." ;
    ] ;
  spin:returnType rdf:Property ;
  rdfs:comment "Gets all properties that shall appear as attributes inside of a class node. This magic property is calling out to all its subclass magic properties that implement the actual logic for OWL, RDFS, SPIN, SHACL etc." ;
  rdfs:label "property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
swauml:propertyLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression spin:_arg3 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:qname ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object swauml:propertyLabel ;
                          sp:predicate rdfs:subClassOf ;
                          sp:subject [
                              sp:varName "function" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:invoke ;
                        sp:arg1 [
                            sp:varName "function" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                        sp:arg3 spin:_arg2 ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "label" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:label ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to use system names (qnames/IRIs) only." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the maxCount of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to get the maxCount at." ;
    ] ;
  rdfs:label "property label" ;
  rdfs:subClassOf spin:Functions ;
.
swauml:propertyOWL
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:path [
                        a sp:SeqPath ;
                        sp:path1 rdfs:subClassOf ;
                        sp:path2 owl:onProperty ;
                      ] ;
                    sp:subject spin:_arg1 ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "domain" ;
                      ] ;
                    sp:predicate rdfs:domain ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "list" ;
                      ] ;
                    sp:predicate owl:unionOf ;
                    sp:subject [
                        sp:varName "domain" ;
                      ] ;
                  ]
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate list:member ;
                    sp:subject [
                        sp:varName "list" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "property OWL" ;
  rdfs:subClassOf swauml:property ;
.
swauml:propertyRDFS
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate rdfs:domain ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "property RDFS" ;
  rdfs:subClassOf swauml:property ;
.
swauml:valueType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object swauml:valueType ;
                          sp:predicate rdfs:subClassOf ;
                          sp:subject [
                              sp:varName "function" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spif:invoke ;
                        sp:arg1 [
                            sp:varName "function" ;
                          ] ;
                        sp:arg2 spin:_arg1 ;
                        sp:arg3 spin:_arg2 ;
                      ] ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "result" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate rdfs:range ;
                    sp:subject spin:_arg1 ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the value type of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to get the value type at." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Class ;
  rdfs:label "value type" ;
  rdfs:subClassOf spin:Functions ;
.
swauml:valueTypeOWL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "valueType" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "restriction" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueType" ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "restriction" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "value type OWL" ;
  rdfs:subClassOf swauml:valueType ;
.
html:Polyline
  a ui:NodeClass ;
  rdfs:label "Polyline" ;
  rdfs:subClassOf html:SVGElements ;
.
rdfs:Class
  ui:instanceView """
<swa:FocusClassDiagram arg:focusClass=\"{= ?this }\" arg:systemLabels=\"{= true }\" ui:id=\"diagram\" ui:priority=\"{= -10 }\"/>
"""^^ui:Literal ;
.
