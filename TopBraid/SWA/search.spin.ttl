# baseURI: http://topbraid.org/search.spin
# imports: http://spinrdf.org/spin
# imports: http://topbraid.org/search
# imports: http://topbraid.org/swa.spin
# prefix: search.spin

@prefix arg: <http://spinrdf.org/arg#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:column
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:path
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:rootResult
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:search
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:searchGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:varName
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
search:columnPropertiesFromTheSearch
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "column" ;
                    ] ;
                  sp:predicate spin:column ;
                  sp:subject [
                      sp:varName "search" ;
                    ] ;
                ]
                [
                  sp:object search:PropertyColumn ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "column" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "property" ;
                    ] ;
                  sp:predicate search:columnProperty ;
                  sp:subject [
                      sp:varName "column" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode spin:_arg1 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The search graph containing the search:Search." ;
    ] ;
  rdfs:label "column properties from the search" ;
  rdfs:subClassOf spin:MagicProperties ;
.
search:hasInverseKeyProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate search:inverseKeyProperty ;
                    sp:subject [
                        sp:varName "search" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "column" ;
                      ] ;
                    sp:predicate spin:column ;
                    sp:subject [
                        sp:varName "search" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate search:columnProperty ;
                    sp:subject [
                        sp:varName "column" ;
                      ] ;
                  ]
                  [
                    sp:object search:InversePropertyColumn ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "column" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to search for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given Search has a given property as \"inverse key property\", i.e. whether it is a column property. Also supports legacy data using search:inverseKeyProperty." ;
  rdfs:label "has inverse key property" ;
  rdfs:subClassOf spin:Functions ;
.
search:hasKeyProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate search:keyProperty ;
                    sp:subject [
                        sp:varName "search" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "column" ;
                      ] ;
                    sp:predicate spin:column ;
                    sp:subject [
                        sp:varName "search" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate search:columnProperty ;
                    sp:subject [
                        sp:varName "column" ;
                      ] ;
                  ]
                  [
                    sp:object search:PropertyColumn ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "column" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to search for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given Search has a given property as \"key property\", i.e. whether it is a column property. Also supports legacy data using search:keyProperty." ;
  rdfs:label "has key property" ;
  rdfs:subClassOf spin:Functions ;
.
search:isCountInverseKeyProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "column" ;
              ] ;
            sp:predicate spin:column ;
            sp:subject [
                sp:varName "search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate search:columnProperty ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
          [
            sp:object search:InversePropertyColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
          [
            sp:object search:CountColumnType ;
            sp:predicate search:columnType ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to search for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Assuming that a given Search has an inverse key property, this checks whether that key property is returning the count." ;
  rdfs:label "is count inverse key property" ;
  rdfs:subClassOf spin:Functions ;
.
search:isCountKeyProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "column" ;
              ] ;
            sp:predicate spin:column ;
            sp:subject [
                sp:varName "search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate search:columnProperty ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
          [
            sp:object search:PropertyColumn ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
          [
            sp:object search:CountColumnType ;
            sp:predicate search:columnType ;
            sp:subject [
                sp:varName "column" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to search for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Assuming that a given Search has an inverse key property, this checks whether that key property is returning the count." ;
  rdfs:label "is count key property" ;
  rdfs:subClassOf spin:Functions ;
.
search:nestedObjectsList
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootResult ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:varName ;
      spl:valueType xsd:string ;
    ] ;
  rdfs:comment "Recursively collects all values (objects) of a given subject/predicate combination into a single string list, separated by commas. If there is just a single literal value, then return that value in the original data type. Used by SWA search forms to display optional (key) columns for nested object properties." ;
  rdfs:label "nested objects list" ;
  rdfs:subClassOf spin:Functions ;
.
search:potentialFacetProperty
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:notExists ;
                  sp:elements (
                      [
                        sp:object true ;
                        sp:predicate search:closed ;
                        sp:subject spin:_arg1 ;
                      ]
                    ) ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "queryGraph" ;
                ] ;
              sp:predicate search:queryGraph ;
              sp:subject spin:_arg1 ;
            ]
            [
              sp:object [
                  sp:varName "rootType" ;
                ] ;
              sp:predicate search:rootType ;
              sp:subject spin:_arg1 ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "class" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "rootType" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "class" ;
                              ] ;
                            sp:arg2 rdfs:Resource ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "class" ;
                              ] ;
                            sp:arg2 owl:Thing ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "baseProperty" ;
                    ] ;
                  sp:predicate swa:directRelevantClassOfProperty ;
                  sp:subject [
                      sp:varName "class" ;
                    ] ;
                ]
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "baseProperty" ;
                    ] ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subPropertyOf ;
                    ] ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:exists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "anyObject" ;
                              ] ;
                            sp:predicate [
                                sp:varName "property" ;
                              ] ;
                            sp:subject [
                                sp:varName "anySubject" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "queryGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      a sp:TriplePath ;
                      sp:object [
                          sp:varName "property" ;
                        ] ;
                      sp:path [
                          a sp:SeqPath ;
                          sp:path1 search:facet ;
                          sp:path2 search:property ;
                        ] ;
                      sp:subject spin:_arg1 ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "property" ;
                        ] ;
                      sp:predicate search:excludedFacetProperty ;
                      sp:subject spin:_arg1 ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to get the potential facet properties for." ;
    ] ;
  spin:returnType rdf:Property ;
  rdfs:comment "Takes a search:Search (?arg1, left hand side) and returns all properties that the user could potentially add to the search." ;
  rdfs:label "potential facet property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
search:prependProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "newPath" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "varName" ;
                          ] ;
                        sp:predicate search:nestedSubjectVarName ;
                        sp:subject [
                            sp:varName "nestedFacetValue" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "nestedFacetValue" ;
                          ] ;
                        sp:predicate search:facetValue ;
                        sp:subject [
                            sp:varName "nestedFacet" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "nextVar" ;
                          ] ;
                        sp:predicate search:subjectVarName ;
                        sp:subject [
                            sp:varName "nestedFacet" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "property" ;
                          ] ;
                        sp:predicate search:property ;
                        sp:subject [
                            sp:varName "nestedFacet" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "queryGraph" ;
                          ] ;
                        sp:predicate search:queryGraph ;
                        sp:subject [
                            sp:varName "search" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "property" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a search:prependProperty ;
                          arg:path [
                              a sp:concat ;
                              sp:arg1 "[" ;
                              sp:arg2 [
                                  a spif:titleCase ;
                                  sp:arg1 [
                                      a swa:labelInGraph ;
                                      arg:resource [
                                          sp:varName "property" ;
                                        ] ;
                                      arg:resourceGraph [
                                          sp:varName "queryGraph" ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg3 "]." ;
                              sp:arg4 [
                                  sp:varName "path" ;
                                ] ;
                            ] ;
                          arg:searchGraph [
                              sp:varName "searchGraph" ;
                            ] ;
                          arg:varName [
                              sp:varName "nextVar" ;
                            ] ;
                        ] ;
                      sp:arg3 [
                          sp:varName "path" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "newPath" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "searchGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:path ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:searchGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:varName ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Prepends the property name of an object property, to an existing property name in a nested search facet.  Used in generating column labels in search results forms." ;
  rdfs:label "prepend property" ;
  rdfs:subClassOf spin:Functions ;
.
search:propertyPath
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "path" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "varName" ;
                    ] ;
                  sp:predicate search:columnSubjectVarName ;
                  sp:subject [
                      sp:varName "column" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a search:prependProperty ;
                      arg:path "" ;
                      arg:searchGraph [
                          sp:varName "searchGraph" ;
                        ] ;
                      arg:varName [
                          sp:varName "varName" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "path" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "searchGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:column ;
      spl:valueType search:SinglePropertyColumn ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:searchGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Creates column labels in search results forms for nested objects." ;
  rdfs:label "property path" ;
  rdfs:subClassOf spin:Functions ;
.
search:result
  a spin:MagicProperty ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The start index, beginning with 0. Can be used to implement paging." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of results to return, e.g. 10." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg4 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The sort property (may be unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg5 ;
      spl:valueType xsd:boolean ;
      rdfs:comment "true to apply descending order." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to execute." ;
    ] ;
  rdfs:comment """Executes a search:Search (?arg1) with a given start index (?arg2), result count (?arg3), an optional sort property (?arg4) and sort direction (?arg5) and produces two result variables (on the right hand side): the first result variable will contain all matching resources - the search results and the second variable will be the total number of matches. Example call:

    (?search 0 10 ?sortProperty ?descending) search:result (?result ?totalCount)

Note that this magic property must be called from within the graph containing the search:Search object, which needs to point to the query graph using search:queryGraph.""" ;
  rdfs:label "result" ;
  rdfs:subClassOf spin:MagicProperties ;
.
search:theSearch
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "search" ;
          ]
        ) ;
      sp:where (
          [
            sp:object search:Search ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "search" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Gets the first instance of search:Search in the current query graph." ;
  rdfs:label "the search" ;
  rdfs:subClassOf spin:Functions ;
.
<http://topbraid.org/search.spin>
  a owl:Ontology ;
  rdfs:comment "SPIN functions for the search namespace." ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <http://topbraid.org/search> ;
  owl:imports <http://topbraid.org/swa.spin> ;
.
