# baseURI: http://topbraid.org/shacl/ui
# imports: http://datashapes.org/dash
# imports: http://topbraid.org/swa

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix email: <http://topbraid.org/email#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:suppressPredicate
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://topbraid.org/shacl/ui>
  a owl:Ontology ;
  owl:imports <http://datashapes.org/dash> ;
  owl:imports <http://topbraid.org/swa> ;
.
swauml:AttributeExtrasSHACL
  a ui:NodeClass ;
  ui:prototype """
<ui:group letrs:rs=\"{#
        SELECT ?parameterLabel ?value
        WHERE {
            ?class sh:property ?p .
            ?p sh:path ?property .
            ?p ?parameter ?value .
            FILTER EXISTS {
                ?cc sh:parameter/sh:path ?parameter .
                ?cc a sh:ConstraintComponent .
            } .
            FILTER (isIRI(?value) || isLiteral(?value)) .
            FILTER (!(?parameter IN (sh:class, sh:datatype, sh:node, sh:minCount, sh:maxCount))) .
            BIND (ui:label(?parameter) AS ?parameterLabel) .
        }
        ORDER BY (?parameterLabel) }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <div class=\"swauml-class-attribute-extras\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <div>
                    <span class=\"swa-keyword\">{= ?parameterLabel }</span>
                    <swa:Space/>
                    <ui:if ui:condition=\"{= isLiteral(?value) }\">
                        <swa:Label arg:node=\"{= ?value }\"/>
                    </ui:if>
                    <ui:else>
                        <swa:Link arg:resource=\"{= ?value }\"/>
                    </ui:else>
                </div>
            </ui:forEach>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A block of extras representing relevant SHACL constraints." ;
  rdfs:label "Attribute extras SHACL" ;
  rdfs:subClassOf swauml:AttributeExtras ;
.
swauml:maxCountSHACL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:Min ;
            sp:expression [
                sp:varName "maxCount" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "argument" ;
                      ] ;
                    sp:predicate sh:parameter ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "argument" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "maxCount" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate sh:property ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "maxCount" ;
                      ] ;
                    sp:predicate sh:maxCount ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  rdfs:label "max count SHACL" ;
  rdfs:subClassOf swauml:maxCount ;
.
swauml:minCountSHACL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "minCount" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "property" ;
                      ] ;
                    sp:predicate sh:property ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "minCount" ;
                      ] ;
                    sp:predicate sh:minCount ;
                    sp:subject [
                        sp:varName "property" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "argument" ;
                      ] ;
                    sp:predicate sh:parameter ;
                    sp:subject spin:_arg2 ;
                  ]
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate sh:path ;
                    sp:subject [
                        sp:varName "argument" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object true ;
                              sp:predicate sh:optional ;
                              sp:subject [
                                  sp:varName "argument" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "minCount" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  rdfs:label "min count SHACL" ;
  rdfs:subClassOf swauml:minCount ;
.
swauml:propertyLabelSHACL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 sh:property ;
                sp:path2 sh:parameter ;
              ] ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate sh:name ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "property label SHACL" ;
  rdfs:subClassOf swauml:propertyLabel ;
.
swauml:propertySHACL
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 [
                    a sp:AltPath ;
                    sp:path1 sh:property ;
                    sp:path2 sh:parameter ;
                  ] ;
                sp:path2 sh:path ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "property SHACL" ;
  rdfs:subClassOf swauml:property ;
.
swauml:valueTypeSHACL
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "valueType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "propertyShape" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 sh:property ;
                sp:path2 sh:parameter ;
              ] ;
            sp:subject spin:_arg2 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "valueType" ;
              ] ;
            sp:path [
                a sp:AltPath ;
                sp:path1 [
                    a sp:AltPath ;
                    sp:path1 sh:datatype ;
                    sp:path2 sh:class ;
                  ] ;
                sp:path2 sh:node ;
              ] ;
            sp:subject [
                sp:varName "propertyShape" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "value type SHACL" ;
  rdfs:subClassOf swauml:valueType ;
.
