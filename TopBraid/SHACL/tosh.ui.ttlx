# baseURI: http://topbraid.org/tosh.ui
# imports: http://topbraid.org/swa
# prefix: tosh.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:canApply
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:canApplyGroups
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:canOK
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:defaultSubject
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:delete
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:editFormId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graphUpdate
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:linkable
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:result
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resultId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:shapesGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suggestion
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:triples
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
swa:ApplySuggestionGroupService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:group ;
      rdfs:comment "The suggestion group." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sessionGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The session graph containing the suggestion." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group letrs:ss=\"{#
        SELECT ?suggestion
        WHERE {
            GRAPH ?sessionGraph {
                ?suggestion dash:suggestionGroup ?group .
            } .
        } }\">
    <ui:transaction ui:logMessage=\"Apply {= spr:rowCount(?ss) } suggestions similar to {= spl:objectInGraph(spr:cell(?ss, 0, 0), sh:message, ?sessionGraph) }\">
        <ui:forEach ui:resultSet=\"{= ?ss }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?s ?p ?o .
                    }
                    WHERE {
                        GRAPH ?sessionGraph {
                            ?suggestion dash:deletedTriple ?triple .
                            ?triple rdf:subject ?s .
                            ?triple rdf:predicate ?p .
                            ?triple rdf:object ?o .
                        } .
                    } }\"/>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?s ?p ?o .
                    }
                    WHERE {
                        GRAPH ?sessionGraph {
                            ?suggestion dash:addedTriple ?triple .
                            ?triple rdf:subject ?s .
                            ?triple rdf:predicate ?p .
                            ?triple rdf:object ?o .
                        } .
                    } }\"/>
        </ui:forEach>
    </ui:transaction>
    <ui:setContext ui:queryGraph=\"{= ?sessionGraph }\">
        <ui:forEach ui:resultSet=\"{= ?ss }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?result dash:suggestion ?s .
                    }
                    INSERT {
                        ?result dash:fixed true .
                    }
                    WHERE {
                        ?result dash:suggestion ?suggestion .
                        ?result dash:suggestion ?s .
                    } }\"/>
        </ui:forEach>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Apply suggestion group service" ;
  rdfs:subClassOf ui:JSONServices ;
  owl:versionInfo "DEPRECATED - use tosh.ui:ApplySuggestionService for future work" ;
.
swa:ApplySuggestionService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sessionGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The session graph containing the suggestion." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:suggestion ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The suggestion blank node." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:transaction ui:logMessage=\"{= spl:objectInGraph(?suggestion, sh:message, ?sessionGraph) }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?s ?p ?o .
                }
                WHERE {
                    GRAPH ?sessionGraph {
                        ?suggestion dash:deletedTriple ?triple .
                        ?triple rdf:subject ?s .
                        ?triple rdf:predicate ?p .
                        ?triple rdf:object ?o .
                    } .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?s ?p ?o .
                }
                WHERE {
                    GRAPH ?sessionGraph {
                        ?suggestion dash:addedTriple ?triple .
                        ?triple rdf:subject ?s .
                        ?triple rdf:predicate ?p .
                        ?triple rdf:object ?o .
                    } .
                } }\"/>
    </ui:transaction>
    <ui:setContext ui:queryGraph=\"{= ?sessionGraph }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?result dash:suggestion ?s .
                }
                INSERT {
                    ?result dash:fixed true .
                }
                WHERE {
                    ?result dash:suggestion ?suggestion .
                    ?result dash:suggestion ?s .
                } }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Apply suggestion service" ;
  rdfs:subClassOf ui:JSONServices ;
  owl:versionInfo "DEPRECATED - use tosh.ui:ApplySuggestionService for future work" ;
.
swa:GetOrCreateListMemberShape
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:propertyShape ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property shape" ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:memberShape=\"{= swa:listMemberShape(?propertyShape) }\">
    <ui:if ui:condition=\"{= bound(?memberShape) }\">
        <ui:group>{= ui:encodeNode(?memberShape, true, true) }</ui:group>
    </ui:if>
    <ui:else>
        <ui:group let:memberShape=\"{= BNODE() }\">
            <ui:setContext ui:silentTransactions=\"{= true }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?propertyShape sh:property ?memberShape .
                            ?memberShape sh:path ?list .
                            ?list rdf:first ?zeroOrMore .
                            ?zeroOrMore sh:zeroOrMorePath rdf:rest .
                            ?list rdf:rest ?first .
                            ?first rdf:first rdf:first .
                            ?first rdf:rest rdf:nil .
                        }
                        WHERE {
                            BIND (BNODE() AS ?list) .
                            BIND (BNODE() AS ?zeroOrMore) .
                            BIND (BNODE() AS ?first) .
                        } }\"/>
            </ui:setContext>
            <ui:group>{= ui:encodeNode(?memberShape, true, true) }</ui:group>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Get or create list member shape" ;
  rdfs:subClassOf ui:Services ;
.
swa:ValidationResultView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApply ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include the Apply button in suggestions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApplyGroups ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also display a button to apply all \"similar\" violations." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultSubject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The default subject - if set then the row \"Subject: ...\" will be suppressed if identical to the defaultSubject." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:result ;
      spl:valueType sh:AbstractResult ;
      rdfs:comment "The result instance to display." ;
    ] ;
  ui:prototype """
<ui:group let:focusNode=\"{= spl:object(?result, sh:focusNode) }\" let:inverse=\"{= EXISTS {
    ?result sh:resultPath ?path .
    ?path sh:inversePath ?some .
} }\" let:message=\"{= spl:object(?result, sh:resultMessage) }\" let:path=\"{= spl:object(?result, sh:resultPath) }\" let:resultId=\"{= ui:uniqueId() }\" let:severity=\"{= COALESCE(spl:object(?result, sh:resultSeverity), sh:Violation) }\" let:value=\"{= spl:object(?result, sh:value) }\">
    <div class=\"swa-validation-result swa-validation-result-{= IF((?severity = sh:Warning), &quot;warning&quot;, &quot;violation&quot;) }\" id=\"{= ?resultId }\">
        <div>
            <div class=\"swa-validation-result-icon swa-validation-result-icon-{= spif:lowerCase(afn:localname(?severity)) } swa-float-left\"/>
            <div class=\"swa-validation-result-message\">{= COALESCE(?message, \"(No message found)\") }</div>
        </div>
        <ui:if ui:condition=\"{= bound(?focusNode) &amp;&amp; (((!bound(?defaultSubject)) || ?inverse) || (?defaultSubject != ?focusNode)) }\">
            <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ?dataGraph }\" arg:label=\"Resource\" arg:linkable=\"{= true }\" arg:value=\"{= ?focusNode }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?path) }\">
            <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ?dataGraph }\" arg:label=\"Property{= IF(?inverse, &quot; (inv)&quot;, ?none) }\" arg:value=\"{= IF(?inverse, spl:object(?path, sh:inversePath), ?path) }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?value) }\">
            <tosh.ui:ValidationResultViewValue arg:dataGraph=\"{= ?dataGraph }\" arg:label=\"Value\" arg:value=\"{= ?value }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= EXISTS {
            ?result dash:suggestion ?any .
            ?any a dash:GraphUpdate .
        } }\">
            <table class=\"swa-validation-result-table\">
                <tr letrs:suggestions=\"{#
                        SELECT ?suggestion
                        WHERE {
                            ?result dash:suggestion ?suggestion .
                            ?suggestion a dash:GraphUpdate .
                            BIND (spl:object(?suggestion, sh:order) AS ?order) .
                        }
                        ORDER BY (?order) }\">
                    <td class=\"swa-validation-result-table-label\">Suggestion{= IF((spr:rowCount(?suggestions) = 1), ?none, \"s\") }:</td>
                    <td class=\"swa-validation-result-table-body\">
                        <ui:forEach ui:resultSet=\"{= ?suggestions }\">
                            <tosh.ui:GraphUpdateView arg:canApply=\"{= ?canApply }\" arg:canApplyGroups=\"{= ?canApplyGroups }\" arg:dataGraph=\"{= ?dataGraph }\" arg:graphUpdate=\"{= ?suggestion }\" arg:result=\"{= ?result }\" arg:resultId=\"{= ?resultId }\"/>
                        </ui:forEach>
                    </td>
                </tr>
            </table>
        </ui:if>
        <ui:elseif ui:condition=\"{= EXISTS {
            ?result dash:fixed true .
        } }\">
            <div>(Suggestion applied)</div>
        </ui:elseif>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Validation result view" ;
  rdfs:subClassOf swa:Elements ;
.
swa:ValidationResultsDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canOK ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to allow an OK button. Otherwise, the only button will be \"Close\", returning to where the user was." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultSubject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The default subject - if set then the row \"Subject: ...\" will be suppressed if identical to the defaultSubject." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editFormId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the edit form (for re-submitting the changes)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
      rdfs:comment "The loadId" ;
    ] ;
  ui:prototype """
<div id=\"div-{= ?loadId }\" title=\"Validation Results\">
    <script>swa.validationSessionGraph = \"{= ui:currentQueryGraph() }\";swa.validationSuggestions=[];</script>
    <ui:call arg:dataGraph=\"{= ?dataGraph }\" ui:template=\"{= tosh.ui:ValidationResults }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <swa:ValidationResultView arg:canApply=\"{= ?canOK }\" arg:dataGraph=\"{= ?dataGraph }\" arg:defaultSubject=\"{= ?defaultSubject }\" arg:result=\"{= ?result }\"/>
        </ui:forEach>
        <ui:if ui:condition=\"{= NOT EXISTS {
            ?anyResult dash:suggestion ?anySuggestion .
        } }\">
            <!-- Immediately delete session graph if no suggestions were found (less memory build-up) -->
            <ui:group let:dummy=\"{= ui:deleteSessionGraph(ui:currentQueryGraph()) }\"/>
        </ui:if>
    </ui:call>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Validation results dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
tosh:ResultsGenerator
  a rdfs:Class ;
  rdfs:comment "The class of results generators (for \"Problems and Suggestions\"), bringing together sh:SPARQLTarget and ui:NodeClass. From sh:SPARQLTarget this inherits the ability to specify a SELECT (or an optional ASK) query that is used to determine the target nodes. From ui:NodeClass this inherits the ui:prototype property, which defines the body of what should happen if the generator is run (for a single focus node)." ;
  rdfs:label "Results generator" ;
  rdfs:subClassOf ui:NodeClass ;
  rdfs:subClassOf sh:SPARQLTarget ;
.
tosh:ResultsGenerators
  a tosh:ResultsGenerator ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      rdfs:comment "An optional focus node to operate on." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:report ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The report resource in the results graph. Newly created results must be added as triples ?report sh:result ?result." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI of the graph where the results shall be added to." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of elements that can insert (SHACL) results into a given results graph, for \"Problems and Suggestions\". They must have a ui:prototype that can be executed with ?focusNode bound to the current focus node. They also serve as SHACL SPARQL-based targets where the focus nodes are selected using the results of sh:select and sh:ask." ;
  rdfs:label "Results generators" ;
  rdfs:subClassOf ui:Operations ;
.
<http://topbraid.org/tosh.ui>
  a owl:Ontology ;
  owl:imports <http://topbraid.org/swa> ;
.
tosh.ui:ApplySuggestionsService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:json ;
      spl:valueType xsd:string ;
      rdfs:comment "The JSON string that can be parsed into an array of suggestion objects with the triples to add/delete, in the form previously produced by the server. The individual nodes will be parsed using the namespace prefixes of the current query graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:json ui:str=\"{= ?json }\">
    <ui:group letrs:suggestions=\"{#
            SELECT ?suggestion
            WHERE {
                ?json ui:jsonArrayMembers ?suggestion .
            } }\">
        <ui:transaction ui:logMessage=\"{= IF((spr:rowCount(?suggestions) &gt; 1), CONCAT(&quot;Apply &quot;, str(spr:rowCount(?suggestions)), &quot; suggestions&quot;), COALESCE(ui:jsonString(ui:jsonValue(spr:cell(?suggestions, 0, 0), &quot;label&quot;)), &quot;Apply suggestion&quot;)) }\">
            <ui:forEach ui:resultSet=\"{= ?suggestions }\">
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?subject ?predicate ?object .
                        }
                        WHERE {
                            BIND (ui:jsonValue(?suggestion, &quot;triples&quot;) AS ?array) .
                            ?array ui:jsonArrayMembers ?triple .
                            FILTER (&quot;delete&quot; = ui:jsonString(ui:jsonValue(?triple, &quot;action&quot;))) .
                            BIND (tosh.ui:json2Node(?triple, &quot;subject&quot;) AS ?subject) .
                            BIND (tosh.ui:json2Node(?triple, &quot;predicate&quot;) AS ?predicate) .
                            BIND (tosh.ui:json2Node(?triple, &quot;object&quot;) AS ?object) .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?subject ?predicate ?object .
                        }
                        WHERE {
                            BIND (ui:jsonValue(?suggestion, &quot;triples&quot;) AS ?array) .
                            ?array ui:jsonArrayMembers ?triple .
                            FILTER (&quot;add&quot; = ui:jsonString(ui:jsonValue(?triple, &quot;action&quot;))) .
                            BIND (tosh.ui:json2Node(?triple, &quot;subject&quot;) AS ?subject) .
                            BIND (tosh.ui:json2Node(?triple, &quot;predicate&quot;) AS ?predicate) .
                            BIND (tosh.ui:json2Node(?triple, &quot;object&quot;) AS ?object) .
                        } }\"/>
            </ui:forEach>
        </ui:transaction>
    </ui:group>
</ui:json>
"""^^ui:Literal ;
  rdfs:comment """Takes an array of JSON suggestion objects and \"applies\" them, by adding or deleting the specified triples.

Example:

[
	{
		label: \"Replace label\",
		triples: [
			{
				action: \"add\",
				subject: { id: \"ex:Instance\" },
				predicate: { id: \"rdfs:label\" },
				object: { id: ... }
			},
			{
				action: \"delete\",
				...
			}
		]
	}
]""" ;
  rdfs:label "Apply suggestions service" ;
  rdfs:subClassOf ui:JSONServices ;
.
tosh.ui:DatatypeEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<span let:name=\"new-{= ?uid }\">
    <select class=\"form-control\" id=\"{= ?uid }-select\" name=\"{= ?name }\">
        <option/>
        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                SELECT DISTINCT ?instance ?label
                WHERE {
                    {
                        VALUES ?instance {
                            xsd:anyURI
                            xsd:boolean
                            xsd:date
                            xsd:dateTime
                            xsd:decimal
                            xsd:integer
                            xsd:string
                            rdf:HTML
                        } .
                    }
                    UNION
                    {
                        BIND (?object AS ?instance) .
                        FILTER bound(?object) .
                    } .
                    BIND (ui:label(?instance) AS ?label) .
                } }\">
            <option selected=\"{= IF((?object = ?instance), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(?instance, true, true) }\">{= ?label }</option>
        </ui:forEach>
    </select>
    <script>$(\"#{= ?uid }-select\").change(swa.reloadDatatypeEditors)</script>
</span>
"""^^ui:Literal ;
  rdfs:comment "Produces a simple HTML drop down (select) of all frequently used rdfs:Datatypes. Also updates any tosh.ui:UseDeclaredDatatypeEditors on the same form whenever the selection changes." ;
  rdfs:label "Datatype editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
tosh.ui:DefaultValueViewer
  a swa:ObjectViewerClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isBlank(?object) }\">
        <tosh.ui:ValuesExpressionDiagramViewer ui:args=\"*\"/>
    </ui:if>
    <ui:elseif ui:condition=\"{= isLiteral(?object) }\">
        <swa:LiteralViewer ui:args=\"*\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= isIRI(?object) }\">
        <swa:URIResourceViewer ui:args=\"*\"/>
    </ui:elseif>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Either displays the value using a default widget (if it's a literal or URI), or uses the node value expression diagram viewer for bnodes." ;
  rdfs:label "Default value viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
tosh.ui:FlagsEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<div class=\"checkbox\">
    <input checked=\"{= IF((?object = &quot;i&quot;), &quot;checked&quot;, ?none) }\" name=\"new-{= ?uid }\" type=\"checkbox\" value=\"&quot;i&quot;\"/>
    <span class=\"swa-checkbox-span\">&nbsp;Ignore case</span>
</div>
"""^^ui:Literal ;
  rdfs:label "Flags editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
tosh.ui:GraphUpdateView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApply ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include the Apply button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canApplyGroups ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also display a button to apply all \"similar\" violations." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphUpdate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The update to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:result ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The validation result." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultId ;
      spl:valueType xsd:string ;
      rdfs:comment "The ID of the form element displaying the result - this will be deleted from the form once Apply is clicked." ;
    ] ;
  ui:prototype """
<div class=\"swa-validation-result-suggestion\" let:id=\"{= ui:uniqueId() }\" letrs:addedTriples=\"{#
        SELECT ?triple
        WHERE {
            ?graphUpdate dash:addedTriple ?triple .
        } }\" letrs:deletedTriples=\"{#
        SELECT ?triple
        WHERE {
            ?graphUpdate dash:deletedTriple ?triple .
        } }\">
    <div>
        <div class=\"swa-openable-object-icon ui-icon ui-icon-triangle-1-e tosh-ui-graph-update-view-openable\" id=\"{= ?id }\" onclick=\"swa.toggleOpenableObject('{= ?id }-body', '{= ?id }')\"/>
        <a href=\"javascript:void(0)\" onclick=\"swa.toggleOpenableObject('{= ?id }-body', '{= ?id }')\">{= COALESCE(spl:object(?graphUpdate, sh:message), \"(No summary provided)\") }</a>
        <span>&nbsp;&nbsp;&nbsp;</span>
        <ui:if ui:condition=\"{= ?canApply }\">
            <b>
                <a href=\"javascript:void(0)\" onclick=\"swa.applySuggestion('{= ui:encodeNode(?graphUpdate, true, true) }', '{= ?resultId }')\">Apply</a>
                <ui:if ui:condition=\"{= ?canApplyGroups }\">
                    <ui:group let:others=\"{#
                            SELECT (COUNT(?other) AS ?others)
                            WHERE {
                                ?graphUpdate dash:suggestionGroup ?group .
                                ?other dash:suggestionGroup ?group .
                                FILTER (?other != ?graphUpdate) .
                            } }\">
                        <ui:if ui:condition=\"{= ?others &gt; 0 }\">
                            <swa:Spaces/>
                            <a href=\"javascript:void(0)\" onclick=\"swa.applySuggestionGroup('{= ui:encodeNode(spl:object(?graphUpdate, dash:suggestionGroup), true, true) }', '{= ?resultId }')\">Apply this and {= ?others } similar suggestions</a>
                        </ui:if>
                    </ui:group>
                </ui:if>
            </b>
        </ui:if>
        <div class=\"swa-clear-both\"/>
    </div>
    <div class=\"ui-helper-hidden-accessible\" id=\"{= ?id }-body\">
        <tosh.ui:GraphUpdateViewTriples arg:delete=\"{= true }\" arg:triples=\"{= ?deletedTriples }\" ui:args=\"*\"/>
        <tosh.ui:GraphUpdateViewTriples arg:delete=\"{= false }\" arg:triples=\"{= ?addedTriples }\" ui:args=\"*\"/>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf swa:Elements ;
.
tosh.ui:GraphUpdateViewTriples
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:delete ;
      spl:valueType xsd:boolean ;
      rdfs:comment "true to delete, false to add" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:result ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The validation result." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:triples ;
      spl:valueType spr:Table ;
      rdfs:comment "The result set binding ?triple." ;
    ] ;
  ui:prototype """
<div class=\"swa-validation-result-suggestion-triples\">
    <ui:forEach ui:resultSet=\"{= ?triples }\">
        <div class=\"swa-validation-result-suggestion-triple\" let:object=\"{= spl:object(?triple, rdf:object) }\" let:predicate=\"{= spl:object(?triple, rdf:predicate) }\" let:severity=\"{= COALESCE(spl:object(?result, sh:severity), sh:Violation) }\" let:subject=\"{= spl:object(?triple, rdf:subject) }\">
            <div class=\"swa-validation-result-icon swa-validation-result-icon-{= IF(?delete, &quot;delete&quot;, &quot;add&quot;) } swa-float-left\"/>
            <ui:if ui:condition=\"{= (spl:object(?result, sh:subject) = ?subject) &amp;&amp; (spl:object(?result, sh:predicate) = ?predicate) }\">
                <tosh.ui:Node arg:dataGraph=\"{= ?dataGraph }\" arg:node=\"{= ?object }\"/>
            </ui:if>
            <ui:else>
                <span>Triple: </span>
                <tosh.ui:Node arg:compact=\"{= true }\" arg:dataGraph=\"{= ?dataGraph }\" arg:node=\"{= ?subject }\"/>
                <span>, </span>
                <tosh.ui:Node arg:compact=\"{= true }\" arg:dataGraph=\"{= ?dataGraph }\" arg:node=\"{= ?predicate }\"/>
                <span>, </span>
                <tosh.ui:Node arg:compact=\"{= true }\" arg:dataGraph=\"{= ?dataGraph }\" arg:node=\"{= ?object }\"/>
            </ui:else>
            <div class=\"swa-clear-both\"/>
        </div>
    </ui:forEach>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf swa:Elements ;
.
tosh.ui:Node
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:compact ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have the details as tool tip text only." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:linkable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to (perhaps) turn the node display into a hyperlink. If true, then the system will look for a context variable toshLinkFunction and call it with the given ?node as its only argument." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to display." ;
    ] ;
  ui:prototype """
<ui:group let:info=\"{= IF(isLiteral(?node), CONCAT(&quot;Datatype: &quot;, afn:localname(datatype(?node))), IF(isIRI(?node), CONCAT(&quot;URI: &quot;, str(?node)), &quot;Blank node&quot;)) }\">
    <ui:if ui:condition=\"{= ?linkable }\">
        <ui:setContext let:function=\"{= ui:contextValue(&quot;toshLinkFunction&quot;) }\" ui:queryGraph=\"{= ?dataGraph }\">
            <ui:group let:link=\"{= IF(bound(?function), spif:invoke(?function, ?node), ?none) }\">
                <ui:if ui:condition=\"{= bound(?link) }\">
                    <a href=\"{= ?link }\" title=\"{= ?info }\">{= ui:label(?node) }</a>
                </ui:if>
                <ui:else>
                    <span title=\"{= ?info }\">{= ui:label(?node) }</span>
                </ui:else>
            </ui:group>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <span title=\"{= ?info }\">{= swa:labelInGraph(?node, ?dataGraph) }</span>
    </ui:else>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?compact) }\">
        <swa:Space/>
        <swa:Space/>
        <swa:Space/>
        <span class=\"swa-validation-result-value-info\">({= ?info })</span>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:Elements ;
.
tosh.ui:NodeKindEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<div id=\"{= ?uid }-div\" let:list=\"{= EXISTS {
    ?subject sh:node dash:ListShape .
} }\" let:memberShape=\"{= swa:listMemberShape(?subject) }\">
    <div class=\"checkbox\">
        <input checked=\"{= IF(dash:isNodeKindLiteral(?object), &quot;checked&quot;, ?none) }\" id=\"Literal-{= ?uid }\" type=\"checkbox\"/>
        <span class=\"swa-checkbox-span\">Datatype Literals&nbsp;&nbsp;&nbsp;</span>
    </div>
    <div class=\"checkbox\">
        <input checked=\"{= IF(dash:isNodeKindIRI(?object), &quot;checked&quot;, ?none) }\" id=\"IRI-{= ?uid }\" type=\"checkbox\"/>
        <span class=\"swa-checkbox-span\">URIs&nbsp;&nbsp;&nbsp;</span>
    </div>
    <div class=\"checkbox\">
        <input checked=\"{= IF(dash:isNodeKindBlankNode(?object), &quot;checked&quot;, ?none) }\" id=\"BlankNode-{= ?uid }\" type=\"checkbox\"/>
        <span class=\"swa-checkbox-span\">Blank Nodes</span>
    </div>
    <input name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ui:encodeNode(?object) }\"/>
    <br/>
    <div class=\"checkbox\">
        <input checked=\"{= IF(?list, &quot;checked&quot;, ?none) }\" id=\"List-{= ?uid }\" type=\"checkbox\"/>
        <span class=\"swa-checkbox-span\" title=\"If checked, you can edit the constraints on list members by navigating to the property shape and clicking 'Edit constraints on List members' in the context menu under the form\">Values are ordered lists</span>
    </div>
    <swa:ObjectEditorHiddenFields arg:newObject=\"{= dash:ListShape }\" arg:object=\"{= IF(?list, dash:ListShape, ?none) }\" arg:predicate=\"{= sh:node }\" arg:subject=\"{= ?subject }\" arg:uid=\"{= ?uid }-list\"/>
    <ui:if ui:condition=\"{= bound(?memberShape) }\">
        <swa:ObjectEditorHiddenFields arg:newObject=\"{= ?memberShape }\" arg:object=\"{= ?memberShape }\" arg:predicate=\"{= sh:property }\" arg:subject=\"{= ?subject }\" arg:uid=\"{= ?uid }-listMemberShape\"/>
    </ui:if>
    <script>{= ui:functionCall(\"swa.initNodeKindEditor\", ?uid, ?list) }</script>
</div>
"""^^ui:Literal ;
  rdfs:comment "An editing component showing three checkboxes for Literal, IRI or Blank Nodes. Produce a single sh:NodeKind." ;
  rdfs:label "Node kind editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
tosh.ui:PathEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isBlank(?object) }\">
        <swa:BNodeViewerEditor ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <swa:URIResourceEditor arg:suppressMenu=\"{= true }\" ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The editor for sh:path in property shapes. Currently only supports URIs nodes - if the value is a blank node then a read-only field is presented." ;
  rdfs:label "Path editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
tosh.ui:PathViewer
  a swa:ObjectViewerClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isBlank(?object) }\">
        <swa:LiteralViewer ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <swa:URIResourceViewer ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Path viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
tosh.ui:RefreshDetailsOfAllNodesService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:clear ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group letrs:rs=\"{#
        SELECT ?focusNode ?endpoint ?nodeShape
        WHERE {
            ?ps dash:detailsEndpoint ?endpoint .
            ?ps sh:node ?nodeShape .
            ?ns sh:property ?ps .
            ?ps sh:path ?path .
            ?ns (sh:targetClass)* ?type .
            ?parentNode rdf:type/(rdfs:subClassOf)* ?type .
            ?parentNode ?path ?focusNode .
            FILTER (!spif:isReadOnlyTriple(?parentNode, ?path, ?focusNode)) .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <ui:task ui:taskName=\"Refreshing details of {= spr:rowCount(?rs) } values\" ui:totalWork=\"{= spr:rowCount(?rs) }\">
            <ui:transaction ui:logMessage=\"Refreshing {= spr:rowCount(?rs) } values\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?rs }\">
                    <ui:subTask ui:subTaskName=\"Item #{= ?index } {= ui:label(?focusNode) } from {= ?endpoint }\" ui:work=\"{= 1 }\">
                        <tosh.ui:refreshDetails ui:args=\"*\"/>
                    </ui:subTask>
                </ui:forEach>
            </ui:transaction>
        </ui:task>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Refresh details of all nodes service" ;
  rdfs:subClassOf ui:JSONServices ;
.
tosh.ui:RefreshDetailsOfValueNodesService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parentNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The node that has the focus nodes (that will be refreshed) as values." ;
    ] ;
  ui:mutationFieldName "refreshDetailsOfValueNodes" ;
  ui:prototype """
<ui:group letrs:rs=\"{#
        SELECT ?focusNode ?endpoint ?nodeShape
        WHERE {
            ?parentNode rdf:type/(rdfs:subClassOf)* ?type .
            ?ns (sh:targetClass)* ?type .
            ?ns sh:property ?ps .
            ?ps dash:detailsEndpoint ?endpoint .
            ?ps sh:node ?nodeShape .
            ?ps sh:path ?path .
            ?parentNode ?path ?focusNode .
            FILTER (!spif:isReadOnlyTriple(?parentNode, ?path, ?focusNode)) .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <ui:task ui:taskName=\"Refreshing {= spr:rowCount(?rs) } values of {= ui:label(?parentNode) }\" ui:totalWork=\"{= spr:rowCount(?rs) }\">
            <ui:transaction ui:logMessage=\"Refreshing values of {= ui:label(?parentNode) }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <ui:subTask ui:subTaskName=\"Fetching {= ui:label(?focusNode) } from {= ?endpoint }\" ui:work=\"{= 1 }\"/>
                    <tosh.ui:refreshDetails ui:args=\"*\"/>
                </ui:forEach>
            </ui:transaction>
        </ui:task>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Refresh details of value nodes service" ;
  rdfs:subClassOf ui:JSONServices ;
.
tosh.ui:UseDeclaredDatatypeEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<ui:loadable class=\"swa-reload-on-datatype-change\" ui:loadId=\"loadable-{= ?uid }\">
    <ui:if ui:condition=\"{= isBlank(?object) }\">
        <swa:SourceCodeEditor ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <ui:group let:range=\"{= swa:localRange(spl:object(?subject, sh:path), ?subject) }\">
            <ui:group let:datatype=\"{= IF(bound(?object), datatype(?object), COALESCE(?datatype, spl:object(?subject, sh:datatype), IF((?range = rdfs:Resource), xsd:string, ?range))) }\">
                <ui:group let:editorClass=\"{= swa:bestObjectWidgetClass(?object, ?predicate, ?datatype, swa:resourceType(?subject), swa:ObjectEditorClass) }\">
                    <ui:if ui:condition=\"{= bound(?editorClass) }\">
                        <ui:dynamicView arg:datatype=\"{= ?datatype }\" arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" arg:uid=\"{= ?uid }\" ui:class=\"{= ?editorClass }\"/>
                    </ui:if>
                    <ui:else>
                        <span class=\"tosh-ui-use-declared-datatype-editor-grey\">(Requires datatype selection)</span>
                    </ui:else>
                </ui:group>
            </ui:group>
        </ui:group>
    </ui:else>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:comment "A meta-editor for literals that uses the same datatype as declared via sh:datatype on the same property. The widget is set up to be reloadable whenever the sh:datatype on the form gets changed." ;
  rdfs:label "Use declared datatype editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
tosh.ui:ValidationResultViewValue
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:linkable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See tosh.ui:Node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label on the left." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      rdfs:comment "The value node to display." ;
    ] ;
  ui:prototype """
<table class=\"swa-validation-result-table\">
    <tr>
        <td class=\"swa-validation-result-table-label\">{= ?label }:</td>
        <td class=\"swa-validation-result-table-icon\">
            <div class=\"swa-icon swa-inline-icon {= swa:nodeIconInGraph(?value, ?dataGraph) }\"/>
        </td>
        <td class=\"swa-validation-result-table-body\">
            <tosh.ui:Node arg:compact=\"{= true }\" arg:dataGraph=\"{= ?dataGraph }\" arg:linkable=\"{= ?linkable }\" arg:node=\"{= ?value }\"/>
        </td>
    </tr>
</table>
"""^^ui:Literal ;
  rdfs:label "Validation result view value" ;
  rdfs:subClassOf swa:Elements ;
.
tosh.ui:ValidationResults
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "focusNodeLabel" ;
          ]
          [
            sp:varName "predicateLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "type" ;
                ] ;
              sp:predicate rdf:type ;
              sp:subject [
                  sp:varName "result" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:or ;
                  sp:arg1 [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "type" ;
                        ] ;
                      sp:arg2 sh:ValidationResult ;
                    ] ;
                  sp:arg2 [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "type" ;
                        ] ;
                      sp:arg2 dash:FailureResult ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "result" ;
                  ] ;
                sp:arg2 sh:focusNode ;
              ] ;
            sp:variable [
                sp:varName "focusNode" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "focusNode" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "focusNode" ;
                      ] ;
                    arg:resourceGraph [
                        sp:varName "dataGraph" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "focusNodeLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "result" ;
                  ] ;
                sp:arg2 sh:path ;
              ] ;
            sp:variable [
                sp:varName "predicate" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:isIRI ;
                    sp:arg1 [
                        sp:varName "predicate" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "predicate" ;
                      ] ;
                    arg:resourceGraph [
                        sp:varName "dataGraph" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "predicateLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The data graph." ;
    ] ;
  spin:private true ;
  rdfs:label "Validation results" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
tosh.ui:ValuesExpressionDiagramViewer
  a swa:ObjectViewerClass ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\" let:json=\"{= tosh:valuesJSON(?object, spl:subject(sh:property, ?subject), spl:object(?subject, sh:path)) }\">
    <a href=\"javascript:void(0)\" id=\"{= ?id }\" onclick=\"swa.load('load-{= ?id }')\"/>
    <script>sned.createDiagram({= ?json }, '{= ?id }')</script>
    <ui:loadable ui:loadId=\"load-{= ?id }\" ui:loadOnDemand=\"{= true }\">
        <swa:SourceCodeViewer ui:args=\"*\"/>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays a sh:values node expression as a SNED diagram." ;
  rdfs:label "Values expression diagram viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
tosh.ui:getReportJSON
  a ui:Operation ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelsGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph that shall be used to fetch the labels. Defaults to the current query graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
      rdfs:comment "An optional maximum number of results to return. If present then the result object will have a field \"totalCount\" to indicate the full number that would have been returned." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:report ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The report resource." ;
    ] ;
  rdfs:comment "Takes a SHACL report resource (with sh:result triples) and produces a custom JSON that is particularly suitable for JS clients." ;
  rdfs:label "get report JSON" ;
  rdfs:subClassOf ui:Operations ;
.
tosh.ui:json2Node
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:jsonValue ;
                arg:jsonObject [
                    sp:varName "jsonObject" ;
                  ] ;
                arg:key [
                    sp:varName "key" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "jsonNode" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:jsonValue ;
                arg:jsonObject [
                    sp:varName "jsonNode" ;
                  ] ;
                arg:key "id" ;
              ] ;
            sp:variable [
                sp:varName "idNode" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:jsonString ;
                arg:jsonValue [
                    sp:varName "idNode" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "id" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jsonObject ;
      rdfs:comment "The JSON object." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:key ;
      spl:valueType xsd:string ;
      rdfs:comment "The key to get from the object." ;
    ] ;
  spin:private true ;
  rdfs:label "json2Node" ;
  rdfs:subClassOf spin:Functions ;
.
tosh.ui:parsePath
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:string ;
      spl:valueType xsd:string ;
      rdfs:comment "The path expression." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The target graph to add the new triples into. Must be one of the ui:tempGraphs." ;
    ] ;
  rdfs:comment "Parses a string representing a SPARQL path expression into corresponding SHACL RDF triples and adds those triples into a given (temp) graph. The child elements can access the root node of the created structure using the variable ?pathRoot. Assumes that the string is valid. Use swa:checkPathSyntax beforehand." ;
  rdfs:label "parse path" ;
  rdfs:subClassOf ui:Operations ;
.
tosh.ui:refreshDetails
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:clear ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to only remove old values, without downloading." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:endpoint ;
      spl:valueType xsd:string ;
      rdfs:comment "The URL of the SPARQL endpoint to use." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      rdfs:comment "The focus node to get the values for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:nodeShape ;
      spl:valueType sh:NodeShape ;
      rdfs:comment "The node shape defining the property shapes to iterate over." ;
    ] ;
  rdfs:comment "Refreshes triples related to a given focus node based on a SPARQL endpoint and a node shape declaration. Fetches the triples based on the properties mentioned in the node shape and then removes those triples that are no longer there, while adding the extra ones. Does nothing if none of the values have changed." ;
  rdfs:label "refresh details" ;
  rdfs:subClassOf ui:ControlElement ;
.
