# baseURI: http://spinrdf.org/spl-dynamic-ranges
# imports: http://spinrdf.org/spin
# prefix: spl-dynamic-ranges

@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://spinrdf.org/arg#firstProperty>
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://spinrdf.org/arg#secondProperty>
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
spl:DynamicEnumRangeConstraint
  a spin:ConstructTemplate ;
  spin:body [
      a sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b36523 ;
          ]
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b36523 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b36523 ;
          ]
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b36523 ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "object" ;
                ] ;
              sp:predicate [
                  sp:varName "predicate" ;
                ] ;
              sp:subject spin:_this ;
            ]
            [
              sp:object [
                  sp:varName "query" ;
                ] ;
              sp:predicate spl:dynamicEnumRange ;
              sp:subject [
                  sp:varName "predicate" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:notExists ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "query" ;
                          ] ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?1" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object "this" ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?2" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?2" ;
                          ] ;
                      ]
                      [
                        sp:object () ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?2" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "object" ;
                          ] ;
                        sp:predicate spin:select ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "Invalid value " ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "object" ;
                      ] ;
                  ] ;
                sp:arg3 " does not match (dynamic) range of " ;
                sp:arg4 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "predicate" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:labelTemplate "Dynamic enum range constraint" ;
  rdfs:comment "Implements a spin:constraint based on declared dynamic enum ranges. For all properties of the given subject (?this) that have declared a spl:dynamicEnumRange, it will execute that query (SELECT) and check if the given property value of ?this is among the values returned by the SELECT. Constructs a constraint violation otherwise." ;
  rdfs:label "Dynamic enum range constraint" ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
spl:ThisObjectsObjects
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "firstProperty" ;
              ] ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "result" ;
              ] ;
            sp:predicate [
                sp:varName "secondProperty" ;
              ] ;
            sp:subject [
                sp:varName "object" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#firstProperty> ;
      spl:valueType rdf:Property ;
      rdfs:comment "The first property to walk, from ?this." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#secondProperty> ;
      spl:valueType rdf:Property ;
      rdfs:comment "The second property to walk starting with the values of ?thisProperty." ;
    ] ;
  spin:labelTemplate "This objects' objects via {?firstProperty} and {?secondProperty}" ;
  rdfs:comment """Gets all objects that are two steps away from ?this via the property ?firstProperty and then ?secondProperty.

This template can be used in conjunction with spl:dynamicEnumRange.""" ;
  rdfs:label "This objects' objects" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
spl:ThisObjectsSubjects
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "firstProperty" ;
              ] ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "secondProperty" ;
              ] ;
            sp:subject [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#firstProperty> ;
      spl:valueType rdf:Property ;
      rdfs:comment "The first property to walk, from ?this." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate <http://spinrdf.org/arg#secondProperty> ;
      spl:valueType rdf:Property ;
      rdfs:comment "The second property to walk starting with the values of ?thisProperty." ;
    ] ;
  spin:labelTemplate "This objects' objects via {?firstProperty} and {?secondProperty}" ;
  rdfs:comment """Gets all subjects that are two steps away from ?this via the property ?firstProperty and then ?secondProperty.

This template can be used in conjunction with spl:dynamicEnumRange.""" ;
  rdfs:label "This objects' subjects" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
spl:dynamicEnumRange
  a rdf:Property ;
  rdfs:comment "Can be used to link a property with a SELECT query that returns the valid values of the property within the given instance (?this). For example, the values of schema:addressRegion may be \"ACT\", \"NSW\", \"QLD\" and the other abbreviations of Australian States or Territories if the schema:addressCountry of the surrounding address has been changed to Australia." ;
  rdfs:domain rdf:Property ;
  rdfs:label "dynamic enum range" ;
  rdfs:range sp:Select ;
  rdfs:subPropertyOf spin:query ;
.
spl:dynamicEnumRangeTrigger
  a rdf:Property ;
  rdfs:comment """Points to any number of property that impact the computation of dynamicEnumRanges. For example, if the range of ex:addressRegion changes whenever ex:addressCountry changes, then ex:addressCountry should be the value of swa:dynamicEnumRangeTrigger.

Currently the values of this property can only be rdf:Properties. However, future versions may support different kinds of triggers.""" ;
  rdfs:domain rdf:Property ;
  rdfs:label "dynamic enum range trigger" ;
  rdfs:range rdf:Property ;
.
<http://spinrdf.org/spl-dynamic-ranges>
  a owl:Ontology ;
  rdfs:comment "APIs for getting all subjects or all objects that are two steps away from the resource provided as ?this argument via the property ?firstProperty and then ?secondProperty." ;
  rdfs:label "SPIN Dynamic Ranges Library" ;
  owl:imports <http://spinrdf.org/spin> ;
.
owl:Thing
  spin:constraint [
      a spl:DynamicEnumRangeConstraint ;
    ] ;
.
