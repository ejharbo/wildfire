# baseURI: http://topbraid.org/examples/schemashacl
# imports: http://datashapes.org/dash
# imports: http://datashapes.org/schema
# imports: http://datashapes.org/sparql
# prefix: schemashacl

@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix schemashacl: <http://topbraid.org/examples/schemashacl#> .
@prefix schemax: <http://topbraid.org/schemax/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sparql: <http://datashapes.org/sparql#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

schema:DatedMoneySpecification
  a sh:NodeShape ;
  sh:closed true ;
  sh:ignoredProperties (
      rdf:type
    ) ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:amount ;
      sh:datatype xsd:float ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:currency ;
      rdfs:comment "The currency code (here) is a mandatory property consisting of three upper-case letters" ;
      sh:datatype xsd:string ;
      sh:flags "i" ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:pattern "^[A-Z]{3}$" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:endDate ;
      sh:maxCount 1 ;
      sh:or dash:DateOrDateTime ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:startDate ;
      rdfs:comment "Start date must be before end date" ;
      sh:lessThanOrEquals schema:endDate ;
      sh:maxCount 1 ;
      sh:or dash:DateOrDateTime ;
    ] ;
.
schema:GeoCoordinates
  a sh:NodeShape ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:latitude ;
      sh:maxCount 1 ;
      sh:maxInclusive 90 ;
      sh:minInclusive -90 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:longitude ;
      sh:maxCount 1 ;
      sh:maxInclusive 180 ;
      sh:minInclusive -180 ;
    ] ;
.
schema:Hotel
  a sh:NodeShape ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:starRating ;
      rdfs:comment "Produce a warning if there is not at least one starRating that actually has a ratingValue." ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape [
          a sh:NodeShape ;
          sh:property [
              a sh:PropertyShape ;
              sh:path schema:ratingValue ;
              sh:minCount 1 ;
            ] ;
        ] ;
      sh:severity sh:Warning ;
    ] ;
  sh:sparql [
      sh:message "Hotel has been rated by {?author} more than once" ;
      sh:prefixes <http://topbraid.org/examples/schemashacl> ;
      sh:select """SELECT DISTINCT $this ?author
WHERE {
    $this schema:starRating ?rating1 .
	?rating1 schema:author ?author .
	$this schema:starRating ?rating2 .
	?rating2 schema:author ?author .
	FILTER (?rating1 != ?rating2) .
}""" ;
      sh:severity sh:Warning ;
    ] ;
.
schema:ItemList
  a sh:NodeShape ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:numberOfItems ;
      rdfs:comment "The number of items in this list is derived by counting the values of schema:itemListElement." ;
      sh:derivedValues [
          a sh:SPARQLValuesDeriver ;
          sh:select """SELECT (COUNT(?element) AS ?value)
WHERE {
    $this schema:itemListElement ?element .
}""" ;
        ] ;
    ] ;
.
schema:Person
  a sh:NodeShape ;
  sh:property schema:Person-age ;
  sh:property schema:Person-children ;
  sh:property schema:Person-fullName ;
  sh:property schema:Person-oldestHeir ;
  sh:property schema:Person-sibling ;
  sh:property schema:Person-son ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:birthDate ;
      rdfs:comment "Birth date must be before death date (in this example)" ;
      sh:lessThan schema:deathDate ;
      sh:maxCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:deathDate ;
      sh:maxCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:gender ;
      sh:datatype xsd:string ;
      sh:in (
          "female"
          "male"
        ) ;
      sh:maxCount 1 ;
      sh:name "gender" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:parent ;
      sh:disjoint schema:sibling ;
      sh:maxCount 2 ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:parent ;
      sh:qualifiedMaxCount 1 ;
      sh:qualifiedValueShape schemashacl:FemalePerson ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:parent ;
      sh:qualifiedMaxCount 1 ;
      sh:qualifiedValueShape schemashacl:MalePerson ;
    ] ;
  sh:rule [
      a sh:SPARQLRule ;
      rdfs:comment "An example SPARQL rule that copies the values of spouse, children and parent into the schema:knows property." ;
      sh:construct """CONSTRUCT {
    $this schema:knows ?other .
}
WHERE {
    $this schema:spouse|schema:children|schema:parent ?other .
}""" ;
      sh:prefixes <http://topbraid.org/examples/schemashacl> ;
    ] ;
  sh:rule [
      a sh:TripleRule ;
      rdfs:comment "An example triple rule that copies the values of spouse, children and parent into the schema:knows property." ;
      sh:object [
          sh:union (
              [
                sh:path schema:spouse ;
              ]
              [
                sh:path schema:children ;
              ]
              [
                sh:path schema:parent ;
              ]
            ) ;
        ] ;
      sh:predicate schema:knows ;
      sh:subject sh:this ;
    ] ;
.
schema:Person-age
  a sh:PropertyShape ;
  sh:path schema:age ;
  rdfs:comment """Alternative definition using SPARQL:
[
      sh:prefixes <http://topbraid.org/examples/schemashacl> ;
      sh:select \"\"\"SELECT ?age
WHERE {
	$this schema:birthDate ?birthDate .
	FILTER NOT EXISTS { $this schema:deathDate ?any }
	BIND (365 * 24 * 60 * 60 * 1000 AS ?msPerYear) .
	BIND (spif:timeMillis(NOW()) - spif:timeMillis(?birthDate) AS ?ms)
	BIND (xsd:integer(floor(?ms / ?msPerYear)) AS ?age)
}\"\"\" ;
    ]""" ;
  sh:datatype xsd:integer ;
  sh:description "A person's age derived from the current date and the given birth date. No value if the person is already deceased." ;
  sh:maxCount 1 ;
  sh:name "age" ;
  sh:values [
      xsd:integer (
          [
            sparql:floor (
                [
                  sparql:divide (
                      [
                        sparql:subtract (
                            [
                              spif:timeMillis (
                                  [
                                    sparql:now () ;
                                  ]
                                ) ;
                            ]
                            [
                              spif:timeMillis (
                                  [
                                    sh:path schema:birthDate ;
                                    sh:nodes [
                                        sh:filterShape [
                                            sh:property [
                                                a sh:PropertyShape ;
                                                sh:path schema:deathDate ;
                                                sh:maxCount 0 ;
                                              ] ;
                                          ] ;
                                        sh:nodes sh:this ;
                                      ] ;
                                  ]
                                ) ;
                            ]
                          ) ;
                      ]
                      [
                        sparql:multiply (
                            365
                            [
                              sparql:multiply (
                                  24
                                  [
                                    sparql:multiply (
                                        60
                                        [
                                          sparql:multiply (
                                              60
                                              1000
                                            ) ;
                                        ]
                                      ) ;
                                  ]
                                ) ;
                            ]
                          ) ;
                      ]
                    ) ;
                ]
              ) ;
          ]
        ) ;
    ] ;
.
schema:Person-children
  a sh:PropertyShape ;
  sh:path schema:children ;
  rdfs:comment "Children are inferred from the values of the schema:parent relationship, walked in the inverse direction." ;
  sh:class schema:Person ;
  sh:name "child" ;
  sh:nodeKind sh:IRI ;
  sh:values [
      sh:path [
          sh:inversePath schema:parent ;
        ] ;
    ] ;
.
schema:Person-fullName
  a sh:PropertyShape ;
  sh:path schema:fullName ;
  sh:datatype xsd:string ;
  sh:description "A person's full name, consisting of given name and family name, separated by a space." ;
  sh:maxCount 1 ;
  sh:name "full name" ;
  sh:values [
      sparql:concat (
          [
            sh:path schema:givenName ;
          ]
          " "
          [
            sh:path schema:familyName ;
          ]
        ) ;
    ] ;
.
schema:Person-oldestHeir
  a sh:PropertyShape ;
  sh:path schema:oldestHeir ;
  sh:class schema:Person ;
  sh:description "The oldest child that still lives." ;
  sh:maxCount 1 ;
  sh:name "oldest heir" ;
  sh:values [
      sh:limit 1 ;
      sh:nodes [
          sh:desc true ;
          sh:nodes [
              sh:filterShape [
                  sh:property [
                      a sh:PropertyShape ;
                      sh:path schema:birthDate ;
                      sh:minCount 1 ;
                    ] ;
                  sh:property [
                      a sh:PropertyShape ;
                      sh:path schema:deathDate ;
                      sh:maxCount 0 ;
                    ] ;
                ] ;
              sh:nodes [
                  sh:path schema:children ;
                ] ;
            ] ;
          sh:orderBy [
              sh:path schema:birthDate ;
            ] ;
        ] ;
    ] ;
.
schema:Person-sibling
  a sh:PropertyShape ;
  sh:path schema:sibling ;
  rdfs:comment "The siblings are inferred to be the children of the parents, minus the focus node itself." ;
  sh:class schema:Person ;
  sh:name "sibling" ;
  sh:values [
      sh:minus sh:this ;
      sh:nodes [
          sh:path (
              schema:parent
              [
                sh:inversePath schema:parent ;
              ]
            ) ;
        ] ;
    ] ;
.
schema:Person-son
  a sh:PropertyShape ;
  sh:path schema:son ;
  sh:class schema:Person ;
  sh:description "The son(s) of a person. These values are inferred as the children that have male gender." ;
  sh:name "son" ;
  sh:values [
      sh:filterShape [
          sh:property [
              a sh:PropertyShape ;
              sh:path schema:gender ;
              sh:hasValue "male" ;
            ] ;
        ] ;
      sh:nodes [
          sh:path schema:children ;
        ] ;
    ] ;
.
schema:PriceSpecification
  a sh:NodeShape ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:baseSalary ;
      rdfs:comment "There must be a base salary of more than 0, but less than 1 billion (slightly artificial example of sh:maxExclusive)." ;
      sh:maxExclusive "1000000000"^^xsd:float ;
      sh:minExclusive "0"^^xsd:float ;
    ] ;
.
schema:Vehicle
  a sh:NodeShape ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:fuelConsumption ;
      sh:node [
          a sh:NodeShape ;
          rdfs:comment "The fuel consumption must be either stated in Liter per 100 km accompanied by a km/h speed, or in gallons per 100 miles accompanied by a miles/h speed." ;
          sh:or (
              [
                sh:and (
                    [
                      sh:property [
                          a sh:PropertyShape ;
                          sh:path schema:unitText ;
                          sh:hasValue "L/100 km" ;
                        ] ;
                    ]
                    [
                      sh:property [
                          a sh:PropertyShape ;
                          sh:path rdfs:comment ;
                          sh:pattern "^at [0-9]* km/h$" ;
                        ] ;
                    ]
                  ) ;
              ]
              [
                sh:and (
                    [
                      sh:property [
                          a sh:PropertyShape ;
                          sh:path schema:unitText ;
                          sh:hasValue "gal/100 mi" ;
                        ] ;
                    ]
                    [
                      sh:property [
                          a sh:PropertyShape ;
                          sh:path rdfs:comment ;
                          sh:pattern "^at [0-9]* mi/h$" ;
                        ] ;
                    ]
                  ) ;
              ]
            ) ;
        ] ;
    ] ;
.
<http://topbraid.org/examples/schemashacl>
  a owl:Ontology ;
  rdfs:comment "This SHACL file contains a small selection of hand-crafted shapes on classes and properties from the schema.org namespace. In addition to illustrating possible use cases of SHACL and helping with test cases, the goal of this file is cover all of the features of SHACL for demos and tests." ;
  rdfs:label "Schema.org SHACL example shapes" ;
  owl:imports <http://datashapes.org/dash> ;
  owl:imports <http://datashapes.org/schema> ;
  owl:imports <http://datashapes.org/sparql> ;
  sh:declare [
      a sh:PrefixDeclaration ;
      sh:namespace "http://schema.org/"^^xsd:anyURI ;
      sh:prefix "schema" ;
    ] ;
.
schemashacl:AustralianAddressShape
  a sh:NodeShape ;
  rdfs:comment "This shape constrains those instances of schema:PostalAddress that have \"au\" as their country." ;
  rdfs:label "Australian address shape" ;
  sh:or (
      sh:not
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:addressCountry ;
            sh:hasValue "au" ;
          ] ;
      ]
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:addressRegion ;
            sh:in (
                "ACT"
                "NSW"
                "NT"
                "QLD"
                "SA"
                "TAS"
                "VIC"
                "WA"
              ) ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
          ] ;
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:postalCode ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:maxLength 4 ;
            sh:minCount 1 ;
            sh:minLength 4 ;
            sh:name "postal code" ;
            sh:pattern "^\\d{4}$" ;
          ] ;
      ]
    ) ;
  sh:targetClass schema:PostalAddress ;
.
schemashacl:FemalePerson
  a sh:NodeShape ;
  rdfs:label "Female person" ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:gender ;
      sh:hasValue "female" ;
    ] ;
.
schemashacl:MalePerson
  a sh:NodeShape ;
  rdfs:label "Male person" ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:gender ;
      sh:hasValue "male" ;
    ] ;
.
schemashacl:USAddressShape
  a sh:NodeShape ;
  rdfs:comment "This shape constrains those instances of schema:PostalAddress that have \"us\" as their country." ;
  rdfs:label "US address shape" ;
  sh:or (
      sh:not
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:addressCountry ;
            sh:hasValue "us" ;
          ] ;
      ]
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:addressRegion ;
            sh:in (
                "AK"
                "AL"
                "AR"
                "AZ"
                "CA"
                "CO"
                "CT"
                "DC"
                "DE"
                "FL"
                "GA"
                "GU"
                "HI"
                "IA"
                "ID"
                "IL"
                "IN"
                "KS"
                "KY"
                "LA"
                "MA"
                "MD"
                "ME"
                "MH"
                "MI"
                "MN"
                "MO"
                "MS"
                "MT"
                "NC"
                "ND"
                "NE"
                "NH"
                "NJ"
                "NM"
                "NV"
                "NY"
                "OH"
                "OK"
                "OR"
                "PA"
                "PR"
                "PW"
                "RI"
                "SC"
                "SD"
                "TN"
                "TX"
                "UT"
                "VA"
                "VI"
                "VT"
                "WA"
                "WI"
                "WV"
                "WY"
              ) ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
          ] ;
        sh:property [
            a sh:PropertyShape ;
            sh:path schema:postalCode ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:name "zip code" ;
            sh:pattern "^\\d{5}(?:[-\\s]\\d{4})?$" ;
          ] ;
      ]
    ) ;
  sh:targetClass schema:PostalAddress ;
.
schemashacl:nameShape
  a sh:NodeShape ;
  rdfs:comment "This shape applies to all subject that have at least one value for schema:name." ;
  rdfs:label "name shape" ;
  sh:property [
      a sh:PropertyShape ;
      sh:path schema:name ;
      rdfs:comment "Ensures that the values of schema:name are either strings or strings with a language tag, but no language tag can be used more than once." ;
      sh:name "name" ;
      sh:or dash:StringOrLangString ;
      sh:uniqueLang true ;
    ] ;
  sh:targetSubjectsOf schema:name ;
.
