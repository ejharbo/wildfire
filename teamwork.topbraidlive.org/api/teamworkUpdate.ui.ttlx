# baseURI: http://teamworkAPI.topbraid.com/teamworkUpdate
# imports: http://rdfs.org/sioc/ns
# imports: http://teamworkAPI.topbraid.com/teamworkTemplates
# imports: http://topbraid.org/teamwork
# imports: http://topbraid.org/teamwork.ui
# imports: http://uispin.org/html
# imports: http://uispin.org/swon
# prefix: teamworkupdate

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://teamworkAPI.topbraid.com/teamworkUpdate>
  rdf:type owl:Ontology ;
  rdfs:label "Teamwork Update Services" ;
  owl:imports <http://rdfs.org/sioc/ns> ;
  owl:imports <http://teamworkAPI.topbraid.com/teamworkTemplates> ;
  owl:imports <http://topbraid.org/teamwork> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://uispin.org/html> ;
  owl:imports <http://uispin.org/swon> ;
.
teamworkupdate:InsertArchiveFileImports
  rdf:type spin:UpdateTemplate ;
  spin:body [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "master" ;
                    ] ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object <http://topbraid.org/teamwork> ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object <http://server.topbraidlive.org/dynamic/users> ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraph ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    sp:varName "changeArchiveURI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:changeArchiveURI ;
      spl:valueType xsd:string ;
      rdfs:comment "The archive URI in string form" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:master ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "Inserts owl:imports to include teamworks schema and master project." ;
  rdfs:label "Insert archive file imports" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamworkupdate:InsertMasterChangesIntoTempGraph
  rdf:type spin:UpdateTemplate ;
  spin:body [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "o" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p" ;
                    ] ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "o1" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p1" ;
                    ] ;
                  sp:subject [
                      sp:varName "changeTriple" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraph ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:Change ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "createDate" ;
                    ] ;
                  sp:predicate dcterms:created ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:lt ;
                      sp:arg1 [
                          sp:varName "createDate" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "archiveDate" ;
                        ] ;
                    ] ;
                ]
                [
                  rdf:type sp:TriplePath ;
                  sp:object [
                      sp:varName "changeTriple" ;
                    ] ;
                  sp:path [
                      rdf:type sp:AltPath ;
                      sp:path1 teamwork:added ;
                      sp:path2 teamwork:deleted ;
                    ] ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "tag" ;
                              ] ;
                            sp:predicate teamwork:tag ;
                            sp:subject [
                                sp:varName "change" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  sp:object teamwork:Committed ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "o" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p" ;
                    ] ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "o1" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p1" ;
                    ] ;
                  sp:subject [
                      sp:varName "changeTriple" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:archiveDate ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The date for archiving change data." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The .tch file holding changes." ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:label "Insert direct master changes into temp graph" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamworkupdate:RemoveArchivedChanges
  rdf:type spin:UpdateTemplate ;
  spin:body [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "o" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p" ;
                    ] ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "o" ;
                    ] ;
                  sp:predicate [
                      sp:varName "p" ;
                    ] ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:tempGraph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The .tch file holding changes." ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "Removes all triples in the ui:tempGraph from the specified team graph." ;
  rdfs:label "Remove archived changes" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamworkupdate:SetVarsForArchiveChanges
  rdf:type spin:SelectTemplate ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "changeArchivePathname" ;
          ]
          [
            sp:varName "changeArchiveURI" ;
          ]
          [
            sp:varName "teamGraph" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "master" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    rdf:type sp:coalesce ;
                    sp:arg1 [
                        rdf:type smf:configParam ;
                        arg:param "teamworkArchiveProject" ;
                      ] ;
                    sp:arg2 "Archive" ;
                  ] ;
                sp:arg2 "/" ;
                sp:arg3 [
                    rdf:type teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "master" ;
                      ] ;
                  ] ;
                sp:arg4 "/" ;
                sp:arg5 [
                    rdf:type sp:replace ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "archiveDate" ;
                          ] ;
                      ] ;
                    sp:arg2 ":|\\." ;
                    sp:arg3 "-" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "changeArchiveName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "/" ;
                sp:arg2 [
                    sp:varName "changeArchiveName" ;
                  ] ;
                sp:arg3 ".archive.ttl" ;
              ] ;
            sp:variable [
                sp:varName "changeArchivePathname" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "http://" ;
                sp:arg2 [
                    sp:varName "changeArchiveName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "changeArchiveURI" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:archiveDate ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The date for archiving change data." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:master ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:private "true"^^xsd:boolean ;
  rdfs:comment "Sets variables that are used for archiving changes to an RDF text serialization." ;
  rdfs:label "Set vars for archive changes" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:AddChangeToTag
  spin:private "true"^^xsd:boolean ;
.
teamwork:ArchiveChangesToFile
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:date ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "An optional date changes will be archived from.  Must be in xsd:dateTime format. To use a xsd:date format to 2014-05-18, enter a xsd:dateTime value of 2014-05-18T00:00:00.000Z." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "An (optional) working copy that the change must be in. By default, it will iterate over all changes." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:master ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  teamwork:exampleAPICall "http://localhost:8083/tbl/swp?_viewClass=teamwork:ArchiveChangesToFile&master=urn:x-evn-master:schemaexample" ;
  teamwork:exampleAPICall "http://localhost:8083/tbl/swp?_viewClass=teamwork:ArchiveChangesToFile&master=urn:x-evn-master:schemaexample&date=2014-05-10T15:13:49.141Z" ;
  teamwork:exampleAPICall "http://localhost:8083/tbl/swp?_viewClass=teamwork:ArchiveChangesToFile&master=urn:x-evn-master:schemaexample&date=2014-05-10T15:13:49.141Z&archiveProject=EVNChangeArchive" ;
  ui:errorPrototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?master) }\" let:teamGraph=\"{= teamwork:teamGraph(?master) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(?teamGraph, teamwork:viewer, ?teamGraph)) }\">
            <swon:Object>
                <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:ArchiveChangesToFile\"/>
                <swon:Value arg:name=\"msg\" arg:value=\"You must have access to {= ui:label(?master) } to archive changes.\"/>
            </swon:Object>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:archiveDate=\"{= COALESCE(?date, now()) }\">
    <ui:call arg:archiveDate=\"{= ?archiveDate }\" arg:master=\"{= ?master }\" ui:template=\"{= teamworkupdate:SetVarsForArchiveChanges }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?change
                    WHERE {
                        GRAPH ?teamGraph {
                            {
                                ?change a teamwork:Change .
                                ?change dcterms:created ?createDate .
                                FILTER (?createDate &lt; ?archiveDate) .
                            } .
                            ?change teamwork:tag ?tag .
                            {
                                ?tag teamwork:status teamwork:Committed .
                            }
                            UNION
                            {
                                ?tag teamwork:status teamwork:Rejected .
                            } .
                        } .
                    } }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            GRAPH ui:tempGraph {
                                ?change ?p ?o .
                            } .
                        }
                        WHERE {
                            GRAPH ?teamGraph {
                                ?change ?p ?o .
                            } .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            GRAPH ui:tempGraph {
                                ?triple ?p ?o .
                            } .
                        }
                        WHERE {
                            GRAPH ?teamGraph {
                                ?change teamwork:added|teamwork:deleted ?triple .
                                ?triple ?p ?o .
                            } .
                        } }\"/>
            </ui:forEach>
            <ui:if ui:condition=\"{= !bound(?tag) }\">
                <ui:call arg:archiveDate=\"{= ?archiveDate }\" arg:teamGraph=\"{= ?teamGraph }\" ui:template=\"{= teamworkupdate:InsertMasterChangesIntoTempGraph }\"/>
            </ui:if>
            <ui:if ui:condition=\"{#
                    ASK 
                    WHERE {
                        GRAPH ui:tempGraph {
                            FILTER EXISTS {
                                ?s ?p ?o .
                            } .
                        } .
                    } }\">
                <ui:call arg:changeArchiveURI=\"{= ?changeArchiveURI }\" arg:master=\"{= ?master }\" ui:template=\"{= teamworkupdate:InsertArchiveFileImports }\"/>
                <ui:setContext ui:queryGraph=\"{= ui:tempGraph }\">
                    <teamwork:archiveWorkingCopy arg:baseURI=\"{= IRI(?changeArchiveURI) }\" arg:path=\"{= ?changeArchivePathname }\"/>
                </ui:setContext>
                <ui:if ui:condition=\"{= bound(?tag) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                GRAPH ?teamGraph {
                                    ?tag teamwork:archiveDate ?archiveDate .
                                    ?tag teamwork:archiver ?user .
                                } .
                            }
                            WHERE {
                                BIND (smf:userWithName(smf:currentUserName()) AS ?user) .
                            } }\"/>
                </ui:if>
                <ui:call arg:teamGraph=\"{= ?teamGraph }\" ui:template=\"{= teamworkupdate:RemoveArchivedChanges }\"/>
                <swon:Object>
                    <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:ArchiveChangesToFile\"/>
                    <swon:Value arg:name=\"msg\" arg:value=\"Changes to {= ?master } saved in {= ?changeArchivePathname }\"/>
                    <swon:Value arg:name=\"master\" arg:value=\"{= ?master }\"/>
                    <swon:Value arg:name=\"archiveDate\" arg:value=\"{= ?archiveDate }\"/>
                    <swon:Value arg:name=\"archivePathName\" arg:value=\"{= ?changeArchivePathname }\"/>
                    <swon:Value arg:name=\"archiveURI\" arg:value=\"{= ?changeArchiveURI }\"/>
                </swon:Object>
            </ui:if>
            <ui:else>
                <swon:Object>
                    <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:ArchiveChangesToFile\"/>
                    <swon:Value arg:name=\"msg\" arg:value=\"No committed or rejected changes found in {= ?master }\"/>
                </swon:Object>
            </ui:else>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Archives all Committed and Rejected changed from an optional date and/or an optional working copy to a file in the workspace and removes changes from the .tch file.  If no date and no working copy is specified, all changes will be moved. The file will be written into folder \"Archive\" in the EDG projects folder (which defaults to Repositories/Archive)." ;
  rdfs:label "Archive changes to file" ;
  rdfs:subClassOf ui:Element ;
.
teamwork:CreateWorkingCopy
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "false"^^xsd:boolean ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the working copy." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate rdfs:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional comment for the working copy." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:master ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph that the working copy will be defined for." ;
    ] ;
  teamwork:exampleAPICall "http://localhost:8083/tbl/swp?_viewClass=teamwork:CreateWorkingCopy&master=urn:x-evn-master:schemaexample&name=My working copy&comment=A test working copy" ;
  ui:errorPrototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?master) }\" let:teamGraph=\"{= teamwork:teamGraph(?master) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(?teamGraph, teamwork:viewer, ?teamGraph)) }\">
            <swon:Object>
                <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:CreateWorkingCopy\"/>
                <swon:Value arg:name=\"msg\" arg:value=\"You must have access to {= ui:label(?master) } to create a Working copy for it.\"/>
            </swon:Object>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?master) }\">
    <ui:if ui:condition=\"{#
            ASK 
            WHERE {
                ?tag rdfs:label ?name .
                ?tag a teamwork:Tag .
            } }\">
        <swon:Object>
            <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:CreateWorkingCopy\"/>
            <swon:Value arg:name=\"msg\" arg:value=\"A working copy with the label '{= ?name }' already exists.\"/>
        </swon:Object>
    </ui:if>
    <ui:else>
        <ui:transaction>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?tag a teamwork:Tag .
                        ?tag rdfs:label ?name .
                        ?tag rdfs:comment ?comment .
                        ?tag sioc:has_creator ?user .
                        ?tag teamwork:manager ?user .
                        ?tag teamwork:status teamwork:Uncommitted .
                        ?tag dcterms:created ?timeStamp .
                    }
                    WHERE {
                        BIND (now() AS ?timeStamp) .
                        BIND (smf:userWithName(smf:currentUserName()) AS ?user) .
                        BIND (IRI(CONCAT(&quot;urn:x-tags:&quot;, ui:encodeURL(?name))) AS ?tag) .
                    } }\"/>
        </ui:transaction>
        <swon:Object>
            <swon:Value arg:name=\"APIcall\" arg:value=\"teamwork:CreateWorkingCopy\"/>
            <swon:Value arg:name=\"msg\" arg:value=\"A working copy named '{= ?name }' has been created.\"/>
        </swon:Object>
    </ui:else>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Creates a working copy for the specified master graph." ;
  rdfs:label "Create working copy" ;
  rdfs:subClassOf ui:Element ;
.
teamwork:archiveWorkingCopy
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:baseURI ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:path ;
      spl:valueType xsd:string ;
      rdfs:comment "Path to archive file" ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  rdfs:label "archive working copy" ;
  rdfs:subClassOf ui:ControlElement ;
.
