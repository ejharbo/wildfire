# baseURI: http://topbraid.org/teamwork.spin
# imports: http://spinrdf.org/spl
# imports: http://topbraid.org/compliance
# imports: http://topbraid.org/imported
# imports: http://topbraid.org/metadata
# imports: http://topbraid.org/solr
# imports: http://topbraid.org/teamwork
# imports: http://uispin.org/ui

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:appName
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:baseGraph
  a rdf:Property ;
  rdfs:label "base graph" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:changeType
  a rdf:Property ;
  rdfs:label "Type of the Change- Added or Deleted" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:class
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:comment
  a rdf:Property ;
  rdfs:label "comment" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:creator
  a rdf:Property ;
  rdfs:label "creator" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graphId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:keyword
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:label
  a rdf:Property ;
  rdfs:label "label" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:link
  a rdf:Property ;
.
arg:matchStatus
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:matchTag
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:maxCreated
  a rdf:Property ;
  rdfs:label "max created" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:minCreated
  a rdf:Property ;
  rdfs:label "min created" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:node
  a rdf:Property ;
  rdfs:label "node" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:object
  a rdf:Property ;
  rdfs:label "object" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:party
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:predicate
  a rdf:Property ;
  rdfs:label "predicate" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectGraph
  a rdf:Property ;
  rdfs:label "project graph" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:property
  a rdf:Property ;
  rdfs:label "property" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resource
  a rdf:Property ;
  rdfs:label "resource" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:roleName
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:status
  a rdf:Property ;
  rdfs:label "status" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subject
  a rdf:Property ;
  rdfs:label "subject" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subjectArea
  a rdf:Property ;
  rdfs:label "subject area" ;
.
arg:system
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tag
  a rdf:Property ;
  rdfs:label "tag" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tagId
  a rdf:Property ;
  rdfs:label "tag id" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tagIgnoreEditedResource
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:teamGraph
  a rdf:Property ;
  rdfs:label "team graph" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:toResource
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:transition
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:userName
  a rdf:Property ;
  rdfs:label "user name" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:vote
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:workflow
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:workingCopy
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
smf:isRole
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 "urn:x-tb-role:" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given URI is a permission role, starting with \"urn:x-tb-role:\"." ;
  rdfs:label "is role" ;
  rdfs:subClassOf spin:Functions ;
.
smf:roleName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:substr ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 15 ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the group name from." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Turns a URI-encoded role resource into its name, i.e. everything after \"urn:x-tb-role:\". This is the opposite of teamwork:roleURI, and must only be called when teamwork:isRole has returned true." ;
  rdfs:label "role name" ;
  rdfs:subClassOf spin:Functions ;
.
smf:roleURI
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-tb-role:" ;
                    sp:arg2 [
                        sp:varName "roleName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:roleName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the role to convert." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the URI resource representing a role with a given name." ;
  rdfs:label "role URI" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:AddChangeToTag
  a spin:UpdateTemplate ;
  spin:body [
      a sp:Modify ;
      sp:insertPattern (
          [
            sp:object teamwork:Change ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate teamwork:tag ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object teamwork:Uncommitted ;
            sp:predicate teamwork:status ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "now" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "user" ;
              ] ;
            sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "comment" ;
              ] ;
            sp:predicate rdfs:comment ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object _:b43798 ;
            sp:predicate [
                sp:varName "changeType" ;
              ] ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate teamwork:subject ;
            sp:subject _:b43798 ;
          ]
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate teamwork:predicate ;
            sp:subject _:b43798 ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate teamwork:object ;
            sp:subject _:b43798 ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:now ;
              ] ;
            sp:variable [
                sp:varName "now" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "urn:x-change:" ;
                sp:arg2 [
                    a smf:replaceAll ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "now" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "-" ;
                  ] ;
                sp:arg3 [
                    sp:varName "userName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "changeURI" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:resource ;
                sp:arg1 [
                    sp:varName "changeURI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "change" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:userWithName ;
                sp:arg1 [
                    sp:varName "userName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue teamwork:added ;
      spl:optional true ;
      spl:predicate arg:changeType ;
      spl:valueType owl:ObjectProperty ;
      rdfs:comment "The type of change. Can be added or deleted" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "Comment for the change" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to add to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      rdfs:comment "The object of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the user making the change." ;
    ] ;
  rdfs:comment "Adds a change to a tag by directly writing into the teamworks graph. This can be used for both adds as well as deleted to the tag. The variable change type indicates whether it is an add or a delete" ;
  rdfs:label "Add triple to tag" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamwork:AddTripleToTag
  a spin:UpdateTemplate ;
  a owl:DeprecatedClass ;
  spin:body [
      a sp:Modify ;
      sp:insertPattern (
          [
            sp:object teamwork:Change ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate teamwork:tag ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object teamwork:Uncommitted ;
            sp:predicate teamwork:status ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "now" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "user" ;
              ] ;
            sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object _:b71203 ;
            sp:predicate teamwork:added ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate teamwork:subject ;
            sp:subject _:b71203 ;
          ]
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate teamwork:predicate ;
            sp:subject _:b71203 ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate teamwork:object ;
            sp:subject _:b71203 ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:now ;
              ] ;
            sp:variable [
                sp:varName "now" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "urn:x-change:" ;
                sp:arg2 [
                    a smf:replaceAll ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "now" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "-" ;
                  ] ;
                sp:arg3 [
                    sp:varName "userName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "changeURI" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:resource ;
                sp:arg1 [
                    sp:varName "changeURI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "change" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:userWithName ;
                sp:arg1 [
                    sp:varName "userName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to add to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      rdfs:comment "The object of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject of the triple to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the user making the change." ;
    ] ;
  rdfs:comment "Adds a triple to a tag by directly writing into the teamworks graph. This method is deprecated. Use AddChangeToTag instead." ;
  rdfs:label "Add triple to tag" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamwork:AllJobTitles
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "tooltip" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object edg:JobTitle ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate edg:jobTitle ;
                  sp:subject [
                      sp:varName "org" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:concat ;
                      sp:arg1 "Organization: " ;
                      sp:arg2 [
                          a ui:label ;
                          sp:arg1 [
                              sp:varName "org" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "tooltip" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "All job titles defined in the current graph, in a format suitable for swa:OptGroup." ;
  rdfs:label "all job titles" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:CommentsOnResource
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "date" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "comment" ;
          ]
          [
            sp:varName "userName" ;
          ]
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "external" ;
          ]
          [
            sp:varName "status" ;
          ]
          [
            sp:varName "post" ;
          ]
          [
            sp:varName "emailAddress" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTeamGraph ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate <http://rdfs.org/sioc/ns#about> ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object <http://rdfs.org/sioc/ns#Post> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "comment" ;
                    ] ;
                  sp:predicate rdfs:comment ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "date" ;
                    ] ;
                  sp:predicate <http://purl.org/dc/terms/created> ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "post" ;
                            ] ;
                          sp:arg2 teamwork:postStatus ;
                        ] ;
                      sp:arg2 teamwork:PostStatusOpen ;
                    ] ;
                  sp:variable [
                      sp:varName "status" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "post" ;
                        ] ;
                      sp:arg2 <http://rdfs.org/sioc/ns#has_creator> ;
                    ] ;
                  sp:variable [
                      sp:varName "user" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "post" ;
                        ] ;
                      sp:arg2 teamwork:commentTag ;
                    ] ;
                  sp:variable [
                      sp:varName "postTag" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:hasValue ;
                      sp:arg1 [
                          sp:varName "post" ;
                        ] ;
                      sp:arg2 teamwork:external ;
                      sp:arg3 true ;
                    ] ;
                  sp:variable [
                      sp:varName "external" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "post" ;
                        ] ;
                      sp:arg2 teamwork:emailAddress ;
                    ] ;
                  sp:variable [
                      sp:varName "emailAddress" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "matchTag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "postTag" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "matchTag" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "postTag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "matchTag" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "postTag" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a teamwork:userName ;
                        sp:arg1 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg3 [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "emailAddress" ;
                          ] ;
                        sp:arg2 "Anonymous" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        sp:varName "external" ;
                      ] ;
                    sp:arg2 " (via TopBraid Explorer)" ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "userName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:matchTag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy to match." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the comments about." ;
    ] ;
  rdfs:comment "Gets all comments for a given resource, as stored in the teamwork graph of the current query graph. Assumes that the current query graph is a teamwork project." ;
  rdfs:label "Comments on resource" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:CreateTag
  a spin:UpdateTemplate ;
  spin:body [
      a sp:Modify ;
      sp:insertPattern (
          [
            sp:object teamwork:Tag ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "comment" ;
              ] ;
            sp:predicate rdfs:comment ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "user" ;
              ] ;
            sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "user" ;
              ] ;
            sp:predicate teamwork:manager ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object teamwork:Uncommitted ;
            sp:predicate teamwork:status ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "timeStamp" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:now ;
              ] ;
            sp:variable [
                sp:varName "timeStamp" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:userWithName ;
                sp:arg1 [
                    sp:varName "userName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:buildURI ;
                sp:arg1 "<urn:x-tags:{?label}>" ;
              ] ;
            sp:variable [
                sp:varName "tag" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The description of the tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the user who will become manager of this tag." ;
    ] ;
  rdfs:comment "Creates a new tag with a given name and comment." ;
  rdfs:label "Create tag" ;
  rdfs:subClassOf spin:UpdateTemplates ;
.
teamwork:DatatypeRanges
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "range" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Values ;
            sp:bindings (
                (
                  xsd:anyURI
                )
                (
                  xsd:boolean
                )
                (
                  xsd:date
                )
                (
                  xsd:dateTime
                )
                (
                  xsd:float
                )
                (
                  xsd:integer
                )
                (
                  rdf:HTML
                )
                (
                  xsd:string
                )
                (
                  xsd:time
                )
              ) ;
            sp:varNames (
                "range"
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all datatypes that are recommended to be used as rdfs:range in Teamwork/EVN projects." ;
  rdfs:label "Datatype ranges" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FindAffectedTags
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "tag" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "tag" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:subject ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:predicate ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:object ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "triple" ;
                      ] ;
                    sp:predicate teamwork:added ;
                    sp:subject [
                        sp:varName "change" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "triple" ;
                      ] ;
                    sp:predicate teamwork:deleted ;
                    sp:subject [
                        sp:varName "change" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate teamwork:tag ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "status" ;
              ] ;
            sp:predicate teamwork:status ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notIn ;
                sp:arg1 [
                    sp:varName "status" ;
                  ] ;
                sp:arg2 teamwork:Committed ;
                sp:arg3 teamwork:Rejected ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to find changes about." ;
    ] ;
  spin:private true ;
  rdfs:comment "Finds all uncommitted (and not rejected) tags that contain a change involving a given RDF node (?node)." ;
  rdfs:label "Find affected tags" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FindAffectedTagsDetails
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "timeStamp" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "subject" ;
          ]
          [
            sp:varName "predicate" ;
          ]
          [
            sp:varName "object" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:subject ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:predicate ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate teamwork:object ;
                    sp:subject [
                        sp:varName "triple" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "triple" ;
              ] ;
            sp:predicate [
                sp:varName "property" ;
              ] ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate teamwork:tag ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "timeStamp" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subject" ;
              ] ;
            sp:predicate teamwork:subject ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate teamwork:predicate ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate teamwork:object ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to display changes about." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "Either teamwork:added or teamwork:deleted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to operate on." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets details about the changes mentioning a given node (?node) in a given tag (?tag), either added or deleted triples (?property)." ;
  rdfs:label "Find affected tags details" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FindChanges
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "change" ;
          ]
          [
            sp:varName "created" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "creatorLabel" ;
          ]
          [
            sp:varName "status" ;
          ]
          [
            sp:varName "statusLabel" ;
          ]
          [
            sp:varName "tag" ;
          ]
          [
            sp:varName "tagLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "creator" ;
              ] ;
            sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "status" ;
              ] ;
            sp:predicate teamwork:status ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "created" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "maxCreated" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:le ;
                    sp:arg1 [
                        sp:varName "created" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "maxCreated" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "minCreated" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:ge ;
                    sp:arg1 [
                        sp:varName "created" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "minCreated" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "tag" ;
                            ] ;
                          sp:predicate teamwork:tag ;
                          sp:subject [
                              sp:varName "change" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "tag" ;
                    ] ;
                  sp:predicate teamwork:tag ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "creator" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "creatorLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "status" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "statusLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tagLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:creator ;
      spl:valueType <http://rdfs.org/sioc/ns#UserAccount> ;
      rdfs:comment "The creator (of a change) to match against." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:maxCreated ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The maximum creation time." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:minCreated ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The minimum creation date." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:node ;
      rdfs:comment "The node that must be mentioned by the change." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:status ;
      spl:valueType teamwork:ChangeStatus ;
      rdfs:comment "The status to match against." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to match against." ;
    ] ;
  spin:private true ;
  rdfs:comment "A template can drive a search form to find changes by certain filter conditions." ;
  rdfs:label "Find changes" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FindUncommittedChangesByAnyone
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "created" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "change" ;
          ]
          [
            sp:varName "created" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "comment" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:Uncommitted ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "creator" ;
                    ] ;
                  sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "created" ;
                    ] ;
                  sp:predicate <http://purl.org/dc/terms/created> ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "comment" ;
                          ] ;
                        sp:predicate rdfs:comment ;
                        sp:subject [
                            sp:varName "change" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode <urn:x-tb:team> ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Lists all uncommitted changes by anyone. Can be used from TBC, as this requires a current session." ;
  rdfs:label "Find uncommitted changes by anyone" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:GraphQLSchemas
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "schemaLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "schema" ;
          ]
          [
            sp:varName "schemaName" ;
          ]
          [
            sp:varName "schemaLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object graphql:Schema ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "type" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "schema" ;
                      ] ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "schemaName" ;
                      ] ;
                    sp:predicate graphql:name ;
                    sp:subject [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "schema" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "schemaLabel" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://datashapes.org/generic#Schema> ;
                    sp:variable [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "Generic" ;
                    sp:variable [
                        sp:varName "schemaLabel" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "generic" ;
                    sp:variable [
                        sp:varName "schemaName" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://datashapes.org/metash#Schema> ;
                    sp:variable [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "Metashapes" ;
                    sp:variable [
                        sp:varName "schemaLabel" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "metashapes" ;
                    sp:variable [
                        sp:varName "schemaName" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://topbraid.org/skos.shapes#Schema> ;
                    sp:variable [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "SKOS Taxonomy" ;
                    sp:variable [
                        sp:varName "schemaLabel" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "skosshapes" ;
                    sp:variable [
                        sp:varName "schemaName" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression teamwork:GraphQLSchema ;
                    sp:variable [
                        sp:varName "schema" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "Teamwork Graph" ;
                    sp:variable [
                        sp:varName "schemaLabel" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "teamwork" ;
                    sp:variable [
                        sp:varName "schemaName" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  rdfs:comment "Gets all graphql:Schemas that are available for the current query graph, based on the owl:imports statements." ;
  rdfs:label "GraphQL schemas" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:IsProjectInUse
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object <http://topbraid.org/metadata#InUseStatus> ;
            sp:predicate <http://topbraid.org/metadata#status> ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Determines whether current project's metadata status is currently set to 'in use'" ;
  rdfs:label "is project in use" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:OrphanComments
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "post" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object <http://rdfs.org/sioc/ns#Post> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate <http://rdfs.org/sioc/ns#about> ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object <http://topbraid.org/tasks#Task> ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "anyTag" ;
                              ] ;
                            sp:predicate teamwork:commentTag ;
                            sp:subject [
                                sp:varName "post" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "anyO" ;
                        ] ;
                      sp:predicate [
                          sp:varName "anyP" ;
                        ] ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph to query." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all orphan comments stored in the teamwork graph of the current query graph. An orphan comment is one that is about a resource that does not exist in the current query graph." ;
  rdfs:label "Orphan Comments" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:PotentialMainClasses
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "publicClass" ;
              ] ;
            sp:predicate graphql:publicClass ;
            sp:subject [
                sp:varName "schema" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "publicClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Potential main classes" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:RecentComments
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:limit "100"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "date" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "comment" ;
          ]
          [
            sp:varName "userName" ;
          ]
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "external" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "status" ;
          ]
          [
            sp:varName "post" ;
          ]
          [
            sp:varName "emailAddress" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object <http://rdfs.org/sioc/ns#Post> ;
              sp:predicate rdf:type ;
              sp:subject [
                  sp:varName "post" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "comment" ;
                ] ;
              sp:predicate rdfs:comment ;
              sp:subject [
                  sp:varName "post" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "date" ;
                ] ;
              sp:predicate <http://purl.org/dc/terms/created> ;
              sp:subject [
                  sp:varName "post" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a sp:coalesce ;
                  sp:arg1 [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "post" ;
                        ] ;
                      sp:arg2 teamwork:postStatus ;
                    ] ;
                  sp:arg2 teamwork:PostStatusOpen ;
                ] ;
              sp:variable [
                  sp:varName "status" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:object ;
                  sp:arg1 [
                      sp:varName "post" ;
                    ] ;
                  sp:arg2 <http://rdfs.org/sioc/ns#about> ;
                ] ;
              sp:variable [
                  sp:varName "resource" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:object ;
                  sp:arg1 [
                      sp:varName "post" ;
                    ] ;
                  sp:arg2 <http://rdfs.org/sioc/ns#has_creator> ;
                ] ;
              sp:variable [
                  sp:varName "user" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:object ;
                  sp:arg1 [
                      sp:varName "post" ;
                    ] ;
                  sp:arg2 teamwork:commentTag ;
                ] ;
              sp:variable [
                  sp:varName "postTag" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:object ;
                  sp:arg1 [
                      sp:varName "post" ;
                    ] ;
                  sp:arg2 teamwork:emailAddress ;
                ] ;
              sp:variable [
                  sp:varName "emailAddress" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:hasValue ;
                  sp:arg1 [
                      sp:varName "post" ;
                    ] ;
                  sp:arg2 teamwork:external ;
                  sp:arg3 true ;
                ] ;
              sp:variable [
                  sp:varName "external" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:or ;
                  sp:arg1 [
                      a sp:not ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "matchStatus" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "status" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "matchStatus" ;
                        ] ;
                    ] ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:or ;
                  sp:arg1 [
                      a sp:not ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "resource" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object <http://topbraid.org/tasks#Task> ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a teamwork:userName ;
                        arg:user [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg3 [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "emailAddress" ;
                          ] ;
                        sp:arg2 "Anonymous" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        sp:varName "external" ;
                      ] ;
                    sp:arg2 " (via TopBraid Explorer)" ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "userName" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "matchTag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "postTag" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "matchTag" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "postTag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "matchTag" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "postTag" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:matchStatus ;
      spl:valueType teamwork:PostStatus ;
      rdfs:comment "The status to match against (or unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:matchTag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy to match." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all recent comments as stored in the teamwork graph of the current query graph. Assumes that the current query graph is a teamwork project." ;
  rdfs:label "Recent Comments" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:SolrServers
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "server" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "server" ;
                    ] ;
                  sp:predicate teamwork:indexingServer ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
                [
                  sp:object <http://topbraid.org/solr#Server> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team graph (TCH)." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets the solr:Server instances associated with a given team graph." ;
  rdfs:label "Solr servers" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:TagComments
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a sp:Asc ;
            sp:expression [
                sp:varName "date" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "comment" ;
          ]
          [
            sp:varName "userName" ;
          ]
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "external" ;
          ]
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "status" ;
          ]
          [
            sp:varName "post" ;
          ]
          [
            sp:varName "emailAddress" ;
          ]
          [
            sp:varName "vote" ;
          ]
          [
            sp:varName "votedToStatus" ;
          ]
        ) ;
      sp:where (
          [
            sp:object <http://rdfs.org/sioc/ns#Post> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "matchTag" ;
              ] ;
            sp:predicate teamwork:commentTag ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "comment" ;
              ] ;
            sp:predicate rdfs:comment ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "date" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "post" ;
                      ] ;
                    sp:arg2 teamwork:postStatus ;
                  ] ;
                sp:arg2 teamwork:PostStatusOpen ;
              ] ;
            sp:variable [
                sp:varName "status" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 <http://rdfs.org/sioc/ns#about> ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 <http://rdfs.org/sioc/ns#has_creator> ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 teamwork:emailAddress ;
              ] ;
            sp:variable [
                sp:varName "emailAddress" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:hasValue ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 teamwork:external ;
                sp:arg3 true ;
              ] ;
            sp:variable [
                sp:varName "external" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 teamwork:vote ;
              ] ;
            sp:variable [
                sp:varName "vote" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "post" ;
                  ] ;
                sp:arg2 teamwork:votedToStatus ;
              ] ;
            sp:variable [
                sp:varName "votedToStatus" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "matchStatus" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "status" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "matchStatus" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          sp:object <http://topbraid.org/tasks#Task> ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a teamwork:userName ;
                        arg:user [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:arg3 [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "emailAddress" ;
                          ] ;
                        sp:arg2 "Anonymous" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        sp:varName "external" ;
                      ] ;
                    sp:arg2 " (via TopBraid Explorer)" ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "userName" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:matchStatus ;
      spl:valueType teamwork:PostStatus ;
      rdfs:comment "The status to match against (or unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:matchTag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy to match." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets all comment items for a given teamwork:Tag as stored in the current (teamwork) graph." ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:activatedWorkflowParticipantProperties
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:WorkflowParticipantProperty ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "property" ;
                              ] ;
                            sp:predicate sh:path ;
                            sp:subject [
                                sp:varName "ps" ;
                              ] ;
                          ]
                          [
                            sp:object true ;
                            sp:predicate sh:deactivated ;
                            sp:subject [
                                sp:varName "ps" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "ps" ;
                              ] ;
                            sp:predicate sh:property ;
                            sp:subject edg:Stewardship ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "pg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType edg:WorkflowParticipantProperty ;
  rdfs:comment "Gets all declared workflow participant properties from the platform governance graph that are not marked as sh:deactivated." ;
  rdfs:label "activated workflow participant properties" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:authGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <urn:x-tb-authgraph> ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the base URI (as a Resource) of the graph containing the registered users and roles of this TopBraid Live server." ;
  rdfs:label "auth graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:canHaveWikidataSuggestions
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object "https://query.wikidata.org/sparql" ;
            sp:predicate <http://datashapes.org/dash#detailsEndpoint> ;
            sp:subject [
                sp:varName "any" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 rdf:type ;
                sp:path2 [
                    a sp:ModPath ;
                    sp:modMax -2 ;
                    sp:modMin 0 ;
                    sp:subPath rdfs:subClassOf ;
                  ] ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath sh:targetClass ;
              ] ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object "https://query.wikidata.org/sparql" ;
            sp:predicate <http://datashapes.org/dash#detailsEndpoint> ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "path" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "any" ;
                        ] ;
                      sp:predicate [
                          sp:varName "path" ;
                        ] ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "can have Wikidata suggestions" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:canOpenInHomeGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "graph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "any" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given resource has an rdf:type triple in any master graph that the current user can access." ;
  rdfs:label "can open in home graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:classDepth
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "superClass" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "superClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The (sub) class." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:comment "Gets the \"depth\" of a class in the class hierarchy - for now simply counting the number of superclasses." ;
  rdfs:label "class depth" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:commentsCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "comment" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:currentTag ;
                    ] ;
                  sp:variable [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate <http://rdfs.org/sioc/ns#about> ;
                  sp:subject [
                      sp:varName "comment" ;
                    ] ;
                ]
                [
                  sp:object <http://rdfs.org/sioc/ns#Post> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "comment" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "postTag" ;
                          ] ;
                        sp:predicate teamwork:commentTag ;
                        sp:subject [
                            sp:varName "comment" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:and ;
                          sp:arg1 [
                              a sp:not ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "tag" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:not ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "postTag" ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:and ;
                          sp:arg1 [
                              a sp:and ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "tag" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "postTag" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "tag" ;
                                ] ;
                              sp:arg2 [
                                  sp:varName "postTag" ;
                                ] ;
                            ] ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to count the comments for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph to query." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:label "comments count" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:couldBeWikidataLink
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "resource" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "path" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "any" ;
                        ] ;
                      sp:predicate <http://datashapes.org/dash#detailsEndpoint> ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "path" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "could be Wikidata link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:createTagId
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The human-readable name suggested by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Creates a new (yet unused) tag id for a given project graph. This function has a native implementation." ;
  rdfs:label "create tag id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentGraphHasTeamGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithoutImports ;
                sp:arg1 [
                    a ui:currentQueryGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "base" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromGraph ;
                arg:graph [
                    sp:varName "base" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "id" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the SWP engine's current query graph is under team control." ;
  rdfs:label "current graph has team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentGraphId
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromGraph ;
                arg:graph [
                    a ui:graphWithoutImports ;
                    sp:arg1 [
                        a ui:currentQueryGraph ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the project id of the current query graph." ;
  rdfs:label "current graph id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentGraphIsMasterGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "id" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the SWP engine's current query graph is a master graph and not a working copy." ;
  rdfs:label "current graph is master graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentGraphIsTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "id" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the SWP engine's current query graph is a working copy." ;
  rdfs:label "current graph is tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentMasterGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithoutImports ;
                sp:arg1 [
                    a ui:currentQueryGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "baseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromGraph ;
                arg:graph [
                    sp:varName "baseGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:masterGraph ;
                arg:graphId [
                    sp:varName "graphId" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the master graph associated with the current SWP query graph." ;
  rdfs:label "current master graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentTag
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "tag" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagIdFromTagGraph ;
                arg:graph [
                    a ui:graphWithoutImports ;
                    sp:arg1 [
                        a ui:currentQueryGraph ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagById ;
                arg:tagId [
                    sp:varName "tagId" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tag" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Gets the tag (resource) from the current query graph." ;
  rdfs:label "current tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentTagId
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagIdFromTagGraph ;
                arg:graph [
                    a ui:graphWithoutImports ;
                    sp:arg1 [
                        a ui:currentQueryGraph ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the id of the current SWP query graph - or unbound if the user is currently in a master graph." ;
  rdfs:label "current tag id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentTeamGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithoutImports ;
                sp:arg1 [
                    a ui:currentQueryGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "baseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromGraph ;
                arg:graph [
                    sp:varName "baseGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:masterGraph ;
                arg:graphId [
                    sp:varName "graphId" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "masterGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "masterGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the team graph (tch file) associated with the current SWP query graph." ;
  rdfs:label "current team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserCanCommit
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "transition" ;
              ] ;
            sp:predicate teamwork:possibleTagTransition ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:Committed ;
                  sp:predicate teamwork:toStatus ;
                  sp:subject [
                      sp:varName "transition" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isPossibleTagTransition ;
                arg:transition [
                    sp:varName "transition" ;
                  ] ;
                arg:workingCopy [
                    sp:varName "tag" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current user has permissions to commit a given working copy. This function must be called with the TCH graph as active graph." ;
  rdfs:label "current user can commit" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserCanCreateTags
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a uix:isAdmin ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            a teamwork:platformGovernanceGraph ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "pg" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:currentUserHasPrivilegeOnMasterGraph ;
                        arg:role teamwork:viewer ;
                        arg:teamGraph [
                            a teamwork:teamGraph ;
                            sp:arg1 [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a teamwork:currentUserHasPermissionOrSecurityRoleOnMasterGraph ;
                            arg:projectGraph [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:exists ;
                            sp:elements (
                                [
                                  a sp:NamedGraph ;
                                  sp:elements (
                                      [
                                        sp:object edg:WorkflowParticipantProperty ;
                                        sp:predicate rdf:type ;
                                        sp:subject [
                                            sp:varName "property" ;
                                          ] ;
                                      ]
                                      [
                                        a sp:Filter ;
                                        sp:expression [
                                            a sp:notExists ;
                                            sp:elements (
                                                [
                                                  sp:object true ;
                                                  sp:predicate teamwork:cannotCreateTags ;
                                                  sp:subject [
                                                      sp:varName "property" ;
                                                    ] ;
                                                ]
                                              ) ;
                                          ] ;
                                      ]
                                    ) ;
                                  sp:graphNameNode [
                                      sp:varName "pg" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "property" ;
                                    ] ;
                                  sp:predicate rdf:first ;
                                  sp:subject [
                                      sp:varName "?0" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "?1" ;
                                    ] ;
                                  sp:predicate rdf:rest ;
                                  sp:subject [
                                      sp:varName "?0" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "projectGraph" ;
                                    ] ;
                                  sp:predicate rdf:first ;
                                  sp:subject [
                                      sp:varName "?1" ;
                                    ] ;
                                ]
                                [
                                  sp:object () ;
                                  sp:predicate rdf:rest ;
                                  sp:subject [
                                      sp:varName "?1" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "party" ;
                                    ] ;
                                  sp:predicate teamwork:partyInGovernanceRoleAtProjectGraph ;
                                  sp:subject [
                                      sp:varName "?0" ;
                                    ] ;
                                ]
                                [
                                  a sp:Filter ;
                                  sp:expression [
                                      a teamwork:userHasParty ;
                                      arg:party [
                                          sp:varName "party" ;
                                        ] ;
                                      arg:user [
                                          a smf:userWithName ;
                                          sp:arg1 [
                                              a smf:currentUserName ;
                                            ] ;
                                        ] ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary to potentially create a working copy for." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current user has sufficient privileges to create a new working copy/workflow for a given vocabulary. This is true if the user has at least explicitly assigned viewer permissions (via teamwork:viewer etc) or one of the governance roles is not marked with teamwork:cannotCreateTags true." ;
  rdfs:label "current user can create tags" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserCanEditWorkflows
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:currentUserIsTeamworkAdmin ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current user can edit workflows. This is currently the same as being a teamwork administrator." ;
  rdfs:label "current user can edit workflows" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserCanPerformResourceStatusTransition
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  a sp:NamedGraph ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "role" ;
                          ] ;
                        sp:predicate teamwork:requiredGovernanceRole ;
                        sp:subject [
                            sp:varName "transition" ;
                          ] ;
                      ]
                    ) ;
                  sp:graphNameNode [
                      sp:varName "wg" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "role" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:currentUserHasGovernanceRole ;
                    arg:projectGraph [
                        a teamwork:masterGraphForTeamGraph ;
                        arg:teamGraph [
                            sp:varName "teamGraph" ;
                          ] ;
                      ] ;
                    arg:role [
                        sp:varName "role" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to (potentially) transition." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current TCH graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:transition ;
      spl:valueType teamwork:ResourceStatusTransition ;
      rdfs:comment "The transition to (potentially) perform." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current user can perform a given resource status transition on a given resource. The query graph is assumed to contain the resource. Currently this only supports checking for the teamwork:requiredGovernanceRole. Future versions may allow broader checks against the shape of the resource, but this may be an expensive operation." ;
  rdfs:label "current user can perform resource status transition" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserCannotEditSourceCode
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pg" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object edg:WorkflowParticipantProperty ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "property" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:exists ;
                                sp:elements (
                                    [
                                      sp:object true ;
                                      sp:predicate teamwork:cannotEditSourceCode ;
                                      sp:subject [
                                          sp:varName "property" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "pg" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "property" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "projectGraph" ;
                        ] ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "party" ;
                        ] ;
                      sp:predicate teamwork:partyInGovernanceRoleAtProjectGraph ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a teamwork:userHasParty ;
                          arg:party [
                              sp:varName "party" ;
                            ] ;
                          arg:user [
                              a smf:userWithName ;
                              sp:arg1 [
                                  a smf:currentUserName ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary to edit." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current user has sufficient privileges to edit (RDF) source code for a given vocabulary. This is true if any of the governance roles of the user is marked with teamwork:cannotEditSourceCode true." ;
  rdfs:label "current user can edit source code" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasGovernanceRole
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a smf:userWithName ;
                      sp:arg1 [
                          a smf:currentUserName ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "user" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "party" ;
                    ] ;
                  sp:predicate teamwork:userOrRoleOrJobTitle ;
                  sp:subject [
                      sp:varName "user" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:exists ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "party" ;
                                  ] ;
                                sp:predicate [
                                    sp:varName "role" ;
                                  ] ;
                                sp:subject [
                                    sp:varName "projectGraph" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                      sp:arg2 [
                          a sp:exists ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "subjectArea" ;
                                  ] ;
                                sp:predicate edg:subjectArea ;
                                sp:subject [
                                    sp:varName "projectGraph" ;
                                  ] ;
                              ]
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a ui:graphWithImports ;
                                    sp:arg1 [
                                        a teamwork:platformGovernanceGraph ;
                                      ] ;
                                  ] ;
                                sp:variable [
                                    sp:varName "pg" ;
                                  ] ;
                              ]
                              [
                                a sp:NamedGraph ;
                                sp:elements (
                                    [
                                      a sp:TriplePath ;
                                      sp:object [
                                          sp:varName "subjectArea" ;
                                        ] ;
                                      sp:path [
                                          a sp:ModPath ;
                                          sp:modMax -2 ;
                                          sp:modMin 0 ;
                                          sp:subPath edg:subArea ;
                                        ] ;
                                      sp:subject [
                                          sp:varName "area" ;
                                        ] ;
                                    ]
                                    [
                                      sp:object [
                                          sp:varName "party" ;
                                        ] ;
                                      sp:predicate [
                                          sp:varName "role" ;
                                        ] ;
                                      sp:subject [
                                          sp:varName "area" ;
                                        ] ;
                                    ]
                                  ) ;
                                sp:graphNameNode [
                                    sp:varName "pg" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType edg:WorkflowParticipantProperty ;
      rdfs:comment "The role to check for." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user has a given governance role (e.g. responsible) in a given master graph. This checks for direct roles assigned to the user, or LDAP groups that the user has or job titles that they user is assigned to. It also checks for the same info assigned to subject areas that the master graph has." ;
  rdfs:label "current user has governance role" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasGovernanceRoleAtEditedResource
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          (
            (
              [
                a sp:Bind ;
                sp:expression [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                    sp:arg2 teamwork:editedResource ;
                    sp:arg3 [
                        a teamwork:teamGraph ;
                        sp:arg1 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ] ;
                sp:variable [
                    sp:varName "editedResource" ;
                  ] ;
              ]
              [
                a sp:Filter ;
                sp:expression [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "editedResource" ;
                      ] ;
                  ] ;
              ]
            )
            [
              a sp:Bind ;
              sp:expression [
                  a smf:userWithName ;
                  sp:arg1 [
                      a smf:currentUserName ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "user" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "party" ;
                ] ;
              sp:predicate teamwork:userOrRoleOrJobTitle ;
              sp:subject [
                  sp:varName "user" ;
                ] ;
            ]
          )
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "party" ;
                              ] ;
                            sp:predicate [
                                sp:varName "role" ;
                              ] ;
                            sp:subject [
                                sp:varName "editedResource" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "projectGraph" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType edg:WorkflowParticipantProperty ;
      rdfs:comment "The role to check for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user has a given governance role (e.g. responsible) in a given working copy. Returns false if the working copy is not about a specific resource. It then checks for direct roles assigned to the user, or LDAP groups that the user has or job titles that they user is assigned to, matching them against the governance roles associated with the edited resource." ;
  rdfs:label "current user has governance role at edited resource" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasPermissionOrSecurityRoleOnMasterGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a smf:userWithName ;
                      sp:arg1 [
                          a smf:currentUserName ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "user" ;
                    ] ;
                ]
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "role" ;
                    ] ;
                  sp:path [
                      a sp:AltPath ;
                      sp:path1 [
                          a sp:AltPath ;
                          sp:path1 teamwork:viewer ;
                          sp:path2 teamwork:editor ;
                        ] ;
                      sp:path2 teamwork:manager ;
                    ] ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:eq ;
                          sp:arg1 [
                              sp:varName "role" ;
                            ] ;
                          sp:arg2 [
                              sp:varName "user" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:and ;
                          sp:arg1 [
                              a smf:isRole ;
                              arg:resource [
                                  sp:varName "role" ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a smf:checkCurrentUserRole ;
                              sp:arg1 [
                                  a smf:roleName ;
                                  arg:resource [
                                      sp:varName "role" ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current user is viewer (or more) at a given master graph, based on directly assigned role properties such as teamwork:viewer for the user itself or one of the security groups that the user is a member of." ;
  rdfs:label "current user has permission or security role on master graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasPrivilege
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governedResource ;
      spl:valueType teamwork:GovernedResource ;
      rdfs:comment "The governed resource. Use the ?teamGraph to query whether the user has permission on the master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType teamwork:PermissionRoleProperty ;
      rdfs:comment "The role to check for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The team graph to operate on." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user has a given privilege, specified by a security role property. The current user must have that security role or a sub-property thereof, for the given governed resource. Alternatively, the user must be member of a permission group that has the given security role. Yet another alternative if the requested role is teamwork:viewer, is for the user to have a governance role on the vocabulary (in that case the user can also access any working copy). The query will be executed on the given team graph." ;
  rdfs:label "current user has privilege" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasPrivilegeOnMasterGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    sp:varName "teamGraph" ;
                  ] ;
                arg:role [
                    sp:varName "role" ;
                  ] ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType teamwork:PermissionRoleProperty ;
      rdfs:comment "The role to check for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The team graph to operate on." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user has a given privilege on the master graph, specified by a role property. The current user must have that role or a sub-property thereof, for the given master graph (specified via its team graph). Alternatively, the user must be member of a permission group that has the given role. The query will be executed on the given team graph." ;
  rdfs:label "current user has privilege on master graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHighestRole
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tg" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "tag" ;
                  ] ;
                sp:arg3 [
                    sp:varName "tg" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a teamwork:currentUserHasPrivilege ;
                    arg:governedResource [
                        sp:varName "g" ;
                      ] ;
                    arg:role teamwork:manager ;
                    arg:teamGraph [
                        sp:varName "tg" ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:manager ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a teamwork:currentUserHasPrivilege ;
                        arg:governedResource [
                            sp:varName "g" ;
                          ] ;
                        arg:role teamwork:editor ;
                        arg:teamGraph [
                            sp:varName "tg" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:editor ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a teamwork:currentUserHasPrivilege ;
                            arg:governedResource [
                                sp:varName "g" ;
                              ] ;
                            arg:role teamwork:viewer ;
                            arg:teamGraph [
                                sp:varName "tg" ;
                              ] ;
                          ] ;
                        sp:arg2 teamwork:viewer ;
                        sp:arg3 [
                            sp:varName "unbound" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "role" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:localName ;
                sp:arg1 [
                    sp:varName "role" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to operate on." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:GovernedResource ;
      rdfs:comment "The governed resource. " ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks the highest role the user has on a given resource" ;
  rdfs:label "current user highest role" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserIsProjectManager
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    sp:varName "teamGraph" ;
                  ] ;
                arg:role teamwork:manager ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current user is manager of a given project." ;
  rdfs:label "current user is project manager" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserIsTeamworkAdmin
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a uix:isAdmin ;
                  ] ;
                sp:arg2 [
                    a smf:checkCurrentUserRole ;
                    sp:arg1 [
                        a smf:configParam ;
                        sp:arg1 "teamworkAdminRole" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user is an EVN/EDG administrator." ;
  rdfs:label "current user is teamwork admin" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUsersTagTransitionVote
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "vote" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:userWithName ;
                sp:arg1 [
                    a smf:currentUserName ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "transition" ;
                  ] ;
                sp:arg2 teamwork:fromStatus ;
                sp:arg3 [
                    a teamwork:workflowsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fromStatus" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "transition" ;
                  ] ;
                sp:arg2 teamwork:toStatus ;
                sp:arg3 [
                    a teamwork:workflowsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "toStatus" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression teamwork:ApprovalVote ;
            sp:variable [
                sp:varName "vote" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "tag" ;
                    ] ;
                  sp:predicate teamwork:commentTag ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "user" ;
                    ] ;
                  sp:predicate <http://rdfs.org/sioc/ns#has_creator> ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "toStatus" ;
                    ] ;
                  sp:predicate teamwork:votedToStatus ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "vote" ;
                    ] ;
                  sp:predicate teamwork:vote ;
                  sp:subject [
                      sp:varName "post" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The working copy" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:transition ;
      spl:valueType teamwork:TagStatusTransition ;
      rdfs:comment "The transition." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:Vote ;
  rdfs:label "current users tag transition vote" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentVoteCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "post" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "transition" ;
                  ] ;
                sp:arg2 teamwork:toStatus ;
                sp:arg3 [
                    a teamwork:workflowsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "toStatus" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate teamwork:commentTag ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "vote" ;
              ] ;
            sp:predicate teamwork:vote ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "toStatus" ;
              ] ;
            sp:predicate teamwork:votedToStatus ;
            sp:subject [
                sp:varName "post" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:vote ;
      spl:valueType teamwork:Vote ;
      rdfs:comment "The vote to count, or unbound to count any vote." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:transition ;
      spl:valueType teamwork:TagStatusTransition ;
      rdfs:comment "The transition that is being voted on." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:comment "Gets the number of positive votes on a given transition." ;
  rdfs:label "current vote count" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:defaultDefaultNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a smf:configParam ;
                    sp:arg1 "teamworkDefaultDefaultNamespace" ;
                  ] ;
                sp:arg2 "http://example.org/{type}/new#" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the globally configured default value for swa:defaultNamespace. This is a config value under EVN/EDG configuration parameters. The function returns a fallback value." ;
  rdfs:label "default default namespace" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:defaultDefaultNamespaceForProjectType
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:lowerCase ;
                sp:arg1 [
                    a teamwork:pluralProjectTypeLabel ;
                    arg:projectType [
                        sp:varName "projectType" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lowerCase" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    sp:varName "lowerCase" ;
                  ] ;
                sp:arg2 " " ;
                sp:arg3 "-" ;
              ] ;
            sp:variable [
                sp:varName "insert" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:replaceAll ;
                sp:arg1 [
                    a teamwork:defaultDefaultNamespace ;
                  ] ;
                sp:arg2 "\\{type\\}" ;
                sp:arg3 [
                    sp:varName "insert" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Creates a default namespace suggestion for a given project type. This takes the globally configured string and applies string replacements: {type} is replaced with the lower-case plural name of the project type." ;
  rdfs:label "default default namespace for project type" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:editorLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a spl:objectInGraph ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                        sp:arg2 teamwork:editedResource ;
                        sp:arg3 [
                            a teamwork:teamGraph ;
                            sp:arg1 [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "r" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "." ;
                        sp:arg2 [
                            a teamwork:tagId ;
                            arg:tag [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 ".editor" ;
                sp:arg4 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "r" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a swa:falseOrUnbound ;
                            sp:arg1 [
                                sp:varName "tagIgnoreEditedResource" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "#" ;
                        sp:arg2 [
                            a sp:encode_for_uri ;
                            sp:arg1 [
                                a sp:str ;
                                sp:arg1 [
                                    sp:varName "r" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to deep link to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to produce a link for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagIgnoreEditedResource ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, the edited resource of ?tag (if any) will be ignored, and the editor won't start with the resource selected." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph to open." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Produces a relative URL to open the editor for a given project graph, optionally with a \"deep link\" to a given resource and/or a given working copy." ;
  rdfs:label "editor link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:fieldNameInGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "bname" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a afn:namespace ;
                      sp:arg1 [
                          sp:varName "classProperty" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "namespace" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "class" ;
                        ] ;
                      sp:arg2 graphql:name ;
                    ] ;
                  sp:variable [
                      sp:varName "gname" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a graphql:fieldName ;
                      sp:arg1 [
                          sp:varName "class" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "classProperty" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "fieldName" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          sp:varName "fieldName" ;
                        ] ;
                      sp:arg2 [
                          a sp:if ;
                          sp:arg1 [
                              a sp:eq ;
                              sp:arg1 [
                                  sp:varName "namespace" ;
                                ] ;
                              sp:arg2 "http://edg.topbraid.solutions/model/" ;
                            ] ;
                          sp:arg2 [
                              a spif:localName ;
                              sp:arg1 [
                                  sp:varName "classProperty" ;
                                ] ;
                            ] ;
                          sp:arg3 [
                              a sp:replace ;
                              sp:arg1 [
                                  a smf:qname ;
                                  sp:arg1 [
                                      sp:varName "classProperty" ;
                                    ] ;
                                ] ;
                              sp:arg2 ":" ;
                              sp:arg3 "_" ;
                              sp:arg4 "i" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "bname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the graphql field name for the provided resources, scoped to the provided graph." ;
  rdfs:label "GraphQL page link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:flatURILabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:isIRI ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a fn:starts-with ;
                        sp:arg1 [
                            sp:varName "label" ;
                          ] ;
                        sp:arg2 "<" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a fn:substring ;
                    sp:arg1 [
                        sp:varName "label" ;
                      ] ;
                    sp:arg2 2 ;
                    sp:arg3 [
                        a sp:sub ;
                        sp:arg1 [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "label" ;
                              ] ;
                          ] ;
                        sp:arg2 2 ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "label" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      rdfs:comment "The node to render." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Like ui:label, but will remove the brackets (< and >) around URIs. A use case is the Change History table viewer, that has a flag to strip away all (HTML) tags." ;
  rdfs:label "flat URILabel" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:genericSingletonProjectTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:concat ;
            sp:arg1 [
                a teamwork:getProductAbbreviation ;
              ] ;
            sp:arg2 " Platform Asset Collection" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:cachable true ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns an asset collection type label that is suitable for any of the built-in singleton asset collections." ;
  rdfs:label "generic singleton project type label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getDefaultTagWorkflowTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression teamwork:DefaultTagWorkflowTemplate ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType teamwork:WorkflowTemplate ;
  rdfs:comment "Gets the default workflow template that shall be used in the absence of any explicitly specified workflow template (using teamwork:workflowTemplate)." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getDefaultTagWorkflowTemplateForProject
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:subjectInGraph ;
                sp:arg1 teamwork:defaultTagWorkflowTemplateForProjectType ;
                sp:arg2 [
                    sp:varName "projectType" ;
                  ] ;
                sp:arg3 [
                    sp:varName "wg" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "default" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "default" ;
                  ] ;
                sp:arg2 [
                    a teamwork:getDefaultTagWorkflowTemplate ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary's master graph." ;
    ] ;
  spin:returnType teamwork:TagWorkflowTemplate ;
  rdfs:comment "Gets the default workflow template that shall be used for new working copies for a given vocabulary. Will fall back to the globally defined default workflow." ;
  rdfs:label "get default tag workflow template" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getFirstProjectManager
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "manager" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "manager" ;
                    ] ;
                  sp:predicate teamwork:manager ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team graph" ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Returns the first manager found for a given project." ;
  rdfs:label "get first project manager" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getGoverananceRolePropertyFromRole
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "goveranceRoleProperty" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "role" ;
                      ] ;
                    sp:arg2 teamwork:manager ;
                  ] ;
                sp:arg2 edg:governanceRoleWithManagerPermission ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "role" ;
                          ] ;
                        sp:arg2 teamwork:editor ;
                      ] ;
                    sp:arg2 edg:governanceRoleWithEditorPermission ;
                    sp:arg3 [
                        sp:varName "nil" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "goveranceRoleProperty" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:PermissionGovernanceRoleProperty ;
  rdfs:comment "determines the governance property to be used from the selected teamwork:role" ;
  rdfs:label "get governance role property from role property" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getMainClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                    sp:arg2 teamwork:mainClass ;
                    sp:arg3 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        a teamwork:getProjectType ;
                        arg:projectGraph [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:mainClass ;
                    sp:arg3 ui:graph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType teamwork:Vocabulary ;
      rdfs:comment "The vocabulary." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Gets the declared teamwork:mainClass of a vocabulary, falling back to the mainClass defined at its project type." ;
  rdfs:label "get main class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getProductAbbreviation
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    a teamwork:product ;
                  ] ;
                sp:arg2 teamwork:productAbbreviation ;
                sp:arg3 ui:graph ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the abbreviation (e.g. \"EVN\") of the current teamwork:Product." ;
  rdfs:label "get product abbreviation" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getProjectType
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType teamwork:ProjectType ;
  rdfs:comment """Gets the teamwork:ProjectType of a project identified by its project graph, or nothing if the argument is not a teamwork project. The name of this function starts with \"get\" to distinguish it from the property teamwork:projectType.

The function is implemented natively because it needs to bypass some security features.""" ;
  rdfs:label "get project type" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getQueryGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromMasterGraph ;
                arg:graph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagId ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:queryGraph ;
                    arg:editable true ;
                    arg:graphId [
                        sp:varName "graphId" ;
                      ] ;
                    arg:tagId [
                        sp:varName "tagId" ;
                      ] ;
                    arg:userName [
                        a smf:currentUserName ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the standard query graph for a given master graph (?projectGraph) and optional working copy (?tag). The result will be a graph with imports including the user name, so writes to these graphs will be recorded in the change history." ;
  rdfs:label "get query graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getResourceWorkflowTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "classDepth" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "workflowTemplate" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a teamwork:currentMasterGraph ;
                ] ;
              sp:variable [
                  sp:varName "projectGraph" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:ResourceWorkflowTemplate ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "baseType" ;
                    ] ;
                  sp:predicate teamwork:applicableResourceType ;
                  sp:subject [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a spl:instanceOf ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 [
                    sp:varName "baseType" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isSuitableWorkflowTemplateForProject ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:workflowTemplate [
                    sp:varName "workflowTemplate" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:classDepth ;
                arg:class [
                    sp:varName "baseType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "classDepth" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the template for." ;
    ] ;
  spin:returnType teamwork:ResourceWorkflowTemplate ;
  rdfs:comment """Gets the active resource workflow template associated with a given resource (in its current graph), or nothing if the resource is not governed by a workflow. This is walking through all suitable resource workflow templates for the current project graph and checks if they have matching teamwork:applicableResourceType with the instance. If there are multiple candidates, it selects the one attached to the \"deepest\" subclass, i.e. preferring more specific workflows over those at superclasses.

TODO: also check for teamwork:suitableWorkflowForProjectType and teamwork:suitableWorkflowForSubjectArea.""" ;
  rdfs:label "get resource workflow template" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getRoleFromGoverananceRoleProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "role" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "userOrGroup" ;
                          ] ;
                        sp:predicate edg:governanceRoleWithManagerPermission ;
                        sp:subject [
                            sp:varName "subjectArea" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression teamwork:manager ;
                        sp:variable [
                            sp:varName "managerRole" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "userOrGroup" ;
                          ] ;
                        sp:predicate edg:governanceRoleWithEditorPermission ;
                        sp:subject [
                            sp:varName "subjectArea" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression teamwork:editor ;
                        sp:variable [
                            sp:varName "editorRole" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          sp:varName "managerRole" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "editorRole" ;
                        ] ;
                      sp:arg3 teamwork:viewer ;
                    ] ;
                  sp:variable [
                      sp:varName "role" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "pg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userOrGroup ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or group." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:PermissionRoleProperty ;
  rdfs:comment "determines the teamwork:role from the governance properties" ;
  rdfs:label "get role property from governance role property" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getRootClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate teamwork:rootClass ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "import" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath owl:imports ;
                      ] ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate teamwork:rootClass ;
                    sp:subject [
                        sp:varName "import" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression owl:Thing ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Gets the root class of a master graph, falling back to the root class defined for any imported graph, and finally owl:Thing." ;
  rdfs:label "get root class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getSubjectAreaImportsGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromMasterGraph ;
                arg:graph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-area:" ;
                    sp:arg2 [
                        sp:varName "graphId" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the URI of the \"magic\" graph that contains owl:imports derived from the subject areas of a given master graph." ;
  rdfs:label "get subject area imports graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getTagWorkflowTemplate
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "workflow" ;
                      ] ;
                    sp:arg2 teamwork:workflowTemplate ;
                  ] ;
                sp:arg2 [
                    a teamwork:getDefaultTagWorkflowTemplateForProject ;
                    arg:projectGraph [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "z" ;
                          ] ;
                        sp:arg2 [
                            a teamwork:masterGraphForCurrentTeamGraph ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:z ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflow ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:returnType teamwork:TagWorkflowTemplate ;
  rdfs:comment "Gets the workflow template that shall be used for a given tag. The function must be called with the TCH graph as active graph." ;
  rdfs:label "get tag workflow template" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:graphIdFromGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:string ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iri" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a fn:starts-with ;
                    sp:arg1 [
                        sp:varName "iri" ;
                      ] ;
                    sp:arg2 "urn:x-evn-master:" ;
                  ] ;
                sp:arg2 [
                    a teamwork:graphIdFromMasterGraph ;
                    arg:graph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a teamwork:graphIdFromTagGraph ;
                    arg:graph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Gets the id from a graph - either a master graph or a tag graph." ;
  rdfs:label "graph id from graph" ;
  rdfs:subClassOf teamwork:graphIdFunctions ;
.
teamwork:graphIdFromMasterGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:string ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "str" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 "urn:x-evn-master:" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 18 ;
              ] ;
            sp:variable [
                sp:varName "a" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:lastIndexOf ;
                sp:arg1 [
                    sp:varName "a" ;
                  ] ;
                sp:arg2 ":" ;
              ] ;
            sp:variable [
                sp:varName "last" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "last" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a fn:substring ;
                    sp:arg1 [
                        sp:varName "a" ;
                      ] ;
                    sp:arg2 1 ;
                    sp:arg3 [
                        sp:varName "last" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Extracts the part of a graph URI after urn:x-evn:master." ;
  rdfs:label "graph id from master graph" ;
  rdfs:subClassOf teamwork:graphIdFunctions ;
.
teamwork:graphIdFromTagGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graphId" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:string ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "str" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 "urn:x-evn-tag:" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 15 ;
              ] ;
            sp:variable [
                sp:varName "base" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 [
                    sp:varName "base" ;
                  ] ;
                sp:arg2 ":" ;
              ] ;
            sp:variable [
                sp:varName "colIndex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "base" ;
                  ] ;
                sp:arg2 1 ;
                sp:arg3 [
                    sp:varName "colIndex" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Extracts the part of a graph URI after urn:x-evn-tag: but without the user id if that exists." ;
  rdfs:label "graph id from tag graph" ;
  rdfs:subClassOf teamwork:graphIdFunctions ;
.
teamwork:graphIdFromTeamGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromMasterGraph ;
                arg:graph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "id" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "id" ;
                  ] ;
                sp:arg2 1 ;
                sp:arg3 [
                    a sp:sub ;
                    sp:arg1 [
                        a fn:string-length ;
                        sp:arg1 [
                            sp:varName "id" ;
                          ] ;
                      ] ;
                    sp:arg2 4 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Given a team graph, return the master graph id." ;
  rdfs:label "graph id from team graph" ;
  rdfs:subClassOf teamwork:graphIdFunctions ;
.
teamwork:graphIdFunctions
  a spin:Function ;
  spin:abstract true ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The graph URI to get the id of." ;
    ] ;
  rdfs:label "graph id functions" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:graphQLPageLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromMasterGraph ;
                arg:graph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "." ;
                    sp:arg2 [
                        a teamwork:tagId ;
                        arg:tag [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "tagPart" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "graphql/" ;
                sp:arg2 [
                    sp:varName "graphId" ;
                  ] ;
                sp:arg3 [
                    sp:varName "tagPart" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy or unbound for the master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns a relative link to the GraphQL query page for a given project graph." ;
  rdfs:label "GraphQL page link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:graphQLPageLinkForShape
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:graphIdFromMasterGraph ;
                arg:graph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "." ;
                    sp:arg2 [
                        a teamwork:tagId ;
                        arg:tag [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "tagPart" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:encodeNode ;
                sp:arg1 [
                    sp:varName "shape" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "shapeName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "graphql/" ;
                sp:arg2 [
                    sp:varName "graphId" ;
                  ] ;
                sp:arg3 [
                    sp:varName "tagPart" ;
                  ] ;
                sp:arg4 "/" ;
                sp:arg5 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        sp:varName "shapeName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy or unbound for the master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The shape URI resource." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns a relative link to the GraphQL query page to query against a given shape for a given project graph." ;
  rdfs:label "GraphQL page link for shape" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:graphsUnderTeamControl
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "baseURI" ;
          ]
          [
            sp:varName "teamGraph" ;
          ]
        ) ;
      sp:where (
          (
            (
              [
                sp:object [
                    sp:varName "?0" ;
                  ] ;
                sp:predicate <http://www.topbraid.org/tops#files> ;
                sp:subject [
                    sp:varName "file" ;
                  ] ;
              ]
              [
                sp:object "/" ;
                sp:predicate rdf:first ;
                sp:subject [
                    sp:varName "?0" ;
                  ] ;
              ]
              [
                sp:object [
                    sp:varName "?1" ;
                  ] ;
                sp:predicate rdf:rest ;
                sp:subject [
                    sp:varName "?0" ;
                  ] ;
              ]
              [
                sp:object true ;
                sp:predicate rdf:first ;
                sp:subject [
                    sp:varName "?1" ;
                  ] ;
              ]
              [
                sp:object () ;
                sp:predicate rdf:rest ;
                sp:subject [
                    sp:varName "?1" ;
                  ] ;
              ]
              [
                a sp:Filter ;
                sp:expression [
                    a smf:hasBaseURI ;
                    sp:arg1 [
                        sp:varName "file" ;
                      ] ;
                  ] ;
              ]
            )
            [
              a sp:Bind ;
              sp:expression [
                  a smf:baseURI ;
                  sp:arg1 [
                      sp:varName "file" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "baseURI" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a teamwork:hasTeamGraph ;
                  sp:arg1 [
                      sp:varName "baseURI" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "baseURI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """Delivers a list of base URIs of those files in the workspace that have a tch file associated with it.
Must have one or two unbound variables on the right side. The first will be bound to the base URIs, the second to the associated team graph URIs. Example:

() teamwork:graphsUnderTeamControl (?baseURI ?teamGraph)

This function is natively implemented by TopBraid despite having the (informative) spin:body.""" ;
  rdfs:label "graphs under team control" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:hasImportOfType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "import" ;
                    ] ;
                  sp:predicate owl:imports ;
                  sp:subject [
                      sp:varName "projectGraph" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:getProjectType ;
                      arg:projectGraph [
                          sp:varName "import" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "pt" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "pt" ;
                        ] ;
                      sp:arg2 [
                          sp:varName "projectType" ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph to check the imports of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The required teamwork:ProjectType." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given master graph has a (direct) owl:import to a teamwork graph with a given type." ;
  rdfs:label "has import of type" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasRemoteDetails
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "endpoint" ;
              ] ;
            sp:predicate <http://datashapes.org/dash#detailsEndpoint> ;
            sp:subject [
                sp:varName "any" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:path [
                a sp:SeqPath ;
                sp:path1 rdf:type ;
                sp:path2 [
                    a sp:ModPath ;
                    sp:modMax -2 ;
                    sp:modMin 0 ;
                    sp:subPath rdfs:subClassOf ;
                  ] ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "type" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath sh:targetClass ;
              ] ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ps" ;
              ] ;
            sp:predicate sh:property ;
            sp:subject [
                sp:varName "nodeShape" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "endpoint" ;
              ] ;
            sp:predicate <http://datashapes.org/dash#detailsEndpoint> ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "path" ;
              ] ;
            sp:predicate sh:path ;
            sp:subject [
                sp:varName "ps" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "anyValue" ;
                        ] ;
                      sp:predicate [
                          sp:varName "path" ;
                        ] ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:not ;
                          sp:arg1 [
                              a spif:isReadOnlyTriple ;
                              sp:arg1 [
                                  sp:varName "resource" ;
                                ] ;
                              sp:arg2 [
                                  sp:varName "path" ;
                                ] ;
                              sp:arg3 [
                                  sp:varName "anyValue" ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has remote details" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasSubClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "superClass" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "any" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:superClass ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has sub class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasTagShape
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:getTagWorkflowTemplate ;
                      arg:workflow [
                          sp:varName "tag" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "workflow" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:workflowsGraph ;
                    ] ;
                  sp:variable [
                      sp:varName "wg" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "any" ;
                    ] ;
                  sp:predicate teamwork:tagShape ;
                  sp:subject [
                      sp:varName "workflow" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy to check." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "has tag shape" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasTagTransitions
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:Bind ;
                      sp:expression [
                          a teamwork:teamGraph ;
                          sp:arg1 [
                              sp:varName "projectGraph" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "teamGraph" ;
                        ] ;
                    ]
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "transition" ;
                              ] ;
                            sp:predicate teamwork:possibleTagTransition ;
                            sp:subject [
                                sp:varName "tag" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "teamGraph" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given working copy could be transitioned into another state." ;
  rdfs:label "has tag transitions" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasTeamGraph
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI (resource) of the main file to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given graph (identified by its base URI, ?arg1) is under team control." ;
  rdfs:label "has team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:highestRole
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:exists ;
                          sp:elements (
                              [
                                a sp:TriplePath ;
                                sp:object [
                                    sp:varName "role2" ;
                                  ] ;
                                sp:path [
                                    a sp:ModPath ;
                                    sp:modMax -2 ;
                                    sp:modMin 1 ;
                                    sp:subPath rdfs:subPropertyOf ;
                                  ] ;
                                sp:subject [
                                    sp:varName "role1" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                      sp:arg2 [
                          sp:varName "role1" ;
                        ] ;
                      sp:arg3 [
                          sp:varName "role2" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "result" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://topbraid.org/teamwork> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role1 ;
      spl:valueType teamwork:PermissionRoleProperty ;
      rdfs:comment "The first role to compare." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role2 ;
      spl:valueType teamwork:PermissionRoleProperty ;
      rdfs:comment "The second role." ;
    ] ;
  spin:returnType teamwork:PermissionRoleProperty ;
  rdfs:comment "Given two roles (e.g. viewer and editor), this returns the highest of them, e.g. editor." ;
  rdfs:label "highest role" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:inferredPrivilegeAtProjectGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "userOrGroup" ;
              ] ;
            sp:predicate teamwork:partyInAnyGovernanceRoleAtProjectGraph ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression teamwork:viewer ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userOrGroup ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or group." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:PermissionRoleProperty ;
  rdfs:comment "For a given user in a given master graph, this returns the highest permission (e.g. editor) that the user has as derived by the governance roles that he or she is a member of. This can only ever return teamwork:viewer or nothing." ;
  rdfs:label "inferred privilege at project graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:inferredPrivilegeAtTag
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a teamwork:teamGraph ;
                  sp:arg1 [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "teamGraph" ;
                ] ;
            ]
            [
              a sp:NamedGraph ;
              sp:elements (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:getTagWorkflowTemplate ;
                        arg:workflow [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "workflowTemplate" ;
                      ] ;
                  ]
                ) ;
              sp:graphNameNode [
                  sp:varName "teamGraph" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate teamwork:workflowParticipantProperties ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "userOrGroup" ;
              ] ;
            sp:predicate teamwork:partyInGovernanceRoleAtProjectGraph ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a teamwork:isManagerWorkflowParticipantProperty ;
                    arg:property [
                        sp:varName "property" ;
                      ] ;
                    arg:workflowTemplate [
                        sp:varName "workflowTemplate" ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:manager ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a teamwork:isEditorWorkflowParticipantProperty ;
                        arg:property [
                            sp:varName "property" ;
                          ] ;
                        arg:workflowTemplate [
                            sp:varName "workflowTemplate" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:editor ;
                    sp:arg3 teamwork:viewer ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "result" ;
                      ] ;
                    sp:arg2 teamwork:manager ;
                  ] ;
                sp:arg2 2 ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "result" ;
                          ] ;
                        sp:arg2 teamwork:editor ;
                      ] ;
                    sp:arg2 1 ;
                    sp:arg3 0 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "order" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userOrGroup ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or group." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:PermissionRoleProperty ;
  rdfs:comment "For a given user or group and a given working copy, this returns the highest permission (e.g. editor) that the user has as derived by the governance roles that he or she is a member of." ;
  rdfs:label "inferred privilege at tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isArchiveGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:strstarts ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 "urn:x-teamwork-archive:" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to test." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given graph is an archive, starting with \"urn:x-teamwork-archive:\"." ;
  rdfs:label "is archive graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isClassButNotNodeShape
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a spl:instanceOf ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 rdfs:Class ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a spl:instanceOf ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 sh:NodeShape ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "is class but not node shape" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isCurrentApplication
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    a teamwork:product ;
                  ] ;
                sp:arg2 teamwork:productAbbreviation ;
                sp:arg3 ui:graph ;
              ] ;
            sp:variable [
                sp:varName "abbrev" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "appName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "abbrev" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:appName ;
      spl:valueType xsd:string ;
      rdfs:comment "Application name (EVN or EDG)" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given application name is the current application.  Currently only supports EVN and EDG." ;
  rdfs:label "is application name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isEditorWorkflowParticipantProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "property" ;
                    ] ;
                  sp:predicate teamwork:editorWorkflowParticipantProperty ;
                  sp:subject [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType edg:WorkflowParticipantProperty ;
      rdfs:comment "The property to check." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflowTemplate ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given workflow participant property (e.g. edg:responsible) is marked as to have editor permission in a given workflow template." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isFrozenTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "tag" ;
                  ] ;
                sp:arg2 teamwork:status ;
                sp:arg3 [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "status" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "status" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a teamwork:workflowsGraph ;
                            ] ;
                          sp:variable [
                              sp:varName "wg" ;
                            ] ;
                        ]
                        [
                          a sp:NamedGraph ;
                          sp:elements (
                              [
                                sp:object true ;
                                sp:predicate teamwork:editable ;
                                sp:subject [
                                    sp:varName "status" ;
                                  ] ;
                              ]
                            ) ;
                          sp:graphNameNode [
                              sp:varName "wg" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given working copy (tag) is frozen or whether it can be edited. The logic behind this relies on the teamwork:editable flag of the current status of the working copy." ;
  rdfs:label "is frozen tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isImportableGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:and ;
                                    sp:arg1 [
                                        a sp:and ;
                                        sp:arg1 [
                                            a sp:bound ;
                                            sp:arg1 [
                                                sp:varName "graph" ;
                                              ] ;
                                          ] ;
                                        sp:arg2 [
                                            a sp:not ;
                                            sp:arg1 [
                                                a sp:contains ;
                                                sp:arg1 [
                                                    sp:varName "file" ;
                                                  ] ;
                                                sp:arg2 ".tbc" ;
                                              ] ;
                                          ] ;
                                      ] ;
                                    sp:arg2 [
                                        a sp:not ;
                                        sp:arg1 [
                                            a sp:contains ;
                                            sp:arg1 [
                                                sp:varName "file" ;
                                              ] ;
                                            sp:arg2 ".spin." ;
                                          ] ;
                                      ] ;
                                  ] ;
                                sp:arg2 [
                                    a sp:not ;
                                    sp:arg1 [
                                        a sp:contains ;
                                        sp:arg1 [
                                            sp:varName "file" ;
                                          ] ;
                                        sp:arg2 ".sms." ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a sp:contains ;
                                    sp:arg1 [
                                        sp:varName "file" ;
                                      ] ;
                                    sp:arg2 ".test." ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:contains ;
                                sp:arg1 [
                                    sp:varName "file" ;
                                  ] ;
                                sp:arg2 ".ui." ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:not ;
                                sp:arg1 [
                                    a sp:strends ;
                                    sp:arg1 [
                                        sp:varName "file" ;
                                      ] ;
                                    sp:arg2 ".xml" ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a sp:strends ;
                                    sp:arg1 [
                                        sp:varName "file" ;
                                      ] ;
                                    sp:arg2 ".html" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:strends ;
                                sp:arg1 [
                                    sp:varName "file" ;
                                  ] ;
                                sp:arg2 ".htm" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:strends ;
                        sp:arg1 [
                            sp:varName "file" ;
                          ] ;
                        sp:arg2 ".xsd" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a fn:ends-with ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                    sp:arg2 ".tch" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "teamGraph" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:currentUserHasPrivilege ;
                    arg:governedResource [
                        sp:varName "teamGraph" ;
                      ] ;
                    arg:role teamwork:viewer ;
                    arg:teamGraph [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:file ;
      spl:valueType xsd:string ;
      rdfs:comment "The file of the graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI resource of the graph." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given graph/file could be owl:imported into a teamwork graph. This basically excludes exotic file endings and verifies that the user has read access (if it's under teamwork control)." ;
  rdfs:label "is importable graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isImported
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "any" ;
              ] ;
            sp:predicate <http://topbraid.org/imported#when> ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given resource has been marked as imported, using the imported:when property." ;
  rdfs:label "is imported" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isManagerWorkflowParticipantProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "property" ;
                    ] ;
                  sp:predicate teamwork:managerWorkflowParticipantProperty ;
                  sp:subject [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType edg:WorkflowParticipantProperty ;
      rdfs:comment "The property to check." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflowTemplate ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given workflow participant property (e.g. edg:responsible) is marked as to have manager permission in a given workflow template." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isNewResourceTagWorkflowTemplate
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a spl:instanceOf ;
                      sp:arg1 [
                          sp:varName "workflowTemplate" ;
                        ] ;
                      sp:arg2 teamwork:NewResourceTagWorkflowTemplate ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflowTemplate ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "is new resource tag workflow template" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isNotClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a spl:instanceOf ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 rdfs:Class ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Used by auto-complete above NodeShapes panel to filter out node shapes that are also classes." ;
  rdfs:label "is not class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isNotImportable
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:file ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "file" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "file" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:contains ;
                            sp:arg1 [
                                sp:varName "file" ;
                              ] ;
                            sp:arg2 ".tablemap." ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:isArchiveGraph ;
                        arg:graph [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Used to filter out certain file types (currently: \".tablemap.\" files) so that they are not offered as owl:imports in the includes dialog." ;
  rdfs:label "is not importable" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isNotWorkflowParticipantProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a teamwork:isWorkflowParticipantProperty ;
                    arg:property [
                        sp:varName "property" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given property is a not declared edg:WorkflowParticipantProperty in the governance graph. This is used to filter form widgets." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isOntology
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given project (master graph) is an Ontology, as defined by the presence of teamwork:isOntologyProjectType true for its project type." ;
  rdfs:label "is ontology" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isPerResourceGovernanceRolesEnabled
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate teamwork:perResourceGovernanceRolesEnabled ;
                  sp:subject [
                      sp:varName "projectGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether per-asset governance roles have been enabled for a given vocabulary." ;
  rdfs:label "is per resource governance roles enabled" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isProjectTypeDisabled
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate teamwork:projectTypeDisabled ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The ProjectType to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given teamwork:ProjectType has been disabled by the admin." ;
  rdfs:label "is project type disabled" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isPropertyValueRuleWizardSuitable
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Exists ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "resource" ;
                    ] ;
                  sp:predicate sh:property ;
                  sp:subject [
                      sp:varName "nodeShape" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "path" ;
                    ] ;
                  sp:predicate sh:path ;
                  sp:subject [
                      sp:varName "resource" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:isIRI ;
                      sp:arg1 [
                          sp:varName "path" ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "is property value rule wizard suitable" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isPublishedToExplorerUsers
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given master graph (identified by its team graph) has been marked to be published to Explorer users." ;
  rdfs:label "is published to explorer users" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isReadOnlyProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate teamwork:readOnly ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given project graph has been marked as read-only. See teamwork:readOnly." ;
  rdfs:label "is read only project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isReadOnlyResource
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "type" ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:not ;
                          sp:arg1 [
                              a teamwork:isReadOnlyType ;
                              arg:resourceType [
                                  sp:varName "type" ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given resource is read-only (in the current editing context). A resource is read-only if all of its types are read-only, using teamwork:isReadOnlyType()." ;
  rdfs:label "is read only resource" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isReadOnlyType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a teamwork:currentMasterGraph ;
                ] ;
              sp:variable [
                  sp:varName "projectGraph" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a teamwork:getProjectType ;
                  arg:projectGraph [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "projectType" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a sp:coalesce ;
                  sp:arg1 [
                      a spl:objectInGraph ;
                      sp:arg1 [
                          sp:varName "projectType" ;
                        ] ;
                      sp:arg2 teamwork:isReadOnlyTypeFunction ;
                      sp:arg3 ui:graph ;
                    ] ;
                  sp:arg2 teamwork:isReadOnlyTypeDefault ;
                ] ;
              sp:variable [
                  sp:varName "function" ;
                ] ;
            ]
          )
          [
            a sp:Filter ;
            sp:expression [
                a spif:invoke ;
                sp:arg1 [
                    sp:varName "function" ;
                  ] ;
                sp:arg2 [
                    sp:varName "resourceType" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current editor can edit resources of a given class. This uses the provided project type to look up another SPIN function that does the real work." ;
  rdfs:label "is read only type" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isReadOnlyTypeDefault
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object rdfs:Class ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath rdfs:subClassOf ;
                            ] ;
                          sp:subject [
                              sp:varName "resourceType" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object rdf:Property ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath rdfs:subClassOf ;
                            ] ;
                          sp:subject [
                              sp:varName "resourceType" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "The default implementation, excluding any rdfs:Class or rdf:Property from editing." ;
  rdfs:label "is read only type default" ;
  rdfs:subClassOf teamwork:isReadOnlyTypeFunctions ;
.
teamwork:isReadOnlyTypeFunction
  a rdf:Property ;
  rdfs:comment "A function that determines whether this project type supports editing instances of a given class. Must point to a SPIN function that is a subclass of teamwork:isReadOnlyTypeFunctions. The function is called with the vocabulary as the query graph, i.e. teamwork:currentMasterGraph() could be used to determine the current master graph if additional info is needed." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "is read only type function" ;
  rdfs:range spin:Function ;
.
teamwork:isReadOnlyTypeFunctions
  a spin:Function ;
  spin:abstract true ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Abstract base class of SPIN functions that can determine whether instances of a given class are read-only. This info can be kept per teamwork:ProjectType using teamwork:isReadOnlyTypeFunction and defaults to teamwork:isReadOnlyTypeDefault. The functions should be used to determine whether forms are editable (if a user navigates to a resource) and to drive the create new buttons." ;
  rdfs:label "is read only type functions" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isRecordCountsOnly
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate teamwork:recordCountsOnly ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph URI resource." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the option \"record counts only\" has been activated for a given master graph (identified by its team graph)." ;
  rdfs:label "is record counts only" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isSHACLPreferred
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTeamGraph ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object true ;
                            sp:predicate teamwork:shaclPreferred ;
                            sp:subject [
                                sp:varName "teamGraph" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "teamGraph" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current Ontology is set to prefer SHACL." ;
  rdfs:label "is SHACL preferred" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isSKOSConstraintsGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    sp:varName "baseGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "withImports" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object <http://www.w3.org/2004/02/skos/core#Concept> ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "class" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "withImports" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "constraint" ;
                              ] ;
                            sp:predicate spin:constraint ;
                            sp:subject [
                                sp:varName "class" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object spl:Argument ;
                                      sp:predicate rdf:type ;
                                      sp:subject [
                                          sp:varName "constraint" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "baseGraph" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given graph contains SKOS constraints. The algorithm walks up all subclasses of skos:Concept from the imports closure, and checks whether any of them has a spin:constraint in the base graph." ;
  rdfs:label "is SKOSConstraints graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isSingletonProjectType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "any" ;
                    ] ;
                  sp:predicate teamwork:singletonId ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The vocabulary type to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given vocabulary type is marked as a singleton, allowing only a single instance of its kind." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isSolrProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "server" ;
                    ] ;
                  sp:predicate teamwork:indexingServer ;
                  sp:subject [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
                [
                  sp:object <http://topbraid.org/solr#Server> ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "url" ;
                    ] ;
                  sp:predicate <http://topbraid.org/solr#url> ;
                  sp:subject [
                      sp:varName "server" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given project has a mapping to Solr." ;
  rdfs:label "is Solr project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isSuitableWorkflowTemplateForProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "workflowTemplate" ;
                  ] ;
                sp:arg2 teamwork:suitableWorkflowForSubjectArea ;
                sp:arg3 [
                    sp:varName "wg" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "suitableSubjectArea" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
                sp:arg2 edg:subjectArea ;
                sp:arg3 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ss" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "suitableSubjectArea" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:NamedGraph ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "subjectArea" ;
                                  ] ;
                                sp:predicate edg:subjectArea ;
                                sp:subject [
                                    sp:varName "projectGraph" ;
                                  ] ;
                              ]
                              [
                                a sp:TriplePath ;
                                sp:object [
                                    sp:varName "subjectArea" ;
                                  ] ;
                                sp:path [
                                    a sp:ModPath ;
                                    sp:modMax -2 ;
                                    sp:modMin 0 ;
                                    sp:subPath edg:subArea ;
                                  ] ;
                                sp:subject [
                                    sp:varName "suitableSubjectArea" ;
                                  ] ;
                              ]
                            ) ;
                          sp:graphNameNode [
                              sp:varName "projectGraph" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:notExists ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "any" ;
                                  ] ;
                                sp:predicate teamwork:suitableWorkflowForProjectType ;
                                sp:subject [
                                    sp:varName "workflowTemplate" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                      sp:arg2 [
                          a sp:exists ;
                          sp:elements (
                              [
                                a sp:Bind ;
                                sp:expression [
                                    a teamwork:getProjectType ;
                                    arg:projectGraph [
                                        sp:varName "projectGraph" ;
                                      ] ;
                                  ] ;
                                sp:variable [
                                    sp:varName "projectType" ;
                                  ] ;
                              ]
                              [
                                sp:object [
                                    sp:varName "projectType" ;
                                  ] ;
                                sp:predicate teamwork:suitableWorkflowForProjectType ;
                                sp:subject [
                                    sp:varName "workflowTemplate" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflowTemplate ;
      spl:valueType teamwork:WorkflowTemplate ;
      rdfs:comment "The workflow template to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given workflow template is suitable to be used with a given project. This is true if the template neither uses teamwork:suitableWorkflowForProjectType or teamwork:suitableWorkflowForSubjectArea, or if it matches the given subject area (if specified) AND the given project type (is specified)." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isTaggerProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "any" ;
                    ] ;
                  sp:predicate <http://evn.topbraidlive.org/tagger#objectGraph> ;
                  sp:subject [
                      sp:varName "graph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "A helper function that is needed to identify Tagger legacy projects that do not have the teamwork:projectType triple. Do not use this function anywhere else!" ;
  rdfs:label "is tagger project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isTerminatedTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "currentStatus" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:getTagWorkflowTemplate ;
                      arg:workflow [
                          sp:varName "tag" ;
                        ] ;
                      arg:z [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            a sp:Bind ;
                            sp:expression [
                                a teamwork:workflowsGraph ;
                              ] ;
                            sp:variable [
                                sp:varName "wg" ;
                              ] ;
                          ]
                          [
                            a sp:NamedGraph ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "transition" ;
                                    ] ;
                                  sp:predicate teamwork:transition ;
                                  sp:subject [
                                      sp:varName "workflowTemplate" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "currentStatus" ;
                                    ] ;
                                  sp:predicate teamwork:fromStatus ;
                                  sp:subject [
                                      sp:varName "transition" ;
                                    ] ;
                                ]
                                [
                                  sp:object [
                                      sp:varName "anyStatus" ;
                                    ] ;
                                  sp:predicate teamwork:toStatus ;
                                  sp:subject [
                                      sp:varName "transition" ;
                                    ] ;
                                ]
                              ) ;
                            sp:graphNameNode [
                                sp:varName "wg" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given working copy is \"terminated\", i.e. has a status for which the workflow has no possible further transitions." ;
  rdfs:label "is terminated tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isTextIndexTrackedGraph
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given graph is tracked by the (Lucene) text index. Currently all master graphs are tracked." ;
  rdfs:label "is text index tracked graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isValidDefaultNamespace
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:and ;
            sp:arg1 [
                a sp:and ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "uri" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spif:isValidURI ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "uri" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:arg2 [
                a sp:or ;
                sp:arg1 [
                    a sp:strends ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "uri" ;
                          ] ;
                      ] ;
                    sp:arg2 "/" ;
                  ] ;
                sp:arg2 [
                    a sp:strends ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "uri" ;
                          ] ;
                      ] ;
                    sp:arg2 "#" ;
                  ] ;
              ] ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:uri ;
    ] ;
  rdfs:comment "True if the argument is a valid default namespace URI for a teamwork project. This means it must be a valid URI, and end in a hash ('#') or slash ('/')." ;
  rdfs:label "is valid default namespace" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isWorkflowParticipantProperty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:WorkflowParticipantProperty ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given property is a declared edg:WorkflowParticipantProperty in the governance graph." ;
  rdfs:label "is workflow participant property" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:masterGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-evn-master:" ;
                    sp:arg2 [
                        sp:varName "graphId" ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The graph id, e.g. \"geo\"." ;
    ] ;
  spin:private true ;
  rdfs:comment """Constructs the graph IRI that is used to edit a given (master) vocabulary without imports from the graph id. This also doubles as the governed resource of the vocabulary itself.

Implementation note: the resulting URI will be resolved to a plain graph, not with TeamBufferingGraph infrastructure around it. This means that ui:updates and ui:transactions on such graphs will not be logged in the graph's TCH graph. Use evnui:masterGraphForCurrentUser to get a URI that includes the current user name and which is therefore matched to a TeamBufferingGraph.""" ;
  rdfs:label "master graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:masterGraphForCurrentTeamGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:masterGraphForTeamGraph ;
                arg:teamGraph [
                    a ui:currentQueryGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Assuming the current query graph is a TCH graph, this gets the associated master graph (by removing the .tch ending of the base graph)." ;
  rdfs:label "master graph for current team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:masterGraphForCurrentUser
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "uri" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "masterGraph" ;
                      ] ;
                  ] ;
                sp:arg2 ":" ;
                sp:arg3 [
                    a smf:currentUserName ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:masterGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph (urn:x-evn:master:XY) without a user name." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Takes a (master) graph and appends \":[CurrentUserName]\" to it. This can be used to turn a general projectGraph URI into one that gets resolved into a TeamBufferingGraph with change tracking." ;
  rdfs:label "master graph for current user" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:masterGraphForTeamGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithoutImports ;
                sp:arg1 [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "baseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:substr ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "baseGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 1 ;
                    sp:arg3 [
                        a sp:sub ;
                        sp:arg1 [
                            a sp:strlen ;
                            sp:arg1 [
                                a sp:str ;
                                sp:arg1 [
                                    sp:varName "baseGraph" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 4 ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph (may be a ui:graphWithImports)." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the associated master graph for a TCH graph (by removing the .tch ending of the base graph)." ;
  rdfs:label "master graph for team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:mentionedInChange
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "change" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate teamwork:subject ;
                    sp:subject [
                        sp:varName "s" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate teamwork:predicate ;
                    sp:subject [
                        sp:varName "s" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object spin:_arg1 ;
                    sp:predicate teamwork:object ;
                    sp:subject [
                        sp:varName "s" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "s" ;
              ] ;
            sp:predicate [
                sp:varName "any" ;
              ] ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      rdfs:comment "The RDF node to match." ;
    ] ;
  spin:returnType teamwork:Change ;
  rdfs:comment "Finds all changes that mention a given RDF node (?arg1) as subject, predicate or object." ;
  rdfs:label "mentioned in change" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:mostRecentStatusChangeTime
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "time" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "time" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "change" ;
              ] ;
            sp:predicate teamwork:statusChange ;
            sp:subject [
                sp:varName "tag" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "time" ;
              ] ;
            sp:predicate <http://purl.org/dc/terms/created> ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:dateTime ;
  rdfs:comment "Gets the most recent status change that a working copy went through." ;
  rdfs:label "most recent status change" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:openInHomeGraphLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "graph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
                sp:arg2 [
                    sp:varName "exceptGraph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "any" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "graph" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:editorLink ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
                arg:resource [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:exceptGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to exclude." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets an editor link to a given resource to a master graph that the current user can access and that contains an rdf:type triple of the resource." ;
  rdfs:label "open in home graph link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:partyInAnyGovernanceRoleAtProjectGraph
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "party" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg1 ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:predicate edg:subjectArea ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            a teamwork:platformGovernanceGraph ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "pg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:workflowParticipantProperties ;
                          sp:subject () ;
                        ]
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath edg:subArea ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate [
                              sp:varName "predicate" ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "pg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all parties that are assigned with any governance role for a given project graph - either via direct triples or from the subject areas assigned to the project graph." ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:partyInGovernanceRoleAtProjectGraph
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "party" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate spin:_arg1 ;
                          sp:subject spin:_arg2 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg2 ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:predicate edg:subjectArea ;
                          sp:subject spin:_arg2 ;
                        ]
                      ) ;
                    sp:graphNameNode spin:_arg2 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            a teamwork:platformGovernanceGraph ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "pg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "subjectArea" ;
                            ] ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath edg:subArea ;
                            ] ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "party" ;
                            ] ;
                          sp:predicate spin:_arg1 ;
                          sp:subject [
                              sp:varName "area" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "pg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The role (e.g. edg:responsible) to get the parties for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all parties that are assigned with a specific governance role for a given project graph - either via direct triples or from the subject areas assigned to the project graph." ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:perhapsGetSingleChildOfAbstractClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "subClass" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a swa:isAbstractClass ;
                      arg:class [
                          sp:varName "class" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:eq ;
                      sp:arg1 [
                          a spl:subjectCount ;
                          sp:arg1 rdfs:subClassOf ;
                          sp:arg2 [
                              sp:varName "class" ;
                            ] ;
                        ] ;
                      sp:arg2 1 ;
                    ] ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "subClass" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a swa:isAbstractClass ;
                    arg:class [
                        sp:varName "subClass" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to perhaps get the subclass of." ;
    ] ;
  spin:private true ;
  rdfs:comment "If the given class is abstract and has only one subclass (that is not abstract) then return that subclass." ;
  rdfs:label "perhaps get single child of abstract class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:platformGovernanceGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <urn:x-evn-master:platform_governance_singleton> ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """Gets the base URI (as a Resource) of the graph containing the governance roles. This does not include the owl:imports, so wrap this with ui:graphWithImports if needed.

Usually this is not needed directly, but instead query teamwork:workflowsGraph().""" ;
  rdfs:label "platform governance graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:pluralProjectTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate teamwork:pluralLabel ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The project type (URI resource)." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets a label in plural form describing a given project type, such as\"Taxonomies\" or \"Ontologies\"." ;
  rdfs:label "plural project type label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:possibleResourceTransition
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "transition" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getResourceWorkflowTemplate ;
                arg:resource spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "template" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "template" ;
                  ] ;
                sp:arg2 teamwork:statusProperty ;
                sp:arg3 [
                    sp:varName "wg" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "statusProperty" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "status" ;
              ] ;
            sp:predicate [
                sp:varName "statusProperty" ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "transition" ;
                    ] ;
                  sp:predicate teamwork:transition ;
                  sp:subject [
                      sp:varName "template" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:fromStatus ;
                  sp:subject [
                      sp:varName "transition" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:currentUserCanPerformResourceStatusTransition ;
                arg:resource spin:_arg1 ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
                arg:transition [
                    sp:varName "transition" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the transitions for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType teamwork:ResourceStatusTransition ;
  rdfs:comment "Gets the workflow transitions that a given resource may go through, from its current status, with the current user." ;
  rdfs:label "possible resource transition" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:possibleTagTransition
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "transition" ;
          ]
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getTagWorkflowTemplate ;
                arg:workflow spin:_arg1 ;
              ] ;
            sp:variable [
                sp:varName "workflow" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "status" ;
              ] ;
            sp:predicate teamwork:status ;
            sp:subject spin:_arg1 ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "workflowsGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "transition" ;
                    ] ;
                  sp:predicate teamwork:transition ;
                  sp:subject [
                      sp:varName "workflow" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:fromStatus ;
                  sp:subject [
                      sp:varName "transition" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "transition" ;
                            ] ;
                          sp:arg2 sh:order ;
                        ] ;
                      sp:arg2 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "order" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "workflowsGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a teamwork:isPossibleTagTransition ;
                    sp:arg1 [
                        sp:varName "transition" ;
                      ] ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    a teamwork:isPossibleTagVote ;
                    sp:arg1 [
                        a ui:graphWithoutImports ;
                        sp:arg1 [
                            a ui:currentQueryGraph ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "transition" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy (and workflow subject)." ;
    ] ;
  spin:returnType teamwork:Transition ;
  rdfs:comment "For a given working copy and the current user this returns the possible transitions that the user may trigger or vote on. This magic property must be called with the team graph (TCH) as the active graph." ;
  rdfs:label "possible tag transition" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:possibleTagTransitionOrdered
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "transition" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:possibleTagTransition ;
            sp:subject spin:_arg1 ;
          ]
          [
            sp:object [
                sp:varName "transition" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "order" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The working copy (and workflow subject)." ;
    ] ;
  spin:returnType teamwork:Transition ;
  rdfs:comment "A variation of teamwork:possibleTagTransition which produces its results in order." ;
  rdfs:label "possible tag transition ordered" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:product
  a spin:Function ;
  spin:returnType teamwork:Product ;
  rdfs:comment "Gets the active teamwork:Product that is installed and selected by the user. This is backed by a native Java function that may also check for things like licenses and the config graph." ;
  rdfs:label "product" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:productLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:product ;
              ] ;
            sp:variable [
                sp:varName "product" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                sp:arg1 [
                    sp:varName "product" ;
                  ] ;
                sp:arg2 ui:graph ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the label of the active Product, as defined by teamwork:product." ;
  rdfs:label "product label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:projectHasSubjectArea
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  rdfs:comment "Checks a Teamwork project graph (first argument) against an edg:SubjectArea (second argument). Implemented natively to circumvent access control; works even when the current user has no read access to the project's master graph." ;
  rdfs:label "project has subject area" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:projectLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph (URI resource)." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the display label of a given vocabulary/project." ;
  rdfs:label "project label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:projectOrSubjectAreaLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a ui:label ;
                              sp:arg1 [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "label" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a ui:label ;
                              sp:arg1 [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "label" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode <urn:x-evn-master:platform_governance_singleton> ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph (URI resource)." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the display label of a given vocabulary/project or governance area" ;
  rdfs:label "project label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:publishedGraphById
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    sp:varName "uri" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-evn-pub:" ;
                    sp:arg2 [
                        sp:varName "graphId" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The graph id, e.g. \"geo\"." ;
    ] ;
  rdfs:comment "Constructs the graph IRI that is used by explorer applications to view a given graph by its id. Note that the result includes owl:imports." ;
  rdfs:label "published graph by id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:publishedGraphName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 15 ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 "urn:x-evn-pub:" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to get the short name of." ;
    ] ;
  rdfs:comment "Gets a short name derived from the file name of a given graph." ;
  rdfs:label "published graph name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:queryGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "e" ;
                  ] ;
                sp:arg2 [
                    a ui:graphWithImports ;
                    sp:arg1 [
                        sp:varName "uri" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "uri" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "editable" ;
                  ] ;
                sp:arg2 false ;
              ] ;
            sp:variable [
                sp:varName "e" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "e" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg2 "urn:x-evn-tag:" ;
                    sp:arg3 "urn:x-evn-master:" ;
                  ] ;
                sp:arg3 "urn:x-evn-pub:" ;
              ] ;
            sp:variable [
                sp:varName "base" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tagId" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 ":" ;
                    sp:arg2 [
                        sp:varName "tagId" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "t" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "userName" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "e" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 ":" ;
                    sp:arg2 [
                        sp:varName "userName" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "u" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a ui:concat ;
                    sp:arg1 [
                        sp:varName "base" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "graphId" ;
                      ] ;
                    sp:arg3 [
                        sp:varName "t" ;
                      ] ;
                    sp:arg4 [
                        sp:varName "u" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the tag (working copy)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to return the graph for edit mode." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The graph id, e.g. \"geo\"." ;
    ] ;
  rdfs:comment "Constructs the graph IRI that is used to edit a given vocabulary/working copy for a given user." ;
  rdfs:label "query graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:rangeClasses
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "range" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "property" ;
                ] ;
              sp:predicate swa:relevantClassOfProperty ;
              sp:subject spin:_arg1 ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a swa:localRangeAtClass ;
                  sp:arg1 spin:_arg1 ;
                  sp:arg2 [
                      sp:varName "property" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "range" ;
                ] ;
            ]
          )
          [
            a sp:TriplePath ;
            sp:object owl:Thing ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "range" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "range" ;
                      ] ;
                    sp:arg2 owl:Thing ;
                  ] ;
                sp:arg2 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "range" ;
                      ] ;
                    sp:arg2 rdfs:Resource ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a swa:isDatatypeRange ;
                    sp:arg1 [
                        sp:varName "range" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The \"main\" class." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Class ;
  rdfs:comment "Finds all ranges of relevant properties of a given class (?arg1). Only returns those range that are OWL classes." ;
  rdfs:label "range classes" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:readableExampleVocabularies
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate <http://www.topbraid.org/tops#files> ;
              sp:subject [
                  sp:varName "file" ;
                ] ;
            ]
            [
              sp:object spin:_arg1 ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object true ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a smf:baseURI ;
                  sp:arg1 [
                      sp:varName "file" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "graph" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a sp:bound ;
                      sp:arg1 [
                          sp:varName "graph" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:not ;
                      sp:arg1 [
                          a fn:ends-with ;
                          sp:arg1 [
                              a sp:str ;
                              sp:arg1 [
                                  sp:varName "graph" ;
                                ] ;
                            ] ;
                          sp:arg2 ".tch" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:currentUserHasPrivilegeOnMasterGraph ;
                    arg:role teamwork:viewer ;
                    arg:teamGraph [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The project name, e.g. \"sample.evn.topbraidlive.org\"." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all vocabularies from a given examples folder that the current user has viewer permissions for." ;
  rdfs:label "readable example vocabularies" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:readableGraphsOfType
  a spin:MagicProperty ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """Delivers a list of base URIs of those files in the workspace that have a tch file associated, for which the currently logged in user has at least read access, and of the specified teamwork:ProjectType(s).
Must have two unbound variables on the left side, and a list of teamwork:ProjectTypes on the right.
Example:

(?baseURI ?teamGraph) teamwork:readableGraphsOfType (?type1 ?type2 ...)""" ;
  rdfs:label "readable graphs under team control of a particular type" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:readableGraphsUnderTeamControl
  a spin:MagicProperty ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Delivers a list of base URIs of those files in the workspace that have a tch file associated, and for which the currently logged in user has at least read access.  Can have one or two unbound variables on the right side.  The first will be bound to the base URIs, the second to the associated team graph URIs." ;
  rdfs:label "readable graphs under team control" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:relatedClass
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "mainClass" ;
                      ] ;
                    sp:predicate teamwork:mainClass ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "mainClass" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 1 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "mainClass" ;
                      ] ;
                    sp:predicate teamwork:mainClass ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate teamwork:rangeClasses ;
                    sp:subject [
                        sp:varName "mainClass" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "result" ;
                  ] ;
                sp:arg2 [
                    sp:varName "mainClass" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType teamwork:Vocabulary ;
      rdfs:comment "The vocabulary to get the secondary classes of." ;
    ] ;
  spin:returnType rdfs:Class ;
  rdfs:range owl:Class ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:resourceStatusTransitionTargetLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:workflowsGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "wg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "label" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "transition" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "wg" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:workflowsGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "wg" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:objectInGraph ;
                        sp:arg1 [
                            sp:varName "workflowTemplate" ;
                          ] ;
                        sp:arg2 teamwork:statusProperty ;
                        sp:arg3 [
                            sp:varName "wg" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "statusProperty" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:objectInGraph ;
                        sp:arg1 [
                            sp:varName "transition" ;
                          ] ;
                        sp:arg2 teamwork:toStatus ;
                        sp:arg3 [
                            sp:varName "wg" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "toStatus" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "Change " ;
                        sp:arg2 [
                            a ui:label ;
                            sp:arg1 [
                                sp:varName "statusProperty" ;
                              ] ;
                          ] ;
                        sp:arg3 " to '" ;
                        sp:arg4 [
                            a ui:label ;
                            sp:arg1 [
                                sp:varName "toStatus" ;
                              ] ;
                          ] ;
                        sp:arg5 "'" ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:transition ;
      spl:valueType teamwork:ResourceStatusTransition ;
      rdfs:comment "The transition to get the label of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:workflowTemplate ;
      spl:valueType teamwork:ResourceWorkflowTemplate ;
      rdfs:comment "The current workflow template." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "resource status transition target label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:resourceUnderWorkflowForCurrentUser
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          (
            (
              (
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:workflowsGraph ;
                    ] ;
                  sp:variable [
                      sp:varName "wg" ;
                    ] ;
                ]
              )
              [
                sp:object [
                    sp:varName "projectGraph" ;
                  ] ;
                sp:predicate rdf:first ;
                sp:subject [
                    sp:varName "?0" ;
                  ] ;
              ]
              [
                sp:object [
                    sp:varName "?1" ;
                  ] ;
                sp:predicate rdf:rest ;
                sp:subject [
                    sp:varName "?0" ;
                  ] ;
              ]
              [
                sp:object teamwork:ResourceWorkflowTemplate ;
                sp:predicate rdf:first ;
                sp:subject [
                    sp:varName "?1" ;
                  ] ;
              ]
              [
                sp:object () ;
                sp:predicate rdf:rest ;
                sp:subject [
                    sp:varName "?1" ;
                  ] ;
              ]
              [
                sp:object [
                    sp:varName "template" ;
                  ] ;
                sp:predicate teamwork:suitableWorkflowTemplateForProject ;
                sp:subject [
                    sp:varName "?0" ;
                  ] ;
              ]
              [
                a sp:NamedGraph ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "resourceType" ;
                        ] ;
                      sp:predicate teamwork:applicableResourceType ;
                      sp:subject [
                          sp:varName "template" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "statusProperty" ;
                        ] ;
                      sp:predicate teamwork:statusProperty ;
                      sp:subject [
                          sp:varName "template" ;
                        ] ;
                    ]
                  ) ;
                sp:graphNameNode [
                    sp:varName "wg" ;
                  ] ;
              ]
            )
            [
              a sp:TriplePath ;
              sp:object [
                  sp:varName "resourceType" ;
                ] ;
              sp:path [
                  a sp:ModPath ;
                  sp:modMax -2 ;
                  sp:modMin 0 ;
                  sp:subPath rdfs:subClassOf ;
                ] ;
              sp:subject [
                  sp:varName "type" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "type" ;
                ] ;
              sp:predicate rdf:type ;
              sp:subject [
                  sp:varName "resource" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a spl:objectInGraph ;
                  sp:arg1 [
                      sp:varName "resource" ;
                    ] ;
                  sp:arg2 [
                      sp:varName "statusProperty" ;
                    ] ;
                  sp:arg3 spin:_arg1 ;
                ] ;
              sp:variable [
                  sp:varName "status" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "status" ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "transition" ;
                              ] ;
                            sp:predicate teamwork:transition ;
                            sp:subject [
                                sp:varName "template" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "status" ;
                              ] ;
                            sp:predicate teamwork:fromStatus ;
                            sp:subject [
                                sp:varName "transition" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode [
                          sp:varName "wg" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a teamwork:currentUserCanPerformResourceStatusTransition ;
                          arg:resource [
                              sp:varName "resource" ;
                            ] ;
                          arg:teamGraph [
                              a teamwork:teamGraph ;
                              sp:arg1 spin:_arg1 ;
                            ] ;
                          arg:transition [
                              sp:varName "transition" ;
                            ] ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all resources from a given vocabulary (left hand side) as values of an unbound variable (right hand side) that are under any resource workflow in the base graph of the current query graph, and where the current user has permissions to change the status. The current query graph is assumed to be the project graph with imports." ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:roleLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://topbraid.org/teamwork> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The role property to get the label of." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Convenience method that gets the human readable label of a role property. The special trick is to ask the right query graph." ;
  rdfs:label "role label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:roleProperty
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object teamwork:role ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 1 ;
                      sp:subPath rdfs:subPropertyOf ;
                    ] ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://topbraid.org/teamwork> ;
          ]
        ) ;
    ] ;
  rdfs:comment "Gets a list of all sub-properties of teamwork:role, from the teamwork graph." ;
  rdfs:label "role property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:rolesGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <http://topbraid.org/teamwork> ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the base URI (as a Resource) of the graph containing the roles defined for this TopBraid Live server." ;
  rdfs:label "roles graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:singularProjectTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate teamwork:singularLabel ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The project type." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets a label describing a given project type, such as \"Taxonomy\" or \"Ontology\"." ;
  rdfs:label "singular project type label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:skosConstraintsLibrary
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "baseURI" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  (
                    (
                      [
                        sp:object [
                            sp:varName "?0" ;
                          ] ;
                        sp:predicate <http://www.topbraid.org/tops#files> ;
                        sp:subject [
                            sp:varName "file" ;
                          ] ;
                      ]
                      [
                        sp:object "/" ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?1" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object true ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?2" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object true ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?2" ;
                          ] ;
                      ]
                      [
                        sp:object () ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?2" ;
                          ] ;
                      ]
                      [
                        a sp:Filter ;
                        sp:expression [
                            a sp:and ;
                            sp:arg1 [
                                a sp:contains ;
                                sp:arg1 [
                                    sp:varName "file" ;
                                  ] ;
                                sp:arg2 ".spin." ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a fn:ends-with ;
                                    sp:arg1 [
                                        sp:varName "file" ;
                                      ] ;
                                    sp:arg2 ".tbc" ;
                                  ] ;
                              ] ;
                          ] ;
                      ]
                    )
                    [
                      a sp:Bind ;
                      sp:expression [
                          a smf:baseURI ;
                          sp:arg1 [
                              sp:varName "file" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "baseURI" ;
                        ] ;
                    ]
                  )
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "baseURI" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://topbraid.org/spin/evnconstraints> ;
                    sp:variable [
                        sp:varName "baseURI" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://topbraid.org/skos.shapes> ;
                    sp:variable [
                        sp:varName "baseURI" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets all SKOS constraints libraries in the current workspace. The graph (URI resource) will be bound on the right." ;
  rdfs:label "SKOS constraints library" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:suitableWorkflowTemplateForProject
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "workflowTemplate" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:workflowsGraph ;
              ] ;
            sp:variable [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object spin:_arg2 ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "type" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "type" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "workflowTemplate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "wg" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isSuitableWorkflowTemplateForProject ;
                arg:projectGraph spin:_arg1 ;
                arg:workflowTemplate [
                    sp:varName "workflowTemplate" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType teamwork:Vocabulary ;
      rdfs:comment "The vocabulary." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The required rdf:type of the template." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:WorkflowTemplate ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:tagById
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a fn:concat ;
                    sp:arg1 "urn:x-tags:" ;
                    sp:arg2 [
                        sp:varName "tagId" ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the tag to get." ;
    ] ;
  spin:returnType teamwork:Tag ;
  rdfs:comment "Gets the Tag (resource) for a given id." ;
  rdfs:label "tag by id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tagCountWithStatus
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object teamwork:Tag ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:status ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The status to get the count for." ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:label "tag count with status" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tagId
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:string ;
                sp:arg1 [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "str" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 12 ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to get the id of." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the id of a given tag (resource) - the part after urn:x-tags:." ;
  rdfs:label "tag id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tagIdFromTagGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "tagId" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a xsd:string ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "str" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 "urn:x-evn-tag:" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "str" ;
                  ] ;
                sp:arg2 15 ;
              ] ;
            sp:variable [
                sp:varName "base" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 [
                    sp:varName "base" ;
                  ] ;
                sp:arg2 ":" ;
              ] ;
            sp:variable [
                sp:varName "colIndex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "base" ;
                  ] ;
                sp:arg2 [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "colIndex" ;
                      ] ;
                    sp:arg2 2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "end" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 [
                    sp:varName "end" ;
                  ] ;
                sp:arg2 ":" ;
              ] ;
            sp:variable [
                sp:varName "i" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:substring ;
                sp:arg1 [
                    sp:varName "end" ;
                  ] ;
                sp:arg2 1 ;
                sp:arg3 [
                    sp:varName "i" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The graph URI to get the id of." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Extracts the part of a graph URI after urn:x-evn-tag:XY: but without the user id (which must exist)." ;
  rdfs:label "tag id from tag graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tagLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "A SPIN function that delivers the label of a tag without the overhead of having to switch context graphs etc." ;
  rdfs:label "tag label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tagLabelWithWorkflow
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:getTagWorkflowTemplate ;
                      arg:workflow [
                          sp:varName "tag" ;
                        ] ;
                      arg:z [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "template" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                sp:arg1 [
                    sp:varName "template" ;
                  ] ;
                sp:arg2 [
                    a teamwork:workflowsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "wfl" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "wfl" ;
                  ] ;
                sp:arg2 ": " ;
                sp:arg3 [
                    sp:varName "label" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Delivers the label of a tag together with the label of the workflow of said tag." ;
  rdfs:label "tag label with workflow" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:taggerTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "Content Tag Set" ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "tagger type label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:teamGraph
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI (resource) of the main file to get the team graph URI of." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """Delivers the base URI of the team graph (tch file) for a given base URI (?arg1).
 In a typical use case, the call sequence would be:

FILTER (teamwork:hasTeamGraph(?baseURI)) .
BIND (teamwork:teamGraph(?baseURI) AS ?teamGraph) .
...""" ;
  rdfs:label "team graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:textIndexId
  a spin:Function ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the ID that is used for the Lucene text index of the teamwork graphs by the SWP elements and SPARQL functions from the textindex namespace. The current value is \"teamwork\" but code should always go through this function to determine this because future versions may rename the index to avoid clashes after schema changes." ;
  rdfs:label "text index id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:unionGraphForCurrentUser
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:currentUserName ;
              ] ;
            sp:variable [
                sp:varName "userName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    a sp:concat ;
                    sp:arg1 "urn:x-evn-union:" ;
                    sp:arg2 [
                        sp:varName "userName" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Creates the graph URI for a virtual union graph consisting of all graphs under teamwork control that the current user has access to." ;
  rdfs:label "union graph for current user" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:unregisterTag
  a spin:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the graph to unregister the tag of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the tag to unregister." ;
    ] ;
  spin:private true ;
  rdfs:comment "Low level function to unregister a working copy after it has been deleted. Should only be used if safe." ;
  rdfs:label "unregister tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:userHasParty
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a smf:isUserAccount ;
                        arg:node [
                            sp:varName "party" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "party" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a smf:isRole ;
                          arg:resource [
                              sp:varName "party" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:roleName ;
                        arg:resource [
                            sp:varName "party" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "roleName" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "u" ;
                                ] ;
                              sp:predicate smf:roleHasUser ;
                              sp:subject [
                                  sp:varName "roleName" ;
                                ] ;
                            ]
                            [
                              a sp:Filter ;
                              sp:expression [
                                  a sp:eq ;
                                  sp:arg1 [
                                      sp:varName "u" ;
                                    ] ;
                                  sp:arg2 [
                                      sp:varName "user" ;
                                    ] ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:workflowsGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "wg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:and ;
                              sp:arg1 [
                                  a spl:instanceOf ;
                                  sp:arg1 [
                                      sp:varName "party" ;
                                    ] ;
                                  sp:arg2 edg:JobTitle ;
                                ] ;
                              sp:arg2 [
                                  a edg:hasAssignedJobTitle ;
                                  arg:person [
                                      sp:varName "user" ;
                                    ] ;
                                  arg:role [
                                      sp:varName "party" ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "wg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:party ;
      spl:valueType edg:WorkflowParticipant ;
      rdfs:comment "The party that the current user is matched against." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user resource." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given user is either equivalent to the given argument, or is member of the given security (LDAP) group or is assigned a job role that is given as argument." ;
  rdfs:label "user has party" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:userName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "name" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:userName ;
                sp:arg1 [
                    sp:varName "user" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "name" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType <http://rdfs.org/sioc/ns#UserAccount> ;
      rdfs:comment "The user to get the name of." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment """DEPRECATED: use either smf:userName() or smf:userDisplayName() instead.

Gets the name of a given user (resource).""" ;
  rdfs:label "user name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:userOrRoleOrJobTitle
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression spin:_arg1 ;
                    sp:variable [
                        sp:varName "result" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "result" ;
                      ] ;
                    sp:predicate smf:userRole ;
                    sp:subject spin:_arg1 ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:workflowsGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "wg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "result" ;
                            ] ;
                          sp:predicate edg:assignedJobTitle ;
                          sp:subject spin:_arg1 ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "wg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user to get the roles and job titles for." ;
    ] ;
  spin:private true ;
  rdfs:comment "For a given user, this returns the user itself plus its (LDAP) security roles and its job titles." ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:usersGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <http://server.topbraidlive.org/dynamic/users> ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the base URI (as a Resource) of the graph containing the registered users of this TopBraid Live server. Note that this is not teamwork:userDataGraph()." ;
  rdfs:label "users graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:workflowCustomizationsGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <urn:x-evn-workflows> ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the URI of the (system) graph holding the workflow customizations, i.e. the workflow instances edited by the user." ;
  rdfs:label "workflow customizations graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:workflowParticipantProperties
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "pg" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object edg:WorkflowParticipantProperty ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "property" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "pg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType edg:WorkflowParticipantProperty ;
  rdfs:comment "Gets all declared workflow participant properties from the platform governance graph." ;
  rdfs:label "workflow participant properties" ;
  rdfs:subClassOf spin:MagicProperties ;
.
teamwork:workflowsGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    a teamwork:workflowCustomizationsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Returns the named graph containing all Workflow templates. This includes the graph containing the editable workflows plus its owl:imports (which include the teamwork system namespace)." ;
  rdfs:label "workflows graph" ;
  rdfs:subClassOf spin:Functions ;
.
<http://topbraid.org/teamwork.spin>
  a owl:Ontology ;
  rdfs:comment "A collection of APIs implemented as SPIN modules that provide generic utility services operating on Teamwork (TCH) graphs." ;
  rdfs:label "Teamwork SPIN Modules" ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:imports <http://topbraid.org/compliance> ;
  owl:imports <http://topbraid.org/imported> ;
  owl:imports <http://topbraid.org/metadata> ;
  owl:imports <http://topbraid.org/solr> ;
  owl:imports <http://topbraid.org/teamwork> ;
  owl:imports <http://uispin.org/ui> ;
  sh:declare [
      a sh:PrefixDeclaration ;
      sh:namespace "http://topbraid.org/teamwork#"^^xsd:anyURI ;
      sh:prefix "teamwork" ;
    ] ;
.
