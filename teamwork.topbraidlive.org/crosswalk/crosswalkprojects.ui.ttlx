# baseURI: http://teamwork.topbraidlive.org/crosswalkprojects
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://topbraid.org/crosswalk
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/swa/crosswalkapp
# imports: http://topbraid.org/tasks.ui
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworknotifications
# prefix: crosswalkprojects

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:assetLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graph1
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graph2
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graphs
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:type1
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:type2
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://teamwork.topbraidlive.org/crosswalkprojects>
  a owl:Ontology ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://topbraid.org/crosswalk> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/swa/crosswalkapp> ;
  owl:imports <http://topbraid.org/tasks.ui> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworknotifications> ;
  owl:versionInfo "0.1.0" ;
.
crosswalkprojects:AutoAcceptMatchesManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 10 ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <teamwork:ActionLink arg:faIcon=\"fa-check\" arg:title=\"Auto accept 100% matches\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(spl:object(?projectGraph, crosswalk:autoAcceptMatches), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:setPropertyValue arg:property=\"{= crosswalk:autoAcceptMatches }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?projectGraph }\"/>
                </ui:handle>
            </input>
            <span>Problems and Suggestions report: Automatically accept all matches that have 100% confidence.</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Auto accept 100% matches" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
crosswalkprojects:CreateProjectGraphAndClassSelector
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:assetLabel ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphs ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A result set with graphs to show." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:index ;
      spl:valueType xsd:string ;
      rdfs:comment "1 or 2" ;
    ] ;
  ui:prototype """
<ui:group let:labelName=\"{= COALESCE(?assetLabel, ui:concat(&quot;Asset &quot;, ?index)) }\">
    <table>
        <tr>
            <swa:LabeledElement arg:label=\"{= ?labelName }\" arg:toolTip=\"One of the vocabularies containing the content being mapped.\">
                <td>
                    <select class=\"form-control\" id=\"graph{= ?index }\">
                        <option/>
                        <ui:forEach ui:resultSet=\"{= ?graphs }\">
                            <option value=\"&lt;{= ?graph }&gt;\">{= teamwork:graphLabel(?graph) }</option>
                        </ui:forEach>
                    </select>
                    <script>$(\"#graph{= ?index }\").change(function() {
				var graph = $(this).val();
				var params = {};
				if(graph &amp;&amp; graph != '') {
					params.graph = graph;
				}
				swa.load(\"typeSelection{= ?index }\", params);
			});</script>
                </td>
                <td>
                    <swa:Spaces/>
                </td>
                <td>
                    <ui:loadable ui:loadId=\"typeSelection{= ?index }\">
                        <ui:if ui:condition=\"{= bound(?graph) }\">
                            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graph) }\">
                                <swa:LabeledElement arg:label=\"Entity Type (Class) {= ?index }\">
                                    <swa:AutoComplete arg:categoryFunction=\"{= swa:categoryByNamespace }\" arg:id=\"type{= ?index }\" arg:type=\"{= rdfs:Class }\"/>
                                </swa:LabeledElement>
                            </ui:setContext>
                        </ui:if>
                    </ui:loadable>
                </td>
            </swa:LabeledElement>
        </tr>
    </table>
    <br/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Create project graph and class selector" ;
  rdfs:subClassOf swa:Elements ;
.
crosswalkprojects:CreateProjectPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:typeLabel=\"{= teamwork:singularProjectTypeLabel(crosswalkprojects:ProjectType) }\">
    <teamwork:Chrome arg:pageType=\"create-project-page\" arg:projectType=\"{= ?projectType }\">
        <h1>Create New {= ?typeLabel }</h1>
        <p>This creates a new {= ?typeLabel } with yourself as the manager.</p>
        <br/>
        <form action=\"swp\" let:spinImports=\"{= spl:objectInGraph(?projectType, teamwork:spinImports, ui:graph) }\" letrs:graphs=\"{#
                SELECT ?graph
                WHERE {
                    rdf:nil teamwork:readableGraphsUnderTeamControl ( ?graph ?teamGraph ) .
                    BIND (teamwork:getProjectType(?graph) AS ?pt) .
                    FILTER ((?pt != crosswalkprojects:ProjectType) &amp;&amp; (?pt != taggerprojects:ProjectType)) .
                }
                ORDER BY (teamwork:projectLabel(?graph)) }\" onsubmit=\"return finish()\">
            <teamwork:CreateProjectLabelElement/>
            <br/>
            <swa:LabeledElement arg:label=\"Description\">
                <textarea class=\"form-control\" cols=\"80\" id=\"comment\" rows=\"4\"/>
            </swa:LabeledElement>
            <br/>
            <crosswalkprojects:CreateProjectGraphAndClassSelector arg:assetLabel=\"From\" arg:graphs=\"{= ?graphs }\" arg:index=\"1\"/>
            <crosswalkprojects:CreateProjectGraphAndClassSelector arg:assetLabel=\"To\" arg:graphs=\"{= ?graphs }\" arg:index=\"2\"/>
            <ui:if ui:condition=\"{= bound(?subjectArea) &amp;&amp; isIRI(?subjectArea) }\">
                <input name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?spinImports) }\">
                <input id=\"spinImports\" name=\"spinImports\" type=\"hidden\" value=\"{= ?spinImports }\"/>
            </ui:if>
            <br/>
            <teamwork:CreateProjectOptionsSection arg:noUriOptions=\"{= true }\"/>
            <input class=\"btn btn-default\" type=\"submit\" value=\"Finish\"/>
        </form>
        <script>function finish() {
				var label = $(\"#label-text\").val();
				if(!label || label == \"\") {
					swa.populateModalDialog(\"Missing label.\");
					return false;
				}
				var comment = $(\"#comment\").val();
	   			if(teamwork.isScript(comment)) {
					return false;
				}
				var graph1 = $(\"#graph1\").val();
				var type1 = $(\"#type1\").val();
				var graph2 = $(\"#graph2\").val();
				var type2 = $(\"#type2\").val();
				var subjectArea = $(\"input[name=subjectArea]\").val();
				var spinImports = $(\"#spinImports\").val();
				var dataPlatform = $(\"#data-platform-flag\").is(':checked');
				var luceneIndex = $('#lucene-index-flag').is(':checked');
				if(!graph1 || graph1 == \"\" || !graph2 || graph2 == \"\" ||
					!type1 || type1 == \"\" || !type2 || type2 == \"\") {
					swa.populateModalDialog(\"Missing required selection.\");
					return false;
				}
				var params = {
						comment : comment,
						name : label,
						graph1 : graph1,
						graph2 : graph2,
						subjectArea : subjectArea,
						spinImports : spinImports,
						dataPlatform : dataPlatform,
						luceneIndex : luceneIndex,
						type1 : type1,
						type2 : type2,
						_base : swa.queryGraphURI,
						_viewClass : \"crosswalkprojects:CreateProjectService\"
				};

				var $jqXHR = $.ajax({
					'url': swa.servlet,
					'method': 'post',
					'data': params
				});

				$.when(
					$jqXHR
				).done(function (data, textStatus, jqXHR) {
					if(data.error) {
						swa.populateModalDialog(data.error, 'Error', null);;
					}
					else {
						swa.populateModalDialog(data.response, null , null);
						document.location = data.redirectToURL;
					}
				}).fail(function (jqXHR, textStatus, errorThrown) {
					swa.populateModalDialog('Operation failed: ' + errorThrown, 'Operation failed', null);
				});

				return false;
			}</script>
    </teamwork:Chrome>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Create project page" ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
crosswalkprojects:CreateProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:luceneIndex ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:spinImports ;
      spl:valueType xsd:string ;
      rdfs:comment "The spin:imports to add by default." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataPlatform ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Flag indicating whether to use the Data Platform." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The value for crosswalk:graph1." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph2 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The value for crosswalk:graph2." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type1 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The value for crosswalk:type1." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type2 ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The value for crosswalk:type2." ;
    ] ;
  ui:prototype """
<teamwork:createProject arg:comment=\"{= ?comment }\" arg:dataPlatform=\"{= COALESCE(?dataPlatform, false) }\" arg:name=\"{= ?name }\" arg:owlImports=\"http://topbraid.org/crosswalk\" arg:projectType=\"{= crosswalkprojects:ProjectType }\" arg:spinImports=\"{= ?spinImports }\">
    <ui:group let:graph=\"{= teamwork:masterGraph(?graphId) }\">
        <ui:setContext ui:queryGraph=\"{= ?graph }\" ui:silentTransactions=\"{= true }\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?graph owl:imports ?graph1 .
                            ?graph owl:imports ?graph2 .
                            ?graph crosswalk:graph1 ?graph1 .
                            ?graph crosswalk:graph2 ?graph2 .
                            ?graph crosswalk:type1 ?type1 .
                            ?graph crosswalk:type2 ?type2 .
                            ?graph edg:subjectArea ?subjectArea .
                        }
                        WHERE {
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
        <teamwork:CreateProjectPlugins arg:projectGraph=\"{= ?graph }\" arg:teamGraph=\"{= teamwork:teamGraph(?graph) }\"/>
        <ui:if ui:condition=\"{= ?luceneIndex }\">
            <!-- When the config setting is moved from the safconfig graph to the project graph itself, this will need to be reworked, so leaving it inline for now-->
            <ui:group let:pg=\"{= teamwork:masterGraph(?graphId) }\">
                <safconfig:BulkAddGraph arg:checked=\"{= true }\" arg:graph=\"{= ?pg }\"/>
            </ui:group>
        </ui:if>
    </ui:group>
    <swon:Object>
        <swon:Value arg:name=\"response\" arg:value=\"Successfully created {= teamwork:singularProjectTypeLabel(crosswalkprojects:ProjectType) } with id '{= ?graphId }'.\"/>
        <swon:Value arg:name=\"id\" arg:value=\"{= ?graphId }\"/>
        <swon:Value arg:name=\"redirectToURL\" arg:value=\"{= teamwork:editorLink(teamwork:masterGraph(?graphId)) }\"/>
    </swon:Object>
</teamwork:createProject>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Create project service" ;
  rdfs:subClassOf teamwork:LabelAndCommentService ;
.
crosswalkprojects:Crosswalk
  a rdfs:Class ;
  rdfs:label "Crosswalk" ;
  rdfs:subClassOf teamwork:Vocabulary ;
.
crosswalkprojects:CrosswalkSpreadsheetImportPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>Import Crosswalk from Spreadsheet</h1>
    <p>
			This feature takes a spreadsheet file (e.g. Excel or Tab-Separated Values format) as input
			where one column contains the primary keys of the \"From\" class (left hand side)
			and another column contain the primary keys of the \"To\" class (right hand side).
			The importer uses these values to create mapping between all matching existing terms.
		</p>
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:type1=\"{= spl:object(?projectGraph, crosswalk:type1) }\" let:type2=\"{= spl:object(?projectGraph, crosswalk:type2) }\">
            <ui:if ui:condition=\"{= swa:hasPrimaryKey(?type1) &amp;&amp; swa:hasPrimaryKey(?type2) }\">
                <p>Select a spreadsheet to import a crosswalk from.</p>
                <form action=\"importCrosswalkFromSpreadsheet\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                    <input name=\"file\" onchange=\"document.getElementById('submitButton').removeAttribute('disabled');\" type=\"file\"/>
                    <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                    <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                    <br/>
                    <teamwork:SpreadsheetFileTypesList/>
                    <br/>
                    <p>
                        <span>Index of \"from\" column: </span>
                        <input class=\"form-control crosswalkprojects-crosswalk-spreadsheet-import-page-width\" name=\"col0\" type=\"text\" value=\"1\"/>
                    </p>
                    <p>
                        <span>Index of \"to\" column: </span>
                        <input class=\"form-control crosswalkprojects-crosswalk-spreadsheet-import-page-width\" name=\"col1\" type=\"text\" value=\"2\"/>
                    </p>
                    <p title=\"Excel sheets are numbered starting at 1 for the leftmost sheet.\">
                        <span>Sheet index (for Excel, optional): </span>
                        <input class=\"form-control crosswalkprojects-crosswalk-spreadsheet-import-page-width\" name=\"sheetIndex\" type=\"text\"/>
                    </p>
                    <input id=\"submitButton\" onclick=\"handleSubmit()\" type=\"submit\" value=\"Finish\"/>
                    <swa:Space/>
                    <span id=\"loader\"/>
                </form>
            </ui:if>
            <ui:else>
                <div>Sorry, this feature requires that both classes in the crosswalk define primary keys.</div>
            </ui:else>
        </ui:group>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Crosswalk spreadsheet import page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
crosswalkprojects:CrosswalkSpreadsheetImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= crosswalkprojects:CrosswalkSpreadsheetImportPage }\">
    <teamwork:ActionLink arg:comment=\"Loads a given spreadsheet file that has the primary keys of the items in the crosswalk as two columns.\" arg:icon=\"lib/teamwork/build/images/teamwork/import-scheme-spreadsheet.svg\" arg:link=\"{= ?link }\" arg:title=\"Import Crosswalk from Spreadsheet\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Import crosswalk from spreadsheet plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
crosswalkprojects:CrosswalksGeneralPlugin
  a teamwork:GeneralPlugin ;
  ui:prototype """
<ui:group letrs:crosswalks=\"{#
        SELECT DISTINCT ?graph ?graphLabel
        WHERE {
            {
                rdf:nil teamwork:readableGraphsUnderTeamControl ( ?graph ?tg ) .
                FILTER (teamwork:getProjectType(?graph) = crosswalkprojects:ProjectType) .
            } .
            GRAPH ?graph {
                ?graph crosswalk:graph1|crosswalk:graph2 ?projectGraph .
            } .
            BIND (teamwork:projectLabel(?graph) AS ?graphLabel) .
        }
        ORDER BY (?graphLabel) }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?crosswalks) }\">
        <teamwork:ActionLink arg:comment=\"Crosswalks containing this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }:\" arg:icon=\"lib/teamwork/build/images/teamwork/crosswalk.svg\" arg:title=\"Crosswalks\">
            <ul>
                <ui:forEach ui:resultSet=\"{= ?crosswalks }\">
                    <li>
                        <a href=\"{= teamwork:editorLink(?graph) }\">{= ?graphLabel }</a>
                    </li>
                </ui:forEach>
            </ul>
        </teamwork:ActionLink>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Crosswalks plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
crosswalkprojects:CrosswalksMatchPredicatePlugin
  a teamwork:ManagePlugin ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:group let:isEdg=\"{= spl:objectInGraph(?projectType, rdf:type, ui:unionGraph) }\" let:manager=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
        <teamwork:ActionLink arg:comment=\"The custom match predicate is an optional override to change the match predicate away from crosswalk:closeMatch.  If this is changed, any previously matched entries tied to the old match predicate will no longer appear in the UI.\" arg:dataEdgProject=\"{= ?isEdg }\" arg:dataProjectType=\"{= ?projectType }\" arg:dataUri=\"{= ?projectGraph }\" arg:faIcon=\"fa-tags\" arg:title=\"Custom Match Predicate\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                <div let:loadId=\"match-predicate-loadable\">
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                        <swa:LabeledElement arg:label=\"Match Predicate\">
                            <swa:AutoComplete arg:allowURIs=\"{= true }\" arg:id=\"autoCompleteProp\" arg:initialValue=\"{= spl:object(?projectGraph, crosswalk:matchPredicate) }\" arg:onSelect=\"swa.loadWithResource('{= ?loadId }', 'newProperty', resource);\" arg:type=\"{= rdf:Property }\"/>
                        </swa:LabeledElement>
                        <ui:loadable ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= false }\">
                            <ui:if ui:condition=\"{= bound(?newProperty) &amp;&amp; (!EXISTS {
                                ?projectGraph crosswalk:matchPredicate ?newProperty .
                            }) }\">
                                <ui:setContext ui:silentTransactions=\"{= true }\">
                                    <ui:setPropertyValue arg:property=\"{= crosswalk:matchPredicate }\" arg:value=\"{= IRI(?newProperty) }\" ui:this=\"{= ?projectGraph }\"/>
                                </ui:setContext>
                            </ui:if>
                        </ui:loadable>
                    </ui:setContext>
                </div>
            </ui:setContext>
        </teamwork:ActionLink>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Crosswalks plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
crosswalkprojects:CrosswalksMatchingResultsGeneratorPlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectType" ;
        ] ;
      sp:arg2 crosswalkprojects:ProjectType ;
    ] ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:group let:isEdg=\"{= spl:objectInGraph(?projectType, rdf:type, ui:unionGraph) }\" let:manager=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
        <teamwork:ActionLink arg:comment=\"Selects the generator to be used for the Problems and Suggestions report.\" arg:dataEdgProject=\"{= ?isEdg }\" arg:dataProjectType=\"{= ?projectType }\" arg:dataUri=\"{= ?projectGraph }\" arg:faIcon=\"fa-list\" arg:title=\"Problems and Suggestions Generator\">
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                <div let:selectId=\"{= ui:uniqueId() }\">
                    <swa:LabeledElement arg:label=\"Available generators:\">
                        <select class=\"form-control\" id=\"{= ?selectId }\">
                            <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                                <ui:forEach ui:resultSet=\"{#
                                        SELECT *
                                        WHERE {
                                            ?matcher a crosswalk:ResultsGenerator .
                                            ?matcher rdfs:label ?matcherLabel .
                                            ?matcher crosswalk:resultsGeneratorId ?matcherId .
                                        } }\">
                                    <option selected=\"{= IF((spl:objectInGraph(?projectGraph, crosswalk:customMatchingResultsGeneratorId, ?projectGraph) = ?matcherId), &quot;selected&quot;, ?nil) }\" value=\"{= ?matcherId }\">{= ?matcherLabel }</option>
                                </ui:forEach>
                            </ui:setContext>
                            <ui:handle arg:newValue=\"'&quot;'+$('#{= ?selectId }').val()+'&quot;'\" ui:event=\"onchange\">
                                <ui:setContext ui:queryGraph=\"{= ?projectGraph }\" ui:silentTransactions=\"{= true }\">
                                    <ui:setPropertyValue arg:property=\"{= crosswalk:customMatchingResultsGeneratorId }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?projectGraph }\"/>
                                </ui:setContext>
                            </ui:handle>
                        </select>
                    </swa:LabeledElement>
                </div>
            </ui:setContext>
        </teamwork:ActionLink>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Crosswalk Matching Results Generator Plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
crosswalkprojects:EditableImports
  a teamwork:EditableImportsTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate tops:files ;
                    sp:subject [
                        sp:varName "file" ;
                      ] ;
                  ]
                  [
                    sp:object "/" ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:baseURI ;
                        sp:arg1 [
                            sp:varName "file" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:isImportableGraph ;
                        arg:file [
                            sp:varName "file" ;
                          ] ;
                        arg:graph [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          <http://datashapes.org/schema>
                        )
                        (
                          <http://spinrdf.org/spl>
                        )
                        (
                          <http://www.w3.org/2004/02/skos/core>
                        )
                      ) ;
                    sp:varNames (
                        "graph"
                      ) ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a teamwork:hasTeamGraph ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:projectLabel ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Editable imports" ;
  rdfs:subClassOf teamwork:EditableImportsTemplates ;
.
crosswalkprojects:ExportCrosswalkPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 10 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink ui:format=\"csv\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\" ui:servlet=\"template/crosswalk/AllRows\">
    <teamwork:ActionLink arg:comment=\"Creates a comma-separated spreadsheet containing one row for each mapping in this Crosswalk.\" arg:icon=\"lib/teamwork/build/images/teamwork/concept-overview-spreadsheet.svg\" arg:link=\"{= ?link }\" arg:title=\"Export Crosswalk as a Spreadsheet\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Export crosswalk as a spreadsheet plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
crosswalkprojects:ProjectSummary
  a teamwork:ProjectSummary ;
  ui:private true ;
  ui:prototype """
<div class=\"teamworkSubTitle\">
    <ui:group let:graph=\"{= spl:object(?projectGraph, crosswalk:graph1) }\" let:type=\"{= spl:object(?projectGraph, crosswalk:type1) }\">
        <span>Mapping&nbsp;</span>
        <span class=\"teamwork-main-class\">{= swa:labelInGraph(?type, ui:graphWithImports(?graph)) }</span>
        <span>&nbsp;from&nbsp;</span>
        <span class=\"teamwork-main-class\">
            <a href=\"{= teamwork:editorLink(?graph) }\">{= teamwork:projectLabel(?graph) }</a>
        </span>
    </ui:group>
    <ui:group let:graph=\"{= spl:object(?projectGraph, crosswalk:graph2) }\" let:type=\"{= spl:object(?projectGraph, crosswalk:type2) }\">
        <span>&nbsp;to&nbsp;</span>
        <span class=\"teamwork-main-class\">{= swa:labelInGraph(?type, ui:graphWithImports(?graph)) }</span>
        <span>&nbsp;from&nbsp;</span>
        <span class=\"teamwork-main-class\">
            <a href=\"{= teamwork:editorLink(?graph) }\">{= teamwork:projectLabel(?graph) }</a>
        </span>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:comment "Displays the two mapped graphs and classes." ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
crosswalkprojects:ProjectType
  a teamwork:ProjectType ;
  teamwork:createProjectPageClass crosswalkprojects:CreateProjectPage ;
  teamwork:customHeaderInsert crosswalkapp:CustomHeaderInsert ;
  teamwork:dashboardGadget tasks:TaskStatusDashboardGadget ;
  teamwork:dashboardGadget teamwork:TagStatusDashboardGadget ;
  teamwork:defaultLayout "CrosswalkLayout" ;
  teamwork:deletePlugin teamwork:RemoveFromLuceneIndexDeletePlugin ;
  teamwork:editableImportsTemplate crosswalkprojects:EditableImports ;
  teamwork:editorProjectTabLabel "Mappings" ;
  teamwork:isLinkProjectType true ;
  teamwork:newEditorInitService "crosswalkapp:GraphInitDataJSON" ;
  teamwork:owlImports "http://topbraid.org/crosswalk http://topbraid.org/crosswalkconstraints" ;
  teamwork:pluralLabel "Crosswalks" ;
  teamwork:projectEditorClass crosswalkapp:Application ;
  teamwork:projectPlugin crosswalkprojects:AutoAcceptMatchesManagePlugin ;
  teamwork:projectPlugin crosswalkprojects:CrosswalkSpreadsheetImportPlugin ;
  teamwork:projectPlugin crosswalkprojects:CrosswalksMatchPredicatePlugin ;
  teamwork:projectPlugin crosswalkprojects:ExportCrosswalkPlugin ;
  teamwork:projectPlugin savedQueries:ExportSavedSPARQLQueriesPlugin ;
  teamwork:projectPlugin savedQueries:SPARQLEndpointPlugin ;
  teamwork:projectPlugin teamwork:ComparisonReportPlugin ;
  teamwork:projectPlugin teamwork:GeneralPlugins ;
  teamwork:projectPlugin teamwork:GraphURIPlugin ;
  teamwork:projectPlugin teamwork:ImportedByGeneralPlugin ;
  teamwork:projectPlugin teamwork:NotificationsManagePlugin ;
  teamwork:projectPlugin teamwork:ProblemsAndSuggestionsReportPlugin ;
  teamwork:projectPlugin teamwork:PublishExportPlugin ;
  teamwork:projectPlugin teamwork:RDFFileImporterPlugin ;
  teamwork:projectPlugin teamwork:ScriptBasedImportPlugin ;
  teamwork:projectPlugin teamwork:SetSimpleSearchModePlugin ;
  teamwork:projectSummaryClass crosswalkprojects:ProjectSummary ;
  teamwork:projectTypeWeight 10 ;
  teamwork:singularLabel "Crosswalk" ;
  teamwork:skippedResultsGenerator "SHACL" ;
  teamwork:supportedNotification teamwork:FileImportedNotification ;
  teamwork:supportedNotification teamwork:TagCreatedNotification ;
  teamwork:supportedNotification teamwork:TagStatusChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyClearedNotification ;
  teamwork:supportedNotification teamwork:VocabularyStatusChangedNotification ;
  teamwork:vocabularyType crosswalkprojects:Crosswalk ;
  rdfs:comment "Crosswalks store connections between items into two different vocabularies/assets. Connections always use a predefined property: crosswalk:closeMatch." ;
  rdfs:label "Crosswalk project type" ;
.
