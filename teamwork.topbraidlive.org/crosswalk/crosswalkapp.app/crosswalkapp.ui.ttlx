# baseURI: http://topbraid.org/swa/crosswalkapp
# imports: http://topbraid.org/crosswalk
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# prefix: crosswalkapp

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:ontology
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:parentProperty
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:parentPropertyInverse
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:preselectedResource
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:rootClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:source
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tree
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:treeInverse
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:treeProperty
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://topbraid.org/swa/crosswalkapp>
  a owl:Ontology ;
  rdfs:comment "A table-centric editor application for instance datasets." ;
  owl:imports <http://topbraid.org/crosswalk> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "0.1.0" ;
.
crosswalkapp:AddValueHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue crosswalk:closeMatch ;
      spl:optional true ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional comment, will create a reified triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject node." ;
    ] ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Add {= ui:label(?subject) } {= ui:label(?predicate) } {= ui:label(?object) }\">
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subject ?predicate ?object .
            }
            WHERE {
            } }\"/>
    <ui:if ui:condition=\"{= bound(?comment) }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?s a rdf:Statement .
                    ?s rdf:subject ?subject .
                    ?s rdf:predicate ?predicate .
                    ?s rdf:object ?object .
                    ?s rdfs:comment ?comment .
                }
                WHERE {
                    BIND (BNODE() AS ?s) .
                } }\"/>
    </ui:if>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Add value handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
crosswalkapp:Application
  a ui:NodeClass ;
  teamwork:faIcon "indent" ;
  ui:headIncludes """
<title>{= teamwork:graphLabel(teamwork:masterGraph(teamwork:currentGraphId())) } Editor</title>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:projectGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\">
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <ui:setContext let:frozen=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen() }\" let:inUse=\"{= teamwork:IsProjectInUse(?projectGraph) }\" let:primaryKey=\"{= spl:primaryKeyProperty(?resourceType) }\" let:resourceSelectedEvent=\"org.crosswalkapp.resourceSelected\" ui:varName=\"swaAppName\" ui:varValue=\"Crosswalk,Editor{= IF(?frozen, &quot;,ReadOnly&quot;, ?none) }\">
            <ui:setContext ui:varName=\"projectTab\" ui:varValue=\"{= ?projectTab }\">
                <ui:setContext let:resourceType=\"{= COALESCE(?sourceType, spl:object(?projectGraph, crosswalk:type1)) }\" let:sourceGraph=\"{= spl:object(teamwork:currentMasterGraph(), IF(swa:falseOrUnbound(?inverse), crosswalk:graph1, crosswalk:graph2)) }\" ui:varName=\"crosswalkInverse\" ui:varValue=\"{= ?inverse }\">
                    <teamwork:EditorChrome arg:pageType=\"results-editor-page crosswalk-editor-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= COALESCE(?projectTab, teamwork:EditorProjectTab) }\" arg:projectType=\"{= ?projectType }\" arg:tag=\"{= teamwork:currentTag() }\" default:editable=\"{= !?frozen }\">
                        <ui:insert ui:into=\"header\">
                            <teamwork:EditorHeader arg:frozen=\"{= ?frozen }\" arg:pageType=\"results-editor-page crosswalk-editor-page\">
                                <ui:insert ui:into=\"buttons\">
                                    <crosswalkapp:CustomHeaderInsert arg:isOnEditorTab=\"{= true }\"/>
                                    <teamwork:UndoButton arg:hidden=\"{= ?frozen }\"/>
                                </ui:insert>
                            </teamwork:EditorHeader>
                        </ui:insert>
                        <ui:insert ui:into=\"main\">
                            <swa:Initializer/>
                            <crosswalkapp:Initializer arg:projectGraph=\"{= ?projectGraph }\"/>
                            <ui:group>
                                <teamwork:Filter arg:appType=\"crosswalk-search\" arg:resourceType=\"{= ?resourceType }\" arg:rootClass=\"{= ?resourceType }\"/>
                                <swa:SimpleDataTableResults arg:frozen=\"{= ?frozen }\" arg:hasFixedHeader=\"{= true }\"/>
                            </ui:group>
                        </ui:insert>
                    </teamwork:EditorChrome>
                </ui:setContext>
            </ui:setContext>
        </ui:setContext>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Application" ;
  rdfs:subClassOf teamwork:EditorApplications ;
.
crosswalkapp:CustomHeaderInsert
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <button class=\"btn btn-default btn-xs\" onclick=\"crosswalkapp.toggleDirection()\" title=\"Toggle direction\">&harr;</button>
    <ui:if ui:condition=\"{= !?isOnEditorTab }\">
        <crosswalkapp:Initializer arg:projectGraph=\"{= ?projectGraph }\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Custom header insert" ;
  rdfs:subClassOf teamwork:CustomHeaderInserts ;
.
crosswalkapp:DeleteValueHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue crosswalk:closeMatch ;
      spl:optional true ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject node." ;
    ] ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Delete {= ui:label(?subject) } {= ui:label(?predicate) } {= ui:label(?object) }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?subject ?predicate ?object .
            }
            WHERE {
            } }\"/>
    <ui:update ui:updateQuery=\"{!
            DELETE WHERE {
                ?s a rdf:Statement .
                ?s rdf:subject ?subject .
                ?s rdf:predicate ?predicate .
                ?s rdf:object ?object .
                ?s rdfs:comment ?comment .
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Delete value handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
crosswalkapp:EditorHeader
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:ontology ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The owl:Ontology of the dataset." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of objects being edited." ;
    ] ;
  ui:prototype """
<teamwork:EditorHeader arg:frozen=\"{= ?frozen }\" arg:suppressUndo=\"{= true }\">
    <ui:insert ui:into=\"buttons\">
        <crosswalkapp:CustomHeaderInsert arg:isOnEditorTab=\"{= true }\"/>
    </ui:insert>
</teamwork:EditorHeader>
"""^^ui:Literal ;
  rdfs:label "Editor header" ;
  rdfs:subClassOf teamwork:EditorHeader ;
.
crosswalkapp:GetColumnsJSON
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:inverse ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:ontology=\"{= teamwork:currentMasterGraph() }\">
    <swon:Array let:inverse=\"{= COALESCE(?inverse, false) }\" let:sourceGraph=\"{= spl:object(?ontology, IF(?inverse, crosswalk:graph2, crosswalk:graph1)) }\" let:sourceType=\"{= spl:object(?ontology, IF(?inverse, crosswalk:type2, crosswalk:type1)) }\" let:targetGraph=\"{= spl:object(?ontology, IF(?inverse, crosswalk:graph1, crosswalk:graph2)) }\" let:targetType=\"{= spl:object(?ontology, IF(?inverse, crosswalk:type1, crosswalk:type2)) }\">
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"label\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"name\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"path\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"preventEdit\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"inverse\" arg:value=\"{= ?inverse }\"/>
            <swon:Value arg:name=\"sourceGraph\" arg:value=\"{= teamwork:graphIdFromGraph(?sourceGraph) }\"/>
            <swon:Value arg:name=\"matchTemplate\" arg:value=\"http://topbraid.org/crosswalk#CloseMatchesAndLabels\"/>
            <swon:Value arg:name=\"matchPredicate\" arg:value=\"{= COALESCE(spl:object(?ontology, crosswalk:matchPredicate), crosswalk:closeMatch) }\"/>
            <swon:Value arg:name=\"targetGraphURI\" arg:value=\"{= ui:graphWithImports(?targetGraph) }\"/>
            <swon:Value arg:name=\"targetGraph\" arg:value=\"{= teamwork:graphIdFromGraph(?targetGraph) }\"/>
            <swon:Value arg:name=\"targetType\" arg:value=\"{= ?targetType }\"/>
            <swon:Value arg:name=\"closeMatchColName\" arg:value=\"{= spif:localName(?targetType) }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"{= ui:label(?sourceType) } ({= ui:label(spl:object(?ontology, IF(?inverse, crosswalk:graph2, crosswalk:graph1))) })\"/>
            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?sourceType) } ({= ui:label(spl:object(?ontology, IF(?inverse, crosswalk:graph2, crosswalk:graph1))) })\"/>
            <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:getProjectType(?sourceGraph) }\"/>
            <swon:Value arg:name=\"name\" arg:value=\"label\"/>
            <swon:Value arg:name=\"sourceTypeQName\" arg:value=\"{= smf:qname(?sourceType) }\"/>
            <swon:Value arg:name=\"sourceType\" arg:value=\"{= ?sourceType }\"/>
            <swon:Value arg:name=\"data\" arg:value=\"label\"/>
            <swon:Value arg:name=\"maxCount\" arg:value=\"1\"/>
            <swon:Value arg:name=\"path\" arg:value=\"label\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"preventEdit\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"sourceGraph\" arg:value=\"{= teamwork:graphIdFromGraph(?sourceGraph) }\"/>
        </swon:Object>
        <ui:if ui:condition=\"{= swa:hasPrimaryKey(?sourceType) }\">
            <swon:Object>
                <swon:Value arg:name=\"title\" arg:value=\"{= ui:label(swa:primaryKeyProperty(?sourceType)) }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(swa:primaryKeyProperty(?sourceType)) }\"/>
                <swon:Value arg:name=\"name\" arg:value=\"{= spif:localName(swa:primaryKeyProperty(?sourceType)) }\"/>
                <swon:Value arg:name=\"data\" arg:value=\"{= spif:localName(swa:primaryKeyProperty(?sourceType)) }\"/>
                <swon:Value arg:name=\"path\" arg:value=\"{= ui:label(swa:primaryKeyProperty(?sourceType)) } \"/>
                <swon:Value arg:name=\"maxCount\" arg:value=\"1\"/>
                <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"otherType\" arg:value=\"true\"/>
                <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"preventEdit\" arg:value=\"{= true }\"/>
            </swon:Object>
        </ui:if>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"{= ui:label(?targetType) } ({= ui:label(spl:object(?ontology, IF(?inverse, crosswalk:graph1, crosswalk:graph2))) })\"/>
            <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?targetType) } ({= ui:label(spl:object(?ontology, IF(?inverse, crosswalk:graph1, crosswalk:graph2))) })\"/>
            <swon:Value arg:name=\"name\" arg:value=\"{= spif:localName(?targetType) }\"/>
            <swon:Value arg:name=\"path\" arg:value=\"{= spif:localName(?targetType) }\"/>
            <swon:Value arg:name=\"data\" arg:value=\"{= spif:localName(?targetType) }\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"targetType\" arg:value=\"{= ?targetType }\"/>
            <swon:Value arg:name=\"crosswalkMatchCol\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"render\" arg:value=\"crosswalkColumn\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"excludedFromQuery\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"matchTemplate\" arg:value=\"http://topbraid.org/crosswalk#CloseMatchesAndLabels\"/>
            <swon:Value arg:name=\"matchPredicate\" arg:value=\"{= COALESCE(spl:object(?ontology, crosswalk:matchPredicate), crosswalk:closeMatch) }\"/>
            <swon:Value arg:name=\"targetGraphURI\" arg:value=\"{= ui:graphWithImports(?targetGraph) }\"/>
            <swon:Value arg:name=\"targetGraph\" arg:value=\"{= teamwork:graphIdFromGraph(?targetGraph) }\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf ui:JSONServices ;
.
crosswalkapp:GraphInitDataJSON
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<swon:Object let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:tag=\"{= teamwork:currentTag() }\">
    <teamwork:GraphInitDataJSONPart/>
    <swon:Value arg:name=\"crosswalk\">
        <swon:Object let:graph1=\"{= spl:object(?projectGraph, crosswalk:graph1) }\" let:graph2=\"{= spl:object(?projectGraph, crosswalk:graph2) }\" let:matchPredicate=\"{= COALESCE(spl:object(?projectGraph, crosswalk:matchPredicate), crosswalk:closeMatch) }\" let:type1=\"{= spl:object(?projectGraph, crosswalk:type1) }\" let:type2=\"{= spl:object(?projectGraph, crosswalk:type2) }\">
            <ui:group let:queryGraph1=\"{= ui:graphWithImports(?graph1) }\" let:queryGraph2=\"{= ui:graphWithImports(?graph2) }\">
                <swon:Value arg:name=\"graph\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ui:currentQueryGraph() }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"graphLabel\">
                    <swon:Object>
                        <swon:Value arg:name=\"lex\" arg:value=\"{= ui:label(?projectGraph) }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"graph1\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?graph1 }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"graph1Label\">
                    <swon:Object>
                        <swon:Value arg:name=\"lex\" arg:value=\"{= swa:labelInGraph(?graph1, ?graph1) }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"graph2\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?graph2 }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"graph2Label\">
                    <swon:Object>
                        <swon:Value arg:name=\"lex\" arg:value=\"{= swa:labelInGraph(?graph2, ?graph2) }\"/>
                    </swon:Object>
                </swon:Value>
                <ui:group let:type1Label=\"{= swa:labelInGraph(?type1, ?queryGraph1) }\" let:type2Label=\"{= swa:labelInGraph(?type2, ?queryGraph2) }\">
                    <swon:Value arg:name=\"type1\">
                        <swon:Object>
                            <swon:Value arg:name=\"uri\" arg:value=\"{= ?type1 }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ?type1Label }\"/>
                        </swon:Object>
                    </swon:Value>
                    <swon:Value arg:name=\"type2\">
                        <swon:Object>
                            <swon:Value arg:name=\"uri\" arg:value=\"{= ?type2 }\"/>
                            <swon:Value arg:name=\"label\" arg:value=\"{= ?type2Label }\"/>
                        </swon:Object>
                    </swon:Value>
                    <swon:Value arg:name=\"type1Label\">
                        <swon:Object>
                            <swon:Value arg:name=\"lex\" arg:value=\"{= ?type1Label }\"/>
                        </swon:Object>
                    </swon:Value>
                    <swon:Value arg:name=\"type2Label\">
                        <swon:Object>
                            <swon:Value arg:name=\"lex\" arg:value=\"{= ?type2Label }\"/>
                        </swon:Object>
                    </swon:Value>
                </ui:group>
                <swon:Value arg:name=\"matchPredicate\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?matchPredicate }\"/>
                    </swon:Object>
                </swon:Value>
                <swon:Value arg:name=\"matchPredicateLabel\">
                    <swon:Object>
                        <swon:Value arg:name=\"lex\" arg:value=\"{= ui:label(?matchPredicate) }\"/>
                    </swon:Object>
                </swon:Value>
                <ui:group let:type1PK=\"{= swa:primaryKeyPropertyInGraph(?type1, ?queryGraph1) }\">
                    <ui:if ui:condition=\"{= bound(?type1PK) }\">
                        <swon:Value arg:name=\"type1PkProp\">
                            <swon:Object>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= ?type1PK }\"/>
                            </swon:Object>
                        </swon:Value>
                        <swon:Value arg:name=\"type1PkPropLabel\">
                            <swon:Object>
                                <swon:Value arg:name=\"lex\" arg:value=\"{= swa:labelInGraph(?type1PK, ?queryGraph1) }\"/>
                            </swon:Object>
                        </swon:Value>
                        <swon:Value arg:name=\"type1PkName\">
                            <swon:Object>
                                <swon:Value arg:name=\"lex\" arg:value=\"{= graphql:fieldName(?type1, ?type1PK) }\"/>
                            </swon:Object>
                        </swon:Value>
                    </ui:if>
                </ui:group>
                <ui:group let:type2PK=\"{= swa:primaryKeyPropertyInGraph(?type2, ?queryGraph2) }\">
                    <ui:if ui:condition=\"{= bound(?type2PK) }\">
                        <swon:Value arg:name=\"type2PkProp\">
                            <swon:Object>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= ?type2PK }\"/>
                            </swon:Object>
                        </swon:Value>
                        <swon:Value arg:name=\"type2PkPropLabel\">
                            <swon:Object>
                                <swon:Value arg:name=\"lex\" arg:value=\"{= swa:labelInGraph(?type2PK, ?queryGraph2) }\"/>
                            </swon:Object>
                        </swon:Value>
                        <swon:Value arg:name=\"type2PkName\">
                            <swon:Object>
                                <swon:Value arg:name=\"lex\" arg:value=\"{= graphql:fieldName(?type2, ?type2PK) }\"/>
                            </swon:Object>
                        </swon:Value>
                    </ui:if>
                </ui:group>
            </ui:group>
        </swon:Object>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "Produces JSON needed to initialize a TBApplication with things like languages and namespace prefixes." ;
  rdfs:subClassOf ui:JSONServices ;
.
crosswalkapp:Init
  a ui:Script ;
  ui:dependsOn teamwork:LibraryBundle ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\">
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <ui:group let:hasLicense=\"{= crosswalkapp:hasValidLicense(?projectType) }\">
            <ui:if ui:condition=\"{= bound(?hasLicense) &amp;&amp; (?hasLicense = true) }\">
                <meta content=\"crosswalkapp:Init\" name=\"crosswalk-init-bundle-start\"/>
                <script src=\"{= ui:lib() }/teamwork/build/crosswalk.bundle.js\"/>
                <meta content=\"crosswalkapp:Init\" name=\"crosswalk-init-bundle-end\"/>
            </ui:if>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Init" ;
  rdfs:subClassOf ui:Scripts ;
.
crosswalkapp:Initializer
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen() }\">
        <script>crosswalkapp.readOnly = true;</script>
    </ui:if>
    <script>crosswalkapp.graph1Label = '{= ui:label(spl:object(?projectGraph, crosswalk:graph1)) }';
		crosswalkapp.graph2Label = '{= ui:label(spl:object(?projectGraph, crosswalk:graph2)) }';
		crosswalkapp.type1 = '{= spl:object(?projectGraph, crosswalk:type1) }';
		crosswalkapp.type2 = '{= spl:object(?projectGraph, crosswalk:type2) }';
		crosswalkapp.type1Label = '{= ui:label(spl:object(?projectGraph, crosswalk:type1)) }';
		crosswalkapp.type2Label = '{= ui:label(spl:object(?projectGraph, crosswalk:type2)) }';
		crosswalkapp.selectedPredicate = '{= str(crosswalk:closeMatch) }';</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Initializer" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
crosswalkapp:hasValidLicense
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:hasProjectTypeLicense ;
                sp:arg1 crosswalkprojects:ProjectType ;
              ] ;
            sp:variable [
                sp:varName "lic" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "lic" ;
                  ] ;
                sp:arg2 true ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "has valid license" ;
  rdfs:subClassOf swa:Functions ;
.
teamwork:InitBundle
  ui:dependsOn crosswalkapp:Init ;
.
rdf:Property
  ui:instanceView """
<teamwork:SimplePropertyFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= IF(swa:hasCurrentAppName(&quot;Ontology&quot;), 0, ?none) }\"/>
"""^^ui:Literal ;
.
owl:DatatypeProperty
  ui:instanceView """
<teamwork:SimpleDatatypePropertyFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= IF(swa:hasCurrentAppName(&quot;Ontology&quot;), 0, ?none) }\"/>
"""^^ui:Literal ;
.
