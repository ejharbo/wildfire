# baseURI: http://topbraid.org/teamworktransforms
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

teamwork:AddableClassSelectionPanel
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:loadable let:buttonId=\"{= ui:uniqueId() }\" ui:loadId=\"{= COALESCE(?loadId, ui:uniqueId()) }\" ui:loadOnDemand=\"{= bound(?loadId) }\">
    <swa:AutoComplete arg:categoryFunction=\"{= swa:categoryByNamespace }\" arg:hiddenInputClass=\"classAutoComplete\" arg:id=\"{= ui:uniqueId() }\" arg:onSelect=\"$('#{= ?buttonId }').prop('disabled', false)\" arg:type=\"{= rdfs:Class }\"/>
    <swa:Space/>
    <button disabled=\"disabled\" id=\"{= ?buttonId }\">Add another</button>
    <script>$('#{= ?buttonId }').click(function() { $(this).hide();swa.load('{= ?loadId }-next') })</script>
    <div style=\"height: 8px\"/>
    <teamwork:AddableClassSelectionPanel arg:loadId=\"{= ?loadId }-next\"/>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:label "Addable class selection panel" ;
  rdfs:subClassOf ui:ViewElements ;
.
teamwork:CopyOrMoveInstancesPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:move ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to move." ;
    ] ;
  ui:private true ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:TransformProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>{= IF(?move, \"Move\", \"Copy\") } Instances from Other Asset Collection</h1>
    <p>
		This will transfer all statements that have the instances of the selected classes (and their subclasses) as their subject. It will not transfer any dependent blank nodes, nor any statements that are included from other graphs.
	</p>
    <p class=\"text-danger\">Warnings - please read carefully before proceeding:</p>
    <ul class=\"text-danger\" let:ptl=\"{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\">
        <ui:if ui:condition=\"{= ?move }\">
            <li class=\"text-danger\">Moving instances will also modify the production copy of the selected other asset collection.</li>
        </ui:if>
        <ui:else>
            <li class=\"text-danger\">Copying instances may cause duplicate statements if the source graph is included into the current {= ?ptl }.</li>
        </ui:else>
        <li class=\"text-danger\">References between assets may break if you do not also copy associated assets.</li>
        <li class=\"text-danger\">You should only transfer instances of classes that are also defined in the current {= ?ptl }.</li>
        <li class=\"text-danger\">This operation may produce a large overhead in the change history, if many instances are added.</li>
        <ui:if ui:condition=\"{= !teamwork:isOntology(?projectGraph) }\">
            <li class=\"text-danger\">Adding classes, properties or shapes into this {= ?ptl } is unsupported.</li>
        </ui:if>
    </ul>
    <br/>
    <p>
        <div>
            <label for=\"sourceGraphSelect\">Source asset collection</label>
            <br/>
            <select class=\"form-control\" id=\"sourceGraphSelect\">
                <option disabled=\"disabled\" selected=\"selected\">Select source asset collection</option>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?sourceGraph ?label ?typeLabel ?editable
                        WHERE {
                            rdf:nil teamwork:readableGraphsUnderTeamControl ( ?sourceGraph ?tch ) .
                            BIND (teamwork:graphLabel(?sourceGraph) AS ?label) .
                            BIND (teamwork:getProjectType(?sourceGraph) AS ?pt) .
                            BIND (teamwork:singularProjectTypeLabel(?pt) AS ?typeLabel) .
                            FILTER ((!?move) || smf:canWrite(?sourceGraph)) .
                            FILTER NOT EXISTS {
                                GRAPH ui:graph {
                                    ?pt teamwork:isLinkProjectType true .
                                } .
                            } .
                            FILTER (?sourceGraph != ?projectGraph) .
                        }
                        ORDER BY (?label) }\">
                    <option value=\"{= ?sourceGraph }\">{= ?label } ({= ?typeLabel })</option>
                </ui:forEach>
            </select>
            <script>$('#sourceGraphSelect').change(function() { swa.loadWithResource('classSelectionPanel', 'sourceGraph', $(this).val()) })</script>
            <p>
                <br/>
            </p>
            <ui:loadable ui:loadId=\"classSelectionPanel\" ui:loadOnDemand=\"{= true }\">
                <label for=\"classesTreePanel\">{= IF(?move, \"Move\", \"Copy\") } Instances of</label>
                <br/>
                <ui:setContext ui:queryGraph=\"{= teamwork:getQueryGraph(?sourceGraph) }\">
                    <teamwork:AddableClassSelectionPanel/>
                </ui:setContext>
                <p>
                    <br/>
                    <button class=\"btn btn-primary\" id=\"finishButton\">Finish</button>
                    <script let:progressId=\"progress-{= ui:uniqueId() }\">$('#finishButton').click(function() {
						var types = \"\";
						$('.classAutoComplete').each((index, e) =&gt; {
							var val = $(e).val();
							if(val.length &gt; 0) {
								types += ' ' + val.substring(1, val.length - 1);
							}
						});
						if(types.length == 0) {
							swa.populateErrorModal('Please select at least one class', 'Not so fast')
						}
						else {
							types = types.substring(1);
							swa.populateConfirmDialogWithButton('Are you sure you want to {= IF(?move, \"move\", \"copy\") } all instances of the selected classes?', 'Confirm').
							then(function() {
								swa.openProgressMonitorDialog('{= ?progressId }', 'Transfer in progress', '{= IF(?move, \"Moving\", \"Copying\") } instances');
								swa.get('teamwork:CopyOrMoveInstancesService', { 
									move: {= ?move }, 
									types: types, 
									sourceGraph: '{= ?sourceGraph }', 
									_base: '{= teamwork:getQueryGraph(?projectGraph, ?tag) }',
									_progressId: '{= ?progressId }'
								}).
								then(data =&gt; {
									swa.loadWithResource('classSelectionPanel', 'sourceGraph', '{= ?sourceGraph }');
									swa.closeProgressMonitorDialog();
									swa.populateModalDialog('Completed transfer of ' + data.data.instanceCount + ' instances.', 'Transfer Completed');
								})
							})
						}
					})</script>
                </p>
            </ui:loadable>
        </div>
    </p>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Copy or move instances page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:CopyOrMoveInstancesPlugin
  a teamwork:TransformPlugin ;
  teamwork:pluginIndex 10 ;
  teamwork:pluginMayNotScale true ;
  teamwork:pluginValidExpression [
      a sp:notExists ;
      sp:elements (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate teamwork:isLinkProjectType ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:CopyOrMoveInstancesPage }\">
    <teamwork:ActionLink arg:comment=\"Copies or moves assets from other asset collections. &quot;Copy&quot; adds instances of selected classes from another asset collection into this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }. &quot;Move&quot; will also update the source asset collection by removing the instances from it. Executing &quot;Move&quot; requires editing permissions for the source asset collection.\" arg:faIcon=\"fa-people-carry\" arg:title=\"Copy or Move Instances from Other Asset Collection\">
        <div>
            <b>
                <a href=\"{= ?link }&amp;move=false\">Copy</a>
            </b>
            <swa:Spaces/>
            <b>
                <a href=\"{= ?link }&amp;move=true\">Move</a>
            </b>
        </div>
    </teamwork:ActionLink>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Copy or move instances plugin" ;
  rdfs:subClassOf teamwork:TransformPlugins ;
.
teamwork:CopyOrMoveInstancesService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:move ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to delete the instances from the source graph, once they have been added to the target graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The source graph containing the original instances. This must be the URI of a master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:types ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of URIs of the classes that shall have its instances copied or moved." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group letrs:ts='{#
        SELECT DISTINCT ?type ?typeLabel
        WHERE {
            BIND (ui:graphWithImports(?sourceGraph) AS ?ontology) .
            GRAPH ?ontology {
                ?typeURI spif:split ( ?types \" \" ) .
                BIND (IRI(?typeURI) AS ?baseType) .
                ?type (rdfs:subClassOf)* ?baseType .
                BIND (ui:label(?type) AS ?typeLabel) .
            } .
        }
        ORDER BY (?typeLabel) }'>
    <ui:setContext ui:silentTransactions=\"{= true }\">
        <ui:task ui:taskName=\"Transfering instances of {= spr:rowCount(?ts) } classes.\" ui:totalWork=\"{= 3 }\">
            <ui:setContext ui:queryGraph=\"{= ui:tempGraph }\">
                <ui:subTask ui:subTaskName=\"Collecting statements\" ui:work=\"{= 1 }\">
                    <ui:forEach ui:resultSet=\"{= ?ts }\">
                        <ui:update ui:updateQuery=\"{!
                                INSERT {
                                    ?s ?p ?o .
                                }
                                WHERE {
                                    GRAPH ?sourceGraph {
                                        ?s a ?type .
                                        ?s ?p ?o .
                                    } .
                                } }\"/>
                    </ui:forEach>
                </ui:subTask>
            </ui:setContext>
            <ui:subTask ui:subTaskName=\"Adding new statements\" ui:work=\"{= 1 }\">
                <ui:transaction ui:logMessage=\"{= IF(swa:falseOrUnbound(?move), &quot;Copy&quot;, &quot;Move&quot;) } instances of {= spr:rowCount(?ts) } classes from {= teamwork:graphLabel(?sourceGraph) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?s ?p ?o .
                            }
                            WHERE {
                                GRAPH ui:tempGraph {
                                    ?s ?p ?o .
                                } .
                            } }\"/>
                </ui:transaction>
            </ui:subTask>
            <ui:if ui:condition=\"{= ?move }\">
                <ui:subTask ui:subTaskName=\"Deleting old statements\" ui:work=\"{= 1 }\">
                    <ui:setContext ui:queryGraph=\"{= teamwork:getQueryGraph(?sourceGraph) }\">
                        <ui:transaction ui:logMessage=\"{= IF(swa:falseOrUnbound(?move), &quot;Copy&quot;, &quot;Move&quot;) } instances of {= spr:rowCount(?ts) } classes from {= teamwork:graphLabel(?sourceGraph) }\">
                            <ui:update ui:updateQuery=\"{!
                                    DELETE {
                                        ?s ?p ?o .
                                    }
                                    WHERE {
                                        GRAPH ui:tempGraph {
                                            ?s ?p ?o .
                                        } .
                                    } }\"/>
                        </ui:transaction>
                    </ui:setContext>
                </ui:subTask>
            </ui:if>
        </ui:task>
    </ui:setContext>
    <swon:Object>
        <swon:Value arg:name=\"instanceCount\" arg:value=\"{#
                SELECT (COUNT(DISTINCT ?s) AS ?instanceCount)
                WHERE {
                    GRAPH ui:tempGraph {
                        ?s ?p ?o .
                    } .
                } }\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Copy or move instances service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:ExecuteRulesPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:TransformProjectTab }\" arg:tag=\"{= ?tag }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:group let:canEdit=\"{= teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:editor, ?teamGraph) }\" let:dataGraph=\"{= ui:currentQueryGraph() }\">
        <h1>Rules of <em>{= teamwork:projectLabel(?projectGraph) }</em>
        </h1>
        <p>Rules can be deselected per graph that they are contained in. Deselecting a rules graph will also make all other triples from that graph invisible to the execution engine. The main (base) graph cannot be deselected.</p>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
            <ui:group letrs:graphs=\"{#
                    SELECT DISTINCT ?graph
                    WHERE {
                        {
                            ?shape sh:rule ?rule .
                            ( ?shape sh:rule ?rule ) tops:statementDefinedIn ?graphURI .
                        }
                        UNION
                        {
                            ?shape sh:values ?rule .
                            ( ?shape sh:values ?rule ) tops:statementDefinedIn ?graphURI .
                        }
                        UNION
                        {
                            ?prop (rdfs:subPropertyOf)* spin:rule .
                            ?shape ?prop ?rule .
                            ( ?shape ?prop ?rule ) tops:statementDefinedIn ?graphURI .
                        } .
                        FILTER bound(?graphURI) .
                        BIND (IRI(?graphURI) AS ?graph) .
                    }
                    ORDER BY (?graph) }\">
                <br/>
                <ui:if ui:condition=\"{= spr:isEmpty(?graphs) }\">
                    <div class=\"text-danger\">No rules have been defined.</div>
                </ui:if>
                <ui:else let:queryGraph=\"{= ui:currentQueryGraph() }\">
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:getQueryGraph(?projectGraph, ?tag)) }\">
                        <table>
                            <ui:forEach ui:resultSet=\"{= ?graphs }\">
                                <tr let:id=\"{= ui:uniqueId() }\">
                                    <td class=\"teamwork-shapes-page-shape-row-td\">
                                        <div class=\"checkbox\" style=\"margin-top: 0px !important\">
                                            <input checked=\"checked\" data-graph=\"{= ?graph }\" disabled=\"{= IF((?projectGraph = ?graph), &quot;disabled&quot;, ?none) }\" title=\"Rules graph enabled\" type=\"checkbox\"/>
                                        </div>
                                    </td>
                                    <td>
                                        <swa:LoadableFormSection arg:label=\"{= ui:label(?graph) }\" arg:loadId=\"{= ?id }\">
                                            <ui:loadable ui:loadId=\"{= ?id }\" ui:loadOnDemand=\"{= true }\">
                                                <ui:forEach ui:resultSet=\"{#
                                                        SELECT DISTINCT ?shape
                                                        WHERE {
                                                            GRAPH ?graph {
                                                                {
                                                                    ?shape sh:rule ?rule .
                                                                }
                                                                UNION
                                                                {
                                                                    ?shape sh:property/sh:values ?rule .
                                                                }
                                                                UNION
                                                                {
                                                                    GRAPH ?queryGraph {
                                                                        ?prop (rdfs:subPropertyOf)* spin:rule .
                                                                    } .
                                                                    ?shape ?prop ?rule .
                                                                } .
                                                            } .
                                                            BIND (ui:label(?shape) AS ?shapeLabel) .
                                                        }
                                                        ORDER BY (?shapeLabel) }\">
                                                    <teamwork:RulesPageShapeRow arg:shape=\"{= ?shape }\"/>
                                                </ui:forEach>
                                            </ui:loadable>
                                        </swa:LoadableFormSection>
                                    </td>
                                </tr>
                            </ui:forEach>
                        </table>
                        <hr/>
                        <ui:if ui:condition=\"{= ?canEdit }\">
                            <div class=\"checkbox\">
                                <input id=\"revertBox\" type=\"checkbox\" value=\"true\"/>
                                <span> Revert statements from previous rule executions that are no longer valid</span>
                            </div>
                            <br/>
                            <div class=\"checkbox\">
                                <input id=\"previewBox\" type=\"checkbox\" value=\"true\"/>
                                <span> Only <em>display</em> inferred statements without applying them</span>
                            </div>
                            <br/>
                            <button id=\"executeButton\">Execute Rules</button>
                            <ui:loadable ui:loadId=\"executeLoadable\" ui:loadOnDemand=\"{= true }\">
                                <br/>
                                <teamwork:ExecuteRulesService arg:preview=\"{= ?preview }\" arg:projectGraph=\"{= ?projectGraph }\" arg:removeGraphs=\"{= ?removeGraphs }\" arg:revertOldInferences=\"{= ?revertOldInferences }\" arg:tag=\"{= ?tag }\"/>
                            </ui:loadable>
                            <script>var button = $(\"#executeButton\");&#13;
button.click(function() {&#13;
	button.prop('disabled', true);&#13;
	var removeGraphs = \"\";&#13;
	$('input[type=checkbox]').each(function() {&#13;
		if(!this.checked) {&#13;
			var graph = $(this).attr(\"data-graph\");&#13;
			if(graph &amp;&amp; graph != \"\") {&#13;
				if(removeGraphs != \"\") {&#13;
					removeGraphs += \" \";&#13;
				}&#13;
				removeGraphs += graph;&#13;
			}&#13;
		}&#13;
	});&#13;
	var preview = document.getElementById('previewBox').checked;&#13;
	swa.load(\"executeLoadable\", {&#13;
		preview: preview,&#13;
		removeGraphs: '\"' + removeGraphs + '\"',&#13;
		revertOldInferences: document.getElementById('revertBox').checked &#13;
	});&#13;
});</script>
                        </ui:if>
                        <ui:else>
                            <div class=\"text-danger\">Edit permissions are needed to execute rules.</div>
                        </ui:else>
                    </ui:setContext>
                </ui:else>
            </ui:group>
        </ui:setContext>
    </ui:group>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:ExecuteRulesPlugin
  a teamwork:TransformPlugin ;
  teamwork:pluginIndex 5 ;
  teamwork:pluginMayNotScale true ;
  teamwork:pluginValidExpression true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ExecuteRulesPage }\">
    <teamwork:ActionLink arg:comment=\"Executes SHACL and/or SPIN rules that are defined for the current {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-execute-rules.svg\" arg:link=\"{= ?link }\" arg:title=\"Execute Rules\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Execute rules plugin" ;
  rdfs:subClassOf teamwork:TransformPlugins ;
.
teamwork:ExecuteRulesService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:preview ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to only perform a dry run of the rules, printing the inferences to the screen without actually inferring." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:revertOldInferences ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to remove any previously inferred triples that are not among the new inferences." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:removeGraphs ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of graph URIs that shall be removed from the query graph." ;
    ] ;
  ui:prototype """
<ui:setContext ui:silentTransactions=\"{= true }\">
    <ui:try let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:if ui:condition=\"{= ?revertOldInferences }\">
            <!-- Here we collect all previously added triples from any known teamwork:Change marked by its log comment -->
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        GRAPH ui:tempGraphOld {
                            ?subject ?predicate ?object .
                        } .
                    }
                    WHERE {
                        GRAPH ?teamGraph {
                            {
                                ?change rdfs:comment &quot;Executed rules&quot; .
                                ?change a teamwork:Change .
                                FILTER IF(bound(?tag), (EXISTS {
                                    ?change teamwork:tag ?tag .
                                } || NOT EXISTS {
                                    ?change teamwork:tag ?anyTag .
                                }), NOT EXISTS {
                                    ?change teamwork:tag ?anyTag .
                                }) .
                            } .
                            ?change teamwork:added ?triple .
                            ?triple teamwork:subject ?subject .
                            ?triple teamwork:predicate ?predicate .
                            ?triple teamwork:object ?object .
                        } .
                    } }\"/>
        </ui:if>
        <ui:setContext ui:removeQueryGraphs=\"{= ?removeGraphs }\">
            <sml:ApplyTopSPIN sml:replace=\"{= true }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            GRAPH ui:tempGraph {
                                ?s ?p ?o .
                            } .
                        }
                        WHERE {
                            ?s ?p ?o .
                        } }\"/>
            </sml:ApplyTopSPIN>
            <sml:ApplySHACLRules sml:replace=\"{= true }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            GRAPH ui:tempGraph {
                                ?s ?p ?o .
                            } .
                        }
                        WHERE {
                            ?s ?p ?o .
                        } }\"/>
            </sml:ApplySHACLRules>
        </ui:setContext>
        <ui:if ui:condition=\"{= swa:falseOrUnbound(?preview) }\">
            <ui:transaction ui:logMessage=\"Executed rules\">
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?s ?p ?o .
                        }
                        WHERE {
                            GRAPH ui:tempGraphOld {
                                ?s ?p ?o .
                                FILTER NOT EXISTS {
                                    GRAPH ui:tempGraph {
                                        ?s ?p ?o .
                                    } .
                                } .
                            } .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?s ?p ?o .
                        }
                        WHERE {
                            GRAPH ui:tempGraph {
                                ?s ?p ?o .
                            } .
                        } }\"/>
            </ui:transaction>
        </ui:if>
        <ui:group let:count=\"{#
                SELECT (COUNT(*) AS ?count)
                WHERE {
                    GRAPH ui:tempGraph {
                        ?s ?p ?o .
                    } .
                } }\">
            <div>Rules have been executed, inferring {= ?count } triples.</div>
            <ui:if ui:condition=\"{= ?preview &amp;&amp; (?count &gt; 0) }\">
                <br/>
                <table>
                    <tr>
                        <th>Subject</th>
                        <th>Predicate</th>
                        <th>Object</th>
                    </tr>
                    <ui:forEach ui:resultSet=\"{#
                            SELECT ?s ?p ?o
                            WHERE {
                                GRAPH ui:tempGraph {
                                    ?s ?p ?o .
                                } .
                            }
                            ORDER BY (?s) (?p) (?o) }\">
                        <tr>
                            <td title=\"{= ?s }\">{= ui:label(?s) }&nbsp;&nbsp;&nbsp;</td>
                            <td title=\"{= ?p }\">{= ui:label(?p) }&nbsp;&nbsp;&nbsp;</td>
                            <td title=\"{= ?o }\">{= ui:label(?o) }</td>
                        </tr>
                    </ui:forEach>
                </table>
            </ui:if>
        </ui:group>
    </ui:try>
    <ui:catch>
        <div class=\"text-danger\">Failed to execute rules: {= ?exception }</div>
    </ui:catch>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Executes all SHACL or SPIN rules defined for the query graph and asserts the resulting triples. The query graph is specified using _base." ;
  rdfs:label "Execute rules service" ;
  rdfs:subClassOf teamwork:TagElements ;
.
<http://topbraid.org/teamworktransforms>
  a owl:Ontology ;
  rdfs:comment "Defines features from the Transform tab." ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
.
