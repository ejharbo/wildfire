# baseURI: http://topbraid.org/teamworknotifications
# imports: http://edg.topbraid.solutions/1.0/schema/governance/core
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://topbraid.org/status
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworkrules
# prefix: teamworknotifications

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:expression
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:notification
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
teamwork:AnyCodeStatusChangedNotification
  a teamwork:RegularEditNotification ;
  arg:expression [
      a teamwork:isPredicateInChangeGraphs ;
      arg:predicate edg:status ;
      sp:arg1 [
          sp:varName "none" ;
        ] ;
    ] ;
  ui:prototype """
<div let:predicate=\"{= edg:status }\">
    <ui:forEach let:label=\"{= swa:labelInGraph(?predicate, ui:graph) }\" ui:resultSet=\"{#
            SELECT DISTINCT ?subject
            WHERE {
                {
                    GRAPH ui:addedGraph {
                        ?subject ?predicate ?any1 .
                    } .
                }
                UNION
                {
                    GRAPH ui:deletedGraph {
                        ?subject ?predicate ?any2 .
                    } .
                } .
            } }\">
        <h3>Change of {= ?label } for code {= ui:label(?subject) }</h3>
        <ul let:newValue=\"{= spl:objectInGraph(?subject, ?predicate, ui:addedGraph) }\" let:oldValue=\"{= spl:objectInGraph(?subject, ?predicate, ui:deletedGraph) }\">
            <li>
                <span>Old {= ?label }:&nbsp;</span>
                <strong>{= IF(bound(?oldValue), swa:labelInGraph(?oldValue, ui:graph), \"-\") }</strong>
            </li>
            <li>
                <span>New {= ?label }:&nbsp;</span>
                <strong>{= IF(bound(?newValue), swa:labelInGraph(?newValue, ui:graph), \"-\") }</strong>
            </li>
        </ul>
    </ui:forEach>
</div>
"""^^ui:Literal ;
  rdfs:comment "Sent out about any change to the EDG status property at any asset." ;
  rdfs:label "Any code status changed" ;
  rdfs:subClassOf teamwork:RegularEditNotifications ;
.
teamwork:FileImportedNotification
  a teamwork:Notification ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The imported file name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:size ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of triples that were imported" ;
    ] ;
  ui:prototype """
<ui:group>
    <h3>A file has been imported</h3>
    <ul>
        <ui:if ui:condition=\"{= bound(?fileName) }\">
            <li>
                <span>File name: </span>
                <strong>{= ?fileName }</strong>
            </li>
        </ui:if>
        <li>
            <span>Size: </span>
            <strong>{= ?size } triples</strong>
        </li>
    </ul>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "File imported" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:MasterEditNotification
  a rdfs:Class ;
  rdfs:comment "Metaclass for notifications after direct edits to a master graph, especially those from the Metadata tab." ;
  rdfs:label "Master edit notification" ;
  rdfs:subClassOf teamworkrules:EditNotification ;
.
teamwork:MasterEditNotifications
  a teamwork:MasterEditNotification ;
  ui:abstract true ;
  rdfs:comment "Abstract base class of notifications based on edits to a master graph." ;
  rdfs:label "Metadata change notifications" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:MasterEditNotificationsRule
  a teamwork:MasterEditRule ;
  ui:prototype """
<ui:group let:projectGraph=\"{= ui:currentQueryGraph() }\" let:teamGraph=\"{= teamwork:teamGraph(ui:currentQueryGraph()) }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?notification
            WHERE {
                GRAPH ui:graph {
                    {
                        ?notification a teamwork:MasterEditNotification .
                        FILTER EXISTS {
                            GRAPH ?teamGraph {
                                ?notification teamwork:notificationRACIProperty ?anyProperty .
                            } .
                        } .
                    } .
                    ?notification arg:expression ?expression .
                    FILTER spin:eval(?expression, arg:projectGraph, ?projectGraph) .
                } .
            } }\">
        <ui:bind>
            <ui:stringify ui:varName=\"text\">
                <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?notification }\"/>
            </ui:stringify>
            <teamwork:sendNotifications ui:args=\"*\"/>
        </ui:bind>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A rule that fires after changes to a master graph, making sure that all notifications are sent out." ;
  rdfs:label "Master edit notifications rule" ;
  rdfs:subClassOf teamwork:MasterEditRules ;
.
teamwork:Notification
  a rdfs:Class ;
  rdfs:comment "The metaclass of notifcations." ;
  rdfs:label "Notification" ;
  rdfs:subClassOf ui:ViewElement ;
.
teamwork:NotificationRACIPropertyPlugin
  a ui:NodeClass ;
  ui:prototype """
<ui:if ui:condition=\"{= teamwork:isGraphStoreConfigured() }\">
    <tblui:Section arg:label=\"Default Notification Setup\">
        <teamwork:NotificationsRACISetupPanel/>
    </tblui:Section>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Notification RACI property plugin" ;
  rdfs:subClassOf teamworkconfig:ConfigSectionPlugins ;
.
teamwork:Notifications
  a teamwork:Notification ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary's main graph." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of all implemented Notifications." ;
  rdfs:label "Misc notifications" ;
  rdfs:subClassOf ui:ViewElements ;
.
teamwork:NotificationsConfigurationPage
  a ui:NodeClass ;
  ui:headIncludes """
<style>th { text-align: left; padding: 5px; }</style>
"""^^ui:Literal ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\">
    <h1>Configure Notifications for <em>{= teamwork:projectLabel(?projectGraph) }</em>
    </h1>
    <p/>
    <br/>
    <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <teamwork:NotificationsRACISetupPanel arg:projectType=\"{= teamwork:getProjectType(?projectGraph) }\"/>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:NotificationsManagePlugin
  a teamwork:ManagePlugin ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:NotificationsConfigurationPage }\">
    <teamwork:ActionLink arg:comment=\"Configures which notifications shall be sent for this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }.\" arg:faIcon=\"fa-envelope\" arg:link=\"{= ?link }\" arg:title=\"Configure Notifications\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Configure notifications plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:NotificationsRACISetupPanel
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The vocabulary type to filter against. If left empty, all notification will be shown, and an extra column with the supported vocabulary types." ;
    ] ;
  ui:prototype """
<ui:setContext let:graph=\"{= ui:currentQueryGraph() }\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:graph, teamwork:workflowsGraph()) }\">
    <table class=\"table table-compact table-nonfluid\" letrs:groups=\"{#
            SELECT DISTINCT ?group
            WHERE {
                ?metaClass (rdfs:subClassOf)* teamwork:Notification .
                ?group a ?metaClass .
                ?group ui:abstract true .
                FILTER EXISTS {
                    ?concrete rdfs:subClassOf ?group .
                    FILTER NOT EXISTS {
                        ?concrete ui:abstract true .
                    } .
                    FILTER EXISTS {
                        ?projectType teamwork:supportedNotification ?concrete .
                    } .
                } .
            }
            ORDER BY (ui:label(?group)) }\" letrs:properties=\"{#
            SELECT ?property
            WHERE {
                rdf:nil edg:workflowParticipantProperties ?property .
            } }\">
        <thead>
            <tr>
                <th rowspan=\"2\" style=\"vertical-align: top\">Notification Event</th>
                <th colspan=\"{= spr:rowCount(?properties) }\">Governance&nbsp;Roles&nbsp;to&nbsp;Notify&nbsp;&nbsp;&nbsp;</th>
                <ui:if ui:condition=\"{= !bound(?projectType) }\">
                    <th rowspan=\"2\" style=\"vertical-align: top\">Available for</th>
                </ui:if>
            </tr>
            <tr>
                <ui:forEach ui:resultSet=\"{= ?properties }\">
                    <th style=\"width: 36px; padding: 8px 1px; text-align: center;\" title=\"{= ui:label(?property) }\">{= edg:workflowParticipantPropertyAbbreviation(?property) }&nbsp;</th>
                </ui:forEach>
            </tr>
        </thead>
        <ui:forEach ui:resultSet=\"{= ?groups }\">
            <tbody>
                <tr>
                    <th class=\"text-nowrap\">{= ui:label(?group) }</th>
                </tr>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?notification
                        WHERE {
                            ?notification rdfs:subClassOf ?group .
                            FILTER NOT EXISTS {
                                ?notification ui:abstract true .
                            } .
                            FILTER EXISTS {
                                ?projectType teamwork:supportedNotification ?notification .
                            } .
                        }
                        ORDER BY (ui:label(?notification)) }\">
                    <tr>
                        <td class=\"text-nowrap\" title=\"{= spl:object(?notification, rdfs:comment) }\">{= ui:label(?notification) }</td>
                        <ui:forEach ui:resultSet=\"{= ?properties }\">
                            <td let:id=\"{= ui:uniqueId() }\">
                                <ui:setContext ui:queryGraph=\"{= ?graph }\">
                                    <input checked=\"{= IF(EXISTS {
                                        ?notification teamwork:notificationRACIProperty ?property .
                                    }, &quot;checked&quot;, ?none) }\" id=\"{= ?id }\" type=\"checkbox\">
                                        <ui:handle arg:checked=\"$('#{= ?id }').is(':checked')\" ui:event=\"onclick\">
                                            <ui:setContext ui:silentTransactions=\"{= true }\">
                                                <ui:if ui:condition=\"{= ?checked }\">
                                                    <ui:addPropertyValue arg:property=\"{= teamwork:notificationRACIProperty }\" arg:value=\"{= ?property }\" ui:this=\"{= ?notification }\"/>
                                                </ui:if>
                                                <ui:else>
                                                    <ui:removePropertyValue arg:property=\"{= teamwork:notificationRACIProperty }\" arg:value=\"{= ?property }\" ui:this=\"{= ?notification }\"/>
                                                </ui:else>
                                            </ui:setContext>
                                        </ui:handle>
                                    </input>
                                </ui:setContext>
                            </td>
                        </ui:forEach>
                        <ui:if ui:condition=\"{= !bound(?projectType) }\">
                            <td>
                                <ui:forEach ui:resultSet=\"{#
                                        SELECT ?label
                                        WHERE {
                                            BIND (teamwork:product() AS ?product) .
                                            ?product teamwork:defaultProjectType ?pt .
                                            ?pt teamwork:supportedNotification ?notification .
                                            FILTER teamwork:hasProjectTypeLicense(?pt) .
                                            BIND (teamwork:pluralProjectTypeLabel(?pt) AS ?label) .
                                        }
                                        ORDER BY (?label) }\" ui:separator=\",  \">
                                    <span>{= ?label }</span>
                                </ui:forEach>
                            </td>
                        </ui:if>
                    </tr>
                </ui:forEach>
            </tbody>
        </ui:forEach>
    </table>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A panel displaying a table of events with RACI check boxes, essentially setting teamwork:notificationRACIProperty triples in the current graph. This can be applied to either the global config graph or a vocabulary-specific TCH graph." ;
  rdfs:label "Notifications RACI setup panel" ;
  rdfs:subClassOf ui:ViewElements ;
.
teamwork:RegularEditNotification
  a rdfs:Class ;
  rdfs:comment "Metaclass for notifications after edits to a vocabulary by regular means, i.e. through the user interface of the various editor applications by end users." ;
  rdfs:label "Regular edit notification" ;
  rdfs:subClassOf teamworkrules:EditNotification ;
.
teamwork:RegularEditNotifications
  a teamwork:RegularEditNotification ;
  ui:abstract true ;
  rdfs:label "Regular edit notifications" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:RegularEditNotificationsRule
  a teamwork:CommitRule ;
  a teamwork:EditRule ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\">
    <ui:group let:tagId=\"{= teamwork:currentTagId() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:if ui:condition=\"{= (!bound(?tagId)) &amp;&amp; bound(?teamGraph) }\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?notification
                    WHERE {
                        GRAPH ui:graph {
                            {
                                ?notification a teamwork:RegularEditNotification .
                                FILTER EXISTS {
                                    GRAPH ?teamGraph {
                                        ?notification teamwork:notificationRACIProperty ?anyProperty .
                                    } .
                                } .
                            } .
                            ?notification arg:expression ?expression .
                            FILTER spin:eval(?expression, arg:projectGraph, ?projectGraph) .
                        } .
                    } }\">
                <ui:bind>
                    <ui:stringify ui:varName=\"text\">
                        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?notification }\"/>
                    </ui:stringify>
                    <teamwork:sendNotifications ui:args=\"*\"/>
                </ui:bind>
            </ui:forEach>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A rule that fires after changes by end users via editing applications (buffering graphs), making sure that all notifications are sent out. Only applies to changes against the master graph." ;
  rdfs:label "Regular edit notifications rule" ;
  rdfs:subClassOf teamwork:EditRules ;
.
teamwork:SinglePropertyMasterEditNotificationsHelper
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property that may have changed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  ui:prototype """
<div let:label=\"{= swa:labelInGraph(?predicate, ui:graph) }\" let:newValue=\"{= spl:objectInGraph(?projectGraph, ?predicate, ui:addedGraph) }\" let:oldValue=\"{= spl:objectInGraph(?projectGraph, ?predicate, ui:deletedGraph) }\">
    <h3>{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } {= ?label } changed</h3>
    <ul>
        <li>
            <span>Old {= ?label }:&nbsp;</span>
            <strong>{= IF(bound(?oldValue), swa:labelInGraph(?oldValue, ui:graph), \"-\") }</strong>
        </li>
        <li>
            <span>New {= ?label }:&nbsp;</span>
            <strong>{= IF(bound(?newValue), swa:labelInGraph(?newValue, ui:graph), \"-\") }</strong>
        </li>
    </ul>
</div>
"""^^ui:Literal ;
  rdfs:label "Single property master edit notifications helper" ;
  rdfs:subClassOf ui:ViewElements ;
.
teamwork:SpreadsheetImportedNotification
  a teamwork:Notification ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The imported file name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:size ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of triples that were imported" ;
    ] ;
  ui:prototype """
<ui:group>
    <h3>A spreadsheet has been imported</h3>
    <ul>
        <li>
            <span>File name: </span>
            <strong>{= ?fileName }</strong>
        </li>
        <li>
            <span>Size: </span>
            <strong>{= ?size } triples</strong>
        </li>
    </ul>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Spreadsheet imported" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:TCHEditNotification
  a rdfs:Class ;
  rdfs:comment "A notification that is triggered by changes to a TCH graph." ;
  rdfs:label "TCH edit notification" ;
  rdfs:subClassOf teamworkrules:EditNotification ;
.
teamwork:TCHEditNotifications
  a teamwork:TCHEditNotification ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary's TCH graph." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract base class of TCH edit notifications." ;
  rdfs:label "TCH edit notifications" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:TCHEditNotificationsRule
  a teamwork:TCHEditRule ;
  ui:private true ;
  ui:prototype """
<ui:group let:projectGraph=\"{= IRI(SUBSTR(str(ui:currentQueryGraph()), 1, (STRLEN(str(ui:currentQueryGraph())) - 4))) }\" let:teamGraph=\"{= ui:currentQueryGraph() }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?notification
            WHERE {
                GRAPH ui:graph {
                    {
                        ?notification a teamwork:TCHEditNotification .
                        FILTER EXISTS {
                            GRAPH ?teamGraph {
                                ?notification teamwork:notificationRACIProperty ?anyProperty .
                            } .
                        } .
                    } .
                    ?notification arg:expression ?expression .
                    FILTER spin:eval(?expression, arg:projectGraph, ?projectGraph, arg:teamGraph, ?teamGraph) .
                } .
            } }\">
        <ui:bind>
            <ui:stringify ui:varName=\"text\">
                <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" arg:teamGraph=\"{= ?teamGraph }\" ui:class=\"{= ?notification }\"/>
            </ui:stringify>
            <teamwork:sendNotifications ui:args=\"*\"/>
        </ui:bind>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A rule that fires after changes to the TCH graph, making sure that all notifications are sent out." ;
  rdfs:label "TCH edit notification rule" ;
  rdfs:subClassOf teamwork:TCHEditRules ;
.
teamwork:TagCreatedNotification
  a teamwork:TCHEditNotification ;
  arg:expression [
      a sp:exists ;
      sp:elements (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:Tag ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:addedGraph ;
          ]
        ) ;
    ] ;
  ui:prototype """
<ui:group>
    <h3>Workflow started</h3>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?tag
            WHERE {
                GRAPH ui:addedGraph {
                    ?tag a teamwork:Tag .
                } .
            } }\">
        <p>
            <strong>
                <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:absolute=\"{= true }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                    <a href=\"{= ?link }\">View Working Copy {= teamwork:tagLabel(?projectGraph, ?tag) }</a>
                </ui:createLink>
            </strong>
        </p>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Workflow started" ;
  rdfs:subClassOf teamwork:TagNotifications ;
.
teamwork:TagNotifications
  a teamwork:TCHEditNotification ;
  ui:abstract true ;
  rdfs:label "Working copy notifications" ;
  rdfs:subClassOf teamwork:TCHEditNotifications ;
.
teamwork:TagStatusChangedNotification
  a teamwork:TCHEditNotification ;
  arg:expression [
      a sp:or ;
      sp:arg1 [
          a sp:exists ;
          sp:elements (
              [
                a sp:NamedGraph ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "status" ;
                        ] ;
                      sp:predicate teamwork:status ;
                      sp:subject [
                          sp:varName "tag" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:notExists ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "newlyCreated" ;
                                  ] ;
                                sp:predicate rdf:type ;
                                sp:subject [
                                    sp:varName "tag" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ]
                  ) ;
                sp:graphNameNode ui:addedGraph ;
              ]
            ) ;
        ] ;
      sp:arg2 [
          a sp:exists ;
          sp:elements (
              [
                a sp:NamedGraph ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "status" ;
                        ] ;
                      sp:predicate teamwork:status ;
                      sp:subject [
                          sp:varName "tag" ;
                        ] ;
                    ]
                  ) ;
                sp:graphNameNode ui:deletedGraph ;
              ]
            ) ;
        ] ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:forEach ui:resultSet=\"{#
            SELECT DISTINCT ?tag
            WHERE {
                {
                    GRAPH ui:addedGraph {
                        ?tag teamwork:status ?anyStatus1 .
                    } .
                }
                UNION
                {
                    GRAPH ui:deletedGraph {
                        ?tag teamwork:status ?anyStatus2 .
                    } .
                } .
            } }\">
        <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:absolute=\"{= true }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
            <h3>Workflow status of working copy <a href=\"{= ?link }\">{= teamwork:tagLabel(?projectGraph, ?tag) }</a> has changed</h3>
        </ui:createLink>
        <ul>
            <li let:oldValue=\"{= spl:objectInGraph(?tag, teamwork:status, ui:deletedGraph) }\">
                <span>Old status: </span>
                <strong>{= IF(bound(?oldValue), swa:labelInGraph(?oldValue, ui:graph), \"-\") }</strong>
            </li>
            <li let:newValue=\"{= spl:objectInGraph(?tag, teamwork:status, ui:addedGraph) }\">
                <span>New status: </span>
                <strong>{= IF(bound(?newValue), swa:labelInGraph(?newValue, ui:graph), \"-\") }</strong>
            </li>
        </ul>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Workflow status changed" ;
  rdfs:subClassOf teamwork:TagNotifications ;
.
teamwork:VocabularyClearedNotification
  a teamwork:Notification ;
  ui:prototype """
<ui:group>
    <h3>{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } has been cleared</h3>
    <p>All contents has been completely removed</p>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Cleared" ;
  rdfs:subClassOf teamwork:Notifications ;
.
teamwork:VocabularyEffectiveEndDateChangedNotification
  a teamwork:MasterEditNotification ;
  arg:expression [
      a teamwork:isPredicateInChangeGraphs ;
      arg:predicate metadata:effectiveEndDate ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
    ] ;
  ui:prototype """
<teamwork:SinglePropertyMasterEditNotificationsHelper arg:predicate=\"{= metadata:effectiveEndDate }\" arg:projectGraph=\"{= ?projectGraph }\"/>
"""^^ui:Literal ;
  rdfs:label "Effective end date changed" ;
  rdfs:subClassOf teamwork:MasterEditNotifications ;
.
teamwork:VocabularyEffectiveStartDateChangedNotification
  a teamwork:MasterEditNotification ;
  arg:expression [
      a teamwork:isPredicateInChangeGraphs ;
      arg:predicate metadata:effectiveStartDate ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
    ] ;
  ui:prototype """
<teamwork:SinglePropertyMasterEditNotificationsHelper arg:predicate=\"{= metadata:effectiveStartDate }\" arg:projectGraph=\"{= ?projectGraph }\"/>
"""^^ui:Literal ;
  rdfs:label "Effective start date changed" ;
  rdfs:subClassOf teamwork:MasterEditNotifications ;
.
teamwork:VocabularyStatusChangedNotification
  a teamwork:MasterEditNotification ;
  arg:expression [
      a teamwork:isPredicateInChangeGraphs ;
      arg:predicate metadata:status ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
    ] ;
  ui:prototype """
<teamwork:SinglePropertyMasterEditNotificationsHelper arg:predicate=\"{= metadata:status }\" arg:projectGraph=\"{= ?projectGraph }\"/>
"""^^ui:Literal ;
  rdfs:comment "Sends a notification whenever the status of a vocabulary changes, regardless of the value." ;
  rdfs:label "Status changed" ;
  rdfs:subClassOf teamwork:MasterEditNotifications ;
.
teamwork:emailsMagicProperty
  a rdf:Property ;
  rdfs:comment "Links classes with a MagicProperty that takes an instance of that class as its argument and returns a list of email addresses." ;
  rdfs:domain rdfs:Class ;
  rdfs:label "emails magic property" ;
  rdfs:range spin:MagicProperty ;
.
teamwork:notificationRACIProperty
  a rdf:Property ;
  rdfs:comment "Links a Notification (type) with the workflow participant properties that have been marked to be notified in the set up. These are called RACI properties for backwards compatibility to the days when only 4 hard-coded RACI properties existed." ;
  rdfs:domain teamwork:Notification ;
  rdfs:label "notification RACI property" ;
  rdfs:range edg:WorkflowParticipantProperty ;
.
teamwork:sendFileImportNotification
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The imported file name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to operate on. May actually include the user name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:size ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of triples that were imported" ;
    ] ;
  ui:prototype """
<ui:bind let:teamGraph=\"{= teamwork:teamGraph(teamwork:masterGraph(teamwork:graphIdFromGraph(?projectGraph))) }\">
    <ui:stringify ui:varName=\"text\">
        <teamwork:FileImportedNotification ui:args=\"*\"/>
    </ui:stringify>
    <teamwork:sendNotifications arg:notification=\"{= teamwork:FileImportedNotification }\" ui:args=\"*\"/>
</ui:bind>
"""^^ui:Literal ;
  rdfs:comment "This is called programmatically (from Java code)." ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:sendNotifications
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:notification ;
      spl:valueType teamwork:Notification ;
      rdfs:comment "The notification class." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to operate on." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:text ;
      spl:valueType xsd:string ;
      rdfs:comment "The body text." ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?property
        WHERE {
            GRAPH ?teamGraph {
                ?notification teamwork:notificationRACIProperty ?property .
            } .
        } }\">
    <ui:bind>
        <ui:stringify ui:varName=\"header\">
            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:absolute=\"{= true }\" ui:viewName=\"teamProject\">
                <h2>
                    <span>{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }:&nbsp;</span>
                    <a href=\"{= ?link }\">{= teamwork:projectLabel(?projectGraph) }</a>
                </h2>
            </ui:createLink>
        </ui:stringify>
        <ui:stringify ui:varName=\"footer\">
            <hr/>
            <p style=\"font-size: smaller\">You are receiving this email in your '{= swa:labelInGraph(?property, teamwork:workflowsGraph()) }' role at the {= teamwork:projectLabel(?projectGraph) } asset collection.</p>
        </ui:stringify>
        <ui:setContext let:body=\"{= ?header }{= ?text }{= ?footer }\" ui:queryGraph=\"{= IRI(CONCAT(str(ui:tempGraph), ui:uniqueId())) }\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT DISTINCT ?email
                    WHERE {
                        ( ?property ?projectGraph ) teamwork:partyInGovernanceRoleAtProjectGraph ?party .
                        ?party teamwork:workflowParticipantEmails ?email .
                    } }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?message a email:Message .
                            ?message email:subject ?title .
                            ?message email:body ?body .
                            ?message email:from ?from .
                            ?message email:to ?to .
                            ?from a email:Address .
                            ?from email:address ?sender .
                            ?to a email:Address .
                            ?to email:address ?email .
                        }
                        WHERE {
                            BIND (BNODE() AS ?message) .
                            BIND (BNODE() AS ?from) .
                            BIND (BNODE() AS ?to) .
                            BIND (teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) AS ?typeLabel) .
                            BIND (swa:labelInGraph(?notification, ui:graph) AS ?rawLabel) .
                            BIND (CONCAT(&quot;[TopBraid] Notification: &quot;, spif:replaceAll(?rawLabel, &quot;Vocabulary&quot;, ?typeLabel)) AS ?title) .
                            BIND (teamwork:getFromAddress() AS ?fromAddress) .
                            BIND (COALESCE(?fromAddress, &quot;noreply@topquadrant.com&quot;) AS ?sender) .
                        } }\"/>
            </ui:forEach>
            <sml:SendEMails/>
        </ui:setContext>
    </ui:bind>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:label "send notifications" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:sendProjectGraphNotification
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:notification ;
      spl:valueType teamwork:Notification ;
      rdfs:comment "The notification class." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to operate on." ;
    ] ;
  ui:prototype """
<ui:bind let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:stringify ui:varName=\"text\">
        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?notification }\"/>
    </ui:stringify>
    <teamwork:sendNotifications ui:args=\"*\"/>
</ui:bind>
"""^^ui:Literal ;
  rdfs:comment "\"Manually\" sends a given notification for a given project graph." ;
  rdfs:label "send project graph notification" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:sendSpreadsheetImportNotification
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The imported file name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to operate on." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:size ;
      spl:valueType xsd:integer ;
      rdfs:comment "The number of triples that were imported" ;
    ] ;
  ui:prototype """
<ui:bind let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:stringify ui:varName=\"text\">
        <teamwork:SpreadsheetImportedNotification ui:args=\"*\"/>
    </ui:stringify>
    <teamwork:sendNotifications arg:notification=\"{= teamwork:SpreadsheetImportedNotification }\" ui:args=\"*\"/>
</ui:bind>
"""^^ui:Literal ;
  rdfs:comment "This is called programmatically (from Java code)." ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:supportedNotification
  a rdf:Property ;
  rdfs:comment "Links a project type with the notification (classes) that shall be made available to chose from." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "supported notification" ;
  rdfs:range teamwork:Notification ;
.
teamwork:workflowParticipantEmails
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "email" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a smf:isUserAccount ;
                          arg:node spin:_arg1 ;
                        ] ;
                    ]
                  )
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:userEmail ;
                        arg:user spin:_arg1 ;
                      ] ;
                    sp:variable [
                        sp:varName "email" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "email" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a smf:isRole ;
                          arg:resource spin:_arg1 ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "user" ;
                      ] ;
                    sp:predicate smf:roleHasUser ;
                    sp:subject spin:_arg1 ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:userEmail ;
                        arg:user [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "email" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "email" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:workflowsGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "wg" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        (
                          [
                            a sp:Filter ;
                            sp:expression [
                                a spl:instanceOf ;
                                sp:arg1 spin:_arg1 ;
                                sp:arg2 edg:JobTitle ;
                              ] ;
                          ]
                        )
                        [
                          sp:object spin:_arg1 ;
                          sp:predicate edg:assignedJobTitle ;
                          sp:subject [
                              sp:varName "userAccount" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a teamwork:userEmail ;
                              arg:user [
                                  sp:varName "userAccount" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "email" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "email" ;
                                ] ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "wg" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType edg:Party ;
      rdfs:comment "The party to get the emails for." ;
    ] ;
  rdfs:comment "Walks through all email addresses for a given workflow participant." ;
  rdfs:subClassOf spin:MagicProperties ;
.
<http://topbraid.org/teamworknotifications>
  a owl:Ontology ;
  owl:imports <http://edg.topbraid.solutions/1.0/schema/governance/core> ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://topbraid.org/status> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworkrules> ;
.
teamworkrules:EditNotification
  a rdfs:Class ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:expression ;
      spl:valueType xsd:boolean ;
      rdfs:comment "A SPIN expression that must return true for the given ui:addedGraph and ui:deletedGraph so that the notification is produced." ;
    ] ;
  rdfs:comment "A notification based on edits to a graph. Each such Notification class must have an expression returning a boolean to evaluate whether the notification should be produced." ;
  rdfs:label "Edit notification" ;
  rdfs:subClassOf teamwork:Notification ;
.
