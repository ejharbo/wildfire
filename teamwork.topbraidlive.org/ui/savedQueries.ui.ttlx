# baseURI: http://teamwork.topbraidlive.org/ui/savedQueries
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# imports: http://uispin.org/swon
# prefix: savedQueries

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparql: <http://datashapes.org/sparql#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:pg
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:plainQuery
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:queryParams
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://teamwork.topbraidlive.org/ui/savedQueries>
  a owl:Ontology ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://uispin.org/swon> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
savedQueries:DeleteSPARQLQuery
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:setContext let:targetGraph=\"{= IRI(?graph) }\" ui:silentTransactions=\"{= true }\">
    <ui:try>
        <ui:setContext ui:queryGraph=\"{= ?targetGraph }\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        DELETE WHERE {
                            ?resource ?p ?o .
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
        <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        DELETE WHERE {
                            ?resource ?p ?o .
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"{= ?exception }\"/>
        </swon:Object>
    </ui:catch>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "This prototype deletes the target SPARQL query and associated properites. " ;
  rdfs:label "Delete SPARQL query from SPARQL endpoint" ;
  rdfs:subClassOf ui:Operations ;
.
savedQueries:ExportSavedSPARQLQueriesPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex -100 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= savedQueries:SavedSPARQLQueriesExportPage }\">
    <teamwork:ActionLink arg:comment=\"Displays a list of all SPARQL queries saved for this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }. Execution of the SPARQL query will export the returned values in the chosen format.\" arg:icon=\"lib/teamwork/build/images/teamwork/find.svg\" arg:link=\"{= ?link }\" arg:title=\"Export using Saved SPARQL Query\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Export using saved SPARQL query plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
savedQueries:FindSavedSPARQLQueries
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "uri" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "query" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "querySource" ;
          ]
          [
            sp:varName "format" ;
          ]
          [
            sp:varName "withImports" ;
          ]
          [
            sp:varName "isTag" ;
          ]
        ) ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "query" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "querySource" ;
          ]
          [
            sp:varName "format" ;
          ]
          [
            sp:varName "withImports" ;
          ]
          [
            sp:varName "isTag" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "importGraph" ;
              ] ;
            sp:predicate owl:imports ;
            sp:subject [
                sp:varName "graph" ;
              ] ;
          ]
          [
            sp:object owl:Ontology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:contains ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "importGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 "urn:x-evn-master:" ;
                  ] ;
                sp:arg2 [
                    a teamwork:teamGraph ;
                    sp:arg1 [
                        sp:varName "importGraph" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:SPARQLQuery ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "query" ;
                    ] ;
                  sp:predicate teamwork:queryString ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "creator" ;
                    ] ;
                  sp:predicate teamwork:creator ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "querySource" ;
                    ] ;
                  sp:predicate teamwork:queryGraph ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "withImports" ;
                    ] ;
                  sp:predicate teamwork:withImports ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "format" ;
                    ] ;
                  sp:predicate teamwork:format ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "isTag" ;
                    ] ;
                  sp:predicate teamwork:isTag ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:notExists ;
                          sp:elements (
                              [
                                sp:object true ;
                                sp:predicate teamwork:private ;
                                sp:subject [
                                    sp:varName "uri" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                      sp:arg2 [
                          a sp:eq ;
                          sp:arg1 [
                              a smf:currentUserName ;
                            ] ;
                          sp:arg2 [
                              sp:varName "creator" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:contains ;
                      sp:arg1 [
                          a sp:str ;
                          sp:arg1 [
                              sp:varName "uri" ;
                            ] ;
                        ] ;
                      sp:arg2 "sparqlQuerySearch" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Find saved SPARQL queries" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
savedQueries:FindSavedSPARQLQueriesForPopup
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "query" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "querySPARQL" ;
          ]
          [
            sp:varName "querySource" ;
          ]
          [
            sp:varName "withImports" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "importGraph" ;
              ] ;
            sp:predicate owl:imports ;
            sp:subject [
                sp:varName "graph" ;
              ] ;
          ]
          [
            sp:object owl:Ontology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:contains ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "importGraph" ;
                          ] ;
                      ] ;
                    sp:arg2 "urn:x-evn-master:" ;
                  ] ;
                sp:arg2 [
                    a teamwork:teamGraph ;
                    sp:arg1 [
                        sp:varName "importGraph" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:SPARQLQuery ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "sparql" ;
                    ] ;
                  sp:predicate teamwork:queryString ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "creator" ;
                    ] ;
                  sp:predicate teamwork:creator ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "querySrce" ;
                    ] ;
                  sp:predicate teamwork:queryGraph ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "withImports" ;
                    ] ;
                  sp:predicate teamwork:withImports ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "isTag" ;
                    ] ;
                  sp:predicate teamwork:isTag ;
                  sp:subject [
                      sp:varName "query1" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:notExists ;
                          sp:elements (
                              [
                                sp:object true ;
                                sp:predicate teamwork:private ;
                                sp:subject [
                                    sp:varName "query1" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                      sp:arg2 [
                          a sp:eq ;
                          sp:arg1 [
                              a smf:currentUserName ;
                            ] ;
                          sp:arg2 [
                              sp:varName "creator" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:concat ;
                      sp:arg1 [
                          a xsd:string ;
                          sp:arg1 [
                              sp:varName "query1" ;
                            ] ;
                        ] ;
                      sp:arg2 ",," ;
                      sp:arg3 [
                          sp:varName "sparql" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "querySPARQL" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:contains ;
                      sp:arg1 [
                          a sp:str ;
                          sp:arg1 [
                              sp:varName "query1" ;
                            ] ;
                        ] ;
                      sp:arg2 "sparqlQuerySearch" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "query1" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "query" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:contains ;
                    sp:arg1 [
                        a xsd:string ;
                        sp:arg1 [
                            sp:varName "querySrce" ;
                          ] ;
                      ] ;
                    sp:arg2 "http" ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "isTag" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "querySrce" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "querySource" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Find saved SPARQL queries for pop-up window in SPARQL query endpoint" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
savedQueries:FindSavedSPARQLQueriesForUser
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "uri" ;
          ]
          [
            sp:expression [
                sp:varName "userName" ;
              ] ;
            sp:varName "creator" ;
          ]
          [
            sp:varName "query" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "querySource" ;
          ]
          [
            sp:varName "format" ;
          ]
          [
            sp:varName "withImports" ;
          ]
          [
            sp:varName "queryParams" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:SPARQLQuery ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "userName" ;
                    ] ;
                  sp:predicate teamwork:creator ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "query" ;
                    ] ;
                  sp:predicate teamwork:queryString ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "querySource" ;
                    ] ;
                  sp:predicate teamwork:queryGraph ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "withImports" ;
                    ] ;
                  sp:predicate teamwork:withImports ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "format" ;
                    ] ;
                  sp:predicate teamwork:format ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "queryParams" ;
                          ] ;
                        sp:predicate teamwork:queryParams ;
                        sp:subject [
                            sp:varName "uri" ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:contains ;
                      sp:arg1 [
                          a sp:str ;
                          sp:arg1 [
                              sp:varName "uri" ;
                            ] ;
                        ] ;
                      sp:arg2 "sparqlQuerySearch" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <urn:x-evn-user-data> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "Find saved SPARQL queries for User" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
savedQueries:SPARQLEndpointPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:headIncludes """
<ui:group>
    <link href=\"{= ui:lib() }/assets/lib/yasgui/yasqe.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <link href=\"{= ui:lib() }/assets/lib/yasgui/yasr.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <link href=\"{= ui:lib() }/assets/css/buttons.dataTables.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <script src=\"{= ui:lib() }/assets/lib/yasgui/yasqe.bundled.min.js\"/>
    <script src=\"{= ui:lib() }/assets/lib/yasgui/yasr.bundled.min.js\"/>
    <script src=\"{= ui:lib() }/assets/lib/yasgui/jsonResponsePlugin.js\"/>
    <script src=\"{= ui:lib() }/server/build/sparqlForm.bundle.js\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ExportProjectTab }\" arg:tag=\"{= ?tag }\">
    <ui:group let:formId=\"{= ui:uniqueId() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" let:workingCopy=\"{= teamwork:queryGraph(true, teamwork:graphIdFromMasterGraph(?projectGraph), teamwork:tagId(?tag), smf:currentUserName()) }\">
        <div class=\"sparql-endpoint-page\">
            <h2 id=\"header\">TopBraid Live SPARQL Endpoint</h2>
            <p class=\"alert alert-danger\">As of TopBraid 6.3 this page is unsupported and not recommended further. Instead, use the SPARQL panels of the \"new\" editors.</p>
            <div id=\"query\">
                <form action=\"\" id=\"{= ?formId }\" name=\"endpoint\">
                    <swa:LabeledElement arg:label=\"Query\">
                        <textarea class=\"form-control\" cols=\"100\" id=\"query-area\" name=\"query\" rows=\"10\">SELECT *
WHERE {
		?subject a ?class . ?subject ?predicate ?object

} ORDER BY ?subject</textarea>
                    </swa:LabeledElement>
                    <br/>
                    <swa:LabeledElement arg:label=\"Default Graph\">
                        <ui:if ui:condition=\"{= bound(?tag) }\">
                            <select class=\"form-control\" id=\"default_graph_uri\" name=\"default_graph_uri\" style=\"width: 400px\">
                                <option value=\"{= ?workingCopy }\">{= ?workingCopy }</option>
                            </select>
                        </ui:if>
                        <ui:else>
                            <select class=\"form-control\" id=\"default_graph_uri\" name=\"default_graph_uri\" style=\"width: 400px\">
                                <option value=\"{= ?projectGraph }\">{= ?projectGraph }</option>
                            </select>
                        </ui:else>
                    </swa:LabeledElement>
                    <swa:LabeledElement>
                        <div class=\"checkbox\">
                            <input id=\"include-imports\" name=\"include-imports\" type=\"checkbox\">Include Imports</input>
                        </div>
                    </swa:LabeledElement>
                    <br/>
                    <input id=\"production_graph\" name=\"production_graph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                    <input id=\"tag\" name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                    <input id=\"is_tag\" name=\"is_tag\" type=\"hidden\" value=\"{= IF(bound(?tag), swa:labelInGraph(?tag, teamwork:teamGraph(?projectGraph)), &quot;false&quot;) }\"/>
                </form>
                <input id=\"clear-query\" type=\"submit\" value=\"Clear Query\"/>
                <swa:Space/>
                <input id=\"clear-results\" type=\"button\" value=\"Clear Results\"/>
                <swa:Space/>
                <input id=\"save-query\" onclick=\"savedQueries.saveQuery('{= ?formId }')\" type=\"button\" value=\"Save Query\"/>
                <swa:Space/>
                <input id=\"saved-queries\" onclick=\"savedQueries.savedQueries('{= ?formId }', '{= ?isManager }')\" type=\"button\" value=\"Saved Queries List\"/>
                <swa:Space/>
                <input id=\"submit-query\" type=\"button\" value=\"Submit Query\"/>
            </div>
            <div id=\"results\">
                <h2>Results</h2>
                <div id=\"results-content\"/>
            </div>
        </div>
        <script>$(document).ready(function(){
			var defaultGraphURI = $('.sparql-endpoint-page #default_graph_uri').val();
			var withImports = $('.sparql-endpoint-page #include-imports').prop('checked');
			localStorage.removeItem('prefixes');
			YASQE.Autocompleters.prefixes.fetchFrom = 'prefix.cc?default-graph-uri=' + encodeURI(defaultGraphURI);
			var yasqe = YASQE.fromTextArea(document.getElementById('query-area'), {
				createShareLink: null,
				sparql: {
					showQueryButton: true,
					endpoint: \"sparql\",
					defaultGraphs: [ defaultGraphURI ],
					args: [
						{ name: \"with-imports\", value: withImports}
					]
				}
			});  
			yasqe.disableCompleter(\"classes\")
	yasqe.disableCompleter(\"properties\")
	yasqe.disableCompleter(\"variables\")
			window.yasqe = yasqe;
			YASR.registerOutput(\"jsonResponse\", jsonResponsePlugin);
			var yasr = YASR(document.getElementById(\"results-content\"), {
				outputPlugins: [\"table\", \"error\", \"boolean\", \"jsonResponse\", \"pivot\", \"gchart\", \"leaflet\"],
				getUsedPrefixes: yasqe.getPrefixesFromQuery
			});
			yasqe.setSize(null, 'auto');
			yasr.plugins.table.options.fetchTitlesFromPreflabel = false
			yasr.plugins.table.options.datatable.dom = '&lt;\"dtTopHeader\"ilf&gt;Br&lt;\"tq-yasr-results-container\"t&gt;ip';
			yasqe.options.sparql.callbacks.complete = yasr.setResponse;
		});</script>
    </ui:group>
</teamwork:Chrome>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "SPARQL Endpoint page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
savedQueries:SPARQLEndpointPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex -101 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:if ui:condition=\"{= (!teamwork:isExplorerUser(smf:userWithName(smf:currentUserName()))) || smf:configParam(&quot;explorerUsersCanUseSPARQLEndpoint&quot;) }\">
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= savedQueries:SPARQLEndpointPage }\">
        <teamwork:ActionLink arg:comment=\"Query with SPARQL. Create and display saved queries. Export results.\" arg:icon=\"lib/teamwork/build/images/teamwork/roads.svg\" arg:link=\"{= ?link }\" arg:title=\"SPARQL Endpoint\"/>
    </ui:createLink>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "SPARQL endpoint plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
savedQueries:SaveSPARQLQuery
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:private ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to mark this query as private." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType that this is applicable for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:queryParams ;
      spl:valueType xsd:string ;
      rdfs:comment "Optional property to store a clob of metadata." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:format ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:isTag ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:plainQuery ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:queryGraph ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:withImports ;
      spl:valueType xsd:string ;
    ] ;
  ui:errorPrototype """
<ui:group let:teamGraph=\"{= IRI(?graph) }\">
    <ui:if ui:condition=\"{= savedQueries:isSPARQLQueryNameAlreadyUsed(?label, ?teamGraph) = true }\">
        <ui:setResponseHeader ui:statusCode=\"{= 400 }\"/>
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"This name for a SPARQL query is already in use in this asset collection\"/>
        </swon:Object>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:creator=\"{= smf:currentUserName() }\">
    <ui:try>
        <ui:setContext ui:queryGraph=\"{= ?graph }\" ui:silentTransactions=\"{= true }\">
            <ui:transaction let:searchUri=\"{= IRI(CONCAT(&quot;http://topbraid.org/sparqlQuerySearch/&quot;, spif:generateUUID())) }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?searchUri a teamwork:SPARQLQuery .
                            ?searchUri teamwork:creator ?creator .
                            ?searchUri teamwork:queryString ?plainQuery .
                            ?searchUri teamwork:queryGraph ?qg .
                            ?searchUri teamwork:format ?format .
                            ?searchUri teamwork:withImports ?withImports .
                            ?searchUri rdfs:label ?label .
                            ?searchUri teamwork:isTag ?isTag .
                            ?searchUri teamwork:private ?private .
                            ?searchUri teamwork:saveTimeStamp ?now .
                            ?searchUri teamwork:applicableToProjectType ?projectType .
                        }
                        WHERE {
                            BIND (IRI(?queryGraph) AS ?qg) .
                            BIND (now() AS ?now) .
                        } }\"/>
                <ui:if ui:condition=\"{= bound(?queryParams) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?searchUri teamwork:queryParams ?queryParams .
                            }
                            WHERE {
                            } }\"/>
                </ui:if>
            </ui:transaction>
            <swon:Object>
                <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
            </swon:Object>
        </ui:setContext>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"{= ?exception }\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "This prototype saves the a SPARQL query. No root node speciffied allows to distinguish saved queries from saved searches and they will not appear in saved search export window" ;
  rdfs:label "Save SPARQL query from SPARQL endpoint" ;
  rdfs:subClassOf ui:Operations ;
.
savedQueries:SavedSPARQLQueriesDialog
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <ui:loadable ui:loadId=\"{= ?loadId }\">
        <ui:call arg:userName=\"{= smf:currentUserName() }\" ui:template=\"{= savedQueries:FindSavedSPARQLQueriesForUser }\" ui:varName=\"savedSearches\">
            <ui:if ui:condition=\"{= spr:rowCount(?savedSearches) &gt; 0 }\">
                <ul class=\"list-group\">
                    <ui:forEach ui:resultSet=\"{= ?savedSearches }\">
                        <li class=\"list-group-item\">
                            <a class=\"saved-query-execute\" data-query-params=\"{= COALESCE(?queryParams, ?nil) }\" data-query-uri=\"{= ?uri }\">{= ?label }</a>
                            <button aria-label=\"Remove\" class=\"btn btn-default btn-xs close saved-query-remove\" data-loadId=\"{= ?loadId }\" data-query-uri=\"{= ?uri }\" data-save-graph=\"urn:x-evn-user-data\" type=\"button\">
                                <span aria-hidden=\"true\">&times;</span>
                            </button>
                        </li>
                    </ui:forEach>
                </ul>
            </ui:if>
            <ui:else>
                <p>No saved searches found.</p>
            </ui:else>
        </ui:call>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Saved SPARQL queries export page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
savedQueries:SavedSPARQLQueriesExportDialog
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:formId=\"{= ui:uniqueId() }\">
    <ui:call arg:userName=\"{= smf:currentUserName() }\" ui:template=\"{= savedQueries:FindSavedSPARQLQueriesForUser }\" ui:varName=\"savedSearches\">
        <ui:if ui:condition=\"{= spr:rowCount(?savedSearches) &gt; 0 }\">
            <table class=\"table table-striped\">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Format</th>
                        <th/>
                    </tr>
                </thead>
                <ui:forEach ui:resultSet=\"{= ?savedSearches }\">
                    <tr let:prefixId=\"{= ui:uniqueId() }\">
                        <td>
                            <label>{= ?label }</label>
                        </td>
                        <td>
                            <select class=\"form-control\" id=\"{= ?prefixId }-format\" name=\"format\">
                                <option value=\"xml\">XML</option>
                                <option value=\"text/csv\">Text/CSV</option>
                                <option selected=\"true\" value=\"json-simple\">Simple JSON</option>
                                <option value=\"text/tab-separated-values\">Text/TSV</option>
                            </select>
                        </td>
                        <td>
                            <button aria-label=\"Export\" class=\"btn btn-default btn-xs saved-query-export\" data-graph-uri=\"{= str(?querySource) }\" data-include-imports=\"{= ?withImports }\" data-prefix-id=\"{= ?prefixId }\" data-query=\"{= ?query }\" data-query-uri=\"{= ?uri }\" type=\"button\">
                                <span>Export</span>
                            </button>
                        </td>
                    </tr>
                </ui:forEach>
            </table>
            <!--ui:createLink arg:default-graph-uri=\"{= ?querySource }\"
   arg:format=\"{= ?format }\"
   arg:includeImports=\"{= false }\"
   arg:query=\"{= ?query }\"
   ui:servlet=\"sparql\"-->
        </ui:if>
        <ui:else>
            <p>No saved searches found.</p>
        </ui:else>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Saved SPARQL queries export page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
savedQueries:SavedSPARQLQueriesExportPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ExportProjectTab }\" arg:tag=\"{= ?tag }\">
    <!-- Queries are pulled from teamGraph -->
    <ui:group let:formId=\"{= ui:uniqueId() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" let:workingCopy=\"{= teamwork:queryGraph(true, teamwork:graphIdFromMasterGraph(?projectGraph), teamwork:tagId(?tag), smf:currentUserName()) }\">
        <h1>Saved SPARQL Queries for {= teamwork:projectLabel(?projectGraph) }</h1>
        <p class=\"alert alert-danger\">As of TopBraid 6.3 this page is unsupported and not recommended further. Instead, use the SPARQL panels of the \"new\" editors.</p>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?teamGraph) }\">
            <ui:call ui:template=\"{= savedQueries:FindSavedSPARQLQueries }\" ui:varName=\"searchrs\">
                <ui:forEach ui:resultSet=\"{= ?searchrs }\">
                    <ui:if ui:condition=\"{= bound(?uri) }\">
                        <table border=\"0\" style=\"margin-top:30px\">
                            <ui:group let:service=\"{= CONCAT(spif:encodeURL(?query), &quot;&amp;default-graph-uri=&quot;, IF(bound(?tag), ENCODE_FOR_URI(xsd:string(?workingCopy)), ENCODE_FOR_URI(xsd:string(?projectGraph))), &quot;&amp;format=&quot;, ?format, &quot;&amp;with-imports=&quot;, IF((IF(bound(?tag), ?workingCopy, ?projectGraph) != ?querySource), &quot;true&quot;, xsd:string(?withImports))) }\">
                                <div id=\"query\">
                                    <tr>
                                        <td class=\"saved-queries-saved-sparql-queries-export-page-table-row\">
                                            <p class=\"saved-queries-saved-sparql-queries-export-page-table-row-p\">
                                                <span class=\"saved-queries-saved-sparql-queries-export-page-blue\">
                                                    <b>SPARQL Query Label:</b>
                                                </span>
                                                <swa:Space/>{= ?label }</p>
                                            <swa:LabeledElement arg:label=\"Query Creator:\">{= ?creator }</swa:LabeledElement>
                                            <swa:LabeledElement arg:label=\"Query Source:\">{= IF((?isTag = \"false\"), ui:label(?querySource), ?isTag) }</swa:LabeledElement>
                                            <!--swa:LabeledElement arg:label=\"SPARQL query:\">
<textarea cols=\"80\" id=\"query-area\" name=\"query\" rows=\"10\">{= ?query }</textarea>
</swa:LabeledElement-->
                                            <div id=\"exportFormat\"/>
                                            <swa:LabeledElement arg:label=\"Service URL:\">
                                                <script>var url = document.URL;
														var server = url.substring(0, url.indexOf(\"/tbl\")+4);
														document.write(\"&lt;input id='serviceUrl' class='teamwork-saved-search-export-page-input-width' type='text' value=\", server + '{= CONCAT(\"/sparql?query=\", ?service) }' + \"&gt;\");</script>
                                            </swa:LabeledElement>
                                            <input id=\"queryStr\" name=\"queryStr\" type=\"hidden\" value=\"{= ?service }\"/>
                                        </td>
                                        <td class=\"td.teamwork-saved-search-export-page-form-button\">
                                            <input id=\"exportQuery\" onclick=\"savedQueries.exportQuery('{= ?service }')\" type=\"button\" value=\"Export Query\"/>
                                        </td>
                                    </tr>
                                </div>
                            </ui:group>
                        </table>
                    </ui:if>
                    <ui:else>
                        <p>No saved searches found.</p>
                    </ui:else>
                </ui:forEach>
            </ui:call>
        </ui:setContext>
    </ui:group>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Saved SPARQL queries export page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
savedQueries:SavedSPARQLQueriesForPopupDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:formId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the form to restore." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
      rdfs:comment "The load id." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div id=\"div-{= ?loadId }\">
    <ui:loadable ui:loadId=\"{= ?loadId }\">
        <ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:group let:isManager=\"{= IF(bound(?tag), teamwork:currentUserHasPrivilege(?tag, teamwork:manager, ?teamGraph), teamwork:currentUserIsProjectManager(?projectGraph)) }\">
                <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?teamGraph) }\">
                    <ui:call let:currentUserName=\"{= smf:currentUserName() }\" ui:template=\"{= savedQueries:FindSavedSPARQLQueriesForPopup }\" ui:varName=\"savedSPARQLQueries\">
                        <ui:if ui:condition=\"{= spr:rowCount(?savedSPARQLQueries) &gt; 0 }\">
                            <ul class=\"list-group\" data-is-manager=\"{= ?isManager }\" data-team-graph=\"{= ?teamGraph }\" id=\"queries-list\">
                                <swa:ResultSetGrid arg:dtType=\"savedQueries\" arg:hiddenColName=\"querySPARQL\" arg:projectGraph=\"{= ?projectGraph }\" arg:resultSet=\"{= ?savedSPARQLQueries }\"/>
                            </ul>
                        </ui:if>
                        <ui:else>
                            <p>No saved searches found.</p>
                        </ui:else>
                    </ui:call>
                </ui:setContext>
            </ui:group>
        </ui:group>
    </ui:loadable>
</div>
"""^^ui:Literal ;
  rdfs:label "Saved SPARQL queries for pop-up dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
savedQueries:isSPARQLQueryNameAlreadyUsed
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:SPARQLQuery ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate rdfs:label ;
                  sp:subject [
                      sp:varName "uri" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Is SPARQL Query Name already used" ;
  rdfs:subClassOf spin:Functions ;
.
