# baseURI: http://topbraid.org/teamworkimporters.ui
# imports: http://topbraid.org/tables
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworkscripts

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:customHandler
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:duplicateIds
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:explaination
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:explanation
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:generic
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:importId
  a rdf:Property ;
  rdfs:label "import id" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:progressId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:scriptGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:success
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:targetType
  a rdf:Property ;
  rdfs:label "target type" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:templateLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:treeType
  a rdf:Property ;
  rdfs:label "tree type" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:turtle
  a rdf:Property ;
  rdfs:label "turtle" ;
  rdfs:subPropertyOf sp:arg ;
.
teamwork:AbstractSpreadsheetImportFileUploadPage
  a ui:NodeClass ;
  ui:headIncludes """
<script>function handleSubmit() {
var fileElement = $('[name=\"file\"]');
$('[name=\"fileName\"]').val(fileElement.val());
		$(\"#submitButton\").attr('disabled', true);
		var text = document.createTextNode(\"Loading...\");
		$(\"#loader\")[0].appendChild(text);
		$(\"#theForm\")[0].submit();
	}</script>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:AbstractSpreadsheetImportPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag that we are in." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The target class to map into." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Base class for the import wizard pages - subclasses must insert their stuff using <ui:insert ui:into=\"main\">." ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:AllNonSystemSubClassesOfGraphqlPublicClass
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:SubQuery ;
              sp:query [
                  a sp:Select ;
                  sp:limit "1000"^^xsd:long ;
                  sp:resultVariables (
                      [
                        sp:varName "class" ;
                      ]
                    ) ;
                  sp:where (
                      [
                        sp:object [
                            sp:varName "?0" ;
                          ] ;
                        sp:predicate tops:transitiveAssociation ;
                        sp:subject [
                            sp:varName "class" ;
                          ] ;
                      ]
                      [
                        sp:object rdfs:subClassOf ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?1" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object graphql:publicClass ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object () ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a swa:filterSystemResources ;
                  arg:node [
                      sp:varName "class" ;
                    ] ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:not ;
                  sp:arg1 [
                      a swa:isAbstractClass ;
                      arg:class [
                          sp:varName "class" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "classLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "All non system sub classes of graphql:publicClass" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:AllNonSystemSubClassesOfOWLThing
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:SubQuery ;
              sp:query [
                  a sp:Select ;
                  sp:limit "1000"^^xsd:long ;
                  sp:resultVariables (
                      [
                        sp:varName "class" ;
                      ]
                    ) ;
                  sp:where (
                      [
                        sp:object [
                            sp:varName "?0" ;
                          ] ;
                        sp:predicate tops:transitiveAssociation ;
                        sp:subject [
                            sp:varName "class" ;
                          ] ;
                      ]
                      [
                        sp:object rdfs:subClassOf ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "?1" ;
                          ] ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?0" ;
                          ] ;
                      ]
                      [
                        sp:object owl:Thing ;
                        sp:predicate rdf:first ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                      [
                        sp:object () ;
                        sp:predicate rdf:rest ;
                        sp:subject [
                            sp:varName "?1" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a swa:filterSystemResources ;
                  arg:node [
                      sp:varName "class" ;
                    ] ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:not ;
                  sp:arg1 [
                      a swa:isAbstractClass ;
                      arg:class [
                          sp:varName "class" ;
                        ] ;
                    ] ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "classLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "All non system sub classes of owl:Thing" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:AllSubClassesStar
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "class" ;
          ]
          [
            sp:varName "classLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "rootClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "classLabel" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a swa:isAbstractClass ;
                    arg:class [
                        sp:varName "class" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The root class." ;
    ] ;
  spin:private true ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:ColumnPairTreePlugin
  a teamwork:SpreadsheetImportHierarchyPlugin ;
  ui:view """
<ui:group>
    <th class=\"teamworkImporterHeader\">
        <p class=\"teamworkImporterHeaderText\">Hierarchy (Column-Pair-based Tree)</p>
    </th>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"First tree column\" arg:name=\"firstTreePairColumn\" arg:required=\"{= true }\"/>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Last tree column\" arg:name=\"lastTreePairColumn\" arg:required=\"{= true }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Column pair tree" ;
.
teamwork:ColumnSelectionComboBox
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:required ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label to the left of the combo box." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the field in the HTML form" ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:importGraphWithId(?importId) }\">
    <tr>
        <td class=\"rightCell\">{= ?label }<ui:if ui:condition=\"{= ?required = true }\">
                <span class=\"form-required\"> *</span>
            </ui:if>
        </td>
        <td>
            <select class=\"form-control swa-with-top-bottom-margins\" letrs:colRS=\"{#
                    SELECT *
                    WHERE {
                        ?property tables:columnIndex ?colIndex .
                        ?property rdfs:label ?lab .
                    }
                    ORDER BY (?colIndex) }\" name=\"{= ?name }\">
                <option value=\"\">(Select column)</option>
                <ui:forEach ui:resultSet=\"{= ?colRS }\">
                    <option value=\"{= IRI(?property) }\">{= ?lab }</option>
                </ui:forEach>
            </select>
        </td>
    </tr>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Column selection combo box" ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:ColumnTreePlugin
  a teamwork:SpreadsheetImportHierarchyPlugin ;
  ui:view """
<ui:group>
    <th class=\"teamworkImporterHeader\">
        <p class=\"teamworkImporterHeaderText\">Hierarchy (Column-based Tree)</p>
    </th>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"First tree column\" arg:name=\"firstTreeColumn\" arg:required=\"{= true }\"/>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Last tree column\" arg:name=\"lastTreeColumn\" arg:required=\"{= true }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Column tree" ;
.
teamwork:CustomHandlerArgs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:handler ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:view=\"{= IRI(?handler) }\">
    <ui:if ui:condition=\"{= bound(?handler) }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?key ?value
                WHERE {
                    GRAPH ui:graph {
                        ?view spin:constraint ?cst .
                        ?cst spl:predicate ?pred .
                    } .
                    BIND (afn:localname(?pred) AS ?key) .
                    BIND (ui:param(?key) AS ?value) .
                } }\">
            <input name=\"{= ?key }\" type=\"hidden\" value=\"{= ?value }\"/>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Icon element" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:FileImportResultPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:explaination ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:message ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:success ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <ui:if ui:condition=\"{= ?success }\">
        <h1>File Import Complete</h1>
    </ui:if>
    <ui:else>
        <h1>File Import Failed</h1>
    </ui:else>
    <ui:parse ui:str=\"{= ?message }\"/>
    <ui:parse ui:str=\"{= ?explaination }\"/>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "File import result page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:GraphSourceScript
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The source graph, e.g. <urn:x-evn-master:itil-glossary>." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Base class of scripts that operate on a given named graph, e.g. a specific input Glossary." ;
  rdfs:label "Graph source script" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:HierarchyPropertySelectionPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The target class." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <tr>
        <td class=\"rightCell\">Hierarchy property</td>
        <td>
            <select class=\"form-control\" let:defaultProperty=\"{= COALESCE(spl:object(?projectGraph, teamwork:defaultTreeProperty), skos:broader) }\" name=\"treeProperty\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT DISTINCT ?property ?label
                        WHERE {
                            {
                                ?targetType (rdfs:subClassOf)* ?type .
                                ?type swa:relevantClassOfProperty ?superProperty .
                                ?property (rdfs:subPropertyOf)* ?superProperty .
                                FILTER swa:filterSystemResources(?property) .
                                FILTER (?property NOT IN (skos:narrower, skos:narrowerTransitive, skos:broaderTransitive)) .
                            } .
                            BIND (swa:localRangeAtClass(?type, ?property) AS ?range) .
                            FILTER (bound(?range) &amp;&amp; (!swa:isDatatypeRange(?range))) .
                            BIND (ui:label(?property) AS ?label) .
                        }
                        ORDER BY (?label) }\">
                    <option selected=\"{= IF((?property = ?defaultProperty), &quot;selected&quot;, ?none) }\" value=\"{= ?property }\">{= ?label }</option>
                </ui:forEach>
            </select>
        </td>
    </tr>
    <tr>
        <td class=\"rightCell\"/>
        <td>
            <div class=\"checkbox\">
                <input name=\"treePropertyInverse\" type=\"checkbox\" value=\"true\"/>
                <span title=\"If activated then the target property will point from objects to subjects\">Generate in inverse direction</span>
            </div>
        </td>
    </tr>
    <ui:if ui:condition=\"{= ?targetType = skos:Concept }\">
        <tr>
            <td class=\"rightCell\">Concept Scheme</td>
            <td>
                <select class=\"form-control\" name=\"conceptScheme\">
                    <option selected=\"true\" value=\"\"> - </option>
                    <ui:forEach ui:resultSet=\"{#
                            SELECT ?conceptScheme ?conceptSchemeLabel
                            WHERE {
                                ?conceptScheme a skos:ConceptScheme .
                                BIND (ui:label(?conceptScheme) AS ?conceptSchemeLabel) .
                            }
                            ORDER BY (?conceptSchemeLabel) }\">
                        <option value=\"{= ?conceptScheme }\">{= ?conceptSchemeLabel }</option>
                    </ui:forEach>
                </select>
            </td>
        </tr>
    </ui:if>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Hierarchy property selection panel" ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:ImportErrorPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "Optional title to show" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:message ;
      spl:valueType xsd:string ;
      rdfs:comment "The error message to show" ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page error-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <ui:if ui:condition=\"{= bound(?title) }\">
        <h1>{= ?title }</h1>
    </ui:if>
    <p class=\"text-danger\">{= ?message }</p>
    <div>
        <ui:insertionPoint ui:pointId=\"details\"/>
    </div>
    <teamwork:ButtonReturnToProjectOrTagPage arg:projectTab=\"{= teamwork:ImportProjectTab }\" ui:args=\"*\"/>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "Displays an error message, with optional title, and optional details inserted as children. Suitable for use in asset collection importers." ;
  rdfs:label "Import error page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:ImportRDFFilePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:errorPrototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:editor, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to be editor of this {= IF(bound(?tag), &quot;working copy&quot;, &quot;vocabulary&quot;) } to upload files into it.\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\" let:progressId=\"{= ui:uniqueId() }\">
            <h1>Import RDF File</h1>
            <p>Please select an RDF file that shall be added to the current {= IF(bound(?tag), \"working copy\", teamwork:singularProjectTypeLabel(?projectType)) }.</p>
            <p>When uploading RDF files with owl:import statements in them, make sure that any graph identified in such statements is available and accessible in TopBraid's workspace. Failure to do so will impact your system's availability.</p>
            <p>Note that the importer may modify some RDF statements to align with assumptions made by the system. For example, <code>skos:narrower</code> triples are being replaced with inverse <code>skos:broader</code> triples, and missing superclasses are added automatically. See the SPIN rules in skoscleaner.ttl for technical details.</p>
            <br/>
            <form action=\"importFileUpload\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                <input name=\"file\" required=\"required\" type=\"file\"/>
                <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                <input name=\"_progressId\" type=\"hidden\" value=\"{= ?progressId }\"/>
                <input name=\"_viewClass\" type=\"hidden\" value=\"{= teamwork:ImportRDFFileService }\"/>
                <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                <input name=\"customHandler\" type=\"hidden\" value=\"{= ?customHandler }\"/>
                <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
                <teamwork:CustomHandlerArgs arg:handler=\"{= ?customHandler }\"/>
                <br/>
                <br/>
                <div class=\"form-check\">
                    <input checked=\"checked\" name=\"format\" type=\"radio\" value=\"turtle\"/> Turtle (.ttl) or N-Triple (.nt)<br/>
                    <input name=\"format\" type=\"radio\" value=\"jsonld\"/> JSON-LD (.jsonld)<br/>
                    <input name=\"format\" type=\"radio\" value=\"rdf/xml\"/> RDF/XML Format (.rdf)</div>
                <br/>
                <br/>
                <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                <div class=\"checkbox\">
                    <input name=\"validateOnly\" type=\"checkbox\" value=\"true\"/>
                    <span title=\"Both the existing and the new triples will be validated together, against any available SHACL shapes.\"> Perform constraint validation only (no changes will be applied)</span>
                </div>
                <br/>
                <br/>
                <button class=\"btn btn-primary\" id=\"submitButton\" type=\"submit\">Finish</button>
            </form>
            <script>{= ui:functionCall(\"teamwork.initImportFileForm\", ?progressId) }</script>
            <br/>
            <div id=\"reportDiv\"/>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that can be used to upload an RDF file to the current project." ;
  rdfs:label "Import RDF File page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:ImportRDFFileService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The file name, if available." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to record the new triples." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:validateOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to perform validation only." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:format ;
      spl:valueType xsd:string ;
      rdfs:comment "\"turtle\", \"jsonld\" or anything else for RDF/XML" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:importId ;
      spl:valueType xsd:int ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate ui:progressId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= IF(?record, teamwork:masterGraphForCurrentUser(teamwork:currentMasterGraph()), ?none) }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction ui:logMessage=\"Import RDF file {= ?fileName }\">
        <teamwork:importRDFFile arg:manager=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\" ui:args=\"*\">
            <ui:if ui:condition=\"{= bound(?report) }\">
                <tosh.ui:getReportJSON arg:report=\"{= ?report }\"/>
            </ui:if>
            <ui:else>
                <ui:createLink arg:explaination=\"{= ?explaination }\" arg:message=\"{= ?message }\" arg:projectGraph=\"{= ?projectGraph }\" arg:success=\"{= ?success }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:FileImportResultPage }\">{= ?link }</ui:createLink>
            </ui:else>
        </teamwork:importRDFFile>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Import RDF file service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ImportSpreadsheetUsingTemplatePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:errorPrototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:editor, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to have editor permissions for this {= IF(bound(?tag), &quot;working copy&quot;, &quot;vocabulary&quot;) } to import spreadsheets into it.\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
            <h1>Import Spreadsheet using Template</h1>
            <p class=\"text-info\">Please select a spreadsheet file that shall be added to the current {= IF(bound(?tag), \"working copy\", teamwork:singularProjectTypeLabel(?projectType)) }.
				The spreadsheet will be imported using a selected template (that must be prepared in advance).
				If you had previously imported some of this data and want to replace values already existing with new information, check Overwrite.</p>
            <br/>
            <form action=\"evnimportFileUpload\" enctype=\"multipart/form-data\" id=\"theForm\" letrs:baseURIs=\"{#
                    SELECT ?baseURI ?fileLabel
                    WHERE {
                        rdf:nil teamwork:tableMapFiles ( ?baseURI ?fileLabel ) .
                    } }\" method=\"post\">
                <input name=\"file\" required=\"required\" type=\"file\"/>
                <br/>
                <span title=\"Excel sheets are numbered starting at 1 for the leftmost sheet. Only one sheet can be imported at a time. To import multiple sheets, run this wizard multiple times.\">Sheet index (for Excel, optional): </span>
                <input class=\"form-control\" name=\"sheetIndex\" type=\"text\" value=\"1\"/>
                <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                <input name=\"_progressId\" type=\"hidden\" value=\"{= ?progressId }\"/>
                <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                <input name=\"customHandler\" type=\"hidden\" value=\"{= ?customHandler }\"/>
                <teamwork:CustomHandlerArgs arg:handler=\"{= ?customHandler }\"/>
                <br/>
                <br/>
                <span class=\"swa-bold-font\">Template: </span>
                <ui:if ui:condition=\"{= spr:isEmpty(?baseURIs) }\">
                    <span>No templates have been installed yet.</span>
                </ui:if>
                <ui:else>
                    <select class=\"form-control vocabSelect\" id=\"templateSelect\" name=\"template\">
                        <ui:forEach ui:resultSet=\"{= ?baseURIs }\">
                            <option value=\"{= ?baseURI }\">{= ?fileLabel }</option>
                        </ui:forEach>
                    </select>
                </ui:else>
                <br/>
                <div class=\"checkbox\">
                    <input id=\"overwriteBox\" name=\"overwrite\" type=\"checkbox\" value=\"true\"/>
                    <span> Overwrite existing values</span>
                </div>
                <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                <button class=\"btn btn-primary\" disabled=\"{= IF(spr:isEmpty(?baseURIs), &quot;disabled&quot;, ?none) }\" id=\"submitButton\" type=\"submit\">Finish</button>
            </form>
            <p id=\"status\"/>
            <script>$('#theForm').ajaxForm({
			beforeSubmit: function() {
				$(\"#submitButton\").attr(\"disabled\", true);
				$(\"#status\").html(\"Uploading spreadsheet\");
			},
			error: function(xhr, status, error) {
				swa.populateModalDialog(\"File import error: \" + status);
			},
			success: function(data) {
				if(typeof data === 'string' &amp;&amp; data.indexOf('&lt;pre') == 0) {
					var closer = data.indexOf('&gt;');
					data = JSON.parse(data.substring(closer + 1, data.length - 6));
				}
				var params = {
					importId : data.id,
					projectGraph : \"{= ?projectGraph }\",
					tag : \"{= ?tag }\",
					template : $(\"#templateSelect\").val(),
					customHandler : \"{= ?customHandler }\"
				};
				for(var cstm in data){
					params[cstm] = data[cstm];
				}
				if($(\"#recordBox\").is(\":checked\")) {
					params.record = true;
				}
				if($(\"#overwriteBox\").is(\":checked\")) {
					params.overwrite = true;
				}
				$(\"#status\").html(\"Converting spreadsheet\");
				var $jqXHR = $.ajax({
					'url': \"evnimportMapping\",
					'method': 'get',
					'data': params
				});
				$.when(
					$jqXHR
				).done(function (data, textStatus, jqXHR) {
					$(\"#status\").html(\"Completed\");
					var newDoc = document.open(\"text/html\", \"replace\");
					newDoc.write(data);
					newDoc.close();
				}).fail(function (jqXHR, textStatus, errorThrown) {
					swa.populateModalDialog('Operation failed: ' + errorThrown, 'Operation failed', null);
				});
				return $jqXHR;
			}
		});</script>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that can be used to upload a spreadsheet file that gets transformed using the selected mapping template and then added to the current project." ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:MappingContextView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:treeType ;
      spl:valueType teamwork:SpreadsheetImportHierarchyPlugin ;
      rdfs:comment "The HierarchyPlugin to use here (may be unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The target class." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:group let:uriConstructMethod=\"{= swa:getURIConstructMethod() }\">
        <br/>
        <ui:if ui:condition=\"{= swa:hasPrimaryKey(?targetType) }\">
            <ui:if ui:condition=\"{= bound(?treeType) }\">
                <h2>Instructions</h2>
                <div>
				You must provide the Hierarchy settings.
				The URIs for the imported reference data will be derived from the values in
				the hierarchy columns.
				You can leave fields in the Column Mapping section empty.
				Do not use the Column Mappings section to map anything to the
				property <b>{= ui:label(swa:primaryKeyProperty(?targetType)) }</b>.
			</div>
            </ui:if>
            <ui:else>
                <h2>Unique Identifiers</h2>
                <div>
				The URIs will be derived from the values of the column mapped into the
				property <b>{= ui:label(swa:primaryKeyProperty(?targetType)) }</b>.
			</div>
            </ui:else>
        </ui:if>
        <ui:else>
            <h2>Unique Identifiers</h2>
            <table>
                <ui:if ui:condition=\"{= ?treeType = teamwork:ColumnTreePlugin }\">
                    <div>Unique Identifiers are derived from the values of the hierarchy columns.</div>
                </ui:if>
                <ui:if ui:condition=\"{= ?uriConstructMethod = &quot;label&quot; }\">
                    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Id column #1\" arg:name=\"id1\"/>
                    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Id column #2\" arg:name=\"id2\"/>
                    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Id column #3\" arg:name=\"id3\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?uriConstructMethod = &quot;uuid&quot; }\">
                    <ui:if ui:condition=\"{= !bound(?treeType) }\">
                        <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Field used to match existing uuid uris\" arg:name=\"matchField\"/>
                    </ui:if>
                    <ui:else>
                        <input hidden=\"hidden\" name=\"matchField\" value=\"{= skos:prefLabel }\"/>
                    </ui:else>
                </ui:if>
                <tr>
                    <td class=\"rightCell\">Start of URIs</td>
                    <td>
                        <input class=\"form-control swa-with-top-bottom-margins teamwork-mapping-context-view-width\" name=\"uri\" type=\"text\" value=\"{= swa:getDefaultNamespace() + swa:constructPreambleForURI(?targetType) }\"/>
                    </td>
                </tr>
            </table>
        </ui:else>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Used to specify the URI mapping (stored as spinmap:Context)." ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:PathWithSegmentsPlugin
  a teamwork:SpreadsheetImportHierarchyPlugin ;
  ui:view """
<ui:group>
    <th class=\"teamworkImporterHeader\">
        <p class=\"teamworkImporterHeaderText\">Hierarchy (Path with fixed-length Segments)</p>
    </th>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Column containing the paths\" arg:name=\"pathPredicate\" arg:required=\"{= true }\"/>
    <tr>
        <td class=\"rightCell\">Path segment length</td>
        <td>
            <input class=\"form-control teamwork-path-with-segments-plugin-import\" name=\"segmentLength\" type=\"text\" value=\"2\"/>
        </td>
    </tr>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Path with segments" ;
.
teamwork:PathWithSeparatorPlugin
  a teamwork:SpreadsheetImportHierarchyPlugin ;
  ui:view """
<ui:group>
    <th class=\"teamworkImporterHeader\">
        <p class=\"teamworkImporterHeaderText\">Hierarchy (Path with Separator)</p>
    </th>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Column containing the paths\" arg:name=\"pathPredicate\" arg:required=\"{= true }\"/>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Column containing the ids\" arg:name=\"idPredicate\" arg:required=\"{= true }\"/>
    <tr>
        <td class=\"rightCell\">Path separator</td>
        <td>
            <input class=\"form-control teamwork-path-with-separator-plugin-input-form\" name=\"pathSeparator\" type=\"text\" value=\"&gt;\"/>
        </td>
    </tr>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Path with separator" ;
.
teamwork:PopulateGraphScript
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:comment "Base class for SWP scripts that can be used to (re)-populate a graph. Such scripts can be values of prov:wasGeneratedBy at the owl:Ontology of a master graph." ;
  rdfs:label "Populate graph script" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:PopulateProjectPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 100 ;
  teamwork:pluginMayNotScale true ;
  teamwork:pluginRequiresRole teamwork:manager ;
  teamwork:pluginValidExpression [
      a sp:exists ;
      sp:elements (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "activity" ;
                    ] ;
                  sp:predicate provo:wasGeneratedBy ;
                  sp:subject [
                      sp:varName "projectGraph" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "script" ;
                    ] ;
                  sp:predicate provo:wasAssociatedWith ;
                  sp:subject [
                      sp:varName "activity" ;
                    ] ;
                ]
                [
                  a sp:NamedGraph ;
                  sp:elements (
                      [
                        a sp:TriplePath ;
                        sp:object teamwork:PopulateGraphScript ;
                        sp:path [
                            a sp:ModPath ;
                            sp:modMax -2 ;
                            sp:modMin 1 ;
                            sp:subPath rdfs:subClassOf ;
                          ] ;
                        sp:subject [
                            sp:varName "script" ;
                          ] ;
                      ]
                    ) ;
                  sp:graphNameNode ui:graph ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:setContext let:script=\"{= spl:objectInGraph(?projectGraph, provo:wasGeneratedBy, ?projectGraph) }\" ui:queryGraph=\"{= ui:graphWithoutImports(teamwork:getQueryGraph(?projectGraph, ?tag)) }\">
    <teamwork:ActionLink arg:comment=\"This asset collection has been configured so that it can be updated with the data delivered by a script. Use this link to re-run the script.\" arg:faIcon=\"fas fa-sync-alt\" arg:onClick=\"{= ui:functionCall(&quot;teamwork.populateProject&quot;, ?projectGraph, ui:currentQueryGraph()) }\" arg:title=\"Refresh Content\">
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
            <ui:group let:date=\"{= spl:object(?script, provo:endedAtTime) }\" let:type=\"{= spl:object(?script, rdf:type) }\">
                <p let:typeLabel=\"{= IF(bound(?type), swa:labelInGraph(?type, ui:graph), &quot;(Untyped)&quot;) }\">
                    <div>Type of script: {= ?typeLabel }.</div>
                    <div>Most recently executed at: {= IF(bound(?date), ui:label(?date), \"-\") }</div>
                </p>
            </ui:group>
        </ui:setContext>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "This plugin is visible for master graphs and working copies where the master graph declares a prov:wasGeneratedBy value pointing at an SWP script. It displays a hyperlink to re-run that script and thus overwrite the current content. The link is only available to users with manager role." ;
  rdfs:label "Populate project plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:PopulateProjectService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  ui:prototype """
<teamwork:populateProject arg:projectGraph=\"{= ?projectGraph }\"/>
"""^^ui:Literal ;
  rdfs:comment "Re-populates the currently active query graph using the script declares as prov:wasGeneratedBy from a given master graph." ;
  rdfs:label "Populate project service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:RDFFileImporterPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ImportRDFFilePage }\">
    <teamwork:ActionLink arg:comment=\"Adds RDF triples from a Turtle, JSON-LD or RDF/XML file.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-rdf.svg\" arg:link=\"{= ?link }\" arg:title=\"Import RDF File\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Import RDF file plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
teamwork:RecordTriplesCheckbox
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current tag or null for the master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= !bound(?tag) }\">
        <ui:if ui:condition=\"{= bound(?projectGraph) &amp;&amp; teamwork:isRecordCountsOnly(teamwork:teamGraph(?projectGraph)) }\">
            <input id=\"recordBox\" name=\"record\" type=\"hidden\" value=\"true\"/>
        </ui:if>
        <ui:else>
            <div class=\"checkbox\">
                <input id=\"recordBox\" name=\"record\" type=\"checkbox\" value=\"true\"/>
                <span> Record each new triple in change history (warning: not recommended for large files)</span>
            </div>
            <br/>
        </ui:else>
    </ui:if>
    <ui:else>
        <div>Note that this import may result in a large number of entries in the change history, because you are operating on a working copy. You may not want to use it for large files.</div>
    </ui:else>
    <br/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Record triples checkbox" ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:RulesPageShapeRow
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:canEdit ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if user has editing privilege." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The shape being rendered." ;
    ] ;
  ui:prototype """
<ui:group let:baseGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <div>
        <b title=\"{= ?shape }\">at {= IF(isIRI(?shape), ui:label(?shape), \"Anonymous shape\") }</b>
    </div>
    <ui:group letrs:rules=\"{#
            SELECT ?rule
            WHERE {
                {
                    ?shape sh:rule ?rule .
                }
                UNION
                {
                    ?prop (rdfs:subPropertyOf)* spin:rule .
                    ?shape spin:rule ?rule .
                } .
            }
            ORDER BY (?rule) }\" letrs:values=\"{#
            SELECT ?path ?values ?ps
            WHERE {
                ?shape sh:property ?ps .
                ?ps sh:path ?path .
                ?ps sh:values ?values .
            }
            ORDER BY (?path) (?values) }\">
        <div>
            <ui:forEach ui:resultSet=\"{= ?rules }\">
                <pre>{= ui:label(?rule) }</pre>
            </ui:forEach>
            <ui:forEach ui:resultSet=\"{= ?values }\">
                <p>{= COALESCE(?name, IF(isIRI(?path), swa:propertyLabelAtClassOrShape(?path, ?shape), ?none)) }</p>
                <p style=\"margin-left: 4em\">
                    <tosh.ui:ValuesExpressionDiagramViewer arg:object=\"{= ?values }\" arg:predicate=\"{= sh:values }\" arg:subject=\"{= ?ps }\"/>
                </p>
            </ui:forEach>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:SHACLRulesTransformation
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rulesGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI of the shapes graph containing the rules to execute." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?sourceGraph }\">
    <sml:ApplySHACLRules sml:replace=\"{= true }\" sml:shapesGraph=\"{= ui:graphWithImports(?rulesGraph) }\">
        <ui:return/>
    </sml:ApplySHACLRules>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A script that takes a source graph and applies the SHACL rules from a given shapes graph over it. The resulting inferences become the target graph." ;
  rdfs:label "SHACL rules transformation" ;
  rdfs:subClassOf teamwork:GraphSourceScript ;
.
teamwork:SchemaFromSpreadsheetImportPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>Import Schema from Spreadsheet</h1>
    <p>
				This feature takes a spreadsheet file (e.g. Excel or Tab-Separated Values format) as input
				and attempts to extract a class definition by looking at the available column names and
				the types of the values in those columns.
			</p>
    <p>Select a spreadsheet to import the schema of.</p>
    <br/>
    <form action=\"importSchemaFromSpreadsheet\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
        <input name=\"file\" onchange=\"document.getElementById('submitButton').removeAttribute('disabled');\" type=\"file\"/>
        <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
        <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
        <br/>
        <br/>
        <teamwork:SpreadsheetFileTypesList/>
        <p title=\"Excel sheets are numbered starting at 1 for the leftmost sheet.\">Sheet index (for Excel, optional): <input class=\"form-control\" name=\"sheetIndex\" type=\"text\"/>
        </p>
        <input id=\"submitButton\" onclick=\"handleSubmit()\" type=\"submit\" value=\"Finish\"/>&nbsp;
<span id=\"loader\"/>
    </form>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Schema from spreadsheet import page" ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportFileUploadPage ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:SchemaFromSpreadsheetImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:SchemaFromSpreadsheetImportPage }\">
    <teamwork:ActionLink arg:comment=\"Takes a spreadsheet and tries to extract class and property definitions from its header.\" arg:icon=\"lib/teamwork/build/images/teamwork/import-scheme-spreadsheet.svg\" arg:link=\"{= ?link }\" arg:title=\"Import Schema from Spreadsheet\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Import schema from spreadsheet plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
teamwork:ScriptBasedFileImportPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:script ;
      spl:valueType sm:Function ;
      rdfs:comment "The SM script to execute." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:scriptGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph containing the script (without imports)." ;
    ] ;
  ui:prototype """
<ui:group let:progressId=\"{= ui:uniqueId() }\" let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:projectTab=\"{= teamwork:ImportProjectTab }\" ui:args=\"*\">
            <h1>{= swa:labelInGraph(?script, ?scriptGraph) }</h1>
            <p>Please select a file that shall be added to the current {= IF(bound(?tag), \"working copy\", teamwork:singularProjectTypeLabel(?projectType)) }.</p>
            <p>{= spl:objectInGraph(?script, rdfs:comment, ?scriptGraph) }</p>
            <br/>
            <form action=\"swp\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
                <input name=\"file\" type=\"file\"/>
                <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\"/>
                <input name=\"_progressId\" type=\"hidden\" value=\"{= ?progressId }\"/>
                <ui:if ui:condition=\"{= spl:objectInGraph(?script, teamworkscripts:fileUpload, ?scriptGraph) }\">
                    <input name=\"_fileUpload\" type=\"hidden\" value=\"true\"/>
                </ui:if>
                <input name=\"_viewClass\" type=\"hidden\" value=\"{= teamwork:ScriptBasedFileImportService }\"/>
                <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                <input name=\"script\" type=\"hidden\" value=\"{= ?script }\"/>
                <input name=\"scriptGraph\" type=\"hidden\" value=\"{= ?scriptGraph }\"/>
                <br/>
                <br/>
                <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                <input id=\"submitButton\" type=\"submit\" value=\"Finish\"/>
            </form>
            <script>{= ui:functionCall(\"teamwork.initImportFileForm\", ?progressId) }</script>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:ScriptBasedFileImportService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The file name, if available." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to record the new triples." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:file ;
      spl:valueType xsd:string ;
      rdfs:comment "The uploaded file or path to a temp file (if _fileUpload is true)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:script ;
      spl:valueType sm:Function ;
      rdfs:comment "The SM script to run." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:scriptGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The script graph." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= IF(?record, teamwork:masterGraphForCurrentUser(teamwork:currentMasterGraph()), ?none) }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction ui:logMessage=\"Import RDF file {= ?fileName } using script {= ?script }\">
        <teamwork:scriptBasedFileImport ui:args=\"*\"/>
    </ui:transaction>
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:absolute=\"{= true }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
        <ui:group>{= ?link }#tabs-ImportProjectTab</ui:group>
    </ui:createLink>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Script-based file import service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ScriptBasedImportPlugin
  a teamwork:ImportPlugin ;
  ui:prototype """
<ui:group letrs:scripts='{#
        SELECT ?script ?graph
        WHERE {
            {
                ?path tops:files ( \"\" true ) .
                BIND (smf:baseURI(?path) AS ?graph) .
                FILTER ((bound(?graph) &amp;&amp; smf:canRead(?graph)) &amp;&amp; CONTAINS(?path, \".sms.\")) .
            } .
            GRAPH ?graph {
                ?script a sm:Function .
                BIND (teamwork:getProjectType(?projectGraph) AS ?projectType) .
                FILTER (EXISTS {
                    ?script teamworkscripts:suitableProjectType ?projectType .
                } || EXISTS {
                    ?script teamworkscripts:suitableVocabulary ?projectGraph .
                }) .
            } .
        } }'>
    <ui:if ui:condition=\"{= !spr:isEmpty(?scripts) }\">
        <teamwork:ActionLink arg:comment=\"Available import scripts:\" arg:icon=\"lib/teamwork/build/images/teamwork/script.svg\" arg:title=\"Import File using Script\">
            <ul>
                <ui:forEach ui:resultSet=\"{= ?scripts }\">
                    <li>
                        <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:script=\"{= ?script }\" arg:scriptGraph=\"{= ?graph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ScriptBasedFileImportPage }\">
                            <a href=\"{= ?link }\">{= swa:labelInGraph(?script, ?graph) }</a>
                        </ui:createLink>
                    </li>
                </ui:forEach>
            </ul>
        </teamwork:ActionLink>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays links to all suitable SPARQLMotion scripts that have been annotated with the properties from the teamworkscripts namespace." ;
  rdfs:label "Import file using script plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
teamwork:SelfJoinPlugin
  a teamwork:SpreadsheetImportHierarchyPlugin ;
  ui:view """
<ui:group>
    <th class=\"teamworkImporterHeader\">
        <p class=\"teamworkImporterHeaderText\">Hierarchy (Self-Join)</p>
    </th>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Column containing the parent ids\" arg:name=\"selfJoinParent\" arg:required=\"{= true }\"/>
    <teamwork:ColumnSelectionComboBox arg:importId=\"{= ?importId }\" arg:label=\"Column containing the child ids\" arg:name=\"selfJoinChild\" arg:required=\"{= true }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Self join" ;
.
teamwork:SpreadsheetFileTypesList
  a ui:NodeClass ;
  ui:prototype """
<p>
    <span>The file must end with either</span>
    <ul>
        <li>
            <b>.xls</b> - Excel</li>
        <li>
            <b>.xlsx</b> - Excel</li>
        <li>
            <b>.tsv</b> - Tab-separated values</li>
        <li>
            <b>.csv</b> - Comma-separated values</li>
    </ul>
</p>
"""^^ui:Literal ;
  rdfs:label "Spreadsheet file types list" ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:SpreadsheetImportElements
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:importId ;
      spl:valueType xsd:integer ;
      rdfs:comment "The ID identifying the current importer session (matched by server-side spreadsheet Graph)." ;
    ] ;
  rdfs:subClassOf ui:Element ;
.
teamwork:SpreadsheetImportHierarchyPlugin
  a ui:NodeClass ;
  rdfs:label "Hierarchy plugin" ;
  rdfs:subClassOf teamwork:Plugin ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:SpreadsheetImportMappingPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:treeType ;
      spl:valueType teamwork:SpreadsheetImportHierarchyPlugin ;
      rdfs:comment "The HierarchyPlugin to use here (may be unbound)." ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\" let:progressId=\"{= ui:uniqueId() }\">
    <h1>Import Spreadsheet</h1>
    <form action=\"evnimportMapping\" id=\"theForm\" onsubmit=\"if(teamwork.validateImportSpreadsheetForm()){ {= ui:functionCall(&quot;swa.openProgressMonitorDialog&quot;, ?progressId, &quot;Importing Spreadsheet&quot;, ?nil, true, ?nil, true, ui:functionCall(&quot;swa.importSpreadsheetWindowClose&quot;, ?projectGraph)) };return true;} return false;\">
        <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
        <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
        <input name=\"targetType\" type=\"hidden\" value=\"{= ?targetType }\"/>
        <input name=\"importId\" type=\"hidden\" value=\"{= ?importId }\"/>
        <input name=\"customHandler\" type=\"hidden\" value=\"{= ?customHandler }\"/>
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
            <input name=\"URIConstructMethod\" type=\"hidden\" value=\"{= swa:getURIConstructMethod() }\"/>
            <input name=\"URICounterOffset\" type=\"hidden\" value=\"{= swa:getURICounterOffset(?targetType) }\"/>
        </ui:setContext>
        <input name=\"_progressId\" type=\"hidden\" value=\"{= ?progressId }\"/>
        <table>
            <tr>
                <td>
                    <teamwork:SpreadsheetMappingView ui:args=\"*\"/>
                </td>
            </tr>
        </table>
        <teamwork:MappingContextView ui:args=\"*\"/>
        <br/>
        <div class=\"checkbox\">
            <input name=\"overwrite\" type=\"checkbox\" value=\"true\"/>
            <span> Overwrite existing values (De-select when adding to existing data)</span>
        </div>
        <teamwork:RecordTriplesCheckbox arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
        <input name=\"submit\" onclick=\"$('#theForm').attr('target', '_blank')\" type=\"submit\" value=\"Preview\"/>
        <teamwork:Spaces/>
        <input name=\"submit\" onclick=\"$('#theForm').attr('target', '')\" type=\"submit\" value=\"Finish\"/>
        <teamwork:Spaces/>
        <span>Optional: Make this a reusable mapping template, named: </span>
        <input class=\"form-control vocabSelect\" name=\"templateLabel\" type=\"text\"/>
    </form>
    <br/>
    <br/>
    <teamwork:SpreadsheetPreview arg:importId=\"{= ?importId }\"/>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "Container class of the various kinds of mappings." ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
.
teamwork:SpreadsheetImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:pluginIndex 1 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:SpreadsheetImportUploadFilePage }\">
    <teamwork:ActionLink arg:comment=\"Takes a spreadsheet and converts its rows based on one out of several common spreadsheet patterns, including hierarchical patterns.  Lets you map columns and save mappings as a re-usable template.\" arg:icon=\"lib/teamwork/build/images/teamwork/hierarchy-spreadsheet.svg\" arg:link=\"{= ?link }\" arg:title=\"Import Spreadsheet using Pattern\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Import spreadsheet using pattern plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
teamwork:SpreadsheetImportResultPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:duplicateIds ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of primary keys that shall be reported as duplicates." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:explaination ;
      spl:valueType rdf:HTML ;
      rdfs:comment "custom generated html content explaining what happened during custom processing" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:templateLabel ;
      spl:valueType xsd:string ;
      rdfs:comment "The label of the generated template (if any)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:success ;
      spl:valueType xsd:boolean ;
      rdfs:comment "true if the import succeeded" ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <ui:if ui:condition=\"{= ?success }\">
        <h1>Completed Spreadsheet Import</h1>
        <p>
			Your spreadsheet has been successfully imported.
		</p>
    </ui:if>
    <ui:else>
        <h1>Spreadsheet Import Failed</h1>
        <p>
			Your spreadsheet could not be imported.
		</p>
    </ui:else>
    <ui:parse ui:str=\"{= ?explaination }\"/>
    <ui:if ui:condition=\"{= bound(?templateLabel) }\">
        <p>You can re-run the same import in the future with the template <b>{= ?templateLabel }</b>.</p>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?duplicateIds) }\">
        <ui:group letrs:rs='{#
                SELECT ?id
                WHERE {
                    ?id spif:split ( ?duplicateIds \" \" ) .
                } }'>
            <p>The spreadsheet contained {= spr:rowCount(?rs) } duplicate primary keys.
				This means that some entities may contain data from multiple rows.
				If this is incorrect, you may want to fix the original spreadsheet and then
				re-run the import, overwriting the previously created entries.</p>
            <ul>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <li>{= spif:replaceAll(?id, \"~\", \" \") }</li>
                </ui:forEach>
            </ul>
        </ui:group>
    </ui:if>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
.
teamwork:SpreadsheetImportSelectPatternPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <h1>Select Spreadsheet Type</h1>
    <p>
	The design patterns besides \"No Hierarchy\" support spreadsheets that
			contain a hierarchy that needs to be created as part of	the import.
		</p>
    <table>
        <tr>
            <td>
                <ui:createLink arg:customHandler=\"{= ?customHandler }\" arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" ui:viewClass=\"{= teamwork:SpreadsheetImportMappingPage }\">
                    <a href=\"{= ?link }\">
                        <h2>1. No Hierarchy</h2>
                    </a>
                </ui:createLink>
                <table cellspacing=\"4\" class=\"dataTableTable\">
                    <tr>
                        <th class=\"dataCell\">
                            <b>Term</b>
                        </th>
                        <th class=\"dataCell\">
                            <b>Size</b>
                        </th>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">World</td>
                        <td class=\"dataCell\">Huge</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Europe</td>
                        <td class=\"dataCell\">Medium</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">France</td>
                        <td class=\"dataCell\">Small</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Germany</td>
                        <td class=\"dataCell\">Small</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Pacific</td>
                        <td class=\"dataCell\">Large</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Australia</td>
                        <td class=\"dataCell\">Medium</td>
                    </tr>
                </table>
            </td>
            <td width=\"32\">&nbsp;</td>
            <td>
                <ui:createLink arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" arg:treeType=\"{= teamwork:PathWithSeparatorPlugin }\" ui:viewClass=\"{= teamwork:SpreadsheetImportMappingPage }\">
                    <a href=\"{= ?link }\">
                        <h2>2. Path with Separator</h2>
                    </a>
                </ui:createLink>
                <table cellspacing=\"4\" class=\"dataTableTable\">
                    <tr>
                        <th class=\"dataCell\">
                            <b>Term</b>
                        </th>
                        <th class=\"dataCell\">
                            <b>Hierarchy</b>
                        </th>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">World</td>
                        <td class=\"dataCell\">World</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Europe</td>
                        <td class=\"dataCell\">World &gt; Europe</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">France</td>
                        <td class=\"dataCell\">World &gt; Europe &gt; France</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Germany</td>
                        <td class=\"dataCell\">World &gt; Europe &gt; Germany</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Pacific</td>
                        <td class=\"dataCell\">World &gt; Pacific</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">Australia</td>
                        <td class=\"dataCell\">World &gt; Pacific &gt; Australia</td>
                    </tr>
                </table>
            </td>
            <td width=\"32\">&nbsp;</td>
            <td>
                <ui:createLink arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" arg:treeType=\"{= teamwork:PathWithSegmentsPlugin }\" ui:viewClass=\"{= teamwork:SpreadsheetImportMappingPage }\">
                    <a href=\"{= ?link }\">
                        <h2>3. Path with fixed-length Segments</h2>
                    </a>
                </ui:createLink>
                <table cellspacing=\"4\" class=\"dataTableTable\">
                    <tr>
                        <th class=\"dataCell\">
                            <b>Id</b>
                        </th>
                        <th class=\"dataCell\">
                            <b>Term</b>
                        </th>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">01</td>
                        <td class=\"dataCell\">World</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">0101</td>
                        <td class=\"dataCell\">Europe</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">010101</td>
                        <td class=\"dataCell\">France</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">010102</td>
                        <td class=\"dataCell\">Germany</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">0102</td>
                        <td class=\"dataCell\">Pacific</td>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">010201</td>
                        <td class=\"dataCell\">Australia</td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
    <br/>
    <table>
        <tr>
            <td>
                <ui:createLink arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" arg:treeType=\"{= teamwork:ColumnTreePlugin }\" ui:viewClass=\"{= teamwork:SpreadsheetImportMappingPage }\">
                    <a href=\"{= ?link }\">
                        <h2>4. Column-based Tree</h2>
                    </a>
                </ui:createLink>
                <table cellspacing=\"4\" class=\"dataTableTable\">
                    <tr>
                        <th class=\"dataCell\">
                            <b>Level1</b>
                        </th>
                        <th class=\"dataCell\">
                            <b>Level2</b>
                        </th>
                        <th class=\"dataCell\">
                            <b>Level3</b>
                        </th>
                    </tr>
                    <tr>
                        <td class=\"dataCell\">World</td>
                        <td class=\"dataCell\"/>
                        <td class=\"dataCell\"/>
                    </tr>
                    <tr>
                        <td class=\"dataLightCell\">World</td>
                        <td class=\"dataCell\">Europe</td>
                        <td class=\"dataCell\"/>
                    </tr>
                    <tr>
                        <td class=\"dataLightCell\">World</td>
                        <td class=\"dataLightCell\">Europe</td>
                        <td class=\"dataCell\">France</td>
                    </tr>
                    <tr>
                        <td class=\"dataLightCell\">World</td>
                        <td class=\"dataLightCell\">Europe</td>
                        <td class=\"dataCell\">Germany</td>
                    </tr>
                    <tr>
                        <td class=\"dataLightCell\">World</td>
                        <td class=\"dataCell\">Pacific</td>
                        <td class=\"dataCell\"/>
                    </tr>
                    <tr>
                        <td class=\"dataLightCell\">World</td>
                        <td class=\"dataLightCell\">Pacific</td>
                        <td class=\"dataCell\">Australia</td>
                    </tr>
                </table>
            </td>
            <td width=\"32\">&nbsp;</td>
            <td>
                <ui:if ui:condition=\"{= teamwork:getProjectType(?projectGraph) != rdmprojects:ProjectType }\">
                    <ui:createLink arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" arg:treeType=\"{= teamwork:SelfJoinPlugin }\" ui:viewClass=\"{= teamwork:SpreadsheetImportMappingPage }\">
                        <a href=\"{= ?link }\">
                            <h2>5. Self-Join</h2>
                        </a>
                    </ui:createLink>
                    <table cellspacing=\"4\" class=\"dataTableTable\">
                        <tr>
                            <th class=\"dataCell\">
                                <b>Term</b>
                            </th>
                            <th class=\"dataCell\">
                                <b>Parent</b>
                            </th>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">World</td>
                            <td class=\"dataCell\"/>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">Europe</td>
                            <td class=\"dataCell\">World</td>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">France</td>
                            <td class=\"dataCell\">Europe</td>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">Germany</td>
                            <td class=\"dataCell\">Europe</td>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">Pacific</td>
                            <td class=\"dataCell\">World</td>
                        </tr>
                        <tr>
                            <td class=\"dataCell\">Australia</td>
                            <td class=\"dataCell\">Pacific</td>
                        </tr>
                    </table>
                </ui:if>
            </td>
        </tr>
    </table>
    <p class=\"dataLightCell teamwork-spreadsheet-import-select-type-page-light-cell\">
			Cells with light color are optional.
		</p>
    <br/>
    <br/>
    <teamwork:SpreadsheetPreview arg:importId=\"{= ?importId }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Select spreadsheet pattern page" ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
.
teamwork:SpreadsheetImportSelectTypePage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <ui:classView arg:customHandler=\"{= ?customHandler }\" arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\" ui:class=\"{= ?targetType }\" ui:matchIds=\"spreadsheet-importer-type\"/>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Select type page" ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
.
teamwork:SpreadsheetImportUploadFilePage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"import-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ImportProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>Import Spreadsheet using Pattern</h1>
    <p>
			Select a spreadsheet to import.
		</p>
    <br/>
    <form action=\"evnimportFileUpload\" enctype=\"multipart/form-data\" id=\"theForm\" method=\"post\">
        <input name=\"file\" onchange=\"document.getElementById('submitButton').removeAttribute('disabled');\" required=\"required\" type=\"file\"/>
        <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
        <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
        <input name=\"customHandler\" type=\"hidden\" value=\"{= ?customHandler }\"/>
        <input name=\"fileName\" type=\"hidden\" value=\"\"/>
        <br/>
        <br/>
        <teamwork:CustomHandlerArgs arg:handler=\"{= ?customHandler }\"/>
        <teamwork:SpreadsheetFileTypesList/>
        <br/>
        <span title=\"Excel sheets are numbered starting at 1 for the leftmost sheet. Only one sheet can be imported at a time. To import multiple sheets, run this wizard multiple times.\">Sheet index (for Excel, optional): </span>
        <input class=\"form-control\" name=\"sheetIndex\" type=\"text\" value=\"1\"/>
        <br/>
        <br/>
        <span title=\"Each row of the spreadsheet will be imported as an instance of the entity (class) chosen here.  If no concepts appear here, go to the General tab and include an ontology with the Includes link.  The set of concepts will then appear as the set of classes defined in the ontology.\">Entity type for the imported data: </span>
        <ui:setContext let:mainClass=\"{= teamwork:getMainClass(?projectGraph) }\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\">
            <ui:call arg:rootClass=\"{= ?mainClass }\" ui:template=\"{= IF(bound(?mainClass), teamwork:AllSubClassesStar, teamwork:PotentialMainClasses) }\">
                <ui:if ui:condition=\"{= spr:isEmpty(?rs) }\">
                    <div>&nbsp;</div>
                    <div class=\"teamwork-spreadsheet-import-upload-file-page-no-entity\">No potential target entity has been found. You may want to include an Ontology.</div>
                </ui:if>
                <ui:else>
                    <select class=\"form-control vocabSelect\" let:mainClass=\"{= COALESCE(?mainClass, skos:Concept) }\" name=\"targetType\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <option selected=\"{= IF((?class = ?mainClass), &quot;selected&quot;, ?none) }\" value=\"{= IRI(?class) }\">{= COALESCE(?classLabel, ?label) }</option>
                        </ui:forEach>
                    </select>
                    <br/>
                    <br/>
                    <button class=\"btn btn-primary\" id=\"submitButton\" onclick=\"handleSubmit()\" type=\"submit\">Next</button>
                    <span id=\"loader\"/>
                </ui:else>
            </ui:call>
        </ui:setContext>
    </form>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportFileUploadPage ;
  rdfs:subClassOf teamwork:AbstractSpreadsheetImportPage ;
.
teamwork:SpreadsheetMappingView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:treeType ;
      spl:valueType teamwork:SpreadsheetImportHierarchyPlugin ;
      rdfs:comment "The HierarchyPlugin to use here (may be unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The target class." ;
    ] ;
  ui:prototype """
<ui:group>
    <h2>Column Mapping</h2>
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <p>Map Spreadsheet Columns to Target Properties for the class <b class=\"teamwork-spreadsheet-mapping-view-target-label\">{= ui:label(?targetType) }</b>:</p>
    </ui:setContext>
    <ui:setContext ui:queryGraph=\"{= teamwork:importGraphWithId(?importId) }\">
        <table>
            <tr>
                <td valign=\"top\">
                    <table letrs:colRS=\"{#
                            SELECT ?label ?colIndex
                            WHERE {
                                ?property tables:columnIndex ?colIndex .
                                ?property rdfs:label ?label .
                            }
                            ORDER BY (?colIndex) }\">
                        <tr>
                            <th class=\"teamworkImporterHeader\">
                                <p class=\"teamworkImporterHeaderText\">Spreadsheet Column</p>
                            </th>
                            <th class=\"teamworkImporterHeader\">
                                <p class=\"teamworkImporterHeaderText\">Target Property</p>
                            </th>
                            <th class=\"teamworkImporterHeader\">
                                <p class=\"teamworkImporterHeaderText\">Parameters</p>
                            </th>
                        </tr>
                        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                            <ui:group letrs:ps='{#
                                    SELECT DISTINCT ?p ?propertyLabel ?string ?rangeClass ?inverse
                                    WHERE {
                                        {
                                            FILTER spl:subClassOf(?targetType, skos:Concept) .
                                            VALUES ?p {
                                                skos:prefLabel
                                                skos:altLabel
                                                skos:definition
                                                skos:example
                                                skos:notation
                                                skos:note
                                                skos:changeNote
                                                skos:editorialNote
                                                skos:historyNote
                                                skos:scopeNote
                                            } .
                                            BIND (swa:localRangeAtClass(?targetType, ?p) AS ?range) .
                                            BIND (IF((?range IN (xsd:string, rdf:langString)), true, ?none) AS ?string) .
                                            BIND (IF(((!swa:isDatatypeRange(?range)) &amp;&amp; (!swa:hasPrimaryKey(?range))), ?range, ?none) AS ?rangeClass) .
                                            FILTER swa:filterSystemResources(?p) .
                                            BIND (swa:propertyLabelAtClassOrShape(?p, ?targetType) AS ?propertyLabel) .
                                        }
                                        UNION
                                        {
                                            ?targetType swa:relevantClassOfProperty ?p .
                                            BIND (swa:localRangeAtClass(?targetType, ?p) AS ?range) .
                                            BIND (IF((?range IN (xsd:string, rdf:langString)), true, ?none) AS ?string) .
                                            BIND (IF(((!swa:isDatatypeRange(?range)) &amp;&amp; (!swa:hasPrimaryKey(?range))), ?range, ?none) AS ?rangeClass) .
                                            FILTER (swa:filterSystemResources(?p) || EXISTS {
                                                ?targetType (rdfs:subClassOf)* ?x .
                                                ?x sh:property/sh:path ?p .
                                            }) .
                                            BIND (swa:propertyLabelAtClassOrShape(?p, ?targetType) AS ?propertyLabel) .
                                        }
                                        UNION
                                        {
                                            ?t (rdfs:subClassOf)* ?targetType .
                                            ?t sh:property ?ps .
                                            ?ps sh:path ?path .
                                            ?path sh:inversePath ?p .
                                            ?ps sh:class ?rangeClass .
                                            FILTER isBlank(?path) .
                                            BIND (true AS ?inverse) .
                                            BIND (COALESCE(spl:object(?ps, sh:name), CONCAT(ui:label(?p), \" (inverse)\")) AS ?propertyLabel) .
                                        }
                                        UNION
                                        {
                                            ?t (rdfs:subClassOf)* ?targetType .
                                            ?p rdfs:range ?t .
                                            ?p rdfs:domain ?rangeClass .
                                            BIND (true AS ?inverse) .
                                            BIND (CONCAT(ui:label(?p), \" (inverse\") AS ?propertyLabel) .
                                        }
                                        UNION
                                        {
                                            BIND (rdfs:label AS ?p) .
                                            BIND (true AS ?string) .
                                            BIND (swa:propertyLabelAtClassOrShape(?p, ?targetType) AS ?propertyLabel) .
                                        } .
                                    }
                                    ORDER BY (?propertyLabel) (?inverse) }'>
                                <ui:forEach ui:resultSet=\"{= ?colRS }\">
                                    <tr let:loadId=\"{= ui:uniqueId() }\">
                                        <td class=\"rightCell\">{= ?label }</td>
                                        <td>
                                            <select class=\"form-control swa-with-top-bottom-margins\" id=\"select-{= ?loadId }\" name=\"targetPredicate{= ?colIndex }\" onchange=\"var params = { string : $('#select-{= ?loadId } option:selected').attr('data-string') || false }; var rangeClass = $('#select-{= ?loadId } option:selected').attr('data-rangeClass'); if(rangeClass) {params.rangeClass = '&lt;' + rangeClass + '&gt;'} if($(this).val() != 'none') { params.property = '&lt;' + $(this).val() + '&gt;' }; swa.load('{= ?loadId }', params);\">
                                                <option value=\"none\">-</option>
                                                <ui:forEach ui:resultSet=\"{= ?ps }\">
                                                    <ui:if ui:condition=\"{= ?inverse }\">
                                                        <option data-rangeClass=\"{= ?rangeClass }\" value=\"~{= IRI(?p) }\">{= ?propertyLabel }</option>
                                                    </ui:if>
                                                    <ui:else>
                                                        <option data-rangeClass=\"{= ?rangeClass }\" data-string=\"{= ?string }\" selected=\"{= IF((((regex(?label, ?propertyLabel, &quot;i&quot;) || (?label = str(smf:qname(?p)))) || (?label = afn:localname(?p))) || (?label = str(?p))), &quot;selected&quot;, ?none) }\" value=\"{= IRI(?p) }\">{= ?propertyLabel }</option>
                                                    </ui:else>
                                                </ui:forEach>
                                            </select>
                                            <swa:Spaces/>
                                        </td>
                                        <td>
                                            <ui:loadable ui:loadId=\"{= ?loadId }\">
                                                <ui:if ui:condition=\"{= bound(?property) }\">
                                                    <ui:if ui:condition=\"{= ?string }\">
                                                        <span>Language:</span>
                                                        <swa:LangSelector arg:plain=\"{= true }\" arg:uid=\"{= ?colIndex }\"/>
                                                    </ui:if>
                                                    <ui:elseif ui:condition=\"{= bound(?rangeClass) }\">
                                                        <ui:if ui:condition=\"{= teamwork:allValuesAreAbsoluteURLs(?colIndex, teamwork:importGraphWithId(?importId)) }\">
                                                            <span>Use values as URIs</span>
                                                            <input name=\"resourceWithIRI-{= ?colIndex }\" type=\"hidden\" value=\"true\"/>
                                                        </ui:if>
                                                        <ui:else>
                                                            <span>Match values of </span>
                                                            <select class=\"form-control swa-with-top-bottom-margins\" name=\"resourceWithValuePredicate-{= ?colIndex }\">
                                                                <ui:forEach ui:resultSet=\"{#
                                                                        SELECT DISTINCT ?predicate ?predicateLabel
                                                                        WHERE {
                                                                            ?rangeType (rdfs:subClassOf)* ?rangeClass .
                                                                            ?rangeType swa:relevantClassOfProperty ?predicate .
                                                                            FILTER (!swa:isHiddenProperty(?predicate)) .
                                                                            BIND (swa:localRangeAtClass(?rangeType, ?predicate) AS ?range) .
                                                                            FILTER swa:isDatatypeRange(?range) .
                                                                            BIND (ui:label(?predicate) AS ?predicateLabel) .
                                                                        }
                                                                        ORDER BY (?predicateLabel) }\">
                                                                    <option value=\"{= ?predicate }\">{= ?predicateLabel }</option>
                                                                </ui:forEach>
                                                            </select>
                                                            <span>at {= ui:label(?rangeClass) }</span>
                                                            <input name=\"resourceWithValueType-{= ?colIndex }\" type=\"hidden\" value=\"{= ?rangeClass }\"/>
                                                        </ui:else>
                                                    </ui:elseif>
                                                </ui:if>
                                            </ui:loadable>
                                            <script>$(\"#select-{= ?loadId }\").trigger('change')</script>
                                        </td>
                                    </tr>
                                </ui:forEach>
                            </ui:group>
                        </ui:setContext>
                    </table>
                </td>
                <ui:if ui:condition=\"{= bound(?treeType) }\">
                    <td width=\"20\"/>
                    <td rowspan=\"100\" valign=\"top\">
                        <table valign=\"top\">
                            <ui:resourceView arg:importId=\"{= ?importId }\" ui:resource=\"{= ?treeType }\"/>
                            <teamwork:HierarchyPropertySelectionPanel ui:args=\"*\"/>
                        </table>
                    </td>
                </ui:if>
            </tr>
        </table>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:SpreadsheetPreview
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:importGraphWithId(?importId) }\">
    <h2>Your Source Spreadsheet (First 20 rows)</h2>
    <div class=\"swa-overflow-auto\">
        <table class=\"dataTableTable\" letrs:colRS=\"{#
                SELECT *
                WHERE {
                    ?property tables:columnIndex ?colIndex .
                    ?property rdfs:label ?label .
                }
                ORDER BY (?colIndex) }\">
            <tr>
                <ui:forEach ui:resultSet=\"{= ?colRS }\">
                    <th class=\"dataCell\">
                        <b>{= ?label }</b>
                    </th>
                </ui:forEach>
            </tr>
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?row
                    WHERE {
                        ?row tables:rowIndex ?rowIndex .
                    }
                    ORDER BY (?rowIndex)
                    LIMIT 20 }\">
                <tr>
                    <ui:forEach ui:resultSet=\"{= ?colRS }\">
                        <td class=\"dataCell swa-align-top\">{= spl:object(?row, ?property) }</td>
                    </ui:forEach>
                </tr>
            </ui:forEach>
        </table>
    </div>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Displays a table with the first few rows of the spreadsheet with the given importId." ;
  rdfs:label "Spreadsheet preview" ;
  rdfs:subClassOf teamwork:SpreadsheetImportElements ;
.
teamwork:SpreadsheetUsingTemplateImportPlugin
  a teamwork:ImportPlugin ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ImportSpreadsheetUsingTemplatePage }\">
    <teamwork:ActionLink arg:comment=\"Loads a given spreadsheet file and converts its content based on a pre-defined mapping template.\" arg:icon=\"lib/teamwork/build/images/teamwork/concept-overview-spreadsheet.svg\" arg:link=\"{= ?link }\" arg:title=\"Import Spreadsheet using Template\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Import spreadsheet using template plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
teamwork:allValuesAreAbsoluteURLs
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "colIndex" ;
                    ] ;
                  sp:predicate tables:columnIndex ;
                  sp:subject [
                      sp:varName "predicate" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:exists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "value" ;
                              ] ;
                            sp:predicate [
                                sp:varName "predicate" ;
                              ] ;
                            sp:subject [
                                sp:varName "any" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "value" ;
                              ] ;
                            sp:predicate [
                                sp:varName "predicate" ;
                              ] ;
                            sp:subject [
                                sp:varName "any" ;
                              ] ;
                          ]
                          [
                            a sp:Filter ;
                            sp:expression [
                                a sp:not ;
                                sp:arg1 [
                                    a smf:isURL ;
                                    arg:string [
                                        sp:varName "value" ;
                                      ] ;
                                  ] ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:colIndex ;
      spl:valueType xsd:integer ;
      rdfs:comment "The column index that is checked." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph holding the imported spreadsheet." ;
    ] ;
  spin:private true ;
  rdfs:label "all values are absolute URLs" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:importGraphWithId
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "uri" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "urn:x-evnimport:" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "importId" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "uri" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:importId ;
      spl:valueType xsd:integer ;
      rdfs:comment "The id to get the graph IRI of." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the (temp) id of a loaded spreadsheet graph, in particular to be used with ui:setContext." ;
  rdfs:label "import graph with id" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:importRDFFile
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:manager ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if this is called from a manager." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:validateOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to perform validation only." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate ui:progressId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:customHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:format ;
      spl:valueType xsd:string ;
      rdfs:comment "\"turtle\", \"jsonld\" or anything else for RDF/XML" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:importId ;
      spl:valueType xsd:int ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  ui:private false ;
  rdfs:label "import RDF file" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:scriptBasedFileImport
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:record ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to record the new triples in the change history." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:file ;
      spl:valueType xsd:string ;
      rdfs:comment "The file content or path to temp file." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fileName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the uploaded file." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:script ;
      spl:valueType sm:Function ;
      rdfs:comment "The script to run the conversion with." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:scriptGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The script's home graph." ;
    ] ;
  ui:private true ;
  rdfs:label "script-based file import" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:tableMapFiles
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "baseURI" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate tops:files ;
              sp:subject [
                  sp:varName "file" ;
                ] ;
            ]
            [
              sp:object "/" ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object true ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:and ;
                  sp:arg1 [
                      a smf:hasBaseURI ;
                      sp:arg1 [
                          sp:varName "file" ;
                        ] ;
                    ] ;
                  sp:arg2 [
                      a sp:contains ;
                      sp:arg1 [
                          sp:varName "file" ;
                        ] ;
                      sp:arg2 ".tablemap." ;
                    ] ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a smf:baseURI ;
                  sp:arg1 [
                      sp:varName "file" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "baseURI" ;
                ] ;
            ]
          )
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "baseURI" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    a sp:iri ;
                    sp:arg1 [
                        sp:varName "baseURI" ;
                      ] ;
                  ] ;
                arg:resourceGraph [
                    a sp:iri ;
                    sp:arg1 [
                        sp:varName "baseURI" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:comment """Delivers a list of base URIs of those files in the workspace that match the naming convention of tablemap files. Must have one unbound variable on the right side. Example:

() teamwork:tableMapFiles ?baseURI""" ;
  rdfs:subClassOf spin:MagicProperties ;
.
<http://topbraid.org/teamworkimporters.ui>
  a owl:Ontology ;
  rdfs:comment "A library of standard teamwork:ImportPlugins and their helper modules." ;
  owl:imports <http://topbraid.org/tables> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworkscripts> ;
.
rdfs:Resource
  ui:instanceView """
<ui:group ui:id=\"spreadsheet-importer-type\" ui:priority=\"{= -1 }\">
    <teamwork:SpreadsheetImportSelectPatternPage arg:customHandler=\"{= ?customHandler }\" arg:importId=\"{= ?importId }\" arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" arg:targetType=\"{= ?targetType }\"/>
</ui:group>
"""^^ui:Literal ;
.
