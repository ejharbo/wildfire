# baseURI: http://topbraid.org/teamworkgovernance.ui
# imports: http://edg.topbraid.solutions/1.0/project/governance-model
# imports: http://edg.topbraid.solutions/1.0/spin/governance
# imports: http://server.topbraidlive.org/tblui
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# imports: http://uispin.org/swon
# prefix: governance

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:muted
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:partiesChangedEvent
  a rdf:Property ;
  rdfs:label "parties changed event" ;
.
arg:subjectArea
  a rdf:Property ;
.
arg:withJobTitles
  a rdf:Property ;
.
teamwork:AreasGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression """
<teamwork:projectLink sp:arg1=\"{= ?projectGraph }\" sp:arg2=\"{= ?tag }\" sp:arg3=\"{= governance:SubjectAreasPage }\"/>
"""^^ui:Literal ;
  teamwork:pluginIndex -6 ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
      sp:arg2 [
          a teamwork:platformGovernanceGraph ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Governance Areas" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
teamwork:DashboardsGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression [
      a governance:dashboardsLink ;
      sp:arg1 [
          sp:varName "tag" ;
        ] ;
    ] ;
  teamwork:pluginIndex -3 ;
  teamwork:pluginValidExpression [
      a sp:and ;
      sp:arg1 [
          a sp:and ;
          sp:arg1 [
              a sp:eq ;
              sp:arg1 [
                  sp:varName "projectGraph" ;
                ] ;
              sp:arg2 [
                  a teamwork:platformGovernanceGraph ;
                ] ;
            ] ;
          sp:arg2 [
              a teamwork:currentUserIsTeamworkAdmin ;
            ] ;
        ] ;
      sp:arg2 [
          a sp:coalesce ;
          sp:arg1 [
              a smf:configParam ;
              arg:param "metricsDashboardsActivated" ;
            ] ;
          sp:arg2 [
              a uix:isTBC ;
            ] ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Dashboards" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
teamwork:IssuesGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression [
      a governance:issuesLink ;
      sp:arg1 [
          sp:varName "tag" ;
        ] ;
    ] ;
  teamwork:pluginIndex -2 ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
      sp:arg2 [
          a teamwork:platformGovernanceGraph ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Issues" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
teamwork:MetricsGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression [
      a governance:metricsLink ;
      sp:arg1 [
          sp:varName "tag" ;
        ] ;
    ] ;
  teamwork:pluginIndex -4 ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
      sp:arg2 [
          a teamwork:platformGovernanceGraph ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Metrics" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
teamwork:OrgStructureGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression """
<teamwork:projectLink sp:arg1=\"{= ?projectGraph }\" sp:arg2=\"{= ?tag }\" sp:arg3=\"{= governance:OrgStructurePage }\"/>
"""^^ui:Literal ;
  teamwork:pluginIndex -5 ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
      sp:arg2 [
          a teamwork:platformGovernanceGraph ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Organizational Structure" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
teamwork:PoliciesGovernanceTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression [
      a governance:policiesLink ;
      sp:arg1 [
          sp:varName "tag" ;
        ] ;
    ] ;
  teamwork:pluginIndex -1 ;
  teamwork:pluginValidExpression [
      a sp:eq ;
      sp:arg1 [
          sp:varName "projectGraph" ;
        ] ;
      sp:arg2 [
          a teamwork:platformGovernanceGraph ;
        ] ;
    ] ;
  teamwork:validForTags true ;
  rdfs:label "Policies" ;
  rdfs:subClassOf governance:GovernanceProjectTabs ;
.
<http://topbraid.org/teamworkgovernance.ui>
  a owl:Ontology ;
  owl:imports <http://edg.topbraid.solutions/1.0/project/governance-model> ;
  owl:imports <http://edg.topbraid.solutions/1.0/spin/governance> ;
  owl:imports <http://server.topbraidlive.org/tblui> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://uispin.org/swon> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
governance:AddProjectToSubjectAreaHandler
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:metadata=\"{= ?metadata }\">
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?projectGraph edg:subjectArea ?subjectArea .
                }
                WHERE {
                } }\"/>
    </ui:setContext>
    <safindex:checkArea arg:area=\"{= ?subjectArea }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "Adds triple for subject area to passed in project graph" ;
  rdfs:label "Add project to subject area" ;
  rdfs:subClassOf swa:EditHandlers ;
.
governance:AreaTreeChildren
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
          [
            sp:varName "metadata" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Union ;
                    sp:elements (
                        (
                          [
                            sp:object edg:BusinessArea ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "node" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression "icon-business-area" ;
                            sp:variable [
                                sp:varName "icon" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression "business-area" ;
                            sp:variable [
                                sp:varName "metadata" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression 2 ;
                            sp:variable [
                                sp:varName "order" ;
                              ] ;
                          ]
                        )
                        (
                          [
                            sp:object edg:DataSubjectArea ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "node" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression "icon-data-subject-area" ;
                            sp:variable [
                                sp:varName "icon" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression "data-subject-area" ;
                            sp:variable [
                                sp:varName "metadata" ;
                              ] ;
                          ]
                          [
                            a sp:Bind ;
                            sp:expression 3 ;
                            sp:variable [
                                sp:varName "order" ;
                              ] ;
                          ]
                        )
                      ) ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "parent" ;
                                  ] ;
                                sp:arg2 [
                                    a governance:dummyAreaTreeRoot ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "node" ;
                                        ] ;
                                      sp:predicate edg:subArea ;
                                      sp:subject [
                                          sp:varName "superArea" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:exists ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "node" ;
                                    ] ;
                                  sp:predicate edg:subArea ;
                                  sp:subject [
                                      sp:varName "parent" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:notExists ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "child" ;
                                    ] ;
                                  sp:predicate edg:subArea ;
                                  sp:subject [
                                      sp:varName "node" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                        sp:arg2 [
                            a sp:notExists ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "role" ;
                                    ] ;
                                  sp:predicate edg:requiredGovernanceRole ;
                                  sp:subject [
                                      sp:varName "node" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "leaf" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate edg:requiredGovernanceRole ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a governance:countPartiesWithGovernanceRole ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "partyCount" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a governance:governanceRoleLabelWithAssignmentInfo ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "parent" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression true ;
                    sp:variable [
                        sp:varName "leaf" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "partyCount" ;
                              ] ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 "icon-governance-role-unassigned" ;
                        sp:arg3 "icon-governance-role" ;
                      ] ;
                    sp:variable [
                        sp:varName "icon" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "partyCount" ;
                              ] ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 "unassigned-governance-role" ;
                        sp:arg3 "assigned-governance-role" ;
                      ] ;
                    sp:variable [
                        sp:varName "metadata" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "order" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression false ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment """This tree has a special \"dummy\" root resource, governance:dummyAreaTreeRoot(). Besides the root, there are three kinds of nodes: business areas, data subject areas, and governance roles.

The area hierarchy for both kinds of areas is expressed through edg:subArea. Top-level areas don't have an incoming edg:subArea triple.

Governance roles are leaf nodes that are connected to their parent area via edg:requiredGovernanceRole. We check whether the governance role has been assigned to some party for this area, and use different icons and labels depending on the answer.""" ;
  rdfs:label "Area tree children" ;
  rdfs:subClassOf swa:TreeChildrenTemplates ;
.
governance:AreaTreeDataProvider
  a swa:TreeDataProvider ;
  arg:treeChildrenTemplate governance:AreaTreeChildren ;
  arg:treePathTemplate governance:AreaTreePath ;
  arg:treeRootsTemplate governance:AreaTreeRoots ;
  rdfs:comment "A TreeDataProvider for the subject area tree in the platform governance UI." ;
  rdfs:label "Area tree data provider" ;
.
governance:AreaTreePath
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "path" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 [
                            a governance:dummyAreaTreeRoot ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "path" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a spl:instanceOf ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 edg:SubjectArea ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                a governance:dummyAreaTreeRoot ;
                              ] ;
                          ] ;
                        sp:arg2 " " ;
                        sp:arg3 [
                            a spif:shortestSubjectsPath ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                            sp:arg2 edg:subArea ;
                            sp:arg3 [
                                sp:varName "root" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "path" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:not ;
                            sp:arg1 [
                                a spl:instanceOf ;
                                sp:arg1 [
                                    sp:varName "node" ;
                                  ] ;
                                sp:arg2 edg:SubjectArea ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                            sp:arg2 [
                                a governance:dummyAreaTreeRoot ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:subject ;
                        sp:arg1 edg:requiredGovernanceRole ;
                        sp:arg2 [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "area" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "area" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                a governance:dummyAreaTreeRoot ;
                              ] ;
                          ] ;
                        sp:arg2 " " ;
                        sp:arg3 [
                            a spif:shortestSubjectsPath ;
                            sp:arg1 [
                                sp:varName "area" ;
                              ] ;
                            sp:arg2 edg:subArea ;
                            sp:arg3 [
                                sp:varName "root" ;
                              ] ;
                          ] ;
                        sp:arg4 " " ;
                        sp:arg5 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "path" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Used by the area tree to find the shortest path to a given node. Handles edg:SubjectArea and edg:WorkflowParticipantProperty nodes." ;
  rdfs:label "Area tree path" ;
  rdfs:subClassOf swa:TreePathTemplates ;
.
governance:AreaTreeRoots
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
          [
            sp:varName "metadata" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a governance:dummyAreaTreeRoot ;
              ] ;
            sp:variable [
                sp:varName "node" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "Business & Data Subject Areas" ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression false ;
            sp:variable [
                sp:varName "leaf" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "icon-home" ;
            sp:variable [
                sp:varName "icon" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression false ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "root" ;
            sp:variable [
                sp:varName "metadata" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Area tree roots" ;
  rdfs:subClassOf swa:TreeRootsTemplates ;
.
governance:AreaTreeToolbar
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "Toolbar will fire this event when a different resource should be selected in the associated tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:treeId ;
      spl:valueType xsd:string ;
      rdfs:comment "id of the swa:Tree whose selected node the toolbar applies to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The node currently selected in the tree." ;
    ] ;
  ui:prototype """
<div class=\"form-inline\" let:isArea=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:SubjectArea) }\" let:isBusinessArea=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:BusinessArea) }\" let:isGovernanceRole=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:WorkflowParticipantProperty) }\" let:isRoot=\"{= (!bound(?resource)) || (?resource = governance:dummyAreaTreeRoot()) }\">
    <ui:if ui:condition=\"{= ?isRoot || ?isBusinessArea }\">
        <swa:CreateResourceButton arg:class=\"btn btn-default btn-sm\" arg:contextResourceGetter=\"'{= ?resource }'\" arg:createHandler=\"{= governance:CreateAreaHandler }\" arg:label=\"{= IF(?isRoot, &quot;Create Business Area&quot;, &quot;Add Business Sub-Area&quot;) }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:resourceType=\"{= edg:BusinessArea }\" arg:toolTip=\"Creates a new Business Area underneath the selected parent.\"/>
    </ui:if>
    <ui:if ui:condition=\"{= ?isRoot || ?isArea }\">
        <swa:CreateResourceButton arg:class=\"btn btn-default btn-sm\" arg:contextResourceGetter=\"'{= ?resource }'\" arg:createHandler=\"{= governance:CreateAreaHandler }\" arg:label=\"{= IF(?isRoot, &quot;Create Data Subject Area&quot;, &quot;Add Data Subject Sub-Area&quot;) }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:resourceType=\"{= edg:DataSubjectArea }\" arg:toolTip=\"Creates a new Data Subject Area underneath the selected parent.\"/>
    </ui:if>
    <ui:if ui:condition=\"{= ?isArea }\">
        <select class=\"form-control input-sm\" id=\"dropdown-governance-role\" title=\"Enables the selected governance role for this area.\">
            <option disabled=\"disabled\" selected=\"selected\" value=\"\">Add governance role&hellip;</option>
            <ui:forEach ui:resultSet='{#
                    SELECT ?role ?label ?assigned
                    WHERE {
                        rdf:nil edg:workflowParticipantProperties ?role .
                        OPTIONAL {
                            ?role edg:abbreviation ?abbrev .
                        } .
                        BIND (CONCAT(spif:titleCase(ui:label(?role)), IF(bound(?abbrev), CONCAT(\" (\", ?abbrev, \")\"), \"\")) AS ?label) .
                        BIND (EXISTS {
                            ?resource edg:requiredGovernanceRole ?role .
                        } AS ?assigned) .
                    } }'>
                <option disabled=\"{= IF(?assigned, &quot;disabled&quot;, ?null) }\" value=\"{= ?role }\">{= ?label }</option>
            </ui:forEach>
        </select>
        <script>governance.initGovernanceRoleDropdown('{= ?treeId }');</script>
    </ui:if>
    <ui:if ui:condition=\"{= (!?isArea) &amp;&amp; (!?isRoot) }\">
        <button class=\"btn btn-default btn-sm\" style=\"visibility: hidden\">&nbsp;</button>
    </ui:if>
</div>
"""^^ui:Literal ;
  rdfs:comment "Toolbar associated with the governance area tree with actions for creating new tree nodes." ;
  rdfs:label "area tree toolbar" ;
  rdfs:subClassOf governance:Elements ;
.
governance:AssetCollectionsSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <ui:loadable ui:loadId=\"{= ?loadId }\">
        <ui:group let:unreadableCount=\"{= governance:countUnreadableAssetCollectionsWithSubjectArea(?subjectArea) }\" letrs:projects=\"{#
                SELECT ?projectGraph ?projectEditable ?viewable (teamwork:workflowsInProgressCount(?projectGraph, ?teamGraph) AS ?workflows)
                WHERE {
                    rdf:nil teamwork:readableGraphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
                    FILTER teamwork:projectHasSubjectArea(?projectGraph, ?subjectArea) .
                    BIND ((teamwork:hasEditorApplication(teamwork:getProjectType(?projectGraph)) &amp;&amp; teamwork:currentUserHasPrivilege(?teamGraph, teamwork:editor, ?teamGraph)) AS ?projectEditable) .
                } }\">
            <h3>Asset Collections</h3>
            <div class=\"governance-asset-collection-count\" data-count=\"{= spr:rowCount(?projects) + ?unreadableCount }\"/>
            <ui:if ui:condition=\"{= spr:isEmpty(?projects) &amp;&amp; (?unreadableCount = 0) }\">
                <p>No asset collections are associated with this {= spif:lowerCase(ui:label(spl:object(?subjectArea, rdf:type))) }.</p>
            </ui:if>
            <ui:if ui:condition=\"{= teamwork:canCreateProject() }\">
                <ui:group let:lowerCaseSubjArea=\"{= spif:lowerCase(ui:label(spl:object(?subjectArea, rdf:type))) }\" letrs:projectTypes=\"{#
                        SELECT ?projectType (teamwork:singularProjectTypeLabel(?projectType) AS ?label) ?createPageClass
                        WHERE {
                            GRAPH ui:graph {
                                BIND (teamwork:product() AS ?product) .
                                ?product teamwork:defaultProjectType ?projectType .
                                FILTER teamwork:hasProjectTypeLicense(?projectType) .
                                FILTER (!teamwork:isProjectTypeDisabled(?projectType)) .
                                FILTER (!teamwork:isSingletonProjectType(?projectType)) .
                                BIND (COALESCE(spl:objectInGraph(?projectType, teamwork:createProjectPageClass, ui:graph), teamwork:DefaultCreateProjectPage) AS ?createPageClass) .
                                BIND (COALESCE(spl:object(?projectType, teamwork:projectTypeWeight), 0) AS ?index) .
                            } .
                        }
                        ORDER BY (?index) }\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?projectTypes) }\">
                        <form action=\"swp\" class=\"form-inline\" method=\"get\">
                            <input name=\"_viewClass\" type=\"hidden\" value=\"\"/>
                            <input name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
                            <p>
                                <span>Create new</span>
                                <swa:Space/>
                                <select class=\"form-control input-sm\" id=\"create-new-project-types\" name=\"projectType\" onchange=\"governance.submitCreateAssetCollection(this)\">
                                    <option disabled=\"disabled\" selected=\"selected\" value=\"\">Choose type...</option>
                                    <ui:forEach ui:resultSet=\"{= ?projectTypes }\">
                                        <option data-view-class=\"{= ?createPageClass }\" value=\"&lt;{= ?projectType }&gt;\">{= ?label }</option>
                                    </ui:forEach>
                                </select>
                                <swa:Space/>
                                <span>in this {= ?lowerCaseSubjArea }</span>
                            </p>
                        </form>
                    </ui:if>
                    <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                        <ui:group letrs:projectsWithAccess=\"{#
                                SELECT ?projectGraph ?projectGraphLabel
                                WHERE {
                                    rdf:nil teamwork:readableGraphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
                                    FILTER (!teamwork:isSingletonProjectType(?projectGraph)) .
                                    FILTER (?projectGraph != &lt;urn:x-evn-master:platform_governance_singleton&gt;) .
                                    FILTER (?projectGraph != &lt;urn:x-evn-master:EDGenumerationsSingleton&gt;) .
                                    BIND (teamwork:projectLabel(?projectGraph) AS ?projectGraphLabel) .
                                }
                                ORDER BY (?projectGraphLabel) }\" ui:queryGraph=\"ui:graph\">
                            <form action=\"swp\" class=\"form-inline\" method=\"get\">
                                <input name=\"_viewClass\" type=\"hidden\" value=\"governance:AddProjectToSubjectAreaHandler\"/>
                                <input id=\"subjectArea\" name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
                                <p>
                                    <span>Add Existing</span>
                                    <swa:Space/>
                                    <select class=\"form-control input-sm\" id=\"add-existing-project-types\" name=\"projectType\" onchange=\"governance.submitAddAssetCollection(this, '{= ?loadId }')\">
                                        <option disabled=\"disabled\" selected=\"selected\" value=\"\">Choose type...</option>
                                        <ui:forEach ui:resultSet=\"{= ?projectsWithAccess }\">
                                            <option data-view-class=\"{= ?createPageClass }\" value=\"&lt;{= ?projectGraph }&gt;\">{= ?projectGraphLabel }</option>
                                        </ui:forEach>
                                    </select>
                                    <swa:Space/>
                                    <span>in this {= ?lowerCaseSubjArea }</span>
                                </p>
                            </form>
                        </ui:group>
                    </ui:setContext>
                </ui:group>
            </ui:if>
            <ui:if ui:condition=\"{= (!spr:isEmpty(?projects)) || (?unreadableCount &gt; 0) }\">
                <table class=\"table table-condensed\">
                    <thead>
                        <th>Name</th>
                        <th class=\"text-center\" title=\"Edit/view production copy of asset collection\">
                            <i aria-hidden=\"true\" class=\"fas fa-pencil-alt\"/>/<i aria-hidden=\"true\" class=\"fa fa-eye\"/>
                        </th>
                        <th class=\"text-right\">Workflows</th>
                        <th class=\"text-right\" title=\"Additional governance role assignments for this asset collection\">+Roles</th>
                        <th class=\"text-right\">Remove</th>
                    </thead>
                    <tbody>
                        <ui:forEach ui:resultSet=\"{= ?projects }\">
                            <tr>
                                <td>
                                    <governance:AssetViewerInline arg:resource=\"{= ?projectGraph }\"/>
                                </td>
                                <td class=\"text-center\">
                                    <ui:if ui:condition=\"{= ?projectEditable }\">
                                        <a href=\"{= teamwork:editorLink(?projectGraph) }\" title=\"Edit asset collection\">
                                            <i aria-hidden=\"true\" class=\"fas fa-pencil-alt\"/>
                                        </a>
                                    </ui:if>
                                    <ui:else>
                                        <a href=\"{= teamwork:editorLink(?projectGraph) }\" title=\"View asset collection\">
                                            <i aria-hidden=\"true\" class=\"fa fa-eye\"/>
                                        </a>
                                    </ui:else>
                                </td>
                                <td class=\"text-right\">
                                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:TagsProjectTab }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                        <a href=\"{= ?link }\">{= ?workflows }</a>
                                    </ui:createLink>
                                </td>
                                <td class=\"text-right\" letrs:extraRoles=\"{#
                                        SELECT DISTINCT ?property ?label
                                        WHERE {
                                            rdf:nil edg:workflowParticipantProperties ?property .
                                            GRAPH ?projectGraph {
                                                ?projectGraph ?property ?role .
                                            } .
                                            ?property edg:abbreviation ?label .
                                        } }\">
                                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:UserRolesProjectTab }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                        <a class=\"no-underline\" href=\"{= ?link }\" title=\"Additional governance role assignments for this asset collection\">
                                            <ui:if ui:condition=\"{= spr:rowCount(?extraRoles) = 0 }\">
                                                <span class=\"text-muted\">None</span>
                                            </ui:if>
                                            <ui:else>
                                                <ui:forEach ui:resultSet=\"{= ?extraRoles }\">&nbsp;+{= ?label }</ui:forEach>
                                            </ui:else>
                                        </a>
                                    </ui:createLink>
                                </td>
                                <td class=\"text-right\">
                                    <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Remove\" arg:onClick=\"governance.submitRemoveAssetCollection('{= ?loadId }', '{= ?subjectArea }', '{= ?projectGraph }')\"/>
                                </td>
                            </tr>
                        </ui:forEach>
                        <ui:if ui:condition=\"{= ?unreadableCount &gt; 0 }\">
                            <tr>
                                <td>
                                    <governance:Icon arg:faIcon=\"fa-lock\" arg:muted=\"{= true }\" arg:toolTip=\"Unknown asset collection type\"/>
                                    <swa:Space/>
                                    <span class=\"text-muted\">Insufficient privileges to show {= ?unreadableCount } asset collection{= IF((?unreadableCount &gt; 1), \"s\", \"\") }</span>
                                </td>
                                <td class=\"text-center\">
                                    <i aria-hidden=\"true\" class=\"text-muted fa fa-eye-slash\"/>
                                </td>
                                <td/>
                            </tr>
                        </ui:if>
                    </tbody>
                </table>
            </ui:if>
        </ui:group>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A section that displays a table of asset collections associated with a subject area." ;
  rdfs:label "Asset collections section" ;
  rdfs:subClassOf governance:Elements ;
.
governance:AssetViewer
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "If specified, link to the governance asset in a working copy instead of the production copy of the governance singleton." ;
    ] ;
  ui:prototype """
<div class=\"swa-shifted-label\">
    <governance:AssetViewerInline arg:resource=\"{= ?object }\" arg:tag=\"{= ?tag }\"/>
</div>
"""^^ui:Literal ;
  rdfs:comment "A resource viewer that supports various kinds of governance assets: subject areas, organizations, job titles, users, security roles, asset collections. Where possible, resources are displayed with icon and link. This viewer sets the query graph itself as required." ;
  rdfs:label "Governance asset viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
  rdfs:subClassOf governance:Elements ;
.
governance:AssetViewerInline
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:compact ;
      spl:valueType xsd:boolean ;
      rdfs:comment "More compact display, e.g., omit name after job titles" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "If specified, link to the governance asset in a working copy instead of the production copy of the governance singleton." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= !bound(?resource) }\">
        <governance:Icon/>
        <swa:Space/>
        <em class=\"text-muted\">(unbound)</em>
    </ui:if>
    <ui:elseif ui:condition=\"{= regex(str(?resource), &quot;^urn:x-evn-master:[^:/#]+$&quot;) }\">
        <ui:group let:teamGraph=\"{= teamwork:teamGraph(?resource) }\" let:type=\"{= teamwork:getProjectType(?resource) }\" let:typeLabel=\"{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?resource)) }\">
            <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilege(?teamGraph, teamwork:viewer, ?teamGraph) &amp;&amp; smf:canRead(ui:graphWithImports(?resource)) }\">
                <governance:Icon arg:toolTip=\"{= ?typeLabel }\" arg:type=\"{= ?type }\"/>
                <swa:Space/>
                <a href=\"{= teamwork:editorLink(?resource) }\">{= teamwork:projectLabel(?resource) }</a>
            </ui:if>
            <ui:else>
                <governance:Icon arg:faIcon=\"fa-lock\" arg:muted=\"{= true }\" arg:toolTip=\"Insufficient privileges for access\"/>
                <swa:Space/>
                <em class=\"text-muted\">(asset collection)</em>
            </ui:else>
        </ui:group>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= bound(?resource) &amp;&amp; smf:isUserAccount(?resource) }\">
        <governance:Icon arg:toolTip=\"User account\" arg:type=\"{= sioc:UserAccount }\"/>
        <swa:Space/>
        <teamwork:UserLink arg:user=\"{= ?resource }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= smf:isRole(?resource) }\">
        <governance:Icon arg:toolTip=\"Security role\" arg:type=\"{= sioc:Role }\"/>
        <swa:Space/>{= smf:roleName(?resource) }</ui:elseif>
    <ui:else>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
            <ui:if ui:condition=\"{= spl:instanceOf(?resource, edg:JobTitle) }\">
                <ui:group let:count=\"{= governance:countUserAccountsAssignedToJobTitle(?resource) }\">
                    <ui:if ui:condition=\"{= governance:isJobTitlesEnabled() }\">
                        <governance:Icon arg:muted=\"{= ?count = 0 }\" arg:toolTip=\"Job Title\" arg:type=\"{= edg:JobTitle }\"/>
                        <swa:Space/>
                        <ui:createLink arg:resource=\"{= ?resource }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= governance:OrgStructurePage }\">
                            <a href=\"{= ?link }\">{= ui:label(?resource) }</a>
                        </ui:createLink>
                    </ui:if>
                    <ui:else let:org=\"{= spl:subject(edg:jobTitle, ?resource) }\">
                        <governance:AssetViewerInline arg:resource=\"{= ?org }\" ui:args=\"*\"/>
                    </ui:else>
                    <ui:if ui:condition=\"{= (!bound(?compact)) || (!?compact) }\">
                        <swa:Space/>
                        <ui:if ui:condition=\"{= (?count = 0) &amp;&amp; governance:isJobTitlesEnabled() }\">
                            <span class=\"text-muted\">(<i class=\"fa fa-user\"/> unassigned)</span>
                        </ui:if>
                        <ui:elseif ui:condition=\"{= (?count = 1) &amp;&amp; governance:isJobTitlesEnabled() }\">
                            <span let:user=\"{= spl:subject(edg:assignedJobTitle, ?resource) }\">(<i class=\"fa fa-user\"/>
                                <swa:Space/>
                                <teamwork:UserLink arg:user=\"{= ?user }\"/>)
</span>
                        </ui:elseif>
                        <ui:else>
                            <span>(<i class=\"fa fa-user\"/>
                                <swa:Space/>{= str(?count) })</span>
                        </ui:else>
                    </ui:if>
                </ui:group>
            </ui:if>
            <ui:else>
                <ui:group let:label=\"{= ui:label(?resource) }\" let:type=\"{= spl:object(?resource, rdf:type) }\" let:typeLabel=\"{= ui:label(spl:object(?resource, rdf:type)) }\" let:viewClass=\"{= IF(spl:instanceOf(?resource, edg:SubjectArea), governance:SubjectAreasPage, IF(spl:instanceOf(?resource, edg:Organization), governance:OrgStructurePage, ?none)) }\">
                    <governance:Icon arg:toolTip=\"{= ?typeLabel }\" arg:type=\"{= IF(spl:instanceOf(?resource, edg:Organization), edg:Organization, ?type) }\"/>
                    <swa:Space/>
                    <ui:if ui:condition=\"{= bound(?viewClass) }\">
                        <ui:createLink arg:resource=\"{= ?resource }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= ?viewClass }\">
                            <a href=\"{= ?link }\">{= ?label }</a>
                        </ui:createLink>
                    </ui:if>
                    <ui:elseif ui:condition=\"{= bound(?type) &amp;&amp; (?type != edg:WorkflowParticipantProperty) }\">{= ?label } ({= ui:label(?type) })</ui:elseif>
                    <ui:elseif ui:condition=\"{= ?label = str(?resource) }\">
                        <span class=\"text-muted\">{= ?label }</span>
                    </ui:elseif>
                    <ui:else>{= ?label }</ui:else>
                </ui:group>
            </ui:else>
        </ui:setContext>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Renders various kinds of governance assets as an inline HTML fragment: subject areas, organizations, job titles, users, security roles, asset collections. Where possible, resources are displayed with icon and link. Sets the query graph itself as required." ;
  rdfs:label "Governance asset viewer" ;
  rdfs:subClassOf governance:Elements ;
.
governance:AssignedAccountsAndJobTitlesSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:partiesChangedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "An event that is published when the parties associated with the given role have changed, that is, a party was added or removed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType edg:WorkflowParticipantProperty ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?governanceRole) }\">
    <p class=\"text-danger\">Error: No governanceRole specified</p>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?subjectArea) }\">
    <p class=\"text-danger\">Error: No subject area specified</p>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:loadable let:rolesGraph=\"{= teamwork:rolesGraph() }\" ui:loadId=\"assigned-parties\">
    <ui:group let:defaultPermission=\"{= teamwork:getRoleFromGoverananceRoleProperty(?subjectArea, ?governanceRole) }\" let:inferredPermission=\"{#
            SELECT ?permission
            WHERE {
                ?parentSubjectArea (edg:subArea)+ ?subjectArea .
                BIND (teamwork:getRoleFromGoverananceRoleProperty(?parentSubjectArea, ?governanceRole) AS ?permission) .
                FILTER (?permission != teamwork:viewer) .
            } }\">
        <h3>Permissions</h3>
        <p let:activeRole=\"{= teamwork:highestRole(?defaultPermission, ?inferredPermission) }\" letrs:roles=\"{#
                SELECT ?role ?label
                WHERE {
                    GRAPH ?rolesGraph {
                        ?r (rdfs:subPropertyOf)* teamwork:role .
                        ?role (rdfs:subPropertyOf)+ ?r .
                        BIND (ui:label(?role) AS ?label) .
                    } .
                }
                GROUP BY ?role ?label
                ORDER BY DESC (COUNT(?r)) }\">
            <ui:group let:roleIsInferred=\"{= bound(?inferredPermission) &amp;&amp; (?inferredPermission = ?activeRole) }\">
                <ui:if ui:condition=\"{= ?editable }\">
                    <ui:group>A {= spif:titleCase(ui:label(?governanceRole)) } has</ui:group>
                    <swa:Space/>
                    <select>
                        <ui:forEach ui:resultSet=\"{= ?roles }\">
                            <ui:group let:disabled=\"{= bound(?inferredPermission) &amp;&amp; EXISTS {
                                ?inferredPermission (rdfs:subPropertyOf)+ ?role .
                            } }\">
                                <option disabled=\"{= IF(?disabled, &quot;disabled&quot;, ?nil) }\" selected=\"{= IF((?role = ?activeRole), &quot;selected&quot;, ?nil) }\" value=\"{= ?role }\">{= ?label }<ui:if ui:condition=\"{= bound(?inferredPermission) &amp;&amp; (?role = ?inferredPermission) }\"> (via parent area)</ui:if>
                                </option>
                            </ui:group>
                        </ui:forEach>
                        <ui:handle arg:value=\"'&lt;'+this.value+'&gt;'\" ui:event=\"onchange\">
                            <ui:group let:property=\"{= teamwork:getGoverananceRolePropertyFromRole(IRI(?value)) }\">
                                <ui:transaction>
                                    <ui:update ui:updateQuery=\"{!
                                            DELETE {
                                                ?subjectArea edg:governanceRoleWithManagerPermission ?governanceRole .
                                            }
                                            WHERE {
                                                ?subjectArea edg:governanceRoleWithManagerPermission ?governanceRole .
                                                FILTER (bound(?subjectArea) &amp;&amp; bound(?governanceRole)) .
                                            } }\"/>
                                    <ui:update ui:updateQuery=\"{!
                                            DELETE {
                                                ?subjectArea edg:governanceRoleWithEditorPermission ?governanceRole .
                                            }
                                            WHERE {
                                                ?subjectArea edg:governanceRoleWithEditorPermission ?governanceRole .
                                                FILTER (bound(?subjectArea) &amp;&amp; bound(?governanceRole)) .
                                            } }\"/>
                                    <ui:if ui:condition=\"{= (!bound(?inferredPermission)) || (?inferredPermission != ?value) }\">
                                        <ui:addPropertyValue arg:property=\"{= ?property }\" arg:value=\"{= ?governanceRole }\" ui:this=\"{= ?subjectArea }\"/>
                                    </ui:if>
                                </ui:transaction>
                            </ui:group>
                        </ui:handle>
                    </select>
                    <ui:group> permission on asset collections in <em>{= ui:label(?subjectArea) }</em>.</ui:group>
                </ui:if>
                <ui:else>A {= spif:titleCase(ui:label(?governanceRole)) } has {= ui:label(?activeRole) }<ui:if ui:condition=\"{= ?roleIsInferred }\"> (via parent area)</ui:if>
 permission on asset collections in <em>{= ui:label(?subjectArea) }</em>.
</ui:else>
            </ui:group>
        </p>
    </ui:group>
    <ui:group let:roleLabel=\"{= spif:titleCase(ui:label(?governanceRole)) }\" letrs:parties=\"{#
            SELECT ?party
            WHERE {
                ?subjectArea ?governanceRole ?party .
            }
            ORDER BY (?party) }\">
        <h3>Assigned {= teamwork:getProductAbbreviation() } Users</h3>
        <ui:if ui:condition=\"{= spr:rowCount(?parties) = 0 }\">
            <p>No {= ?roleLabel } has been assigned for this area.</p>
        </ui:if>
        <ui:else>
            <ul class=\"assigned-parties\">
                <ui:forEach ui:resultSet=\"{= ?parties }\">
                    <li>
                        <governance:AssetViewerInline arg:resource=\"{= ?party }\"/>
                        <ui:if ui:condition=\"{= ?editable }\">
                            <swa:Space/>
                            <a class=\"remove-party\" href=\"javascript:void(0);\" title=\"Remove this party from the role of {= ?roleLabel }\">
                                <span class=\"text-danger\">
                                    <i aria-hidden=\"true\" class=\"fa fa-times\"/>
                                </span>
                                <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"assigned-parties\">
                                    <ui:removePropertyValue arg:property=\"{= ?governanceRole }\" arg:value=\"{= ?party }\" ui:this=\"{= ?subjectArea }\"/>
                                </ui:handle>
                            </a>
                        </ui:if>
                    </li>
                </ui:forEach>
            </ul>
        </ui:else>
        <ui:if ui:condition=\"{= ?editable }\">
            <div class=\"row\">
                <div class=\"col-xs-8\" let:selectorElementId=\"assignable-party\">
                    <div class=\"form-control input-sm governance-role-assign-user-select\" data-assigned-parties=\"assigned-parties\" data-governance-role=\"{= ?governanceRole }\" data-parties-changed-event=\"{= ?partiesChangedEvent }\" data-subject-area=\"{= ?subjectArea }\" id=\"{= ?selectorElementId }\"/>
                    <script>gadgets.Hub.publish('org.topbraid.swa.populateGovernanceRoleAssignUserDropdown', '{= ?selectorElementId }');</script>
                </div>
            </div>
        </ui:if>
        <script>governance.initAssignedAccountsSection('{= ?partiesChangedEvent }')</script>
    </ui:group>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:comment """A page section that allows management of the user accounts and job titles assigned to a given governance role for a given subject area.

TODO: Lots of duplication with governance:AssignedAccountsSection""" ;
  rdfs:label "Assigned accounts and job titles section" ;
  rdfs:subClassOf governance:Elements ;
.
governance:AssignedAccountsSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:partiesChangedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "An event that is published when the parties associated with the given role have changed, that is, a party was added or removed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jobRole ;
      spl:valueType edg:JobTitle ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?jobRole) }\">
    <span class=\"text-danger\">Missing job title</span>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:loadable ui:loadId=\"assigned-parties\">
    <ui:group letrs:parties=\"{#
            SELECT ?party
            WHERE {
                ?party edg:assignedJobTitle ?jobRole .
            } }\">
        <h3>Assigned {= teamwork:getProductAbbreviation() } Users</h3>
        <ui:if ui:condition=\"{= spr:rowCount(?parties) = 0 }\">
            <p>No user has been assigned {= IF(governance:isJobTitlesEnabled(), \"this job title\", \"to this organization\") }.</p>
        </ui:if>
        <ui:else>
            <ul class=\"assigned-parties\">
                <ui:forEach ui:resultSet=\"{= ?parties }\">
                    <li>
                        <governance:AssetViewerInline arg:resource=\"{= ?party }\"/>
                        <ui:if ui:condition=\"{= ?editable }\">
                            <swa:Space/>
                            <a class=\"remove-party\" href=\"javascript:void(0);\" title=\"Remove this party from the selected {= IF(governance:isJobTitlesEnabled(), &quot;job title&quot;, &quot;organization&quot;) }\">
                                <span class=\"text-danger\">
                                    <i aria-hidden=\"true\" class=\"fa fa-times\"/>
                                </span>
                                <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"assigned-parties\">
                                    <ui:removePropertyValue arg:property=\"{= edg:assignedJobTitle }\" arg:value=\"{= ?jobRole }\" ui:this=\"{= ?party }\"/>
                                </ui:handle>
                            </a>
                        </ui:if>
                    </li>
                </ui:forEach>
            </ul>
        </ui:else>
        <ui:if ui:condition=\"{= ?editable }\">
            <div class=\"row\">
                <div class=\"col-xs-5\" let:selectorElementId=\"assignable-party\">
                    <div class=\"form-control input-sm organization-assign-user-select\" data-assigned-parties=\"assigned-parties\" data-organization=\"{= ?jobRole }\" id=\"{= ?selectorElementId }\"/>
                    <script>gadgets.Hub.publish('org.topbraid.swa.populateOrganizationAssignUserDropdown', '{= ?selectorElementId }');</script>
                </div>
            </div>
        </ui:if>
        <script>governance.initAssignedAccountsSection('{= ?partiesChangedEvent }')</script>
    </ui:group>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:comment "A page section that allows management of the user accounts assigned to a given job title." ;
  rdfs:label "Assigned accounts section" ;
  rdfs:subClassOf governance:Elements ;
.
governance:CreateAreaHandler
  a ui:NodeClass ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:logMessage=\"Create {= ui:label(?resourceType) } with URI {= ?uri }\" ui:metadata=\"{= ?metadata }\">
    <ui:preCondition ui:errorMessage=\"{= COALESCE(swa:labelExistsPreCondition(?label), swa:validURIPreCondition(?uri), swa:unusedURIPreCondition(IRI(str(?uri))), swa:nonAbstractClassPreCondition(?resourceType)) }\">
        <ui:preCondition ui:errorMessage=\"{= IF(spl:hasValue(?resourceType, owl:oneOf), &quot;Cannot create new instances of a class with an owl:oneOf&quot;, ?none) }\">
            <ui:group let:resource=\"{= IRI(str(?uri)) }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?resource a ?resourceType .
                            ?resource ?labelProperty ?prefLabel .
                        }
                        WHERE {
                            BIND (IF(bound(?labelLang), STRLANG(?label, ?labelLang), ?label) AS ?prefLabel) .
                            BIND (swa:labelProperty(?resourceType) AS ?labelProperty) .
                        } }\"/>
                <ui:if ui:condition=\"{= bound(?contextResource) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?contextResource edg:subArea ?resource .
                            }
                            WHERE {
                                FILTER EXISTS {
                                    ?contextResource a ?anyClass .
                                } .
                            } }\"/>
                </ui:if>
                <swa:createPrimaryKeyTriple ui:args=\"*\"/>
                <swa:addDefaultValues arg:resource=\"{= ?resource }\"/>
            </ui:group>
        </ui:preCondition>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "A variation of swa:CreateAreaHandler that optionally creates an additional triple to the parent ?contextResource. This triple is not created if the ?contextResource is untyped (that is, it's the dummy tree root)." ;
  rdfs:label "Create area handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
governance:CreateJobTitleHandler
  a ui:NodeClass ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:logMessage=\"Create {= ui:label(?resourceType) } with URI {= ?uri }\" ui:metadata=\"{= ?metadata }\">
    <ui:preCondition ui:errorMessage=\"{= COALESCE(swa:labelExistsPreCondition(?label), swa:validURIPreCondition(?uri), swa:unusedURIPreCondition(IRI(str(?uri))), swa:nonAbstractClassPreCondition(?resourceType)) }\">
        <ui:preCondition ui:errorMessage=\"{= IF(spl:hasValue(?resourceType, owl:oneOf), &quot;Cannot create new instances of a class with an owl:oneOf&quot;, ?none) }\">
            <ui:group let:resource=\"{= IRI(str(?uri)) }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?resource a ?resourceType .
                            ?resource ?labelProperty ?prefLabel .
                        }
                        WHERE {
                            BIND (IF(bound(?labelLang), STRLANG(?label, ?labelLang), ?label) AS ?prefLabel) .
                            BIND (swa:labelProperty(?resourceType) AS ?labelProperty) .
                        } }\"/>
                <ui:if ui:condition=\"{= bound(?contextResource) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?contextResource edg:jobTitle ?resource .
                            }
                            WHERE {
                            } }\"/>
                </ui:if>
                <swa:createPrimaryKeyTriple ui:args=\"*\"/>
                <swa:addDefaultValues arg:resource=\"{= ?resource }\"/>
            </ui:group>
        </ui:preCondition>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "A variation of swa:CreateResourceHandler that optionally creates an additional triple to the parent ?contextResource." ;
  rdfs:label "Create job title handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
governance:CreateOrganizationHandler
  a ui:NodeClass ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:logMessage=\"Create {= ui:label(?resourceType) } with URI {= ?uri }\" ui:metadata=\"{= ?metadata }\">
    <ui:preCondition ui:errorMessage=\"{= COALESCE(swa:labelExistsPreCondition(?label), swa:validURIPreCondition(?uri), swa:unusedURIPreCondition(IRI(str(?uri))), swa:nonAbstractClassPreCondition(?resourceType)) }\">
        <ui:preCondition ui:errorMessage=\"{= IF(spl:hasValue(?resourceType, owl:oneOf), &quot;Cannot create new instances of a class with an owl:oneOf&quot;, ?none) }\">
            <ui:group let:resource=\"{= IRI(str(?uri)) }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?resource a ?resourceType .
                            ?resource ?labelProperty ?prefLabel .
                        }
                        WHERE {
                            BIND (IF(bound(?labelLang), STRLANG(?label, ?labelLang), ?label) AS ?prefLabel) .
                            BIND (swa:labelProperty(?resourceType) AS ?labelProperty) .
                        } }\"/>
                <ui:if ui:condition=\"{= bound(?contextResource) }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?contextResource edg:subOrganization ?resource .
                            }
                            WHERE {
                            } }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= !governance:isJobTitlesEnabled() }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?resource edg:jobTitle ?jobTitle .
                                ?jobTitle a edg:JobTitle .
                                ?jobTitle rdfs:label ?prefLabel .
                            }
                            WHERE {
                                BIND (IRI(CONCAT(str(?uri), &quot;_Staff&quot;)) AS ?jobTitle) .
                                BIND (IF(bound(?labelLang), STRLANG(?label, ?labelLang), ?label) AS ?prefLabel) .
                            } }\"/>
                </ui:if>
                <swa:createPrimaryKeyTriple ui:args=\"*\"/>
                <swa:addDefaultValues arg:resource=\"{= ?resource }\"/>
            </ui:group>
        </ui:preCondition>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "A variation of swa:CreateResourceHandler that optionally creates an additional triple to the parent ?contextResource, and may create a default job title for the organization." ;
  rdfs:label "Create organization handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
governance:DisableGovernanceRoleHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType edg:WorkflowParticipantProperty ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  ui:prototype """
<ui:transaction>
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?subjectArea edg:requiredGovernanceRole ?governanceRole .
                ?subjectArea edg:governanceRoleWithManagerPermission ?governanceRole .
                ?subjectArea edg:governanceRoleWithEditorPermission ?governanceRole .
                ?subjectArea ?governanceRole ?party .
            }
            WHERE {
                FILTER (bound(?subjectArea) &amp;&amp; bound(?governanceRole)) .
                OPTIONAL {
                    ?subjectArea ?governanceRole ?party .
                } .
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "Used in the subject areas UI when disabling a governance role for a particular area." ;
  rdfs:label "Disable governance role handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
governance:Elements
  a ui:NodeClass ;
  rdfs:comment "Groups together all elements for the Governance UI that require header elements to be present." ;
  rdfs:label "Elements" ;
  rdfs:subClassOf teamwork:Elements ;
.
governance:EnableGovernanceRoleHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType edg:WorkflowParticipantProperty ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  ui:prototype """
<ui:transaction>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subjectArea edg:requiredGovernanceRole ?governanceRole .
            }
            WHERE {
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "Used in the subject areas UI when enabling a governance role for a particular area." ;
  rdfs:label "Enable governance role handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
governance:GovernanceProjectTabs
  a teamwork:ProjectTab ;
  rdfs:comment "A class for grouping all the additional project tabs for the Governance Model." ;
  rdfs:label "Governance project tabs" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
  rdfs:subClassOf governance:Elements ;
.
governance:GovernanceRolesPage
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !smf:hasFile(teamwork:platformGovernanceGraph()) }\">
    <tblui:Section arg:label=\"Governance Roles\">
        <span class=\"text-danger\">
            <i class=\"fas fa-exclamation-triangle\"/>&nbsp;This installation has no governance graph.  Please be sure the {= spl:objectInGraph(cfg:teamworkActiveDatabaseDriver, rdfs:label, ui:graph) } is configured correctly.</span>
    </tblui:Section>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:if ui:condition=\"{= teamwork:isGraphStoreConfigured() }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
        <tblui:Section arg:label=\"Governance Roles\">
            <table let:editable=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) &amp;&amp; !teamwork:isCurrentGraphFrozen() }\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?role (smf:titleCase(ui:label(?role)) AS ?label)
                        WHERE {
                            rdf:nil edg:workflowParticipantProperties ?role .
                        } }\">
                    <tr>
                        <th>{= ?label }&nbsp;</th>
                        <td let:cannot=\"{= spl:object(?role, teamwork:cannotCreateTags) }\">
                            <div class=\"checkbox\">
                                <label>
                                    <input checked=\"{= IF(swa:falseOrUnbound(?cannot), &quot;checked&quot;, ?none) }\" disabled=\"{= IF(?editable, ?none, &quot;disabled&quot;) }\" type=\"checkbox\">
                                        <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                                            <ui:setPropertyValue arg:property=\"{= teamwork:cannotCreateTags }\" arg:value=\"{= !?checked }\" ui:this=\"{= ?role }\"/>
                                        </ui:handle>
                                    </input>
                                    <span>Can start workflows</span>
                                </label>
                            </div>
                        </td>
                        <td>
                            <swa:Spaces/>
                        </td>
                        <td let:cannot=\"{= spl:object(?role, teamwork:cannotEditSourceCode) }\">
                            <div class=\"checkbox\">
                                <label>
                                    <input checked=\"{= IF(swa:falseOrUnbound(?cannot), &quot;checked&quot;, ?none) }\" disabled=\"{= IF(?editable, ?none, &quot;disabled&quot;) }\" type=\"checkbox\">
                                        <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                                            <ui:setPropertyValue arg:property=\"{= teamwork:cannotEditSourceCode }\" arg:value=\"{= !?checked }\" ui:this=\"{= ?role }\"/>
                                        </ui:handle>
                                    </input>
                                    <span>Can edit source code</span>
                                </label>
                            </div>
                        </td>
                    </tr>
                </ui:forEach>
            </table>
        </tblui:Section>
    </ui:setContext>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Governance Roles" ;
  rdfs:subClassOf teamworkconfig:ConfigSectionPlugins ;
.
governance:GovernanceRolesSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue true ;
      spl:optional true ;
      spl:predicate arg:compact ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Shows a compact version of the table. Defaults to true." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue true ;
      spl:optional true ;
      spl:predicate arg:withJobTitles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Display the job title column?" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "Optionally, the Teamwork Tag for which to display the section." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:party ;
      spl:valueType edg:Party ;
      rdfs:comment "The organization, job title or user account whose governance roles to show" ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?party) }\">
    <p class=\"text-danger\">Missing ?party</p>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:group letrs:roles=\"{#
        SELECT ?partyWithRole ?governanceRole ?resource
        WHERE {
            {
                ?party (edg:subOrganization)*/(edg:jobTitle)? ?partyWithRole .
            }
            UNION
            {
                ?party edg:assignedJobTitle ?partyWithRole .
            } .
            {
                ?resource ?governanceRole ?partyWithRole .
                ?governanceRole a edg:WorkflowParticipantProperty .
            }
            UNION
            {
                rdf:nil teamwork:readableGraphsUnderTeamControl ( ?resource ?teamGraph ) .
                GRAPH ?resource {
                    ?resource ?governanceRole ?partyWithRole .
                } .
            } .
        }
        ORDER BY (?resource) }\">
    <div class=\"governance-role-count\" data-count=\"{= spr:rowCount(?roles) }\"/>
    <ui:if ui:condition=\"{= spr:rowCount(?roles) = 0 }\">
        <p>
            <ui:if ui:condition=\"{= smf:userWithName(smf:currentUserName()) = ?party }\">
                <span>You currently have no assigned role in governing any subject areas, business areas, or asset collections. </span>
            </ui:if>
            <ui:else>
                <span>The selected party currently has no role in governing any subject areas, business areas, or asset collections. </span>
            </ui:else>
            <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:editor, teamwork:teamGraph(teamwork:platformGovernanceGraph())) }\">
                <ui:createLink arg:tag=\"{= ?tag }\" ui:viewClass=\"{= governance:SubjectAreasPage }\">
                    <a href=\"{= ?link }\">Manage Governance Areas</a>
                </ui:createLink>
            </ui:if>
        </p>
    </ui:if>
    <ui:else>
        <table class=\"table table-condensed\">
            <thead>
                <tr>
                    <th class=\"text-nowrap\">Area/Asset Collection</th>
                    <th class=\"text-nowrap\" title=\"Governance Role\">
                        <ui:if ui:condition=\"{= (!bound(?compact)) || ?compact }\">
                            <i aria-hidden=\"true\" class=\"governance-icon icon-governance-role-cropped\"/>
                        </ui:if>
                        <ui:else>Governance Role</ui:else>
                    </th>
                    <ui:if ui:condition=\"{= (!bound(?withJobTitles)) || ?withJobTitles }\">
                        <th class=\"text-nowrap\">{= IF(governance:isJobTitlesEnabled(), \"Job Title\", \"Via Organization\") }</th>
                    </ui:if>
                </tr>
            </thead>
            <tbody>
                <ui:forEach ui:resultSet=\"{= ?roles }\">
                    <tr let:roleLabel=\"{= spif:titleCase(ui:label(?governanceRole)) }\">
                        <td>
                            <div class=\"governance-asset-viewer-inline-block\">
                                <governance:AssetViewerInline arg:resource=\"{= ?resource }\"/>
                            </div>
                        </td>
                        <td class=\"text-nowrap\" title=\"{= ?roleLabel }\">
                            <ui:if ui:condition=\"{= (!bound(?compact)) || ?compact }\">{= spl:object(?governanceRole, edg:abbreviation) }</ui:if>
                            <ui:else>{= ?roleLabel }</ui:else>
                        </td>
                        <ui:if ui:condition=\"{= (!bound(?withJobTitles)) || ?withJobTitles }\">
                            <td>
                                <ui:if ui:condition=\"{= ?party != ?partyWithRole }\">
                                    <div class=\"governance-asset-viewer-inline-block\">
                                        <governance:AssetViewerInline arg:compact=\"{= true }\" arg:resource=\"{= ?partyWithRole }\"/>
                                    </div>
                                </ui:if>
                            </td>
                        </ui:if>
                    </tr>
                </ui:forEach>
            </tbody>
        </table>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Governance roles section" ;
  rdfs:subClassOf governance:Elements ;
.
governance:Icon
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:faIcon ;
      spl:valueType xsd:string ;
      rdfs:comment "Specify a FontAwesome icon class such as fa-pencil. Ignore arg:type." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:muted ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, the icon will be displayed in a muted color." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:toolTip ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
    ] ;
  ui:prototype """
<ui:group let:class=\"governance-icon icon-block{= IF(?muted, &quot; text-muted&quot;, &quot;&quot;) }\">
    <ui:if ui:condition=\"{= bound(?faIcon) }\">
        <i class=\"{= ?class } fas {= ?faIcon }\" title=\"{= ?toolTip }\"/>
    </ui:if>
    <ui:elseif ui:condition=\"{= !bound(?type) }\">
        <i class=\"{= ?class } fa\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = sioc:UserAccount }\">
        <i class=\"{= ?class } fa fa-user\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = sioc:Role }\">
        <i class=\"{= ?class } fa fa-users\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = edg:Organization }\">
        <i class=\"{= ?class } {= ?mu } fa fa-building\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = edg:JobTitle }\">
        <i class=\"{= ?class } {= ?mu } icon-job-role-cropped\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = edg:BusinessArea }\">
        <i class=\"{= ?class } {= ?mu } icon-business-area\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= ?type = edg:DataSubjectArea }\">
        <i class=\"{= ?class } {= ?mu } icon-data-subject-area\" title=\"{= ?toolTip }\"/>
    </ui:elseif>
    <ui:else>
        <ui:setContext ui:queryGraph=\"{= ui:graph }\">
            <ui:group let:iconClass=\"{= COALESCE(spl:object(?type, edg.v:icon), spl:object(spl:subject(?type, teamwork:vocabularyType), edg.v:icon)) }\">
                <ui:group let:fa=\"{= IF(STRSTARTS(?iconClass, &quot;fa-&quot;), &quot;fa&quot;, &quot;&quot;) }\">
                    <i class=\"{= ?class } {= ?fa } {= COALESCE(?iconClass, &quot;default-icon-mapping&quot;) }\" title=\"{= ?toolTip }\"/>
                </ui:group>
            </ui:group>
        </ui:setContext>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays an icon for a given class. Supports limited classes, including those used in the Governance Areas and Organizational Structure pages, users, roles, edg:AssetCollection subclasses, teamwork:ProjectType instances." ;
  rdfs:label "Icon" ;
  rdfs:subClassOf governance:Elements ;
.
governance:OrgStructurePage
  a teamwork:HomePageTab ;
  edg.v:icon "fa-building" ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType edg:Party ;
      rdfs:comment "An organisation or job title to initially select in the tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "Optional URI of a Teamwork Tag to view/edit. Use production copy if unspecified." ;
    ] ;
  swa:tabIndex 105 ;
  ui:prototype """
<ui:setContext let:partiesChangedEvent=\"org.topbraid.teamwork.governance.partiesChanged\" let:projectGraph=\"{= teamwork:platformGovernanceGraph() }\" let:resourceSelectedEvent=\"org.topbraid.teamwork.governance.orgSelected\" let:treeId=\"organizations\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(teamwork:platformGovernanceGraph(), ?tag)) }\" ui:varName=\"swaAppName\" ui:varValue=\"Platform Governance\">
    <teamwork:Chrome arg:parentPage=\"{= governance:OrgStructurePage }\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:OrgStructureGovernanceTab }\" arg:tag=\"{= ?tag }\" let:editable=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) &amp;&amp; !teamwork:isCurrentGraphFrozen() }\">
        <h1>Manage Your Organizational Structure</h1>
        <p>Define departments, committees{= IF(governance:isJobTitlesEnabled(), \", teams and job titles\", \" and teams\") }, for use in access control and workflow definitions.</p>
        <swa:Initializer/>
        <ui:if ui:condition=\"{= ?editable }\">
            <ui:loadable ui:loadId=\"toolbar\">
                <governance:OrgTreeToolbar arg:resource=\"{= ?resource }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:treeId=\"{= ?treeId }\"/>
            </ui:loadable>
        </ui:if>
        <div class=\"row\">
            <div class=\"col-md-4\">
                <br/>
                <swa:Tree arg:dataProvider=\"{= governance:OrgTreeDataProvider }\" arg:id=\"{= ?treeId }\" arg:onSelect=\"governance.nodeSelected('{= ?treeId }')\" arg:options=\"{core:{check_callback:true}}\"/>
            </div>
            <div class=\"col-md-7\">
                <ui:loadable let:comment=\"{= IF(bound(?resource), COALESCE(spl:object(?resource, rdfs:comment), spl:object(?resource, edg:shortDescription), spl:object(?resource, edg:description)), ?none) }\" ui:loadId=\"details\" ui:loadOnDemand=\"{= true }\">
                    <ui:if ui:condition=\"{= bound(?resource) }\">
                        <ui:group let:isJobTitle=\"{= spl:instanceOf(?resource, edg:JobTitle) }\">
                            <governance:TitleAndComment arg:comment=\"{= ?comment }\" arg:subTitle=\"{= ui:label(spl:object(?resource, rdf:type)) }\" arg:title=\"{= ui:label(?resource) }\"/>
                            <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Details\" arg:onClick=\"governance.showDetailsForSelected('{= ?treeId }', '{= teamwork:editorLink(?projectGraph, ?none, ?tag) }')\" arg:toolTip=\"Opens a details view for the currently selected item in a new tab.\"/>
                            <swa:Space/>
                            <ui:if ui:condition=\"{= ?editable }\">
                                <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Delete\" arg:onClick=\"governance.deleteSelected('{= ?treeId }')\" arg:toolTip=\"Deletes the currently selected organization{= IF(governance:isJobTitlesEnabled(), &quot; or job title&quot;, &quot;&quot;) }.\"/>
                                <swa:Space/>
                            </ui:if>
                            <h3>Governance Roles</h3>
                            <governance:GovernanceRolesSection arg:party=\"{= ?resource }\" arg:tag=\"{= ?tag }\" arg:withJobTitles=\"{= !?isJobTitle }\"/>
                            <ui:if ui:condition=\"{= ?isJobTitle }\">
                                <governance:AssignedAccountsSection arg:editable=\"{= ?editable }\" arg:jobRole=\"{= ?resource }\" arg:partiesChangedEvent=\"{= ?partiesChangedEvent }\"/>
                            </ui:if>
                            <ui:if ui:condition=\"{= !governance:isJobTitlesEnabled() }\">
                                <governance:AssignedAccountsSection arg:editable=\"{= ?editable }\" arg:jobRole=\"{= spl:object(?resource, edg:jobTitle) }\" arg:partiesChangedEvent=\"{= ?partiesChangedEvent }\"/>
                            </ui:if>
                        </ui:group>
                    </ui:if>
                </ui:loadable>
            </div>
        </div>
        <swa:Subscribe arg:code=\"swa.selectTreeNode('{= ?treeId }', data)\" arg:event=\"{= ?resourceSelectedEvent }\"/>
        <swa:Subscribe arg:code=\"governance.refreshSelectedTreeNode('{= ?treeId }')\" arg:event=\"{= ?partiesChangedEvent }\"/>
        <script>governance.initTree('{= ?treeId }', false, {= IF(bound(?resource), CONCAT(\"'\", str(?resource), \"'\"), \"null\") });</script>
    </teamwork:Chrome>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "The Organizational Structure page lets you create and view organizational breakdown into divisions, departments and teams, and assign users to them." ;
  rdfs:label "Organizational Structure" ;
  rdfs:subClassOf teamwork:HomePageTabs ;
  rdfs:subClassOf governance:Elements ;
.
governance:OrgTreeChildren
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a sp:eq ;
            sp:arg1 [
                sp:varName "metadata" ;
              ] ;
            sp:arg2 "org" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
          [
            sp:varName "metadata" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a governance:isJobTitlesEnabled ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate edg:jobTitle ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a governance:countUserAccountsAssignedToJobTitle ;
                        arg:jobRole [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "accountCount" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a governance:jobTitleLabelWithAccountInfo ;
                        arg:jobRole [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression true ;
                    sp:variable [
                        sp:varName "leaf" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "accountCount" ;
                              ] ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 "icon-job-role-unassigned" ;
                        sp:arg3 "icon-job-role" ;
                      ] ;
                    sp:variable [
                        sp:varName "icon" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "accountCount" ;
                              ] ;
                            sp:arg2 0 ;
                          ] ;
                        sp:arg2 "unassigned-job-role" ;
                        sp:arg3 "assigned-job-role" ;
                      ] ;
                    sp:variable [
                        sp:varName "metadata" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "node" ;
                      ] ;
                    sp:predicate edg:subOrganization ;
                    sp:subject [
                        sp:varName "parent" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:if ;
                        sp:arg1 [
                            a governance:isJobTitlesEnabled ;
                          ] ;
                        sp:arg2 [
                            a ui:label ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            a governance:orgLabelWithMemberCount ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:notExists ;
                            sp:elements (
                                [
                                  sp:object [
                                      sp:varName "child" ;
                                    ] ;
                                  sp:predicate edg:subOrganization ;
                                  sp:subject [
                                      sp:varName "node" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                        sp:arg2 [
                            a sp:or ;
                            sp:arg1 [
                                a sp:not ;
                                sp:arg1 [
                                    a governance:isJobTitlesEnabled ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:notExists ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "role" ;
                                        ] ;
                                      sp:predicate edg:jobTitle ;
                                      sp:subject [
                                          sp:varName "node" ;
                                        ] ;
                                    ]
                                  ) ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "leaf" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "icon-organization" ;
                    sp:variable [
                        sp:varName "icon" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "org" ;
                    sp:variable [
                        sp:varName "metadata" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression false ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Organization tree children" ;
  rdfs:subClassOf swa:TreeChildrenTemplates ;
.
governance:OrgTreeDataProvider
  a swa:TreeDataProvider ;
  arg:treeChildrenTemplate governance:OrgTreeChildren ;
  arg:treePathTemplate governance:OrgTreePath ;
  arg:treeRootsTemplate governance:OrgTreeRoots ;
  rdfs:comment "A TreeDataProvider for the organization structure tree in the platform governance UI." ;
  rdfs:label "Organization tree data provider" ;
.
governance:OrgTreePath
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "path" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a spl:instanceOf ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                    sp:arg2 edg:Organization ;
                  ] ;
                sp:arg2 [
                    sp:varName "node" ;
                  ] ;
                sp:arg3 [
                    a spl:subject ;
                    sp:arg1 edg:jobTitle ;
                    sp:arg2 [
                        sp:varName "node" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "organization" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "organization" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a spl:instanceOf ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                    sp:arg2 edg:Organization ;
                  ] ;
                sp:arg2 "" ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 " " ;
                    sp:arg2 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lastStep" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a spif:shortestSubjectsPath ;
                    sp:arg1 [
                        sp:varName "organization" ;
                      ] ;
                    sp:arg2 edg:subOrganization ;
                    sp:arg3 [
                        sp:varName "root" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "lastStep" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "path" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Used by the organization tree to find the shortest path to a given node. Handles edg:Organization and edg:JobRole nodes." ;
  rdfs:label "Organization tree path" ;
  rdfs:subClassOf swa:TreePathTemplates ;
.
governance:OrgTreeRoots
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "leaf" ;
          ]
          [
            sp:varName "icon" ;
          ]
          [
            sp:varName "movable" ;
          ]
          [
            sp:varName "metadata" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object edg:Organization ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 0 ;
                      sp:subPath rdfs:subClassOf ;
                    ] ;
                  sp:subject [
                      sp:varName "class" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "node" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "node" ;
                        ] ;
                      sp:predicate edg:subOrganization ;
                      sp:subject [
                          sp:varName "parent" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a governance:isJobTitlesEnabled ;
                  ] ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a governance:orgLabelWithMemberCount ;
                    arg:organization [
                        sp:varName "node" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "child" ;
                            ] ;
                          sp:predicate edg:subOrganization ;
                          sp:subject [
                              sp:varName "node" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a governance:isJobTitlesEnabled ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "role" ;
                                ] ;
                              sp:predicate edg:jobTitle ;
                              sp:subject [
                                  sp:varName "node" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "leaf" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "icon-organization" ;
            sp:variable [
                sp:varName "icon" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression false ;
            sp:variable [
                sp:varName "movable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "org" ;
            sp:variable [
                sp:varName "metadata" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Organization tree roots" ;
  rdfs:subClassOf swa:TreeRootsTemplates ;
.
governance:OrgTreeToolbar
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "Toolbar will fire this event when a different resource should be selected in the associated tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:treeId ;
      spl:valueType xsd:string ;
      rdfs:comment "id of the swa:Tree whose selected node the toolbar applies to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The node currently selected in the tree." ;
    ] ;
  ui:prototype """
<div class=\"form-inline\" let:isJobRole=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:JobTitle) }\" let:isOrganization=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:Organization) }\">
    <swa:CreateResourceButton arg:class=\"btn btn-default btn-sm\" arg:createHandler=\"{= governance:CreateOrganizationHandler }\" arg:label=\"Create Organization\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:resourceType=\"{= edg:Organization }\" arg:toolTip=\"Creates a new top-level organization.\"/>
    <ui:if ui:condition=\"{= ?isOrganization }\">
        <swa:CreateResourceButton arg:class=\"btn btn-default btn-sm\" arg:contextResourceGetter=\"'{= ?resource }'\" arg:createHandler=\"{= governance:CreateOrganizationHandler }\" arg:label=\"Add Sub-Organization\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:resourceType=\"{= edg:Organization }\" arg:toolTip=\"Adds a new sub-organization underneath the selected organization.\"/>
        <ui:if ui:condition=\"{= governance:isJobTitlesEnabled() }\">
            <swa:CreateResourceButton arg:class=\"btn btn-default btn-sm\" arg:contextResourceGetter=\"'{= ?resource }'\" arg:createHandler=\"{= governance:CreateJobTitleHandler }\" arg:label=\"Add Job Title\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:resourceType=\"{= edg:JobTitle }\" arg:toolTip=\"Adds a new job title (such as &quot;CFO&quot; or &quot;Program Manager&quot;) within the selected organization.\"/>
        </ui:if>
    </ui:if>
</div>
"""^^ui:Literal ;
  rdfs:comment "Toolbar associated with the org structure tree with actions for creating new tree nodes." ;
  rdfs:label "org tree toolbar" ;
  rdfs:subClassOf governance:Elements ;
.
governance:RemoveProjectFromSubjectAreaHandler
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:metadata=\"{= ?metadata }\">
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?projectGraph edg:subjectArea ?subjectArea .
                }
                WHERE {
                } }\"/>
    </ui:setContext>
    <safindex:removeTrackingStatus arg:graph=\"{= ?projectGraph }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:comment "Removes triple for subject area to passed in project graph" ;
  rdfs:label "Remove project from subject area" ;
  rdfs:subClassOf swa:EditHandlers ;
.
governance:RolesAssignmentFormBody
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:setContext default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), teamwork:workflowsGraph(), &lt;urn:x-tb-authgraph&gt;) }\">
    <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Governance Roles\" arg:open=\"{= false }\" arg:openable=\"{= ?openable }\" default:hideIfEmpty=\"{= true }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?property
                WHERE {
                    rdf:nil edg:workflowParticipantProperties ?property .
                } }\">
            <swa:Objects arg:editWidget=\"{= teamwork:WorkflowParticipantSelectEditor }\" arg:predicate=\"{= ?property }\" arg:searchWidget=\"{= teamwork:WorkflowParticipantSelectFacet }\" arg:viewWidget=\"{= governance:AssetViewer }\"/>
        </ui:forEach>
    </swa:ObjectsEnum>
    <ui:group letrs:subjectAreaRoles=\"{#
            SELECT DISTINCT ?role
            WHERE {
                rdf:nil teamwork:workflowParticipantProperties ?role .
                ?resource edg:subjectArea ?subjectArea .
    	        ?parentSubjectArea edg:subArea* ?subjectArea .
                {
                    ?subjectArea ?role ?any .
                }
                UNION
                {
                    ?parentSubjectArea ?role ?any .
                }
            } }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?subjectAreaRoles) }\">
            <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Inferred Governance Roles via Subject Areas\">
                <ui:forEach ui:resultSet=\"{= ?subjectAreaRoles }\">
                    <swa:LabeledElement arg:label=\"{= ui:label(?role) }:\">
                        <ui:forEach ui:resultSet=\"{#
                                SELECT DISTINCT ?party
                                WHERE {
                                    ?resource edg:subjectArea ?subjectArea .
                                    ?parentSubjectArea edg:subArea* ?subjectArea .
                                    {
                                        ?subjectArea ?role ?party .
                                    }
                                    UNION
                                    {
                                        ?parentSubjectArea ?role ?party .
                                    }
                                } }\">
                            <governance:AssetViewer arg:object=\"{= ?party }\"/>
                        </ui:forEach>
                    </swa:LabeledElement>
                </ui:forEach>
            </swa:ObjectsEnum>
        </ui:if>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment """Displays a section that shows governance role assignments for the resource. Editable.

TODO: This is an almost-copy of teamwork:GovernanceRolesSection.""" ;
  rdfs:label "Roles assignment form body" ;
  rdfs:subClassOf swa:FormBody ;
.
governance:SetUserEmailUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user whose email address to update." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
        <ui:if ui:condition=\"{= bound(?newValue) &amp;&amp; (STRLEN(spif:trim(str(?newValue))) &gt; 0) }\">
            <ui:if ui:condition=\"{= regex(?newValue, &quot;^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$&quot;, &quot;i&quot;) }\">
                <ui:setPropertyValue arg:property=\"{= edg:email }\" arg:value=\"{= spif:trim(str(?newValue)) }\" ui:this=\"{= ?user }\"/>
                <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
            </ui:if>
            <ui:else>
                <swon:Value arg:name=\"status\" arg:value=\"error\"/>
                <swon:Value arg:name=\"message\" arg:value=\"Not a valid email address.\"/>
            </ui:else>
        </ui:if>
        <ui:else>
            <ui:removePropertyValues arg:property=\"{= edg:email }\" ui:this=\"{= ?user }\"/>
            <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
        </ui:else>
    </ui:setContext>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set user email update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
governance:SubjectAreasPage
  a teamwork:HomePageTab ;
  edg.v:icon "fa-tags" ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType edg:SubjectArea ;
      rdfs:comment "Loads the tree with this subject area initially selected." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "Optionally, the URI of a teamwork Tag to show in the editor. Defaults to the production copy." ;
    ] ;
  swa:tabIndex 104 ;
  ui:prototype """
<ui:setContext let:partiesChangedEvent=\"org.topbraid.teamwork.governance.partiesChanged\" let:projectGraph=\"{= teamwork:platformGovernanceGraph() }\" let:resourceSelectedEvent=\"org.topbraid.teamwork.governance.resourceSelected\" let:treeId=\"areas\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(teamwork:platformGovernanceGraph(), ?tag)) }\" ui:varName=\"swaAppName\" ui:varValue=\"Platform Governance\">
    <teamwork:Chrome arg:parentPage=\"{= governance:SubjectAreasPage }\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:AreasGovernanceTab }\" arg:tag=\"{= ?tag }\" arg:title=\"Governance Areas and Roles\" let:editable=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) &amp;&amp; !teamwork:isCurrentGraphFrozen() }\">
        <h1>Manage Your Governance Areas and Roles</h1>
        <p>Organize your asset collections into <strong>business areas</strong> and <strong>data subject areas</strong>. Enable <strong>governance roles</strong> for these areas to assign responsible parties.</p>
        <swa:Initializer/>
        <ui:if ui:condition=\"{= ?editable }\">
            <ui:loadable ui:loadId=\"toolbar\" ui:loadOnDemand=\"{= true }\">
                <governance:AreaTreeToolbar arg:resource=\"{= ?resource }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:treeId=\"{= ?treeId }\"/>
            </ui:loadable>
        </ui:if>
        <div class=\"row\">
            <div class=\"col-md-4\">
                <br/>
                <swa:Tree arg:dataProvider=\"{= governance:AreaTreeDataProvider }\" arg:id=\"{= ?treeId }\" arg:onSelect=\"governance.nodeSelected('{= ?treeId }')\" arg:options=\"{core:{check_callback:true}}\"/>
            </div>
            <div class=\"col-md-7\" id=\"governance-details\">
                <ui:loadable let:comment=\"{= IF(bound(?resource), COALESCE(spl:object(?resource, rdfs:comment), spl:object(?resource, edg:shortDescription), spl:object(?resource, edg:description)), ?none) }\" let:isArea=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:SubjectArea) }\" let:isBusinessArea=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:BusinessArea) }\" let:isGovernanceRole=\"{= (bound(?resource) &amp;&amp; bound(?parent)) &amp;&amp; spl:hasValue(?parent, edg:requiredGovernanceRole, ?resource) }\" let:isRoot=\"{= ?resource = governance:dummyAreaTreeRoot() }\" ui:loadId=\"details\" ui:loadOnDemand=\"{= true }\">
                    <ui:if ui:condition=\"{= ?isArea }\">
                        <governance:TitleAndComment arg:comment=\"{= ?comment }\" arg:subTitle=\"{= ui:label(spl:object(?resource, rdf:type)) }\" arg:title=\"{= ui:label(?resource) }\"/>
                    </ui:if>
                    <ui:elseif ui:condition=\"{= ?isGovernanceRole }\">
                        <governance:TitleAndComment arg:comment=\"{= ?comment }\" arg:subTitle=\"Governance Role\" arg:title=\"{= spif:titleCase(ui:label(?resource)) }\"/>
                    </ui:elseif>
                    <ui:else>
                        <br/>
                    </ui:else>
                    <p>
                        <ui:if ui:condition=\"{= ?isArea }\">
                            <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Details\" arg:onClick=\"governance.showDetailsForSelected('{= ?treeId }', '{= teamwork:editorLink(?projectGraph, ?none, ?tag) }')\" arg:toolTip=\"Opens a details view for the currently selected item in a new tab.\"/>
                            <swa:Space/>
                        </ui:if>
                        <ui:if ui:condition=\"{= ?editable &amp;&amp; ?isArea }\">
                            <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Delete\" arg:onClick=\"governance.deleteSelected('{= ?treeId }')\" arg:toolTip=\"Deletes the currently selected area.\"/>
                            <swa:Space/>
                        </ui:if>
                        <ui:if ui:condition=\"{= ?editable &amp;&amp; ?isGovernanceRole }\">
                            <swa:Button arg:class=\"btn btn-default btn-sm\" arg:label=\"Disable Governance Role\" arg:onClick=\"governance.disableGovernanceRole('{= ?treeId }')\" arg:toolTip=\"Disables the currently selected governance role for its area.\"/>
                        </ui:if>
                        <ui:if ui:condition=\"{= ?editable &amp;&amp; ?isArea }\">
                            <ui:if ui:condition=\"{= !swa:falseOrUnbound(cfg:disableLuceneIndexing) }\">
                                <ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; }\">
                                    <div class=\"checkbox\">
                                        <input checked=\"{= IF(spl:objectInGraph(?resource, safm:graphSearchable, &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt;), &quot;true&quot;, ?none) }\" type=\"checkbox\">
                                            <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                                                <safconfig:BulkAddGraph arg:checked=\"{= ?checked }\" arg:graph=\"{= ?resource }\"/>
                                            </ui:handle>
                                        </input>
                                        <span>Include all assets included in this Subject Area in the index for Search the EDG</span>
                                    </div>
                                </ui:setContext>
                            </ui:if>
                        </ui:if>
                    </p>
                    <ui:if ui:condition=\"{= ?isGovernanceRole }\">
                        <governance:AssignedAccountsAndJobTitlesSection arg:editable=\"{= ?editable }\" arg:governanceRole=\"{= ?resource }\" arg:partiesChangedEvent=\"{= ?partiesChangedEvent }\" arg:subjectArea=\"{= ?parent }\"/>
                    </ui:if>
                    <ui:if ui:condition=\"{= ?isArea }\">
                        <governance:AssetCollectionsSection arg:subjectArea=\"{= ?resource }\"/>
                    </ui:if>
                </ui:loadable>
            </div>
            <swa:Subscribe arg:code=\"swa.selectTreeNode('{= ?treeId }', data)\" arg:event=\"{= ?resourceSelectedEvent }\"/>
            <swa:Subscribe arg:code=\"governance.refreshSelectedTreeNode('{= ?treeId }')\" arg:event=\"{= ?partiesChangedEvent }\"/>
            <script>governance.initTree('{= ?treeId }', true, {= IF((bound(?resource) &amp;&amp; spl:instanceOf(?resource, edg:SubjectArea)), CONCAT(\"'\", str(?resource), \"'\"), \"null\") });</script>
        </div>
    </teamwork:Chrome>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "The Governance Areas page lets you create and view business and data subject areas, identify governance roles for each area, and assign parties (users or groups of users) to them. You can also use this page to create new asset collections that will be automatically associated with an area you have selected and to view all asset collections irrespective of their type that are associated with an area." ;
  rdfs:label "Governance Areas" ;
  rdfs:subClassOf teamwork:HomePageTabs ;
  rdfs:subClassOf governance:Elements ;
.
governance:TitleAndComment
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType rdfs:Literal ;
      rdfs:comment "String or HTML, optional." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subTitle ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <h2>
        <span>{= ?title }</span>
        <ui:if ui:condition=\"{= bound(?subTitle) }\">
            <swa:Space/>
            <small class=\"text-muted\">({= ?subTitle })</small>
        </ui:if>
    </h2>
    <ui:if ui:condition=\"{= bound(?comment) }\">
        <p>
            <small class=\"text-muted\">
                <em>
                    <ui:if ui:condition=\"{= datatype(?comment) = rdf:HTML }\">
                        <ui:parse ui:str=\"{= ?comment }\"/>
                    </ui:if>
                    <ui:else>{= ?comment }</ui:else>
                </em>
            </small>
        </p>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Title and comment" ;
  rdfs:subClassOf governance:Elements ;
.
governance:UserListPage
  a teamwork:HomePageTab ;
  edg.v:icon "fa-users" ;
  swa:tabIndex 110 ;
  ui:prototype """
<teamwork:Chrome arg:parentPage=\"{= governance:UserListPage }\">
    <h1>Users</h1>
    <ul class=\"list-unstyled\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?user
                WHERE {
                    rdf:nil smf:user ?user .
                    FILTER (!teamwork:isHiddenRole(?user)) .
                }
                ORDER BY (?user) }\">
            <li>
                <governance:AssetViewerInline arg:resource=\"{= ?user }\"/>
            </li>
        </ui:forEach>
    </ul>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "Users page lists all current users of TopBraid EDG and lets you see profile of each user." ;
  rdfs:label "Users" ;
  rdfs:subClassOf teamwork:HomePageTabs ;
.
governance:UserPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user (<x-tb-users:...>) whose profile page to display" ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?user) }\">
    <teamwork:Chrome arg:parentPage=\"{= governance:UserListPage }\">
        <p class=\"text-danger\">No such user</p>
    </teamwork:Chrome>
</ui:if>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:isMyPage=\"{= ?user = smf:userWithName(smf:currentUserName()) }\" let:name=\"{= smf:userDisplayName(?user) }\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
    <teamwork:Chrome arg:parentPage=\"{= governance:UserListPage }\">
        <h1>
            <i class=\"fa fa-user\"/>
            <swa:Space/>{= ?name }<ui:if ui:condition=\"{= ?isMyPage }\">
                <swa:Spaces/>
                <teamwork:LogoutLink/>
            </ui:if>
        </h1>
        <ui:if ui:condition=\"{= (!smf:isLDAPConfigured()) &amp;&amp; (?isMyPage || uix:isAdmin()) }\">
            <h2>Settings <i class=\"fa fa-wrench\"/>
            </h2>
            <div>
                <div class=\"user-language-container\">
                    <div class=\"user-language-component\" id=\"user-language-component\"/>
                    <script>gadgets.Hub.publish('org.topbraid.userPage.loaded', 'user-language-component');</script>
                </div>
                <span>Notification email address:</span>
                <div class=\"governance-email-input\">
                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:user=\"{= ?user }\" ui:viewClass=\"{= governance:SetUserEmailUpdateService }\">
                        <swa:TextFieldInlineEditor arg:placeholder=\"Click to update\" arg:updateLink=\"{= ?link }\" arg:value=\"{= spl:objectInGraph(?user, edg:email, teamwork:userDataGraph()) }\"/>
                    </ui:createLink>
                </div>
            </div>
        </ui:if>
        <ui:group letrs:jobTitles=\"{#
                SELECT ?jobTitle ?organization
                WHERE {
                    ?user edg:assignedJobTitle ?jobTitle .
                    ?organization edg:jobTitle ?jobTitle .
                }
                ORDER BY (?organization) (?jobTitle) }\">
            <ui:if ui:condition=\"{= !spr:isEmpty(?jobTitles) }\">
                <ui:if ui:condition=\"{= governance:isJobTitlesEnabled() }\">
                    <h2>Job Titles</h2>
                    <div class=\"row\">
                        <div class=\"col-xs-7\">
                            <table class=\"table\">
                                <thead>
                                    <tr>
                                        <th>Job Title</th>
                                        <th>Organization</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <ui:forEach ui:resultSet=\"{= ?jobTitles }\">
                                        <tr>
                                            <td>
                                                <governance:AssetViewerInline arg:compact=\"{= true }\" arg:resource=\"{= ?jobTitle }\"/>
                                            </td>
                                            <td>
                                                <governance:AssetViewerInline arg:resource=\"{= ?organization }\"/>
                                            </td>
                                        </tr>
                                    </ui:forEach>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </ui:if>
                <ui:else>
                    <h2>Organizations</h2>
                    <ul class=\"list-unstyled\">
                        <ui:forEach ui:resultSet=\"{= ?jobTitles }\">
                            <li>
                                <governance:AssetViewerInline arg:resource=\"{= ?organization }\"/>
                            </li>
                        </ui:forEach>
                    </ul>
                </ui:else>
            </ui:if>
            <h2>Governance Roles</h2>
            <div class=\"row\">
                <div class=\"col-xs-{= IF(spr:isEmpty(?jobTitles), &quot;7&quot;, &quot;10&quot;) }\">
                    <governance:GovernanceRolesSection arg:compact=\"{= false }\" arg:party=\"{= ?user }\" arg:withJobTitles=\"{= !spr:isEmpty(?jobTitles) }\"/>
                </div>
            </div>
        </ui:group>
    </teamwork:Chrome>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "User page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
  rdfs:subClassOf governance:Elements ;
.
governance:addUserToGovernanceRoleService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The governance role to which to add the user" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:party ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or security role to add to the governance role." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject area to which the governance role belongs" ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
    <ui:addPropertyValue arg:property=\"{= ?governanceRole }\" arg:value=\"{= ?party }\" ui:this=\"{= ?subjectArea }\"/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Add user to governance role service" ;
  rdfs:subClassOf ui:JSONServices ;
.
governance:addUserToOrganizationService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:organization ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The organization to which to add the user" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:party ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or security role to add to the governance role." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
    <ui:addPropertyValue arg:property=\"{= edg:assignedJobTitle }\" arg:value=\"{= ?organization }\" ui:this=\"{= ?party }\"/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Add user to organization service" ;
  rdfs:subClassOf ui:JSONServices ;
.
governance:countPartiesWithGovernanceRole
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "party" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "party" ;
              ] ;
            sp:predicate [
                sp:varName "governanceRole" ;
              ] ;
            sp:subject [
                sp:varName "subjectArea" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType edg:WorkflowParticipantProperty ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  rdfs:comment "Returns the number of parties that have been assigned a particular governance role for a particular subject area." ;
  rdfs:label "count parties with governance role" ;
  rdfs:subClassOf spin:Functions ;
.
governance:countUnreadableAssetCollectionsWithSubjectArea
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:graphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:projectHasSubjectArea ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:subjectArea [
                    sp:varName "subjectArea" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a smf:canRead ;
                    sp:arg1 [
                        a ui:graphWithImports ;
                        sp:arg1 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  rdfs:label "count unreadable asset collections with subject area" ;
  rdfs:subClassOf spin:Functions ;
.
governance:countUserAccountsAssignedToJobTitle
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a spl:subjectCount ;
            sp:arg1 edg:assignedJobTitle ;
            sp:arg2 [
                sp:varName "jobRole" ;
              ] ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jobRole ;
      spl:valueType edg:JobTitle ;
    ] ;
  rdfs:subClassOf spin:Functions ;
.
governance:dashboardsLink
  a teamwork:MainMenuLink ;
  a ui:Function ;
  edg.v:icon "fa-chart-bar" ;
  arg:visibility [
      a sp:and ;
      sp:arg1 [
          a teamwork:currentUserIsTeamworkAdmin ;
        ] ;
      sp:arg2 [
          a sp:coalesce ;
          sp:arg1 [
              a smf:configParam ;
              arg:param "metricsDashboardsActivated" ;
            ] ;
          sp:arg2 [
              a uix:isTBC ;
            ] ;
        ] ;
    ] ;
  swa:tabIndex 107 ;
  ui:prototype """
<ui:return ui:result=\"{= teamwork:editorLink(teamwork:platformGovernanceGraph(), ?null, ?tag) }?resourceType=edg:Dashboard&amp;viewPointClass=edg:DashboardModelsViewpoint&amp;projectTab=teamwork:DashboardsGovernanceTab\"/>
"""^^ui:Literal ;
  rdfs:comment "Dashboards page lets you define role specific dashboards and specify what metrics should be presented on them." ;
  rdfs:label "Dashboards" ;
  rdfs:subClassOf governance:governanceModelLinks ;
.
governance:dummyAreaTreeRoot
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression <urn:x-dummy:area-tree-root> ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  rdfs:comment "Returns a constant URI that is used to identify the tree root in the governance areas tree. Just a dummy URI -- not a real resource in the model." ;
  rdfs:label "dummy area tree root" ;
  rdfs:subClassOf spin:Functions ;
.
governance:governanceModelLinks
  a spin:Function ;
  spin:abstract true ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "If specified, create a link in the context of the given tag/workflow." ;
    ] ;
  rdfs:comment "Abstract superclass that provides the ?tag argument needed for the governance model editor tab link functions." ;
  rdfs:label "governance model links" ;
  rdfs:subClassOf teamwork:MainMenuLinks ;
.
governance:governanceRoleLabelWithAssignmentInfo
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "governanceRole" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "subjectArea" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a governance:countPartiesWithGovernanceRole ;
                    arg:governanceRole [
                        sp:varName "governanceRole" ;
                      ] ;
                    arg:subjectArea [
                        sp:varName "subjectArea" ;
                      ] ;
                  ] ;
                sp:arg3 0 ;
              ] ;
            sp:variable [
                sp:varName "count" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a spif:titleCase ;
                    sp:arg1 [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "governanceRole" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 " (<i class='fa fa-user' aria-hidden='true'></i> " ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "count" ;
                          ] ;
                        sp:arg2 0 ;
                      ] ;
                    sp:arg2 "unassigned" ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "count" ;
                              ] ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg2 [
                            a governance:partyLabel ;
                            sp:arg1 [
                                a spl:object ;
                                sp:arg1 [
                                    sp:varName "subjectArea" ;
                                  ] ;
                                sp:arg2 [
                                    sp:varName "governanceRole" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "count" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg4 ")" ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governanceRole ;
      spl:valueType edg:WorkflowParticipantProperty ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  rdfs:comment "Returns a label for the given governance role, composed of its ui:label, and a summary of the parties that have that role in a particular subject area." ;
  rdfs:label "governance role label with assignment info" ;
  rdfs:subClassOf spin:Functions ;
.
governance:isJobTitlesEnabled
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:configParam ;
                arg:param "teamworkEnableJobTitles" ;
              ] ;
            sp:variable [
                sp:varName "value" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a swa:falseOrUnbound ;
                    arg:value [
                        sp:varName "value" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment """Returns true if job titles are enabled in the EDG configuration.

If job titles are enabled, then users are associated with organizations via edg:JobTitle instances that need to be created manually in the Governance Model.

If job titles are disabled, then each organization has a single edg:JobTitle instance that is created automatically, and the UI is simplified in various places.

See TBS-1227.""" ;
  rdfs:label "is job titles enabled" ;
  rdfs:subClassOf spin:Functions ;
.
governance:issuesLink
  a teamwork:MainMenuLink ;
  a ui:Function ;
  edg.v:icon "fa-exclamation-circle" ;
  swa:tabIndex 107 ;
  ui:prototype """
<ui:return ui:result=\"{= teamwork:editorLink(teamwork:platformGovernanceGraph(), ?null, ?tag) }?resourceType=edg:Issue&amp;viewPointClass=edg:Issue&amp;projectTab=teamwork:IssuesGovernanceTab\"/>
"""^^ui:Literal ;
  rdfs:comment "Issues page lets you create new issues related to the implementation and execution of your organization's data governance processes and policies and view and modify existing issues." ;
  rdfs:label "Issues" ;
  rdfs:subClassOf governance:governanceModelLinks ;
.
governance:jobTitleLabelWithAccountInfo
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "jobRole" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a governance:countUserAccountsAssignedToJobTitle ;
                arg:jobRole [
                    sp:varName "jobRole" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "count" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "jobRole" ;
                      ] ;
                  ] ;
                sp:arg2 " (<i class='fa fa-user' aria-hidden='true'></i> " ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "count" ;
                          ] ;
                        sp:arg2 0 ;
                      ] ;
                    sp:arg2 "unassigned" ;
                    sp:arg3 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:eq ;
                            sp:arg1 [
                                sp:varName "count" ;
                              ] ;
                            sp:arg2 1 ;
                          ] ;
                        sp:arg2 [
                            a teamwork:userOrRoleLabel ;
                            arg:resource [
                                a spl:subject ;
                                sp:arg1 edg:assignedJobTitle ;
                                sp:arg2 [
                                    sp:varName "jobRole" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg3 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "count" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg4 ")" ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:jobRole ;
      spl:valueType edg:JobTitle ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns a label for the given job title, composed of its ui:label, and a summary of any user accounts or security roles assigned to it. May contain HTML markup." ;
  rdfs:subClassOf spin:Functions ;
.
governance:metricsLink
  a teamwork:MainMenuLink ;
  a ui:Function ;
  edg.v:icon "fas fa-gem" ;
  swa:tabIndex 106 ;
  ui:prototype """
<ui:return ui:result=\"{= teamwork:editorLink(teamwork:platformGovernanceGraph(), ?null, ?tag) }?resourceType=edg:Metric&amp;viewPointClass=edg:Metric&amp;projectTab=teamwork:MetricsGovernanceTab\"/>
"""^^ui:Literal ;
  rdfs:comment "Metrics page lets you define metrics TopBraid EDG will calculate periodically and display on dashboards according to the dashboard configuration." ;
  rdfs:label "Metrics" ;
  rdfs:subClassOf governance:governanceModelLinks ;
.
governance:orgLabelWithMemberCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "organization" ;
                  ] ;
              ] ;
          ]
          [
            a sp:SubQuery ;
            sp:query [
                a sp:Select ;
                sp:resultVariables (
                    [
                      sp:expression [
                          a sp:Count ;
                          sp:expression [
                              sp:varName "user" ;
                            ] ;
                        ] ;
                      sp:varName "count" ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object [
                          sp:varName "jobTitle" ;
                        ] ;
                      sp:predicate edg:jobTitle ;
                      sp:subject [
                          sp:varName "organization" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "jobTitle" ;
                        ] ;
                      sp:predicate edg:assignedJobTitle ;
                      sp:subject [
                          sp:varName "user" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "organization" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "count" ;
                          ] ;
                        sp:arg2 0 ;
                      ] ;
                    sp:arg2 "" ;
                    sp:arg3 [
                        a sp:concat ;
                        sp:arg1 " (" ;
                        sp:arg2 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "count" ;
                              ] ;
                          ] ;
                        sp:arg3 " <i class='fa fa-user' aria-hidden='true'></i>)" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:organization ;
      spl:valueType edg:Organization ;
      rdfs:comment "The organization whose label to return" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns a label for an edg:Organization, composed from its ui:label and a count of the associated user accounts. May contain HTML markup." ;
  rdfs:label "org label with member count" ;
  rdfs:subClassOf spin:Functions ;
.
governance:otherGovernanceAssetsLink
  a teamwork:MainMenuLink ;
  edg.v:icon "fa-ellipsis-h" ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a teamwork:editorLink ;
                arg:projectGraph [
                    a teamwork:platformGovernanceGraph ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  swa:tabIndex 109 ;
  rdfs:comment "Other Governance Assets page lets you create and manage any type of governance assets for which no dedicated page has been defined" ;
  rdfs:label "Other Governance Assets" ;
  rdfs:subClassOf teamwork:MainMenuLinks ;
.
governance:partyLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a smf:isUserAccount ;
                        arg:node [
                            sp:varName "party" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a smf:isRole ;
                        arg:resource [
                            sp:varName "party" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:userOrRoleLabel ;
                    arg:resource [
                        sp:varName "party" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "party" ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "label" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:party ;
      spl:valueType edg:Party ;
    ] ;
  rdfs:comment "Returns a label for a edg:Party; attempts to first call ui:label, and then teamwork:userOrRoleLabel." ;
  rdfs:label "party label" ;
  rdfs:subClassOf spin:Functions ;
.
governance:policiesLink
  a teamwork:MainMenuLink ;
  a ui:Function ;
  edg.v:icon "fa-gavel" ;
  swa:tabIndex 108 ;
  ui:prototype """
<ui:return ui:result=\"{= teamwork:editorLink(teamwork:platformGovernanceGraph(), ?null, ?tag) }?resourceType=edg:Policy&amp;viewPointClass=edg:Policy&amp;projectTab=teamwork:PoliciesGovernanceTab\"/>
"""^^ui:Literal ;
  rdfs:comment "Policies page lets you create and manage policies pertaining to the implementation and execution of your organization's data governance processes." ;
  rdfs:label "Policies" ;
  rdfs:subClassOf governance:governanceModelLinks ;
.
governance:userLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a ui:concat ;
                sp:arg1 "swp?_viewClass=governance:UserPage&user=" ;
                sp:arg2 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "user" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns a URL (xsd:string) suitable as a link to the user page of a specific user (<urn:x-tb-users:...>)." ;
  rdfs:label "user link" ;
  rdfs:subClassOf spin:Functions ;
.
rdfs:Resource
  ui:instanceView """
<governance:RolesAssignmentFormBody arg:resource=\"{= ?this }\" ui:id=\"raci\"/>
"""^^ui:Literal ;
.
[
  sp:varName "doSelectResourceEvent" ;
].
