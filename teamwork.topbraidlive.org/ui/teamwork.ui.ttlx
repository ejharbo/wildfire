# baseURI: http://topbraid.org/teamwork.ui
# imports: http://teamwork.topbraidlive.org/ui/savedQueries
# imports: http://teamwork.topbraidlive.org/ui/tracker
# imports: http://teamwork.topbraidlive.org/ui/userdata.ui
# imports: http://topbraid.org/crosswalk.spin
# imports: http://topbraid.org/metadata
# imports: http://topbraid.org/metadata.ui
# imports: http://topbraid.org/safconfig/
# imports: http://topbraid.org/safindex
# imports: http://topbraid.org/shacl/ui
# imports: http://topbraid.org/solr
# imports: http://topbraid.org/sparqlmotionlib-swp
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/swaclasses
# imports: http://topbraid.org/teamwork.spin
# imports: http://topbraid.org/teamworkcomments
# imports: http://topbraid.org/teamworkdashboard
# imports: http://topbraid.org/teamworkflows
# imports: http://topbraid.org/teamworkgovernance.ui
# imports: http://topbraid.org/teamworkimporters.ui
# imports: http://topbraid.org/teamworknotifications
# imports: http://topbraid.org/teamworkreports
# imports: http://topbraid.org/teamworktransforms
# imports: http://topbraid.org/textindex
# imports: http://topbraid.org/tosh.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparql: <http://datashapes.org/sparql#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

sioc:Post
  ui:instanceView """
<teamwork:PostView arg:subject=\"{= ?this }\"/>
"""^^ui:Literal ;
.
arg:active
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:add
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:addedResultSet
  a rdf:Property ;
  rdfs:subPropertyOf ui:resultSet ;
.
arg:additionalClasses
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:avatar
  a rdf:Property ;
  rdfs:label "avatar" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:base
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:baseURI
  a rdf:Property ;
  rdfs:label "base URI" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:canEdit
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:category
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:change
  a rdf:Property ;
  rdfs:label "change" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:class
  a rdf:Property ;
  rdfs:label "class" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:clickable
  a rdf:Property ;
  rdfs:label "clickable" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:collapsedByDefault
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:comment
  a rdf:Property ;
  rdfs:label "comment" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:configGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:creator
  a rdf:Property ;
  rdfs:label "creator" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:cssClass
  a rdf:Property ;
  rdfs:label "css class" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:currentCategory
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:currentProjectType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:data-uri
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataAttrValue
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataColumnsEndpoint
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataEndpoint
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataPlatform
  a rdf:Property ;
  rdfs:label "Data Platform" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataProjectType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataUri
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:deepLink
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:defaultNamespace
  a rdf:Property ;
  rdfs:label "default namespace" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:defaultTagProperty
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:deletedResultSet
  a rdf:Property ;
  rdfs:subPropertyOf ui:resultSet ;
.
arg:desiredStatus
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:detailsViewClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dialogMessage
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dir
  a rdf:Property ;
  rdfs:label "dir" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:email
  a rdf:Property ;
  rdfs:label "email" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:emailAddress
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:expanded
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:external
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:faIcon
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:feedback
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:file
  a rdf:Property ;
  rdfs:label "file" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:fileName
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:filterKeyword
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:format
  a rdf:Property ;
  rdfs:label "format" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:frozen
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:governedResource
  a rdf:Property ;
  rdfs:label "governed resource" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:graphSet
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:groupName
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:hasViewableDetails
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:headingLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:headingLevel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:hidden
  a rdf:Property ;
.
arg:hideLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:icon
  a rdf:Property ;
  rdfs:label "icon" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:import
  a rdf:Property ;
  rdfs:label "import" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:importGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:importedGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:imports
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:index
  a rdf:Property ;
  rdfs:label "index" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:initType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:instanceViewClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isOnEditorTab
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isProjectTabsPage
  a rdf:Property ;
  rdfs:label "is project tabs page" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:items
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:leaveWorkflowUrl
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level1Link
  a rdf:Property ;
  rdfs:label "level1Link" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level1Text
  a rdf:Property ;
  rdfs:label "level1Text" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level1element
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level2Link
  a rdf:Property ;
  rdfs:label "level2Link" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level2Text
  a rdf:Property ;
  rdfs:label "level2Text" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level3Link
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level3Text
  a rdf:Property ;
  rdfs:label "level3Text" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:level4Text
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:limit
  a rdf:Property ;
  rdfs:label "limit" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:link
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:loadLazily
  a rdf:Property ;
  rdfs:label "load lazily" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:logo
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:mainClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:manager
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:matchStatus
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:maxDate
  a rdf:Property ;
  rdfs:label "max date" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:message
  a rdf:Property ;
  rdfs:label "message" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:minDate
  a rdf:Property ;
  rdfs:label "min date" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:name
  a rdf:Property ;
  rdfs:label "name" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:new
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:newProjectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:newStatus
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:newTab
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:note
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:objectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:old
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldObject
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldProjectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldStatus
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:onRowDoubleClick
  a rdf:Property ;
  rdfs:label "on row double click" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:organization
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:owlImports
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pageType
  a rdf:Property ;
  rdfs:label "page type" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:parentPage
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:parentsResultSet
  a rdf:Property ;
  rdfs:label "parents result set" ;
  rdfs:subPropertyOf ui:resultSet ;
.
arg:password
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:path
  a rdf:Property ;
  rdfs:label "path" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:pluginType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:post
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:potentialMembers
  a rdf:Property ;
  rdfs:label "potential members" ;
  rdfs:subPropertyOf ui:resultSet ;
.
arg:projGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectGraph
  a rdf:Property ;
  rdfs:label "project base URI" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:projectTab
  a rdf:Property ;
  rdfs:label "project tab" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:queryGraphBase
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:queryParam
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:queryParamValues
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:record
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:regex
  rdfs:label "regular expression" ;
.
arg:relation
  a rdf:Property ;
  rdfs:label "relation" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:resourceIRI
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:role
  a rdf:Property ;
  rdfs:label "role" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:root
  a rdf:Property ;
  rdfs:label "root" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sectionContent
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:selected
  a rdf:Property ;
  rdfs:label "selected" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:selectedUser
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:serialization
  a rdf:Property ;
  rdfs:label "serialization" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:service
  a rdf:Property ;
  rdfs:label "service" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sessionGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sort
  a rdf:Property ;
  rdfs:label "sort" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:sourceGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:spinImports
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:start
  a rdf:Property ;
  rdfs:label "start" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:status
  a rdf:Property ;
  rdfs:label "status" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subjectArea
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subjectGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:subjectRootClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suppressHome
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suppressQuickNavigation
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suppressSearch
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suppressUndo
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:system
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tab
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tabLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tableId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tag
  a rdf:Property ;
  rdfs:label "tag" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:taskSet
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:teamGraph
  a rdf:Property ;
  rdfs:label "team graph URI" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:title
  a rdf:Property ;
  rdfs:label "title" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:transition
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:uriPart
  rdfs:label "URI part" ;
.
arg:user
  a rdf:Property ;
  rdfs:label "user" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:violation
  a rdf:Property ;
  rdfs:label "violation" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:visibility
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withHiddenRoles
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withIcon
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withImports
  a rdf:Property ;
  rdfs:label "with imports" ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withRoles
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
metadata:Creator
  a spin:Column ;
.
swa:Button
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataAttrValue ;
      spl:valueType xsd:string ;
    ] ;
.
swa:DisplayChartSearchResultsAction
  arg:excludedAppName "ChangeHistory" ;
.
swa:Dummy
  ui:headIncludes """
<ui:group>
    <meta name=\"swa:Dummy\"/>
</ui:group>
"""^^ui:Literal ;
.
swa:RichTextEditor
  a swa:ObjectEditorClass ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:and ;
          sp:arg1 [
              a sp:or ;
              sp:arg1 [
                  a spl:subPropertyOf ;
                  sp:arg1 [
                      sp:varName "predicate" ;
                    ] ;
                  sp:arg2 skos:note ;
                ] ;
              sp:arg2 [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "range" ;
                    ] ;
                  sp:arg2 rdf:HTML ;
                ] ;
            ] ;
          sp:arg2 [
              a swa:hasAppName ;
              sp:arg1 [
                  a swa:appName ;
                ] ;
              sp:arg2 "Editor" ;
            ] ;
        ] ;
      swa:weight 5 ;
    ] ;
  ui:prototype """
<ui:group let:datatype=\"{= COALESCE(datatype(?object), ?range, swa:localRange(?predicate, ?subject), xsd:string) }\" let:id=\"{= ui:uniqueId() }\">
    <table class=\"rich-text-editor\">
        <tr>
            <td>
                <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= ?datatype }\" arg:uid=\"{= ?uid }\"/>
                <textarea class=\"form-control\" id=\"{= ?id }\" name=\"new-{= ?uid }\" rows=\"4\">{= ?object }</textarea>
                <script>setTimeout(function () {teamwork.initRichTextEditor('{= ?id }');}, 0);</script>
            </td>
            <ui:if ui:condition=\"{= ?datatype = rdf:langString }\">
                <td class=\"swa-align-top\">
                    <swa:LangSelector arg:initialValue=\"{= lang(?object) }\" arg:uid=\"{= ?uid }\"/>
                </td>
            </ui:if>
        </tr>
    </table>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A multi-line text area to enter rdf:HTML literals as rich text. By default this editor is used for sub-properties of skos:note and properties that have rdf:HTML as their range." ;
  rdfs:label "Rich text editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
  owl:versionInfo "Note that although this class is from the SWA namespace, it is only stored in the teamwork project. Future versions may make this available to general SWA applications." ;
.
swa:SwitchableForm
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:addPropertyGroup ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to add a select menu that allows the user to add property groups to the details page" ;
    ] ;
.
swa:hasRelationshipTreeProperties
  rdfs:subClassOf spin:Functions ;
.
swa:relationshipTreeProperty
  a spin:Function ;
  rdfs:label "relationship tree property" ;
  rdfs:subClassOf spin:MagicProperties ;
.
tasks:AllTasks
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:desiredStatus ;
      spl:valueType xsd:string ;
    ] ;
.
teamwork:AbstractActionLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "A descriptive text appearing below the H1, if desired." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:faIcon ;
      spl:valueType xsd:string ;
      rdfs:comment "Font-awesome icon class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
      rdfs:comment "A path to the icon (as img src)." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "An H2 that also has an icon to the left and that may have a hyperlink." ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:AbstractCreateProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
      rdfs:comment "An optional edg:SubjectArea that will be assigned as metadata to the newly created project." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:defaultNamespace ;
      spl:valueType xsd:string ;
      rdfs:comment "The default namespace entered by the user." ;
    ] ;
  ui:errorPrototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?defaultNamespace) }\">
        <ui:if ui:condition=\"{= !spif:isValidURI(?defaultNamespace) }\">
            <swon:Object>
                <swon:Value arg:name=\"error\" arg:value=\"Error: Default namespace must be a URI.\"/>
            </swon:Object>
        </ui:if>
        <ui:elseif ui:condition=\"{= !teamwork:isValidDefaultNamespace(?defaultNamespace) }\">
            <swon:Object>
                <swon:Value arg:name=\"error\" arg:value=\"Error: Default namespace must end with a / or #.\"/>
            </swon:Object>
        </ui:elseif>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Abstract create project service" ;
  rdfs:subClassOf teamwork:LabelAndCommentService ;
.
teamwork:AbstractPropertyShapeViewer
  a swa:ObjectViewerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressPredicate ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress the sh:path predicate." ;
    ] ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:eq ;
          sp:arg1 [
              sp:varName "predicate" ;
            ] ;
          sp:arg2 sh:property ;
        ] ;
      swa:weight 15 ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:homeGraph=\"{= IF(bound(?object), IRI(smf:definedIn(?object)), ?none) }\">
    <ui:group let:link=\"{= IF((isIRI(?object) || (?homeGraph = teamwork:currentMasterGraph())), swa:createLink(?object, ?uid), ?none) }\">
        <div class=\"swa-objects-group-compact-parent {= IF(bound(?link), &quot;teamwork-abstract-property-shape-viewer-hover&quot;, ?none) }\" onclick=\"{= ?link }\" title=\"{= IF(bound(?link), &quot;Click to navigate to this property shape&quot;, ?none) }\">
            <ui:if ui:condition=\"{= bound(?object) &amp;&amp; dash:isDeactivated(?object) }\">
                <div class=\"teamwork-constraint-deactivated\" let:graph=\"{= smf:tripleDefinedIn(?object, sh:deactivated, true) }\">
                    <span>Deactivated</span>
                    <ui:if ui:condition=\"{= bound(?graph) }\">
                        <span> in </span>
                        <b>{= teamwork:projectLabel(?graph) }</b>
                    </ui:if>
                </div>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?homeGraph) &amp;&amp; (?homeGraph != teamwork:currentMasterGraph()) }\">
                <div class=\"swa-home-graph\">
                    <span>Included from </span>
                    <b>{= teamwork:projectLabel(?homeGraph) }</b>
                    <ui:if ui:condition=\"{= isBlank(?object) }\">
                        <span> and not extensible here</span>
                    </ui:if>
                </div>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?subject) &amp;&amp; EXISTS {
                ?object sh:path ?path .
                ?rule sh:predicate ?path .
                ?rule sh:subject sh:this .
                ?subject sh:rule ?rule .
                FILTER NOT EXISTS {
                    ?rule sh:deactivated true .
                } .
            } }\">
                <div class=\"teamwork-inferred-property-marker\">
                    <span>Values of this property are inferred by a rule</span>
                </div>
            </ui:if>
            <ui:setContext let:id=\"{= ui:uniqueId() }\" ui:varName=\"resourceType\" ui:varValue=\"{= sh:PropertyShape }\">
                <teamwork:PropertyShapeViewerBody arg:shape=\"{= ?object }\"/>
            </ui:setContext>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:ObjectViewer ;
.
teamwork:ActionLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      rdfs:comment "Html class" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataEdgProject ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataProjectType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataUri ;
      rdfs:comment "Allows for arbitrary data" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:link ;
      spl:valueType xsd:string ;
      rdfs:comment "The hyperlink behind the header." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onClick ;
      spl:valueType xsd:string ;
      rdfs:comment "JavaScript if clicked." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "The title text to display." ;
    ] ;
  ui:prototype """
<section class=\"teamwork-with-icon\">
    <div class=\"icon\">
        <ui:if ui:condition=\"{= bound(?onClick) || bound(?link) }\">
            <a class=\"{= ?class }\" data-edg-project=\"{= ?dataEdgProject }\" data-project-type=\"{= ?dataProjectType }\" data-uri=\"{= ?dataUri }\" href=\"{= IF(bound(?onClick), &quot;javascript:void(0)&quot;, ?link) }\" onclick=\"{= ?onClick }\">
                <ui:if ui:condition=\"{= bound(?icon) }\">
                    <img alt=\"\" src=\"{= ?icon }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= bound(?faIcon) }\">
                    <i aria-hidden=\"true\" class=\"fa {= ?faIcon }\"/>
                </ui:if>
            </a>
        </ui:if>
        <ui:else>
            <ui:if ui:condition=\"{= bound(?icon) }\">
                <img alt=\"\" src=\"{= ?icon }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?faIcon) }\">
                <i aria-hidden=\"true\" class=\"fa {= ?faIcon }\"/>
            </ui:if>
        </ui:else>
    </div>
    <div class=\"body\">
        <h2>
            <ui:if ui:condition=\"{= bound(?onClick) || bound(?link) }\">
                <a class=\"{= ?class }\" data-edg-project=\"{= ?dataEdgProject }\" data-project-type=\"{= ?dataProjectType }\" data-uri=\"{= ?dataUri }\" href=\"{= IF(bound(?onClick), &quot;javascript:void(0)&quot;, ?link) }\" onclick=\"{= ?onClick }\">{= ?title }</a>
            </ui:if>
            <ui:else>
                <span class=\"{= ?class }\" data-edg-project=\"{= ?dataEdgProject }\" data-project-type=\"{= ?dataProjectType }\" data-uri=\"{= ?dataUri }\">{= ?title }</span>
            </ui:else>
        </h2>
        <ui:if ui:condition=\"{= bound(?comment) }\">
            <p>
                <ui:parse ui:str=\"{= ?comment }\"/>
                <ui:insertionPoint ui:pointId=\"text\"/>
            </p>
        </ui:if>
        <ui:insertionPoint ui:pointId=\"body\"/>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:comment "An h2 that also has an icon to the left and that may have a hyperlink." ;
  rdfs:subClassOf teamwork:AbstractActionLink ;
.
teamwork:ActionLinkContainer
  a ui:NodeClass ;
  ui:prototype """
<section class=\"teamwork-with-icon\">
    <div class=\"icon\">
        <ui:if ui:condition=\"{= bound(?icon) }\">
            <img alt=\"\" src=\"{= ?icon }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?faIcon) }\">
            <i aria-hidden=\"true\" class=\"fa {= ?faIcon }\"/>
        </ui:if>
    </div>
    <div class=\"body\">
        <h2>
            <ui:insertionPoint ui:pointId=\"link\"/>
        </h2>
        <ui:if ui:condition=\"{= bound(?comment) }\">
            <p>
                <ui:parse ui:str=\"{= ?comment }\"/>
                <ui:insertionPoint ui:pointId=\"text\"/>
            </p>
        </ui:if>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:comment """An H2 that also has an icon to the left. The contents of this element are inserted into the H2. Useful for things like this:

<a href=\"javascript:void(0);\">Link<ui:handle ui:event=\"onclick\">...</ui:handle></a>""" ;
  rdfs:subClassOf teamwork:AbstractActionLink ;
.
teamwork:ActionsCallbackJSON
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Array>
    <ui:if ui:condition=\"{= bound(?resource) }\">
        <ui:if ui:condition=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
            <ui:if ui:condition=\"{= teamwork:commentsActivated() }\">
                <swon:Object>
                    <swon:Value arg:name=\"title\" arg:value=\"Send Comment\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"Send Comment\"/>
                    <swon:Value arg:name=\"action\">
                        <swon:Object>
                            <swon:Value arg:name=\"namespace\" arg:value=\"teamwork\"/>
                            <swon:Value arg:name=\"handler\" arg:value=\"sendFeedback\"/>
                            <swon:Value arg:name=\"args\">
                                <swon:Array>
                                    <swon:Object>
                                        <swon:Value arg:name=\"name\" arg:value=\"arg1\"/>
                                        <swon:Value arg:name=\"value\" arg:value=\"{= ?resource }\"/>
                                    </swon:Object>
                                    <swon:Object>
                                        <swon:Value arg:name=\"name\" arg:value=\"arg2\"/>
                                        <swon:Value arg:name=\"value\" arg:value=\"{= teamwork:currentMasterGraph() }\"/>
                                    </swon:Object>
                                </swon:Array>
                            </swon:Value>
                        </swon:Object>
                    </swon:Value>
                </swon:Object>
            </ui:if>
        </ui:if>
        <ui:else>
            <!--workflow-->
            <ui:if ui:condition=\"{= isIRI(?resource) &amp;&amp; (!teamwork:currentGraphIsTag()) }\">
                <ui:if ui:condition=\"{= teamwork:currentUserCanCreateTags(teamwork:currentMasterGraph()) }\">
                    <ui:setContext ui:shapesGraph=\"{= teamwork:workflowsGraph() }\">
                        <ui:call arg:editedResource=\"{= ?resource }\" arg:projectGraph=\"{= teamwork:currentMasterGraph() }\" ui:template=\"{= teamwork:PotentialTagWorkflowsForResource }\">
                            <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
                                <ui:createLink arg:editedResource=\"{= ?resource }\" arg:projectGraph=\"{= teamwork:currentMasterGraph() }\" ui:viewClass=\"{= teamwork:AddTagPage }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"label\" arg:value=\"Start Workflow\"/>
                                        <swon:Value arg:name=\"action\">
                                            <swon:Object>
                                                <swon:Value arg:name=\"handler\" arg:value=\"open\"/>
                                                <swon:Value arg:name=\"args\">
                                                    <swon:Array>
                                                        <swon:Object>
                                                            <swon:Value arg:name=\"name\" arg:value=\"arg1\"/>
                                                            <swon:Value arg:name=\"value\" arg:value=\"{= ?link }\"/>
                                                        </swon:Object>
                                                        <swon:Object>
                                                            <swon:Value arg:name=\"name\" arg:value=\"arg2\"/>
                                                            <swon:Value arg:name=\"value\" arg:value=\"_blank\"/>
                                                        </swon:Object>
                                                    </swon:Array>
                                                </swon:Value>
                                            </swon:Object>
                                        </swon:Value>
                                    </swon:Object>
                                </ui:createLink>
                            </ui:if>
                        </ui:call>
                    </ui:setContext>
                </ui:if>
            </ui:if>
            <!--tasks-->
            <ui:if ui:condition=\"{= teamwork:tasksActivated() }\">
                <swon:Object>
                    <swon:Value arg:name=\"title\" arg:value=\"View/Edit Tasks\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"({= tasks:taskCount(?resource, teamwork:currentTeamGraph()) })  Tasks\"/>
                    <swon:Value arg:name=\"action\">
                        <swon:Object>
                            <swon:Value arg:name=\"namespace\" arg:value=\"tasks\"/>
                            <swon:Value arg:name=\"handler\" arg:value=\"viewTasks\"/>
                            <swon:Value arg:name=\"args\">
                                <swon:Array>
                                    <swon:Object>
                                        <swon:Value arg:name=\"name\" arg:value=\"arg1\"/>
                                        <swon:Value arg:name=\"value\" arg:value=\"{= ?resource }\"/>
                                    </swon:Object>
                                </swon:Array>
                            </swon:Value>
                        </swon:Object>
                    </swon:Value>
                </swon:Object>
            </ui:if>
            <!--comments-->
            <ui:if ui:condition=\"{= teamwork:commentsActivated() }\">
                <swon:Object>
                    <swon:Value arg:name=\"title\" arg:value=\"View/Edit Comments\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"({= teamwork:commentsCount(?resource, teamwork:currentTeamGraph()) })  Comments\"/>
                    <swon:Value arg:name=\"action\">
                        <swon:Object>
                            <swon:Value arg:name=\"namespace\" arg:value=\"teamwork\"/>
                            <swon:Value arg:name=\"handler\" arg:value=\"editComments\"/>
                            <swon:Value arg:name=\"args\">
                                <swon:Array>
                                    <swon:Object>
                                        <swon:Value arg:name=\"name\" arg:value=\"arg1\"/>
                                        <swon:Value arg:name=\"value\" arg:value=\"{= ?resource }\"/>
                                    </swon:Object>
                                </swon:Array>
                            </swon:Value>
                        </swon:Object>
                    </swon:Value>
                </swon:Object>
            </ui:if>
        </ui:else>
    </ui:if>
</swon:Array>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Actions callback JSON" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:AddAssetToBookmarks
  a swa:ResourceAction ;
  arg:appName "Editor" ;
  arg:condition [
      a sp:and ;
      sp:arg1 [
          a sp:not ;
          sp:arg1 [
              a teamwork:allowAnonymous ;
            ] ;
        ] ;
      sp:arg2 [
          a teamwork:currentGraphHasTeamGraph ;
        ] ;
    ] ;
  arg:onSelect "teamwork.addAssetToBookmarks(resourceURI,queryGraphURI)" ;
  swa:readOnly true ;
  rdfs:label "Add to Basket" ;
.
teamwork:AddConstraintLibraryService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The library to add or remove." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:masterGraphForCurrentUser(?projectGraph) }\">
    <ui:transaction ui:logMessage=\"Add constraint library {= ?graph }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?projectGraph spin:imports ?graph .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback used from the constraints library page to add a spin:import." ;
  rdfs:label "Add constraint library service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:AddImportService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:import ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The graph to import." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:masterGraphForCurrentUser(?projectGraph) }\">
    <ui:transaction ui:logMessage=\"Add owl:imports {= teamwork:projectLabel(?import) } to {= teamwork:projectLabel(?projectGraph) }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?projectGraph owl:imports ?import .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
    <uix:resetAutoCompleteIndex arg:graph=\"{= ?projectGraph }\"/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Add import service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:AddResourcesToBookmarks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:bookmarks ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:queryGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourcePairs ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:if ui:condition=\"{= !bound(?bookmarks) }\">
        <teamwork:EnsureUsersBookmarksExist/>
    </ui:if>
    <ui:group let:bookmarks=\"{= COALESCE(?bookmarks, teamwork:getUserBookmarks()) }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:json ui:str=\"{= ?resourcePairs }\" ui:varName=\"pairs\">
            <ui:group>
                <ui:transaction>
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?bookmarks teamwork:hasItem ?item .
                                ?item a ?type .
                                ?item teamwork:hasResource ?resource .
                                ?item teamwork:queryGraph ?queryGraph .
                                ?item dcterms:created ?now .
                            }
                            WHERE {
                                BIND (now() AS ?now) .
                                ?pairs ui:jsonArrayMembers ?object .
                                BIND (ui:jsonString(ui:jsonValue(?object, &quot;uri&quot;)) AS ?strResource) .
                                BIND (IRI(spif:decodeURL(?strResource)) AS ?resource) .
                                BIND (ui:jsonString(ui:jsonValue(?object, &quot;type&quot;)) AS ?strType) .
                                BIND (IRI(spif:decodeURL(?strType)) AS ?type) .
                                BIND (ui:jsonString(ui:jsonValue(?object, &quot;index&quot;)) AS ?strIndex) .
                                BIND (IRI(CONCAT(&quot;urn:x-evn-bookmark:&quot;, ?strIndex, &quot;:&quot;, STRUUID())) AS ?item) .
                                FILTER NOT EXISTS {
                                    ?bookmarks teamwork:hasItem ?anyItem .
                                    ?anyItem teamwork:hasResource ?resource .
                                    ?anyItem teamwork:queryGraph ?queryGraph .
                                } .
                            } }\"/>
                </ui:transaction>
            </ui:group>
        </ui:json>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add resource to bookmarks" ;
  rdfs:subClassOf teamwork:BookmarkServices ;
.
teamwork:AddedObjectHistoryEntry
  a ui:NodeClass ;
  ui:prototype """
<div class=\"teamwork-history-div teamwork-history-div-added\">
    <swa:ObjectViewer ui:args=\"*\"/>
    <div class=\"teamwork-history-details\">
        <span>Added by {= afn:localname(?user) }</span>
        <swa:Space/>
        <span>on {= ui:label(?date) }</span>
        <ui:if ui:condition=\"{= bound(?comment) }\">&nbsp;({= ?comment })</ui:if>
        <ui:if ui:condition=\"{= (!isBlank(?object)) &amp;&amp; (!spl:isPrimaryKeyPropertyOfInstance(?subject, ?predicate)) }\">&nbsp;&nbsp;<a href=\"javascript:void(0)\" onclick=\"swa.revert('{= ui:escapeJSON(ui:encodeNode(?subject, true, true)) }', '{= ?predicate }', '{= ui:escapeJSON(ui:encodeNode(?object, true, true)) }', false)\">
                <b>Revert</b>
            </a>
        </ui:if>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Added object history entry" ;
  rdfs:subClassOf teamwork:ObjectHistoryEntry ;
.
teamwork:AffectedTagsView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to display the view for." ;
    ] ;
  ui:prototype """
<ui:call arg:node=\"{= ?node }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\" ui:template=\"{= teamwork:FindAffectedTags }\">
    <div>
        <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <div class=\"teamwork-affected-tag\">
                    <h2>{= ui:label(?tag) }</h2>
                    <p let:creator=\"{= spl:object(?tag, sioc:has_creator) }\">
                        <span>Created by </span>
                        <teamwork:UserLink arg:user=\"{= ?creator }\"/>
                        <swa:Space/>
                        <span>on {= ui:label(spl:object(?tag, dcterms:created)) }.</span>
                    </p>
                    <ui:if ui:condition=\"{#
                            ASK 
                            WHERE {
                                ?tag ?role ?user .
                            } }\">
                        <teamwork:AffectedTagsViewHelper arg:class=\"success\" arg:node=\"{= ?node }\" arg:property=\"{= teamwork:added }\" arg:tag=\"{= ?tag }\" arg:title=\"Added Statements\"/>
                        <teamwork:AffectedTagsViewHelper arg:class=\"danger\" arg:node=\"{= ?node }\" arg:property=\"{= teamwork:deleted }\" arg:tag=\"{= ?tag }\" arg:title=\"Deleted Statements\"/>
                    </ui:if>
                    <ui:else>
You currently have no access to view the changes. Please contact the manager of the working copy to gain access.
</ui:else>
                </div>
            </ui:forEach>
        </ui:if>
        <ui:else>
            <h2>No changes found for {= ui:label(?node) }</h2>
        </ui:else>
    </div>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "A view showing all changes mentioning a given node (?node) grouped by tags. The current user must be member of the tag to see the details - otherwise just the tag name will be displayed. The query graph must be a team graph." ;
  rdfs:label "Affected tags view" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:AffectedTagsViewHelper
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
      rdfs:comment "Bootstrap CSS class for coloring; usually \"danger\" or \"success\"" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "Either teamwork:added or teamwork:deleted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "The title of the section." ;
    ] ;
  ui:prototype """
<ui:call arg:node=\"{= ?node }\" arg:property=\"{= ?property }\" arg:tag=\"{= ?tag }\" ui:template=\"{= teamwork:FindAffectedTagsDetails }\">
    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
        <p class=\"text-{= ?class }\">
            <strong class=\"small\">{= ?title }</strong>
            <table class=\"teamwork-statements-table bg-{= ?class }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <tr>
                        <td class=\"small text-{= ?class }\">{= ui:label(?subject) }</td>
                        <td class=\"small text-{= ?class }\">{= ui:label(?predicate) }</td>
                        <td class=\"small text-{= ?class }\">
                            <teamwork:ParseIfLiteral arg:node=\"{= ?object }\"/>
                        </td>
                    </tr>
                </ui:forEach>
            </table>
        </p>
    </ui:if>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "A helper object of AffectedTagsView, showing either added or deleted triples." ;
  rdfs:label "Affected tags view helper" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ArchiveOnCommitManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 12 ;
  teamwork:pluginValidExpression [
      a sp:not ;
      sp:arg1 [
          a teamwork:isReadOnlyProject ;
          arg:projectGraph [
              sp:varName "projectGraph" ;
            ] ;
        ] ;
    ] ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <teamwork:ActionLink arg:icon=\"{= ui:lib() }/teamwork/build/images/teamwork/archive-on-commit.svg\" arg:title=\"Archive Working Copies on Commit\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(spl:object(?teamGraph, teamwork:archiveOnCommit), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:setPropertyValue arg:property=\"{= teamwork:archiveOnCommit }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:handle>
            </input>
            <span>{= spl:objectInGraph(teamwork:archiveOnCommit, rdfs:comment, &lt;http://topbraid.org/teamwork&gt;) }</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Archive working copies on commit plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:AssetsPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterKeyword ;
      spl:valueType xsd:string ;
      rdfs:comment "The teamwork:keyword to filter by." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType xsd:string ;
      rdfs:comment "The plural name of the vocabulary type, e.g. \"Ontologies\"." ;
    ] ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:projectTypeByPluralName(?type) }\" let:userName=\"{= smf:currentUserName() }\">
    <swa:BrowserCheck/>
    <teamwork:Chrome arg:pageType=\"project-type-page\" arg:projectType=\"{= ?projectType }\">
        <ui:if ui:condition=\"{= !bound(?projectType) }\">
            <div>Error: Unknown project type: {= ?type }</div>
        </ui:if>
        <ui:else>
            <teamwork:ProjectTypeSection ui:args=\"*\"/>
        </ui:else>
    </teamwork:Chrome>
    <script>$(document).ready(function() {teamwork.initPopover()})</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A page that lists all project instances of a given project type." ;
  rdfs:label "Assets page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
teamwork:AvailablePostStatuses
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "s" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object teamwork:PostStatus ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "s" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets the available statuses that comment/feedback posts can have." ;
  rdfs:label "Available post statuses" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:BaseGraphLookupService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue true ;
      spl:predicate arg:withImports ;
      spl:valueType xsd:boolean ;
      rdfs:comment """Default is true.

Will ensure to return the home graph IRI with Imports""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceIRI ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:buildImportIRI=\"{= COALESCE(?withImports, true) }\" let:configGraph=\"{= ui:graphWithoutImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)) }\">
    <ui:setContext ui:queryGraph=\"{= ?configGraph }\">
        <ui:call ui:template=\"{= saf:selectSearchGraphs }\" ui:varName=\"graphs\">
            <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?graphs) }\">
                <swon:Object>
                    <swon:Value arg:name=\"data\">
                        <swon:RSObjectArray arg:resultSet=\"{#
                                SELECT (ENCODE_FOR_URI(str(?graphIRI)) AS ?baseGraphIRI)
                                WHERE {
                                    {
                                        BIND (smf:definedIn(IRI(?resourceIRI)) AS ?homeGraph) .
                                        BIND (IF(?buildImportIRI, ui:graphWithImports(IRI(?homeGraph)), ?homeGraph) AS ?graphIRI) .
                                    } .
                                } }\"/>
                    </swon:Value>
                </swon:Object>
            </ui:setContext>
        </ui:call>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Base graph lookup service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:BookmarkServices
  a ui:Service ;
  dash:abstract true ;
  ui:abstract true ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= teamwork:allowAnonymous() }\">
    <ui:setResponseHeader ui:statusCode=\"{= 403 }\"/>
    <ui:group>Service cannot be called by anonymous user.</ui:group>
</ui:if>
"""^^ui:Literal ;
  ui:private true ;
  rdfs:label "Bookmark services" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:ButtonReturnToProjectOrTagPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "Activates the specified project tab" ;
    ] ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= ?projectTab }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
    <button class=\"btn btn-default\" onclick=\"location.href='{= ?link }'\">Ok</button>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "An Ok button that takes the browser back to the project or tag page." ;
  rdfs:label "Button: Return to project or tag page" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:CanDeleteProjectService
  a ui:NodeClass ;
  ui:prototype """
<uix:asAdmin>
    <ui:forEach ui:resultSet=\"{#
            SELECT DISTINCT ?baseURI
            WHERE {
                rdf:nil teamwork:graphsUnderTeamControl ( ?baseURI ?teamGraph ) .
                GRAPH ?baseURI {
                    ?baseURI (owl:imports|tagger:objectGraph)|tagger:subjectGraph ?projectGraph .
                } .
            } }\" ui:separator=\", \">{= teamwork:projectLabel(?baseURI) }</ui:forEach>
</uix:asAdmin>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:comment "Called before the user can confirmed deletion of a given project. Returns a list of vocabulary names that have references to the project to delete." ;
  rdfs:label "Can delete project service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:Change
  swa:keyProperties (
      sioc:has_creator
      dcterms:created
      teamwork:status
      teamwork:tag
      rdfs:comment
    ) ;
  ui:instanceView """
<teamwork:ChangeView arg:change=\"{= ?this }\" ui:id=\"view\"/>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group default:linear=\"{= true }\" default:subject=\"{= ?this }\" let:tag=\"{= ui:contextValue(&quot;tag&quot;) }\" let:userSelectorElementId=\"{= ui:uniqueId() }\" ui:id=\"search\">
    <div class=\"swa-width-one-hundred-percent\">
        <div class=\"teamwork-change-history-grid-container\">
            <div class=\"teamwork-change-history-grid-item\">
                <label class=\"teamwork-change-history-search-creator\" for=\"value{= ?userSelectorElementId }-field\">creator:</label>
                <input name=\"facet{= ?userSelectorElementId }\" type=\"hidden\" value=\"&lt;{= sioc:has_creator }&gt;\"/>
                <input id=\"value{= ?userSelectorElementId }\" name=\"value{= ?userSelectorElementId }\" type=\"hidden\" value=\"\"/>
                <div class=\"change-history-filter-user-select\" data-value-element-id=\"value{= ?userSelectorElementId }\" id=\"{= ?userSelectorElementId }-field\"/>
                <script>gadgets.Hub.publish('org.topbraid.swa.populateChangeHistoryFilterUserDropdown', '{= ?userSelectorElementId }-field');</script>
            </div>
            <div class=\"teamwork-change-history-grid-item\">
                <swa:Object arg:label=\"status\" arg:predicate=\"{= teamwork:status }\"/>
            </div>
            <div class=\"teamwork-change-history-grid-item\">
                <swa:Object arg:label=\"date\" arg:predicate=\"{= dcterms:created }\"/>
            </div>
            <div class=\"teamwork-change-history-grid-item\">
                <ui:if ui:condition=\"{= bound(?tag) }\">
                    <input name=\"facetTag\" type=\"hidden\" value=\"teamwork:tag\"/>
                    <input name=\"valueTag\" type=\"hidden\" value=\"&lt;{= ?tag }&gt;\"/>
                </ui:if>
                <ui:else>
                    <swa:Object arg:label=\"working copy\" arg:predicate=\"{= teamwork:tag }\"/>
                </ui:else>
            </div>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
.
teamwork:ChangeDetails
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:limit "1000"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "Added_or_Deleted" ;
          ]
          [
            sp:varName "Subject" ;
          ]
          [
            sp:varName "Property_Name" ;
          ]
          [
            sp:varName "Property_Value" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "triple" ;
              ] ;
            sp:predicate [
                sp:varName "relation" ;
              ] ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subj" ;
              ] ;
            sp:predicate teamwork:subject ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate teamwork:predicate ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate teamwork:object ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:flatURILabel ;
                sp:arg1 [
                    sp:varName "subj" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "Subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:flatURILabel ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "Property_Name" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:flatURILabel ;
                sp:arg1 [
                    sp:varName "object" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "Property_Value" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a afn:localname ;
                sp:arg1 [
                    sp:varName "relation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "Added_or_Deleted" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:column [
      a spin:Column ;
      spin:columnIndex 0 ;
      spin:columnWidth 200 ;
      rdfs:label "Added or Deleted" ;
    ] ;
  spin:column [
      a spin:Column ;
      spin:columnIndex 1 ;
      spin:columnWidth 300 ;
      rdfs:label "Subject" ;
    ] ;
  spin:column [
      a spin:Column ;
      spin:columnIndex 2 ;
      spin:columnWidth 200 ;
      rdfs:label "Property" ;
    ] ;
  spin:column [
      a spin:Column ;
      spin:columnIndex 3 ;
      spin:columnWidth 300 ;
      rdfs:label "Value" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to get the details of." ;
    ] ;
  spin:private true ;
  rdfs:label "Change details" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:ChangeElements
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:label "Change elements" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ChangeFunctionsBlock
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate teamwork:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The Change to operate on." ;
    ] ;
  rdfs:comment "A combo box with a list of available actions for a given Change, and an execute button to run the selected ChangeFunction. The combo box is populated in the context of each change, by using smf:canInvoke to check for the declared SPIN constraints." ;
  rdfs:label "Change functions block" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:ChangeHistoryPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"change-history\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ReportsProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>Change History</h1>
    <ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:varName=\"swaAppName\" ui:varValue=\"ChangeHistory\">
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?teamGraph) }\" ui:varName=\"tag\" ui:varValue=\"{= ?tag }\">
            <script>swa.queryGraphURI = '{= ui:currentQueryGraph() }';</script>
            <div class=\"teamwork-change-history-page-main-panel\" id=\"mainPanel\">
                <swa:Window arg:layoutPanel=\"north\" arg:title=\"Search\">
                    <swa:FormSearchGadget arg:hideGlobalSearch=\"{= true }\" arg:localSearch=\"{= true }\" arg:resourceType=\"{= teamwork:Change }\" arg:suppressKeyPropertiesSelection=\"{= true }\"/>
                </swa:Window>
                <swa:Window arg:layoutPanel=\"center\" arg:title=\"Matching Changes\">
                    <swa:DataTableSearchResultsGadget arg:resourceSelectedEvent=\"org.topbraidlive.evn.resourceSelected\" arg:suppressLabelColumn=\"{= true }\" arg:tableId=\"changeHistory\" ui:args=\"*\"/>
                </swa:Window>
                <swa:Window arg:id=\"FormWindow\" arg:layoutPanel=\"south\" arg:title=\"Details of Selected Change\">
                    <swa:ViewFormGadget arg:resourceSelectedEvent=\"org.topbraidlive.evn.resourceSelected\" ui:args=\"*\"/>
                </swa:Window>
            </div>
            <script>$('#mainPanel').layout({
				applyDefaultStyles: true,
				overflowY: scroll,
				south__size: 400
			});</script>
        </ui:setContext>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:ChangeLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate dcterms:created ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The creation date (for the label)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate teamwork:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The change to link to." ;
    ] ;
  ui:prototype """
<ui:createLink ui:resource=\"{= ?change }\">
    <a href=\"{= ?link }\">
        <teamwork:DateTime arg:node=\"{= ?created }\"/>
    </a>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "A hyperlink to a given Change." ;
  rdfs:label "Change link" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:ChangeRoleService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:role ;
      spl:valueType rdf:Property ;
      rdfs:comment "The new role or null to remove the role." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governedResource ;
      spl:valueType teamwork:GovernedResource ;
      rdfs:comment "The resource to change the role at." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The graph to modify." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user to change the role of." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
    <ui:group let:oldRole=\"{#
            SELECT ?oldRole
            WHERE {
                ?governedResource ?oldRole ?user .
                rdf:nil teamwork:roleProperty ?oldRole .
            } }\">
        <ui:if ui:condition=\"{= (?oldRole = teamwork:manager) &amp;&amp; (smf:countMatches(?governedResource, teamwork:manager, ?anyAdmin) = 1) }\">{<swon:Value arg:name=\"error\" arg:value=\"Attempt to change role failed: There must always be at least one manager\"/>}
</ui:if>
        <ui:else>
            <ui:transaction ui:logMessage=\"Change user role\">
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?governedResource ?oldRole ?user .
                        }
                        WHERE {
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?governedResource ?role ?user .
                        }
                        WHERE {
                        } }\"/>
            </ui:transaction>
        </ui:else>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Called when an admin edits user roles." ;
  rdfs:label "Change role service" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ChangeView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The Change to display" ;
    ] ;
  ui:prototype """
<div let:created=\"{= spl:object(?change, dcterms:created) }\" let:status=\"{= spl:object(?change, teamwork:status) }\" let:statusLoadId=\"{= ui:uniqueId() }\" let:teamGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <div class=\"teamwork-change-view-details-comment\">{= spl:object(?change, rdfs:comment) }</div>
    <hr/>
    <table class=\"teamwork-change-view-details\">
        <tr>
            <td>
                <b>Creator: </b>
                <teamwork:UserLink arg:user=\"{= spl:object(?change, sioc:has_creator) }\"/>
            </td>
            <td>
                <b>Date: </b>{= ui:label(?created) }</td>
            <td>
                <ui:loadable ui:loadId=\"{= ?statusLoadId }\">
                    <b>Status: </b>{= afn:localname(spl:object(?change, teamwork:status)) }</ui:loadable>
            </td>
            <td let:tag=\"{= spl:object(?change, teamwork:tag) }\">
                <b>Working Copy: </b>{= ui:label(?tag) }</td>
        </tr>
    </table>
    <ui:group let:masterGraph=\"{= teamwork:masterGraph(teamwork:graphIdFromTeamGraph(?teamGraph)) }\" let:tag=\"{= teamwork:getTagIfUncommitted(?change, ?teamGraph) }\">
        <ui:group let:resource=\"{= COALESCE(?tag, ?teamGraph) }\">
            <div class=\"teamwork-change-view-change-links\">
                <ui:if ui:condition=\"{= bound(?tag) &amp;&amp; teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:editor, ?teamGraph) }\">
                    <a id=\"commitButton\">
                        <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"commitMessage\">
                            <ui:setContext ui:queryGraph=\"{= ?masterGraph }\">
                                <teamwork:CommitChangeHandler arg:change=\"{= ?change }\" arg:teamGraph=\"{= ?teamGraph }\"/>
                            </ui:setContext>
                        </ui:handle>
                        <span>Commit this Change to production</span>
                    </a>
                    <teamwork:Spaces/>
                </ui:if>
                <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilege(?resource, teamwork:editor, ?teamGraph) }\">
                    <ui:if ui:condition=\"{= EXISTS {
                        GRAPH ?teamGraph {
                            ?change teamwork:added ?any .
                        } .
                    } || EXISTS {
                        GRAPH ?teamGraph {
                            ?change teamwork:deleted ?any .
                        } .
                    } }\">
                        <a id=\"revertButton\">
                            <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"undoMessage\">
                                <ui:setContext ui:queryGraph=\"{= ?masterGraph }\">
                                    <teamwork:UndoChangeHandler arg:change=\"{= ?change }\" arg:teamGraph=\"{= ?teamGraph }\"/>
                                </ui:setContext>
                            </ui:handle>
                            <span>Revert this Change ({= IF(bound(?tag), \"in working copy\", \"in production\") })</span>
                        </a>
                        <ui:loadable ui:loadId=\"undoMessage\" ui:loadOnDemand=\"{= true }\">
                            <span>The change has been reverted</span>
                            <script>$(\"#revertButton\").remove();$(\"#commitButton\").remove();</script>
                        </ui:loadable>
                        <ui:loadable ui:loadId=\"commitMessage\" ui:loadOnDemand=\"{= true }\">
                            <span>The change has been committed to production</span>
                            <script>$(\"#revertButton\").remove();$(\"#commitButton\").remove();swa.load('{= ?statusLoadId }');</script>
                        </ui:loadable>
                    </ui:if>
                </ui:if>
            </div>
        </ui:group>
    </ui:group>
    <div class=\"teamwork-change-view-table-break\"/>
    <ui:group let:addedCount=\"{= spl:objectInGraph(?change, teamwork:addedCount, ?teamGraph) }\" let:deletedCount=\"{= spl:objectInGraph(?change, teamwork:deletedCount, ?teamGraph) }\">
        <ui:if ui:condition=\"{= (?addedCount &gt; 0) || (?deletedCount &gt; 0) }\">
            <div>{= ?addedCount } added triples. {= ?deletedCount } deleted triples.</div>
            <div>Detailed change history has not been recorded.</div>
        </ui:if>
        <ui:else>
            <ui:call arg:change=\"{= ?change }\" ui:template=\"{= teamwork:ChangeDetails }\">
                <swa:ResultSetGrid arg:exports=\"{= true }\" arg:resultSet=\"{= ?rs }\" arg:tableId=\"changeHistoryResults\"/>
                <ui:if ui:condition=\"{= spr:rowCount(?rs) = 1000 }\">
                    <div>(Showing a sample of 1000 rows only)</div>
                </ui:if>
            </ui:call>
        </ui:else>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:comment "Displays details of a given Change." ;
  rdfs:label "Change view" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:Chrome
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:isProjectTabsPage ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Triggers some special behaviour for the chrome of the main project tabs page." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
      rdfs:comment "Identifies the type of page. Used by JavaScript to determine primary menu functionality. Also could be used by CSS to handle styling by page type." ;
    ] ;
  ui:prototype """
<ui:group let:customHeaderInsert=\"{= IF(bound(?projectGraph), spl:objectInGraph(COALESCE(teamwork:getProjectType(?projectGraph), &quot;NullGuard&quot;), teamwork:customHeaderInsert, ui:graph), ?none) }\">
    <teamwork:Header arg:pageType=\"{= ?pageType }\" arg:suppressSearch=\"{= bound(?customHeaderInsert) }\">
        <ui:insert ui:into=\"titleArea\">
            <ui:if ui:condition=\"{= bound(?projectGraph) }\">
                <teamwork:FavoriteProjectToggle ui:args=\"*\"/>
                <teamwork:ProjectTitle ui:args=\"*\"/>
            </ui:if>
            <ui:elseif ui:condition=\"{= (bound(?title) &amp;&amp; (!bound(?projectType))) &amp;&amp; (!bound(?parentPage)) }\">
                <ui:group>{= ?title }</ui:group>
            </ui:elseif>
            <ui:elseif ui:condition=\"{= bound(?projectType) }\">
                <ui:group>{= teamwork:pluralProjectTypeLabel(?projectType) }</ui:group>
            </ui:elseif>
            <ui:elseif ui:condition=\"{= bound(?parentPage) }\">
                <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                    <ui:group>{= ui:label(?parentPage) }</ui:group>
                </ui:setContext>
            </ui:elseif>
        </ui:insert>
        <ui:insert ui:into=\"toolArea\">
            <ui:if ui:condition=\"{= bound(?customHeaderInsert) }\">
                <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                    <ui:dynamicView arg:isOnEditorTab=\"{= false }\" ui:class=\"{= ?customHeaderInsert }\"/>
                </ui:setContext>
            </ui:if>
        </ui:insert>
    </teamwork:Header>
    <teamwork:MainMenu arg:currentCategory=\"{= COALESCE(?currentCategory, ?parentPage, ?projectType, IF(bound(?projectGraph), teamwork:getProjectType(?projectGraph), ?none)) }\"/>
    <ui:if ui:condition=\"{= bound(?projectGraph) }\">
        <teamwork:ProjectTabBar arg:useAbsoluteLinks=\"{= swa:falseOrUnbound(?isProjectTabsPage) }\" ui:args=\"*\"/>
    </ui:if>
    <main id=\"main\">
        <ui:insertionPoint ui:pointId=\"main\"/>
    </main>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates the main navigation areas of each page, including the header, the main menu (left hand side), and possibly the project tab bar. The header will show either the project title, or breadcrumbs (Home > (arg:parentPage|arg:projectType) > arg:title), or arg:title. The item to highlight in the main menu is determined by arg:currentCategory, or else by the current project, current project type, or parent page." ;
  rdfs:subClassOf teamwork:ChromeElements ;
.
teamwork:ChromeBorderLayout
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customEast ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript function that returns a configuration object for the east panel." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customWest ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript function that returns a configuration object for the west panel." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:deepLinkingEvent ;
      spl:valueType xsd:string ;
      rdfs:comment """The name of an event that shall be published and subscribed to for \"deep linking\". If set, then the value of the data payload of the event will be placed behind the # of the browser URL. JavaScript code is used to make sure that whenever this value changes (e.g. when the user hits the Back button), then the event is re-published. In a typical scenario, the deep linking event may be the \"resourceSelected\" event that other components on the screen subscribe to.

The value of this argument is also used in other places as a \"default\" for the resource selection. To support this, the value of this argument is being remembered on the client in the global variable swa.deepLinkingEvent.""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:deepLinkingPanel ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the panel to open on startup if a deep link is present. Can only be used together with deepLinkingEvent. Possible values are \"center\", \"east\" etc." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressInitializer ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to not include the swa:Initializer." ;
    ] ;
  ui:prototype """
<ui:group let:parent=\"appBody\" let:uid=\"{= ui:uniqueId() }\">
    <ui:insertionPoint ui:pointId=\"1\"/>
    <ui:insertionPoint ui:pointId=\"2\"/>
    <ui:insertionPoint ui:pointId=\"3\"/>
    <ui:insertionPoint ui:pointId=\"4\"/>
    <ui:insertionPoint ui:pointId=\"5\"/>
    <script let:layoutFunction=\"{= ?uid }Layout\">function {= ?layoutFunction }() {
			var mainLayout = $('#{= ?parent }').layout({
			defaults: {
				applyDefaultStyles: true,
				enableCursorHotkey: false
			}<swa:BorderLayoutOptions arg:closed=\"{= ?westClosed }\" arg:custom=\"{= ?customWest }\" arg:fixed=\"{= ?westFixed }\" arg:name=\"west\" arg:parent=\"#{= ?parent }\" arg:size=\"{= ?westSize }\" arg:storageKey=\"{= ?storageKey }\"/>
        <swa:BorderLayoutOptions arg:closed=\"{= ?eastClosed }\" arg:custom=\"{= ?customEast }\" arg:fixed=\"{= ?eastFixed }\" arg:name=\"east\" arg:parent=\"#{= ?parent }\" arg:size=\"{= ?eastSize }\" arg:storageKey=\"{= ?storageKey }\"/>
        <swa:BorderLayoutOptions arg:name=\"center\" arg:parent=\"#{= ?parent }\" arg:storageKey=\"{= ?storageKey }\"/>
        <swa:BorderLayoutOptions arg:fixed=\"{= ?northFixed }\" arg:name=\"north\" arg:parent=\"#{= ?parent }\" arg:size=\"{= ?northSize }\" arg:storageKey=\"{= ?storageKey }\"/>
        <swa:BorderLayoutOptions arg:fixed=\"{= ?southFixed }\" arg:name=\"south\" arg:parent=\"#{= ?parent }\" arg:size=\"{= ?southSize }\" arg:storageKey=\"{= ?storageKey }\"/>})


return mainLayout;
}
	$(\"#{= ?parent }\").attr(\"layoutfunction\", \"{= ?layoutFunction }\");

	$(document).ready(function () {


var layout = {= ?layoutFunction }();

$('.search-toggler').on('click', function () {

	layout.toggle('west');

});


});</script>
    <ui:if ui:condition=\"{= (!bound(?suppressInitializer)) || (!?suppressInitializer) }\">
        <swa:Initializer/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?deepLinkingEvent) }\">
        <script>$(document).ready(function() {{= ui:functionCall(\"swa.initDeepLinking\", ?deepLinkingEvent, ?deepLinkingPanel, ?parent) }})</script>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Wrapper that fills the 'main' section of a chrome container." ;
  rdfs:label "Chrome Border Layout" ;
  rdfs:subClassOf swa:AbstractBorderLayout ;
.
teamwork:ChromeElements
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:currentCategory ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The top-level category of this page. Determines which item in the main menu is highlighted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parentPage ;
      spl:valueType teamwork:Page ;
      rdfs:comment "If set, that page's title will be used, and if the page is in the main menu, then it will be highlighted there." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "If the project tab bar is shown, this determines the tab to highlight." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "Activates the project type in the main menu and uses it as a title. Not needed if arg:projectGraph is provided." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "A title for the page. Will be ignored if arg:projectGraph is specified." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of teamwork:Chrome and other elements and pages that support similar arguments." ;
  rdfs:label "Chrome elements" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ClassTreeNavigationSelector
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:constrainRoot ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The root class." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:selected ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The currently selected class." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:treeMode ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"viewpoint-selector {= COALESCE(?style, &quot;&quot;) }\" data-base-graph=\"{= ui:currentQueryGraph() }\" data-constrain-root=\"{= COALESCE(?constrainRoot, false) }\" data-graph-id=\"{= teamwork:currentGraphId() }\" data-root-class=\"{= str(?rootClass) }\" data-root-class-label=\"{= ui:label(?rootClass) }\" data-selected-class=\"{= str(?selected) }\" data-selected-class-label=\"{= ui:label(?selected) }\" data-tag-id=\"{= teamwork:currentTagId() }\" data-tree-mode=\"{= ?treeMode }\" id=\"{= COALESCE(?id, &quot;resourceTypeSelect&quot;) }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Class tree navigation selector" ;
  rdfs:subClassOf swa:Elements ;
.
teamwork:ClearBookmarks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:bookmarks ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:bookmarks=\"{= COALESCE(?bookmarks, teamwork:getUserBookmarks()) }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:transaction>
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?bookmarks teamwork:hasItem ?item .
                        ?item ?anyP ?anyO .
                    }
                    WHERE {
                        ?user teamwork:bookmarks ?bookmarks .
                        ?bookmarks teamwork:hasItem ?item .
                        ?item ?anyP ?anyO .
                    } }\"/>
        </ui:transaction>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add resource to bookmarks" ;
  rdfs:subClassOf teamwork:BookmarkServices ;
.
teamwork:ClearPlugin
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:label "Clear plugin" ;
  rdfs:subClassOf ui:Method ;
.
teamwork:ClearPlugins
  a teamwork:ClearPlugin ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary being cleared" ;
    ] ;
  rdfs:label "Clear plugins" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:ClearProjectService
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to be manager of this {= teamwork:singularProjectTypeLabel(?projectType) } to clear it.\"/>
        </ui:if>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <teamwork:clearProject arg:graph=\"{= ?projectGraph }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?plugin
            WHERE {
                GRAPH ui:graph {
                    ?projectType teamwork:clearPlugin ?plugin .
                } .
            } }\">
        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?plugin }\"/>
    </ui:forEach>
    <teamwork:sendProjectGraphNotification arg:notification=\"{= teamwork:VocabularyClearedNotification }\" arg:projectGraph=\"{= ?projectGraph }\"/>
    <teamwork:RedirectToProject arg:projectGraph=\"{= ?projectGraph }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Called after the user has confirmed clearing of a given project." ;
  rdfs:label "Clear project service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ClonePlugin
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:label "Clone plugin" ;
  rdfs:subClassOf ui:Method ;
.
teamwork:ClonePlugins
  a teamwork:ClonePlugin ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:newProjectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The new vocabulary, just created as a clone." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:oldProjectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The original vocabulary." ;
    ] ;
  rdfs:label "Clone plugins" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:CloneProjectService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:version ;
      spl:valueType xsd:string ;
      rdfs:comment "Optionally specify a version for the new project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the clone." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project to clone." ;
    ] ;
  ui:prototype """
<ui:task ui:taskName=\"Cloning {= teamwork:projectLabel(?projectGraph) }...\" ui:totalWork=\"{= 2 }\">
    <swon:Object let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <teamwork:createProject arg:name=\"{= ?name }\" arg:projectType=\"{= ?projectType }\">
            <ui:group let:newProjectGraph=\"{= teamwork:masterGraph(?graphId) }\">
                <ui:subTask ui:subTaskName=\"Copying master graph\" ui:work=\"{= 1 }\">
                    <ui:setContext ui:queryGraph=\"{= ?newProjectGraph }\" ui:silentTransactions=\"{= true }\">
                        <ui:transaction ui:logMessage=\"Copying master graph\">
                            <ui:update ui:updateQuery=\"{!
                                    INSERT {
                                        ?s ?p ?o .
                                    }
                                    WHERE {
                                        GRAPH ?projectGraph {
                                            ?s ?p ?o .
                                        } .
                                    } }\"/>
                        </ui:transaction>
                        <ui:update ui:updateQuery=\"{!
                                DELETE {
                                    ?projectGraph ?p ?o .
                                }
                                INSERT {
                                    ?newProjectGraph ?p ?o .
                                }
                                WHERE {
                                    ?projectGraph ?p ?o .
                                } }\"/>
                        <ui:setPropertyValue arg:property=\"{= rdfs:label }\" arg:value=\"{= ?name }\" ui:this=\"{= ?newProjectGraph }\"/>
                    </ui:setContext>
                </ui:subTask>
                <ui:subTask ui:subTaskName=\"Copying metadata\" ui:work=\"{= 1 }\">
                    <ui:group let:newTCH=\"{= teamwork:teamGraph(?newProjectGraph) }\" let:oldTCH=\"{= teamwork:teamGraph(?projectGraph) }\">
                        <ui:setContext ui:queryGraph=\"{= ?newTCH }\" ui:silentTransactions=\"{= true }\">
                            <ui:transaction ui:logMessage=\"Copying metadata\">
                                <ui:update ui:updateQuery=\"{!
                                        INSERT {
                                            ?newTCH ?p ?o .
                                        }
                                        WHERE {
                                            GRAPH ?oldTCH {
                                                ?oldTCH ?p ?o .
                                            } .
                                            FILTER (?p != teamwork:indexingServer) .
                                        } }\"/>
                            </ui:transaction>
                            <ui:removePropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?projectGraph }\" ui:this=\"{= ?newTCH }\"/>
                            <ui:addPropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?newProjectGraph }\" ui:this=\"{= ?newTCH }\"/>
                            <ui:setPropertyValue arg:property=\"{= dcterms:created }\" arg:value=\"{= now() }\" ui:this=\"{= ?newTCH }\"/>
                        </ui:setContext>
                    </ui:group>
                </ui:subTask>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?plugin
                        WHERE {
                            GRAPH ui:graph {
                                ?projectType teamwork:clonePlugin ?plugin .
                            } .
                        } }\">
                    <ui:dynamicView arg:newProjectGraph=\"{= ?newProjectGraph }\" arg:oldProjectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?plugin }\"/>
                </ui:forEach>
                <uix:resetAutoCompleteIndex arg:graph=\"{= ?newProjectGraph }\"/>
            </ui:group>
            <swon:Value arg:name=\"graphId\" arg:value=\"{= ?graphId }\"/>
        </teamwork:createProject>
    </swon:Object>
</ui:task>
"""^^ui:Literal ;
  rdfs:comment "Creates a clone of a given project, under a different name." ;
  rdfs:label "Clone project service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:CloneResourceHandler
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Clone {= ui:label(?resource) }\">
    <teamwork:cloneResource arg:resource=\"{= ?resource }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "The updates that need to happen to clone an existing resource." ;
  rdfs:label "Clone resource handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
teamwork:CommentAndTaskCountService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the counts for." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object let:teamGraph=\"{= teamwork:currentTeamGraph() }\">
    <swon:Value arg:name=\"commentCount\" arg:value=\"{= teamwork:commentsCount(?resource, ?teamGraph) }\"/>
    <swon:Value arg:name=\"taskCount\" arg:value=\"{= tasks:taskCount(?resource, ?teamGraph) }\"/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Comment and task count service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:CommitChangeHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to undo." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph containing the Change metadata." ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromTeamGraph(?teamGraph) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:queryGraph(true, ?graphId) }\">
        <ui:transaction ui:logMessage=\"Commit of Change {= spl:objectInGraph(?change, rdfs:comment, ?teamGraph) }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?subject ?predicate ?object .
                    }
                    WHERE {
                        GRAPH ?teamGraph {
                            ?change teamwork:deleted ?triple .
                            ?triple teamwork:subject ?subject .
                            ?triple teamwork:predicate ?predicate .
                            ?triple teamwork:object ?object .
                        } .
                    } }\"/>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?subject ?predicate ?object .
                    }
                    WHERE {
                        GRAPH ?teamGraph {
                            ?change teamwork:added ?triple .
                            ?triple teamwork:subject ?subject .
                            ?triple teamwork:predicate ?predicate .
                            ?triple teamwork:object ?object .
                        } .
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction let:countsOnly=\"{= teamwork:isRecordCountsOnly(?teamGraph) }\" ui:logMessage=\"Committing individual change\">
            <ui:setPropertyValue arg:property=\"{= teamwork:status }\" arg:value=\"{= teamwork:Committed }\" ui:this=\"{= ?change }\"/>
            <ui:removePropertyValues arg:property=\"{= teamwork:tag }\" ui:this=\"{= ?change }\"/>
            <ui:if ui:condition=\"{= ?countsOnly }\">
                <teamwork:ConvertChangeTriplesToCounts arg:change=\"{= ?change }\"/>
            </ui:if>
        </ui:transaction>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Commits a given teamwork:Change to master. This change will receive status to be committed and the triples will be applied to the master graph." ;
  rdfs:label "Commit change handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
teamwork:ConfigureFeaturesManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginCannotBeDisabled true ;
  teamwork:pluginIndex 50 ;
  teamwork:pluginRequiresRole teamwork:manager ;
  teamwork:pluginValidExpression true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:ConfigureFeaturesPage }\">
    <teamwork:ActionLink arg:comment=\"Can be used to disable certain features for this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }.\" arg:faIcon=\"fa-check-square\" arg:link=\"{= ?link }\" arg:title=\"Configure Features\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Configure features plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:ConfigureFeaturesPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\" let:editable=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\" let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <h1>Configure Features for <em>{= teamwork:projectLabel(?projectGraph) }</em>
    </h1>
    <p>This page can be used to configure which features are available to regular users of the current asset collection. For example, you can deactivate features that may not perform well for large asset collections.</p>
    <p>
		Features that may not scale for large asset collections are marked with <span class=\"text-danger\">*</span>
    </p>
    <p>
        <b>Disabled features remain available to administrators only.</b>
    </p>
    <ui:if ui:condition=\"{= !?editable }\">
        <p class=\"text-danger\">Only managers can modify these settings</p>
    </ui:if>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?type ?page
            WHERE {
                VALUES (?type ?page) {
                    (teamwork:GeneralPlugin teamwork:GeneralProjectTab)
                    (teamwork:ImportPlugin teamwork:ImportProjectTab)
                    (teamwork:TransformPlugin teamwork:TransformProjectTab)
                    (teamwork:ExportPlugin teamwork:ExportProjectTab)
                    (teamwork:ReportPlugin teamwork:ReportsProjectTab)
                    (teamwork:ManagePlugin teamwork:ManageProjectTab)
                } .
            } }\">
        <h2>{= swa:labelInGraph(?page, ui:graph) } Features</h2>
        <ui:forEach ui:resultSet='{#
                SELECT ?plugin ?label ?disabled
                WHERE {
                    GRAPH ui:graph {
                        ?plugin a ?type .
                        FILTER NOT EXISTS {
                            ?plugin teamwork:pluginCannotBeDisabled true .
                        } .
                        FILTER NOT EXISTS {
                            ?plugin ui:abstract true .
                        } .
                        BIND (ui:label(?plugin) AS ?rawLabel) .
                        BIND (IF(STRENDS(?rawLabel, \" plugin\"), SUBSTR(?rawLabel, 0, (STRLEN(?rawLabel) - 6)), ?rawLabel) AS ?label) .
                        FILTER (EXISTS {
                            ?projectType teamwork:projectPlugin ?plugin .
                        } || EXISTS {
                            ?plugin teamwork:pluginValidExpression ?any .
                        }) .
                    } .
                    BIND (EXISTS {
                        GRAPH ?teamGraph {
                            ?teamGraph teamwork:projectPluginForAdminsOnly ?plugin .
                        } .
                    } AS ?disabled) .
                }
                ORDER BY (?label) }'>
            <p class=\"checkbox\" let:id=\"{= ui:uniqueId() }\">
                <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                    <input checked=\"{= IF(?disabled, ?none, &quot;checked&quot;) }\" id=\"{= ?id }\" type=\"checkbox\">
                        <ui:handle arg:checked=\"$('#{= ?id }').is(':checked')\" ui:event=\"onclick\">
                            <ui:if ui:condition=\"{= ?checked }\">
                                <ui:removePropertyValue arg:property=\"{= teamwork:projectPluginForAdminsOnly }\" arg:value=\"{= ?plugin }\" ui:this=\"{= ?teamGraph }\"/>
                            </ui:if>
                            <ui:else>
                                <ui:addPropertyValue arg:property=\"{= teamwork:projectPluginForAdminsOnly }\" arg:value=\"{= ?plugin }\" ui:this=\"{= ?teamGraph }\"/>
                            </ui:else>
                        </ui:handle>
                    </input>
                </ui:setContext>
                <span>{= ?label }</span>
                <ui:if ui:condition=\"{= EXISTS {
                    GRAPH ui:graph {
                        ?plugin teamwork:pluginMayNotScale true .
                    } .
                } }\">
                    <span class=\"text-danger\">&nbsp;*</span>
                </ui:if>
            </p>
        </ui:forEach>
    </ui:forEach>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Configure features page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:ConstraintLibraryDetailsPage
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext>
    <teamwork:Chrome arg:title=\"Constraint Libraries\" let:graph=\"{= ui:graphWithImports(ui:currentQueryGraph()) }\">
        <h1>Constraint Library <em>{= ui:label(ui:currentQueryGraph()) }</em>
        </h1>
        <hr/>
        <ui:forEach ui:resultSet=\"{#
                SELECT *
                WHERE {
                    ?class spin:constraint ?constraint .
                    FILTER NOT EXISTS {
                        ?constraint a spl:Argument .
                    } .
                }
                ORDER BY (?class) }\">
            <ui:setContext ui:queryGraph=\"{= ?graph }\">
                <div>Constraint defined at class {= ui:label(?class) }:</div>
                <pre class=\"teamworkQuery\">{= ui:label(?constraint) }</pre>
            </ui:setContext>
            <hr/>
        </ui:forEach>
    </teamwork:Chrome>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Constraint library details page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
teamwork:ConstraintsManagePlugin
  a teamwork:ManagePlugin ;
  ui:prototype """
<teamwork:ActionLink arg:comment=\"The SPIN constraint libraries store data quality rules to enforce while editing and running constraint violations reports. For SHACL support, use the general Includes mechanism.\" arg:icon=\"lib/teamwork/build/images/teamwork/constraint-libraries.svg\" arg:onClick=\"{= ui:functionCall(&quot;teamwork.editConstraintLibraries&quot;, ?projectGraph) }\" arg:title=\"SPIN Constraint Libraries\">
    <ui:loadable ui:loadId=\"constraint-libraries-view-body\">
        <ui:group letrs:libs=\"{#
                SELECT ?lib
                WHERE {
                    GRAPH ?projectGraph {
                        ?projectGraph spin:imports ?lib .
                    } .
                } }\">
            <ui:if ui:condition=\"{= spr:isEmpty(?libs) }\">
                <span>none</span>
            </ui:if>
            <ui:else>
                <ul>
                    <ui:forEach ui:resultSet=\"{= ?libs }\">
                        <li>
                            <ui:setContext ui:queryGraph=\"{= ?lib }\">
                                <ui:createLink ui:queryGraph=\"{= ?lib }\" ui:viewClass=\"{= teamwork:ConstraintLibraryDetailsPage }\">
                                    <a href=\"{= ?link }\">{= ui:label(?lib) }</a>
                                </ui:createLink>
                            </ui:setContext>
                        </li>
                    </ui:forEach>
                </ul>
            </ui:else>
        </ui:group>
    </ui:loadable>
</teamwork:ActionLink>
"""^^ui:Literal ;
  rdfs:comment "Note that this plugin has been disabled for all built-in ProjectTypes with 6.0 and may be removed completely in the future. Users are encouraged to switch to SHACL." ;
  rdfs:label "SPIN constraint libraries plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:ConvertChangeTriplesToCounts
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to modify." ;
    ] ;
  ui:prototype """
<ui:group let:addedCount=\"{= spl:objectCount(?change, teamwork:added) }\" let:deletedCount=\"{= spl:objectCount(?change, teamwork:deleted) }\">
    <ui:setPropertyValue arg:property=\"{= teamwork:addedCount }\" arg:value=\"{= ?addedCount }\" ui:this=\"{= ?change }\"/>
    <ui:setPropertyValue arg:property=\"{= teamwork:deletedCount }\" arg:value=\"{= ?deletedCount }\" ui:this=\"{= ?change }\"/>
    <ui:update ui:updateQuery=\"{!
            DELETE WHERE {
                ?change teamwork:added ?triple .
                ?triple ?anyP ?anyO .
            } }\"/>
    <ui:update ui:updateQuery=\"{!
            DELETE WHERE {
                ?change teamwork:deleted ?triple .
                ?triple ?anyP ?anyO .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Replaces any teamwork:added|deleted triples of a given Change with teamwork:addedCount|deletedCount. Assumes that the TCH graph is the active query graph." ;
  rdfs:label "Convert change triples to counts" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:CreateClonePage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\" arg:tag=\"{= ?tag }\">
    <h1>Create a Cloned Version of {= teamwork:projectLabel(?projectGraph) }</h1>
    <p>This feature allows you to create a new {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }
that starts off with the same content as {= teamwork:projectLabel(?projectGraph) }.
The most common use case for this operation is to create a different \"version\" of the {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) },
by giving it a new name such as \"{= teamwork:projectLabel(?projectGraph) } 1.1\" and filling out the version number field.
In addition to having the same content as the current production copy of {= teamwork:projectLabel(?projectGraph) },
the clone will also have most of the same metadata including access privileges - once the clone is created you can edit these.
The version number should be edited after cloning.
The working copies, change history, tasks and comments are not copied over.</p>
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <form onsubmit=\"return teamwork.cloneProject($('#name-input').val(), '{= ?projectGraph }')\">
            <swa:LabeledElement arg:label=\"Name\">
                <input autofocus=\"autofocus\" class=\"form-control teamwork-create-clone-page-name-input\" id=\"name-input\" name=\"name\" type=\"text\" value=\"{= ui:escapeJSON(spl:object(?projectGraph, rdfs:label)) } Copy\"/>
            </swa:LabeledElement>
            <br/>
            <input class=\"btn btn-primary\" type=\"submit\" value=\"Create clone\"/>
        </form>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Create clone page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:CreateInstanceAction
  a swa:AutoCompleteSelectAction ;
  arg:condition [
      a sp:if ;
      sp:arg1 [
          a swa:hasCurrentAppName ;
          arg:appName "Editor" ;
        ] ;
      sp:arg2 [
          a sp:not ;
          sp:arg1 [
              a teamwork:isReadOnlyType ;
              arg:resourceType [
                  sp:varName "type" ;
                ] ;
            ] ;
        ] ;
      sp:arg3 [
          sp:varName "none" ;
        ] ;
    ] ;
  arg:onSelect "swa.openCreateResourceForAutoCompleteDialog" ;
  rdfs:comment "An action available from the context menu behind the resource editors, used to create a new instance of the range class of the corresponding property. This action is supported by all EDG/Teamwork editors and there for types that are not marked as read-only, using teamwork:isReadOnlyType." ;
  rdfs:label "Create new..." ;
.
teamwork:CreateProjectFromService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cloneIncludes ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:includes ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:keepSubjectAreas ;
      spl:valueType xsd:boolean ;
      rdfs:comment "When true the cloned graphs will maintain the subject area from the source graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:version ;
      spl:valueType xsd:string ;
      rdfs:comment "Optionally specify a version for the new project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphs ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:task ui:taskName=\"Create Project From Service\">
    <swon:Object>
        <ui:json ui:str=\"{= ?graphs }\" ui:varName=\"array\">
            <ui:group letrs:resultSet='{#
                    SELECT ?uri ?proposedName
                    WHERE {
                        {
                            ?array ui:jsonArrayMembers ?object .
                            BIND (ui:jsonString(ui:jsonValue(?object, \"uri\")) AS ?url) .
                            BIND (ui:jsonString(ui:jsonValue(?object, \"label\")) AS ?proposedName) .
                            FILTER STRSTARTS(?url, \"urn:x-evn-master:\") .
                            FILTER spif:isValidURI(?url) .
                        } .
                        BIND (IRI(?url) AS ?uri) .
                    } }'>
                <swon:Value arg:name=\"graphs\">
                    <swon:Array>
                        <ui:forEach ui:resultSet=\"{= ?resultSet }\">
                            <swon:Object>
                                <ui:subTask ui:subTaskName=\"Creating {= ?proposedName }\" ui:work=\"{= 1 }\">
                                    <ui:group let:projectType=\"{= teamwork:getProjectType(?uri) }\">
                                        <teamwork:createProject arg:name=\"{= ?proposedName }\" arg:projectType=\"{= ?projectType }\">
                                            <ui:group let:newProjectGraph=\"{= teamwork:masterGraph(?graphId) }\">
                                                <swon:Value arg:name=\"uri\" arg:value=\"{= ?newProjectGraph }\"/>
                                                <swon:Value arg:name=\"label\" arg:value=\"{= ?proposedName }\"/>
                                                <teamwork:PostCreateProjectFromHandler arg:keepSubjectAreas=\"{= ?keepSubjectAreas }\" arg:name=\"{= ?proposedName }\" arg:sourceGraph=\"{= ?uri }\" arg:subjectArea=\"{= ?subjectArea }\" arg:targetGraph=\"{= ?newProjectGraph }\" arg:version=\"{= ?version }\"/>
                                                <uix:resetAutoCompleteIndex arg:graph=\"{= ?newProjectGraph }\"/>
                                                <ui:update ui:updateQuery=\"{!
                                                        INSERT {
                                                            GRAPH ui:tempGraph {
                                                                ?newProjectGraph imported:fromGraph ?uri .
                                                            } .
                                                        }
                                                        WHERE {
                                                        } }\"/>
                                            </ui:group>
                                        </teamwork:createProject>
                                    </ui:group>
                                </ui:subTask>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </ui:group>
        </ui:json>
        <ui:if ui:condition=\"{= (bound(?includes) &amp;&amp; bound(?cloneIncludes)) &amp;&amp; (?cloneIncludes = true) }\">
            <ui:task ui:taskName=\"Cloning Includes\" ui:work=\"1\">
                <ui:json ui:str=\"{= ?includes }\" ui:varName=\"includesArray\">
                    <ui:group letrs:includesRS='{#
                            SELECT ?include ?includeProposedName ?importedBy
                            WHERE {
                                {
                                    ?includesArray ui:jsonArrayMembers ?object .
                                    BIND (ui:jsonString(ui:jsonValue(?object, \"uri\")) AS ?url) .
                                    BIND (ui:jsonString(ui:jsonValue(?object, \"label\")) AS ?includeProposedName) .
                                    BIND (ui:jsonValue(?object, \"importedBy\") AS ?importedBy) .
                                    FILTER STRSTARTS(?url, \"urn:x-evn-master:\") .
                                    FILTER spif:isValidURI(?url) .
                                } .
                                BIND (IRI(?url) AS ?include) .
                            } }'>
                        <swon:Value arg:name=\"includes\">
                            <swon:Array>
                                <ui:forEach ui:resultSet=\"{= ?includesRS }\">
                                    <ui:subTask ui:subTaskName=\"Creating {= ?includedProposedName }\" ui:work=\"{= 1 }\">
                                        <swon:Object>
                                            <ui:group let:includesProjectType=\"{= teamwork:getProjectType(?include) }\">
                                                <teamwork:createProject arg:name=\"{= ?includeProposedName }\" arg:projectType=\"{= ?includesProjectType }\" arg:version=\"{= ?version }\">
                                                    <ui:group let:newIncludesGraph=\"{= teamwork:masterGraph(?graphId) }\">
                                                        <teamwork:PostCreateProjectFromHandler arg:keepSubjectAreas=\"{= ?keepSubjectAreas }\" arg:name=\"{= ?includeProposedName }\" arg:sourceGraph=\"{= ?include }\" arg:subjectArea=\"{= ?subjectArea }\" arg:targetGraph=\"{= ?newIncludesGraph }\" arg:version=\"{= ?version }\"/>
                                                        <uix:resetAutoCompleteIndex arg:graph=\"{= ?newIncludesGraph }\"/>
                                                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?newIncludesGraph }\"/>
                                                        <swon:Value arg:name=\"label\" arg:value=\"{= ?includeProposedName }\"/>
                                                        <ui:group letrs:importedByRS=\"{#
                                                                SELECT ?newGraph ?g
                                                                WHERE {
                                                                    {
                                                                        ?importedBy ui:jsonArrayMembers ?object .
                                                                        BIND (ui:jsonString(?object) AS ?url) .
                                                                    } .
                                                                    BIND (IRI(?url) AS ?g) .
                                                                    {
                                                                        GRAPH ui:tempGraph {
                                                                            ?newGraph imported:fromGraph ?g .
                                                                        } .
                                                                    } .
                                                                } }\">
                                                            <ui:forEach ui:resultSet=\"{= ?importedByRS }\">
                                                                <ui:setContext ui:queryGraph=\"{= ?newGraph }\">
                                                                    <ui:addPropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?newIncludesGraph }\" ui:this=\"{= ?newGraph }\"/>
                                                                    <ui:removePropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?include }\" ui:this=\"{= ?newGraph }\"/>
                                                                </ui:setContext>
                                                            </ui:forEach>
                                                        </ui:group>
                                                    </ui:group>
                                                </teamwork:createProject>
                                            </ui:group>
                                        </swon:Object>
                                    </ui:subTask>
                                </ui:forEach>
                            </swon:Array>
                        </swon:Value>
                    </ui:group>
                </ui:json>
            </ui:task>
        </ui:if>
    </swon:Object>
</ui:task>
"""^^ui:Literal ;
  rdfs:comment "Creates a clone of a given project, under a different name." ;
  rdfs:label "Clone project service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:CreateProjectLabelElement
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<uix:asAdmin>
    <swa:LabeledElement arg:label=\"Label:\">
        <input autocomplete=\"off\" autofocus=\"true\" class=\"form-control teamwork-create-project-label-element-input\" id=\"label-text\" name=\"name\" type=\"text\"/>
        <span class=\"teamwork-create-project-label-element-input-error\" id=\"label-error\">&nbsp;Warning: Label already used.</span>
        <script letrs:labels=\"{#
                SELECT ?label
                WHERE {
                    rdf:nil teamwork:graphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
                    BIND (teamwork:projectLabel(?projectGraph) AS ?label) .
                } }\">
var usedLabels = <swon:RSArray arg:resultSet=\"{= ?labels }\"/>;
$(\"#label-text\").keyup(function () { $(\"#label-error\").css(\"display\", $.inArray($(\"#label-text\").val(), usedLabels) &gt;= 0 ? \"inline\" : \"none\");  });</script>
    </swa:LabeledElement>
</uix:asAdmin>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:CreateProjectOptionsSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:noUriOptions ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group let:URIClassPrefix=\"{= spl:object(?projectGraph, teamwork:URIClassPrefix) }\" let:URIConstructMethod=\"{= spl:object(?projectGraph, teamwork:URIConstructMethod) }\" let:URICounterOffset=\"{= spl:object(?projectGraph, teamwork:URICounterOffset) }\" let:URIPrefixSeparator=\"{= spl:object(?projectGraph, teamwork:URIPrefixSeparator) }\" let:UserCannotModifyURI=\"{= spl:object(?projectGraph, teamwork:userCannotModifyURI) }\" let:dp=\"{= tbl:dpCreateOption() }\" let:luceneIndexing=\"{= !swa:falseOrUnbound(cfg:disableLuceneIndexing) }\" let:noUriOptions=\"{= !swa:falseOrUnbound(?noUriOptions) }\">
    <div data-dp=\"{= ?dp }\" data-lucene-index=\"{= ?luceneIndexing }\" data-no-uri-options=\"{= ?noUriOptions }\" data-uri-class-prefix=\"{= ?URIClassPrefix }\" data-uri-construct-method=\"{= ?URIConstructMethod }\" data-uri-counter-offset=\"{= ?URICounterOffset }\" data-uri-counter-separator=\"{= ?URIPrefixSeparator }\" data-uri-user-cannot-modify-uri=\"{= ?UserCannotModifyURI }\" id=\"create-project-options\"/>
    <script> gadgets.Hub.publish('uri-construction-plugin-init', 'create-project-options')</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Create project options section" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:CreateProjectPage
  a rdfs:Class ;
  rdfs:label "Create project page" ;
  rdfs:subClassOf ui:NodeClass ;
.
teamwork:CreateProjectPages
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
      rdfs:comment "An optional edg:SubjectArea that will be assigned as metadata to the newly created project." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to instantiate." ;
    ] ;
  ui:abstract true ;
  rdfs:label "Create project pages" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
teamwork:CreateProjectPlugins
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph (e.g. urn:x-evn:master:geo)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph that has just been created." ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?element
        WHERE {
            GRAPH ui:graph {
                ?element (rdfs:subClassOf)+ teamwork:CreateProjectPlugins .
            } .
        } }\">
    <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" arg:teamGraph=\"{= ?teamGraph }\" ui:class=\"{= ?element }\"/>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:comment "Superclass of plugins that shall be executed whenever someone creates a new project. Subclasses may manipulate the new graphs, e.g. to initialize user permissions. These subclasses must be defined in .ui. files that are uploaded to the server using project upload." ;
  rdfs:label "Create project plugins" ;
  rdfs:subClassOf teamwork:Plugin ;
.
teamwork:CreateProjectService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:URIClassPrefix ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:URIConstructMethod ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:URICounterNumberOfDigits ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:URICounterOffset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:URIPrefixSeparator ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataPlatform ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Flag indicating whether to use the Data Platform." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:luceneIndex ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:owlImports ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of URIs that shall be owl:imported by default." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:redirectToTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "Project tab to show after successful project creation instead of the default" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:spinImports ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of URIs that shall be spin:imported by default." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:userCannotModifyURI ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The ProjectType to create." ;
    ] ;
  ui:prototype """
<ui:setContext ui:silentTransactions=\"{= true }\">
    <teamwork:createProject ui:args=\"*\">
        <ui:group let:newProjectGraph=\"{= teamwork:masterGraph(?graphId) }\" let:teamGraph=\"{= teamwork:teamGraph(teamwork:masterGraph(?graphId)) }\">
            <teamwork:CreateProjectPlugins arg:projectGraph=\"{= ?newProjectGraph }\" arg:teamGraph=\"{= ?teamGraph }\"/>
            <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                <ui:if ui:condition=\"{= ?luceneIndex }\">
                    <!-- When the config setting is moved from the safconfig graph to the project graph itself, this will need to be reworked, so leaving it inline for now-->
                    <safconfig:BulkAddGraph arg:checked=\"{= true }\" arg:graph=\"{= ?newProjectGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?URIClassPrefix != &quot;Default&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:URIClassPrefix }\" arg:value=\"{= ?URIClassPrefix }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?URIConstructMethod != &quot;Default&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:URIConstructMethod }\" arg:value=\"{= ?URIConstructMethod }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?URICounterOffset != &quot;0&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:URICounterOffset }\" arg:value=\"{= ?URICounterOffset }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?URIPrefixSeparator != &quot;&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:URIPrefixSeparator }\" arg:value=\"{= ?URIPrefixSeparator }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?userCannotModifyURI != &quot;0&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:userCannotModifyURI }\" arg:value=\"{= ?userCannotModifyURI }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
                <ui:if ui:condition=\"{= ?URICounterNumberOfDigits != &quot;0&quot; }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:URICounterNumberOfDigits }\" arg:value=\"{= ?URICounterNumberOfDigits }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:if>
            </ui:setContext>
            <ui:setContext ui:queryGraph=\"{= ?newProjectGraph }\">
                <ui:addPropertyValue arg:property=\"{= edg:subjectArea }\" arg:value=\"{= ?subjectArea }\" ui:this=\"{= ?newProjectGraph }\"/>
                <ui:if ui:condition=\"{= bound(?rootClass) }\">
                    <ui:addPropertyValue arg:property=\"{= teamwork:rootClass }\" arg:value=\"{= IRI(?rootClass) }\" ui:this=\"{= ?newProjectGraph }\"/>
                </ui:if>
            </ui:setContext>
        </ui:group>
        <swon:Object>
            <swon:Value arg:name=\"response\" arg:value=\"Successfully created {= teamwork:singularProjectTypeLabel(?projectType) } with id '{= ?graphId }'.\"/>
            <swon:Value arg:name=\"id\" arg:value=\"{= ?graphId }\"/>
            <ui:createLink arg:projectGraph=\"{= teamwork:masterGraph(?graphId) }\" arg:projectTab=\"{= COALESCE(?redirectToTab, teamwork:ImportProjectTab) }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                <swon:Value arg:name=\"redirectToURL\" arg:value=\"{= ?link }\"/>
            </ui:createLink>
        </swon:Object>
    </teamwork:createProject>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Called by the teamwork:DefaultCreateProjectPage to perform the work of actually creating the project." ;
  rdfs:label "Create project service" ;
  rdfs:subClassOf teamwork:AbstractCreateProjectService ;
.
teamwork:CrosswalksFormFooterPlugin
  a swa:SwitchableFormFooterPlugin ;
  ui:prototype """
<ui:call arg:resource=\"{= ?resource }\" ui:template=\"{= crosswalk:ResourceMappings }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <teamwork:Spaces/>
        <script>
var crosswalkMenu = <swon:RSObjectArray arg:resultSet=\"{= ?rs }\"/>
        </script>
        <swa:Button arg:class=\"btn btn-default btn-xs\" arg:iconClass=\"ui-icon ui-icon-transferthick-e-w\" arg:id=\"crosswalks-button\" arg:label=\"({= spr:rowCount(?rs) })\" arg:onClick=\"teamwork.openCrosswalkMappingsMenu(crosswalkMenu)\" arg:toolTip=\"View Crosswalk Mappings\"/>
    </ui:if>
</ui:call>
"""^^ui:Literal ;
  rdfs:label "Crosswalks form footer plugin" ;
  rdfs:subClassOf swa:SwitchableFormFooterPlugins ;
.
teamwork:CustomHeaderInserts
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:isOnEditorTab ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if the custom insert is displayed on an editor tab, false if it is any other tab." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of custom controls or widgets to insert into the teamwork:Header of an asset collection's pages. This is in particular intended for project types where those inserts are displayed not just on the editor tab, but on all project tabs. This is to support the \"classic\" EVN/RDM editors, and not intended for use on new editors. New editors should not use custom header elements." ;
  rdfs:label "Custom header inserts" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:D3RelationshipTreeAction
  a swa:VisualizationAction ;
  arg:appName "Ontology,Editor" ;
  arg:condition [
      a swa:hasRelationshipTreeProperties ;
      arg:resource [
          sp:varName "resource" ;
        ] ;
    ] ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI + '&_viewClass=teamwork:RelationshipTreePage' + '&root=' + escape(resourceURI))" ;
  swa:readOnly true ;
  rdfs:label "Relationship tree..." ;
.
teamwork:DataTable
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:additionalClasses ;
      spl:valueType xsd:string ;
      rdfs:comment "Any additional classes to apply to the table's container element" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cmBaseGraph ;
      spl:valueType xsd:string ;
      rdfs:comment "Sets a baseGraph query param to be used when launching a comparison matrix" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cmViewClass ;
      spl:valueType xsd:string ;
      rdfs:comment "Sets a _viewClass query param to be used when launching a comparison matrix" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:createResourceHandler ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:createService ;
      spl:valueType xsd:string ;
      rdfs:comment "The service to use when creating a record in a the table. Used in conjunction with editable config option" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:customColumnDef ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataEndpoint ;
      spl:valueType xsd:string ;
      rdfs:comment "The JSON service (viewClass) that provides the columns definition for the table" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:detailsViewClass ;
      spl:valueType xsd:string ;
      rdfs:comment "A service that displays a details view for a resource" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dtType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies if the table should have editing capabilities" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:exports ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filter ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasArchiveConfig ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have an \"Archive\" button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasCheckboxSelection ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasComparisonMatrix ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a \"Comparison Matrix\" function" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasScrollCollapse ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If the table should have a max-height, forcing scrolling" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasSelectAll ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a select all function" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasTransitionHistory ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a \"View TransitionHistory\" button" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasViewableDetails ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a \"View Details\" function" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasWorkflowAsset ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasWorkflowHome ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a \"View Workflow\" button" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hasWorkflowStart ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Specifies that the table should have a \"Start Workflow\" button" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideIfEmpty ;
      spl:valueType xsd:boolean ;
      rdfs:comment """Hides the table if no data is returned. If you are setting this to true you need a sibling <div> element next to the data table with the class \"ui-helper-hidden-accessbile\" with whatever message you want to display.
for example:

<teamwork:DataTable/>
<div class=\\\"ui-helper-hidden-accessible\\\">None</div>""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
      rdfs:comment "Sets a limit query param to be used when launching a comparison matrix" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:multiSelect ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onlyExportVisibleColumns ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:orderedColumn ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageLength ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:postProcessType ;
      spl:valueType xsd:string ;
      rdfs:comment """Flag that allows the UI to determine the post process route of create new.
value should be 'swp' or null.""" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:queryParam ;
      spl:valueType xsd:string ;
      rdfs:comment "Additional query param to be sent along with requests" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:queryParamValues ;
      spl:valueType xsd:string ;
      rdfs:comment "Additional query param values to be send along with requests" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of an event to publish when the user clicks on a result. The data payload of this event is the URI of the resource." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Specifies the \"type\" when creating an entry in the table. Used in conjunction with editable config option" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:searchGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph containing the search:Search to execute." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:selectAll ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressLabelColumn ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:columnData ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataColumnsEndpoint ;
      spl:valueType xsd:string ;
      rdfs:comment "The JSON service (viewClass) that provides the columns definition for the table" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fromDom ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSetData ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"table-container {= ?additionalClasses }\" data-column-data=\"{= COALESCE(?columnData, ?nil) }\" data-columns-endpoint=\"{= ?dataColumnsEndpoint }\" data-comparison-matrix-base-graph=\"{= COALESCE(?cmBaseGraph, ?nil) }\" data-comparison-matrix-view-class=\"{= COALESCE(?cmViewClass, ?nil) }\" data-create-service=\"{= COALESCE(?createService, ?nil) }\" data-create-service-handler=\"{= COALESCE(?createResourceHandler, swa:CreateResourceHandler) }\" data-custom-column-defs=\"{= COALESCE(?customColumnDef, ?nil) }\" data-data-data=\"{= COALESCE(?resultSetData, ?nil) }\" data-datatable=\"true\" data-datatable-type=\"{= COALESCE(?dtType, &quot;dataTable&quot;) }\" data-details-view-class=\"{= COALESCE(?detailsViewClass, &quot;teamwork:DetailsViewPage&quot;) }\" data-editable=\"{= ?editable }\" data-endpoint=\"{= ?dataEndpoint }\" data-from-dom=\"{= COALESCE(?fromDom, ?nil) }\" data-has-checkbox-selection=\"{= COALESCE(?hasCheckboxSelection, ?nil) }\" data-has-comparison-matrix=\"{= COALESCE(?hasComparisonMatrix, ?nil) }\" data-has-exports=\"{= COALESCE(?exports, ?nil) }\" data-has-filter=\"{= COALESCE(?filter, ?nil) }\" data-has-select-all=\"{= COALESCE(?hasSelectAll, ?nil) }\" data-has-workflow-asset=\"{= COALESCE(?hasWorkflowAsset, ?nil) }\" data-hide-if-empty=\"{= COALESCE(?hideIfEmpty, ?nil) }\" data-init-query-param=\"{= COALESCE(?queryParam, ?nil) }\" data-init-query-param-values=\"{= COALESCE(?queryParamValues, ?nil) }\" data-limit=\"{= COALESCE(?limit, ?nil) }\" data-multiselect=\"{= COALESCE(?multiSelect, ?nil) }\" data-only-export-visible-columns=\"{= IF(bound(?onlyExportVisibleColumns), ?onlyExportVisibleColumns, ?nil) }\" data-ordered-column=\"{= COALESCE(?orderedColumn, ?nil) }\" data-page-length=\"{= COALESCE(?pageLength, ?nil) }\" data-post-process=\"{= COALESCE(?postProcessType, ?nil) }\" data-resource-selected-event=\"{= COALESCE(?resourceSelectedEvent, ?nil) }\" data-resource-type=\"{= COALESCE(?resourceType, ?nil) }\" data-scroll-collapse=\"{= COALESCE(?hasScrollCollapse, ?nil) }\" data-search-graph=\"{= COALESCE(?searchGraph, ?nil) }\" data-suppress-label-column=\"{= COALESCE(?suppressLabelColumn, ?nil) }\" data-transition-history=\"{= COALESCE(?hasTransitionHistory, ?nil) }\" data-viewable-details=\"{= COALESCE(?hasViewableDetails, ?nil) }\" data-workflow-archive=\"{= COALESCE(?hasArchiveConfig, ?nil) }\" data-workflow-home=\"{= COALESCE(?hasWorkflowHome, ?nil) }\" data-workflow-start=\"{= COALESCE(?hasWorkflowStart, ?nil) }\" id=\"{= COALESCE(?id, ui:uniqueId()) }\"/>
"""^^ui:Literal ;
  rdfs:comment """A standard DataTable usage:

<teamwork:DataTable
    arg:additionalClasses=\"my-custom-table\"
    arg:dataColumnsEndpoint=\"saf:getSearchColumnsService\"
    arg:dataEndpoint=\"saf:getSearchResultsService\"
    arg:editable=\"true\"
    arg:hasViewableDetails=\"true\"
    arg:createService=\"http://topbraid.org/swa#CreateResourceDialogJSON\"
    arg:hasSelectAll=\"true\"
    arg:resourceSelectedEvent=\"org.datasetapp.instanceSelected\"
    arg:resourceType=\"http://edg.topbraid.solutions/model/GlossaryViewpoint\"
    arg:searchGraph=\"urn:x-swp-session:2ad4720f-bb8e-4030-b48d-6b3b2b6ead9e\"
    arg:hasScrollCollapse=\"true\"/>""" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:DataTree
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:draggable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true then the tree acts as drag source, i.e. users can drag resources from the tree to other elements that act as drag targets." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "tree" ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the HTML element to generate for the tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cache ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Set to true if the tree shall cache its requests. This should only be done for read-only static data." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:checkDropFunction ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of a JavaScript function that shall be called to verify that drag and drop is possible. This takes the same object as jsTree._get_move (http://old.jstree.com/documentation/core.html#_get_move) as its argument." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional filter function that is passed into the tree provider so that it can hide certain nodes (such as system classes) from the tree. The function must take a resource as its only argument and return true if the resource shall appear in the tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onDoubleClick ;
      spl:valueType xsd:string ;
      rdfs:comment "A JS expression that shall be evaluated if the user has double-clicked on a tree node. The variable 'resource' will contain the URI of the resource that has been clicked on." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onLoaded ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript snippet that is to be executed after the tree has loaded its roots." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onSelect ;
      spl:valueType xsd:string ;
      rdfs:comment "JavaScript code that shall be called if a node has been selected in the tree. In this code, the variable 'resource' points to the URI of the selected resource. The variable 'node' holds the selected low-level tree node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:queryGraphBase ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceIRI ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:root ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A root node that can overload the default root of the data provider. For example, swa:ClassTreeDataProvider starts at rdfs:Resource by default - set arg:root to owl:Thing to start there instead." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:treeMoveHandler ;
      spl:valueType swa:TreeMoveHandlerClass ;
      rdfs:comment "If draggable has been set, then this must point to a subclass of swa:TreeMoveHandlers that implements the server side changes that need to happen." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataProvider ;
      spl:valueType swa:TreeDataProvider ;
      rdfs:comment "The TreeDataProvider that is used in the callbacks to fetch the root and child nodes." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:createLink arg:filterFunction=\"{= ?filterFunction }\" arg:root=\"{= ?root }\" ui:cache=\"{= ?cache }\" ui:format=\"json\" ui:queryGraph=\"{= ?queryGraphBase }\" ui:sendQueryGraph=\"{= true }\" ui:snippet=\"true\" ui:view=\"{= ?dataProvider }\">
        <div id=\"{= ?id }\" treedataprovider=\"{= ?dataProvider }\" treeroot=\"{= ?root }\"/>
        <div data-check-drop-function=\"false\" data-datatree=\"true\" data-draggable=\"false\" data-link=\"{= ?link }&amp;{= ui:encodeContext() }\" data-on-double-click=\"false\" data-on-loaded=\"false\" data-on-select=\"false\" data-query-graph-base=\"{= ?queryGraphBase }\" data-resource-iri=\"{= swa:resourceType(IRI(?resourceIRI)) }\" data-tree-move-handler=\"false\" id=\"{= ?id }\"/>
    </ui:createLink>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:DatatypeRangeEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<span let:name=\"new-{= ?uid }\">
    <ui:call ui:template=\"{= teamwork:DatatypeRanges }\">
        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?rs }\">
            <ui:if ui:condition=\"{= ?index &gt; 0 }\">
                <br/>
            </ui:if>
            <input checked=\"{= IF((?range = ?object), &quot;selected&quot;, ?none) }\" name=\"{= ?name }\" type=\"radio\" value=\"{= ui:encodeNode(?range) }\"/>{= IF((?range = rdf:HTML), \"HTML\", ui:label(?range)) }</ui:forEach>
    </ui:call>
</span>
"""^^ui:Literal ;
  rdfs:label "Datatype range editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
teamwork:DatatypeRangeViewer
  a swa:ObjectViewerClass ;
  ui:prototype """
<div class=\"swa-shifted-label\">{= IF((?object = rdf:HTML), \"HTML\", ui:label(?object)) }</div>
"""^^ui:Literal ;
  rdfs:label "Datatype range viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
teamwork:DateTime
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The xsd:dateTime to render." ;
    ] ;
  ui:prototype """
<span let:str=\"{= xsd:string(?node) }\">{= fn:substring(?str, 1, 10) } ({= fn:substring(?str, 12, 8) })</span>
"""^^ui:Literal ;
  rdfs:comment "A human-readable rendering of an xsd:dateTime literal." ;
  rdfs:label "Date time" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:DefaultCreateProjectPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue teamwork:CreateProjectService ;
      spl:optional true ;
      spl:predicate arg:service ;
      spl:valueType ui:Element ;
      rdfs:comment "An alternative service to invoke on form submission instead of the default project creation service." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:additionalFormFields ;
      spl:valueType ui:ViewElement ;
      rdfs:comment "An optional ui:Element that renders additional form fields to include in the form." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initFunction ;
      spl:valueType xsd:string ;
      rdfs:comment "Name of a JavaScript function to use instead of the default for initializing any dynamic elements on the page" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:noUriOptions ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"create-project-page\" arg:projectType=\"{= ?projectType }\" let:comment=\"{= spl:objectInGraph(?projectType, rdfs:comment, ui:graph) }\" let:hideDefaultNamespace=\"{= spl:objectInGraph(?projectType, teamwork:hideDefaultNamespaceInput, ui:graph) }\" let:projectTypeLabel=\"{= teamwork:singularProjectTypeLabel(?projectType) }\">
    <h1>Create New {= ?projectTypeLabel }</h1>
    <ui:if ui:condition=\"{= bound(?comment) }\">
        <p>
            <small class=\"text-muted\">
                <em>{= ?comment }</em>
            </small>
        </p>
    </ui:if>
    <p>This creates a new {= ?projectTypeLabel } with yourself as the manager.</p>
    <br/>
    <form action=\"swp\" id=\"theForm\" let:owlImports=\"{#
            SELECT (GROUP_CONCAT(?import) AS ?result)
            WHERE {
                GRAPH ui:graph {
                    ?projectType teamwork:owlImports ?import .
                } .
            } }\" let:spinImports=\"{= spl:objectInGraph(?projectType, teamwork:spinImports, ui:graph) }\">
        <input name=\"_viewClass\" type=\"hidden\" value=\"{= COALESCE(?service, teamwork:CreateProjectService) }\"/>
        <input name=\"projectType\" type=\"hidden\" value=\"{= ?projectType }\"/>
        <ui:if ui:condition=\"{= bound(?subjectArea) &amp;&amp; isIRI(?subjectArea) }\">
            <input name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?owlImports) }\">
            <input name=\"owlImports\" type=\"hidden\" value=\"{= ?owlImports }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= bound(?spinImports) }\">
            <input name=\"spinImports\" type=\"hidden\" value=\"{= ?spinImports }\"/>
        </ui:if>
        <teamwork:CreateProjectLabelElement/>
        <br/>
        <ui:if ui:condition=\"{= swa:falseOrUnbound(?hideDefaultNamespace) }\">
            <swa:LabeledElement arg:label=\"Default Namespace:\" let:ddn=\"{= teamwork:defaultDefaultNamespaceForProjectType(?projectType) }\">
                <input class=\"form-control teamwork-default-create-project-page-namespace-input\" id=\"default-namespace-text\" name=\"defaultNamespace\" type=\"text\" value=\"{= ?ddn }\"/>
                <ui:if ui:condition=\"{= CONTAINS(?ddn, &quot;{id}&quot;) }\">
                    <script>teamwork.initDefaultNamespaceField()</script>
                </ui:if>
            </swa:LabeledElement>
            <br/>
        </ui:if>
        <swa:LabeledElement arg:label=\"Description:\">
            <textarea class=\"form-control\" cols=\"80\" id=\"comment-area\" name=\"comment\" rows=\"4\"/>
        </swa:LabeledElement>
        <br/>
        <teamwork:CreateProjectOptionsSection arg:noUriOptions=\"{= COALESCE(?noUriOptions, ?nil) }\"/>
        <ui:if ui:condition=\"{= bound(?additionalFormFields) }\">
            <ui:dynamicView ui:class=\"{= ?additionalFormFields }\"/>
        </ui:if>
        <ui:setContext let:template=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:queryGraph=\"{= ui:graphWithImports(&lt;http://edg.topbraidlive.org/edgproduct&gt;) }\">
            <ui:call arg:predicate=\"{= edg:requiredProjectType }\" arg:projectType=\"{= ?projectType }\" ui:template=\"{= teamwork:GetGraphProjectTypes }\" ui:varName=\"requiredProjectTypes\">
                <ui:if ui:condition=\"{= spr:rowCount(?requiredProjectTypes) &gt; 0 }\">
                    <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?requiredProjectTypes }\">
                        <teamwork:DisplayCreateProjectDropdown arg:index=\"{= ?index }\" arg:pType=\"{= ?graphType }\"/>
                    </ui:forEach>
                    <script>$(\".vocabSelect\").on('change', function() {
	var $owlImportsInput = $('[name=\"owlImports\"]');
	var initialOwlImports = $owlImportsInput.val();
	var selectValue = $(this).val();
	$owlImportsInput.val(initialOwlImports + ' ' + selectValue);
	});</script>
                    <div class=\"swa-margin-top-fifty\"/>
                </ui:if>
            </ui:call>
        </ui:setContext>
        <button class=\"btn btn-primary\" type=\"submit\">Create {= ?projectTypeLabel }</button>
    </form>
    <script>{= COALESCE(?initFunction, \"teamwork.initCreateForm\") }()</script>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "The default form page for creating a new project. Custom form widgets can be added via an insertion point." ;
  rdfs:label "Default create project page" ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
teamwork:DefaultEditableImports
  a teamwork:EditableImportsTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "graphTCH" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://spinrdf.org/spl> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "graph" ;
                            ] ;
                          sp:predicate teamwork:importableSystemGraph ;
                          sp:subject [
                              sp:varName "any" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:projectLabel ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Default editable imports" ;
  rdfs:subClassOf teamwork:EditableImportsTemplates ;
.
teamwork:DefaultNamespacePlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 5 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= ?projectGraph }\">
    <teamwork:ActionLink arg:comment=\"The default namespace is the start of identifiers of newly created resources.\" arg:icon=\"lib/teamwork/build/images/teamwork/default-namespace-icon.svg\" arg:title=\"Default Namespace\">
        <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:SetDefaultNamespaceUpdateService }\">
            <swa:TextFieldInlineEditor arg:class=\"teamwork-default-namespace-plugin-inline-editor\" arg:readOnly=\"{= ((!teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph)) || bound(?tag)) || teamwork:isReadOnlyProject(?projectGraph) }\" arg:updateLink=\"{= ?link }\" arg:value=\"{= COALESCE(spl:object(?projectGraph, swa:defaultNamespace), &quot;none&quot;) }\"/>
        </ui:createLink>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Default namespace plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:DefaultProjectSummary
  a teamwork:ProjectSummary ;
  ui:private true ;
  ui:prototype """
<ui:group let:mainClass=\"{= spl:object(?projectGraph, teamwork:mainClass) }\">
    <ui:if ui:condition=\"{= bound(?mainClass) }\">
        <div class=\"teamworkSubTitle\" letrs:relatedClasses=\"{#
                SELECT ?relatedClass
                WHERE {
                    ?projectGraph teamwork:relatedClass ?relatedClass .
                }
                ORDER BY (ui:label(?relatedClass)) }\">
            <span>Main entity (class):&nbsp;</span>
            <span class=\"teamwork-main-class\">
                <a href=\"{= teamwork:currentGraphId() }.editor\">{= ui:label(?mainClass) }</a>
            </span>
            <ui:if ui:condition=\"{= !spr:isEmpty(?relatedClasses) }\">
                <teamwork:Spaces/>
                <span>Related entities (classes):&nbsp;</span>
                <ui:forEach ui:resultSet=\"{= ?relatedClasses }\" ui:separator=\", \">
                    <span class=\"teamwork-related-class\">
                        <a href=\"{= teamwork:currentGraphId() }.editor?resourceType={= ui:encodeURL(xsd:string(?relatedClass)) }\">{= ui:label(?relatedClass) }</a>
                    </span>
                </ui:forEach>
            </ui:if>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The default project summary will display information about main entity and related entities, if present. Empty otherwise." ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:DefaultSavedSearchJSON
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <swon:Object>
                    <ui:group let:_=\"{#
                            SELECT ?type ?textSearch
                            WHERE {
                                ?resource graphql.search:defaultSearch ?search .
                                ?search search:rootType ?type .
                                OPTIONAL {
                                    ?search search:string ?textSearch .
                                } .
                            } }\">
                        <swon:Value arg:name=\"resourceType\" arg:value=\"{= ?type }\"/>
                        <swon:Value arg:name=\"textSearch\" arg:value=\"{= ?textSearch }\"/>
                    </ui:group>
                    <swon:Value arg:name=\"filters\">
                        <swon:Array>
                            <ui:forEach ui:resultSet=\"{#
                                    SELECT ?rootType ?facet
                                    WHERE {
                                        ?resource graphql.search:defaultSearch ?search .
                                        ?search search:facet ?facet .
                                        ?search search:rootType ?rootType .
                                        ?facet a search:PropertyFacet .
                                    } }\">
                                <teamwork:SavedSearchFilterSnippet arg:facet=\"{= ?facet }\" arg:resource=\"{= ?resource }\" arg:rootType=\"{= ?rootType }\"/>
                            </ui:forEach>
                        </swon:Array>
                    </swon:Value>
                    <swon:Value arg:name=\"columns\">
                        <swon:Array>
                            <ui:forEach ui:resultSet='{#
                                    SELECT ?rootType ?colProp ?colIndex
                                    WHERE {
                                        ?resource graphql.search:defaultSearch ?search .
                                        ?search search:rootType ?rootType .
                                        ?search spin:column ?column .
                                        ?column search:columnProperty ?colProp .
                                        ?column search:columnSubjectVarName \"result\" .
                                        OPTIONAL {
                                            ?column spin:columnIndex ?colIndex .
                                        } .
                                    } }'>
                                <swon:Object>
                                    <swon:Value arg:name=\"property\" arg:value=\"{= ?colProp }\"/>
                                    <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                                        <ui:group let:fieldName=\"{= teamwork:getGQLFieldName(?colProp, ?rootType) }\">
                                            <swon:Value arg:name=\"gqlAlias\" arg:value=\"_{= ?fieldName }\"/>
                                            <swon:Value arg:name=\"gqlName\" arg:value=\"{= ?fieldName }\"/>
                                        </ui:group>
                                    </ui:setContext>
                                    <swon:Value arg:name=\"index\" arg:value=\"{= ?colIndex }\"/>
                                </swon:Object>
                            </ui:forEach>
                        </swon:Array>
                    </swon:Value>
                </swon:Object>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Default Saved Search JSON" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:DeleteOrphanCommentsService
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:call ui:template=\"{= teamwork:OrphanComments }\">
        <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:transaction>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <ui:update ui:updateQuery=\"{!
                            DELETE {
                                ?post ?p ?o .
                            }
                            WHERE {
                                ?post ?p ?o .
                            } }\"/>
                </ui:forEach>
            </ui:transaction>
        </ui:setContext>
    </ui:call>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:DeletePlugin
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:comment "Metaclass of all delete plugins, a type of plugin whose prototype is executed before a project is deleted. See teamwork:deletePlugin." ;
  rdfs:label "Delete plugin" ;
  rdfs:subClassOf ui:Method ;
.
teamwork:DeletePlugins
  a teamwork:DeletePlugin ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The vocabulary being deleted." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of all delete plugins. Concrete subclasses will inherit the ?projectGraph argument." ;
  rdfs:label "Delete plugins" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:DeleteProjectService
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= (!bound(?teamGraph)) || (!teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph)) }\">
            <teamwork:ErrorPage arg:message=\"You need to be manager of this {= teamwork:singularProjectTypeLabel(?projectType) } to delete it.\"/>
        </ui:if>
    </ui:setContext>
    <ui:if ui:condition=\"{= !teamwork:canDeleteProject(teamwork:graphIdFromGraph(?projectGraph)) }\">
        <teamwork:ErrorPage arg:message=\"At least one other user currently has an active session on this {= teamwork:singularProjectTypeLabel(?projectType) }.  Please wait for those sessions to expire.\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?plugin
            WHERE {
                GRAPH ui:graph {
                    ?projectType teamwork:deletePlugin ?plugin .
                } .
            } }\">
        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?plugin }\"/>
    </ui:forEach>
    <teamwork:deleteProject arg:graph=\"{= ?projectGraph }\"/>
    <ui:createLink arg:type=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\" ui:viewClass=\"{= teamwork:AssetsPage }\">
        <swa:RedirectAfterPost arg:url=\"{= ?link }\"/>
    </ui:createLink>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Called after the user has confirmed deletion of a given project." ;
  rdfs:label "Delete project service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:DeleteSavedSearchService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType search:Search ;
      rdfs:comment "The search:Search to delete." ;
    ] ;
  ui:errorPrototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\">
    <ui:group let:isManager=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\" let:isOwner=\"{= teamwork:currentUserOwnsSavedSearch() }\">
        <ui:log ui:info=\"Current user is Manager {= ?isManager }\"/>
        <ui:log ui:info=\"Current user is owner {= ?isOwner }\"/>
        <ui:if ui:condition=\"{= (!?isOwner) &amp;&amp; (!?isManager) }\">
            <ui:setResponseHeader ui:statusCode=\"{= 401 }\"/>
            <p>Error: Insufficient privileges for this action.</p>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Delete saved search {= ui:label(?search) }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?s ?p ?o .
            }
            WHERE {
                ( ?s ?p ?o ) tops:dependsOn ?search .
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Delete saved search service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:DeletedObjectHistoryEntry
  a ui:NodeClass ;
  ui:prototype """
<div class=\"teamwork-history-div teamwork-history-div-deleted\">
    <swa:ObjectViewer ui:args=\"*\"/>
    <div class=\"teamwork-history-details\">Deleted by {= afn:localname(?user) } on {= ui:label(?date) }<ui:if ui:condition=\"{= bound(?comment) }\">&nbsp;({= ?comment })</ui:if>
        <ui:if ui:condition=\"{= !isBlank(?object) }\">
            <swa:Space/>
            <swa:Space/>
            <a href=\"javascript:void(0)\" onclick=\"swa.revert('{= ui:escapeJSON(ui:encodeNode(?subject, true, true)) }', '{= ?predicate }', '{= ui:escapeJSON(ui:encodeNode(?object, true, true)) }', true)\">
                <b>Revert</b>
            </a>
        </ui:if>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Deleted object history entry" ;
  rdfs:subClassOf teamwork:ObjectHistoryEntry ;
.
teamwork:DeletedObjects
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "object" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "object" ;
          ]
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "user" ;
          ]
          [
            sp:varName "comment" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTeamGraph ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "subject" ;
                    ] ;
                  sp:predicate teamwork:subject ;
                  sp:subject [
                      sp:varName "triple" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "predicate" ;
                    ] ;
                  sp:predicate teamwork:predicate ;
                  sp:subject [
                      sp:varName "triple" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "object" ;
                    ] ;
                  sp:predicate teamwork:object ;
                  sp:subject [
                      sp:varName "triple" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "triple" ;
                    ] ;
                  sp:predicate teamwork:deleted ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "date" ;
                    ] ;
                  sp:predicate dcterms:created ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "user" ;
                    ] ;
                  sp:predicate sioc:has_creator ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "change" ;
                        ] ;
                      sp:arg2 rdfs:comment ;
                    ] ;
                  sp:variable [
                      sp:varName "comment" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a teamwork:changeHasCurrentTag ;
                      arg:change [
                          sp:varName "change" ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "object" ;
                        ] ;
                      sp:predicate [
                          sp:varName "predicate" ;
                        ] ;
                      sp:subject [
                          sp:varName "subject" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject to find deleted objects for." ;
    ] ;
  spin:private true ;
  rdfs:comment "Finds all objects that have been deleted for a given subject/predicate combination." ;
  rdfs:label "Deleted objects" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:DetailsViewActionsComponent
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:neighborgramViewClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"details-actions-bar\">
    <div class=\"button-group\">
        <ui:createLink arg:focusNode=\"{= ui:encodeNode(?resource, true, true) }\" ui:queryGraph=\"{= ui:currentQueryGraph() }\" ui:viewClass=\"{= COALESCE(?neighborgramViewClass, teamwork:NeighborGramPage) }\">
            <button class=\"btn btn-default btn-sm details-action-neighborgram\" data-link=\"{= ?link }\" type=\"button\">
                <span aria-hidden=\"true\" class=\"glyphicon glyphicon-search\"/> NeighborGram
		</button>
        </ui:createLink>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:DetailsViewCarouselComponent
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:instance ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <div data-swa-widget=\"DetailsViewCarousel\" data-widget-endpoint=\"&amp;baseGraph={= ?baseGraph }&amp;_viewClass=teamwork:LandingPageCarousel&amp;instance={= ui:encodeURL(xsd:string(?instance)) }&amp;property={= ui:encodeURL(xsd:string(?property)) }\" data-widget-type=\"swa.carousel\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:DetailsViewPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceIRI ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the resource to display details for" ;
    ] ;
  ui:prototype """
<ui:group let:baseGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?baseGraph)) }\">
        <teamwork:Header arg:pageType=\"details-view-page\">Search</teamwork:Header>
        <div class=\"container-fluid\">
            <teamwork:DetailsViewTitleComponent arg:resource=\"{= ?resourceIRI }\"/>
            <teamwork:DetailsViewActionsComponent arg:neighborgramViewClass=\"{= teamwork:NeighborGramPage }\" arg:resource=\"{= ?resourceIRI }\"/>
            <div class=\"tree-widget-container\">
                <teamwork:DataTree arg:dataProvider=\"{= swa:ClassPropertyTreeDataProvider }\" arg:id=\"data-tree-id\" arg:queryGraphBase=\"{= ui:currentQueryGraph() }\" arg:resourceIRI=\"{= ?resourceIRI }\" arg:root=\"{= owl:Thing }\"/>
            </div>
            <!--div class=\"carousel-container\">
   <teamwork:DetailsViewCarouselComponent/>
</div-->
            <ui:setContext ui:varName=\"mode\" ui:varValue=\"view\">
                <ui:setContext ui:varName=\"swa-no-edit-button\" ui:varValue=\"{= true }\">
                    <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNoLink }\">
                        <ui:resourceView ui:matchIds=\"details\" ui:resource=\"{= ?resourceIRI }\"/>
                    </ui:setContext>
                </ui:setContext>
            </ui:setContext>
        </div>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:DetailsViewTitleComponent
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"text-center detail-view-header\">
    <h4>{= ui:label(?resource) }</h4>
</div>
"""^^ui:Literal ;
  rdfs:label "Details view title component" ;
  rdfs:subClassOf teamwork:DetailsViewCarouselComponent ;
.
teamwork:DisplayCreateProjectDropdown
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:index ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Project type to create a drop down of. " ;
    ] ;
  ui:prototype """
<ui:group letrs:vocabs=\"{#
        SELECT ?label ?otherProjectGraph
        WHERE {
            rdf:nil teamwork:readableGraphsUnderTeamControl ( ?otherProjectGraph ?otherTeamGraph ) .
            BIND (teamwork:getProjectType(?otherProjectGraph) AS ?type) .
            FILTER (?type = ?pType) .
            BIND (teamwork:projectLabel(?otherProjectGraph) AS ?label) .
        }
        ORDER BY (?label) }\">
    <swa:LabeledElement arg:label=\"{= teamwork:singularProjectTypeLabel(?pType) } to include:\">
        <ui:if ui:condition=\"{= spr:isEmpty(?vocabs) }\">
            <div>No {= teamwork:singularProjectTypeLabel(?pType) }s found.</div>
            <br/>
        </ui:if>
        <ui:else>
            <select class=\"form-control vocabSelect\">
                <option/>
                <ui:forEach ui:resultSet=\"{= ?vocabs }\">
                    <option value=\"{= ?otherProjectGraph }\">{= ?label }</option>
                </ui:forEach>
            </select>
        </ui:else>
    </swa:LabeledElement>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
teamwork:EVNEditImportsService
  a ui:NodeClass ;
  ui:prototype """
<swon:Object let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?projectGraph }\"/>
    <swon:Value arg:name=\"projectLabel\" arg:value=\"{= teamwork:projectLabel(?projectGraph) }\"/>
    <ui:setContext let:template=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:queryGraph=\"{= ?projectGraph }\">
        <!--ui:dumpScope ui:message=\"AAA1: teamwork:EVNEditImportsService\"/-->
        <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= ?template }\" ui:varName=\"raw\">
            <ui:group letrs:rs='{#
                    SELECT DISTINCT ?graph ?label ?pType
                    WHERE {
                        {
                            ?raw spr:rowIndices ?rowIndex .
                            BIND (spr:cell(?raw, ?rowIndex, 0) AS ?graph) .
                            BIND (spr:cell(?raw, ?rowIndex, 1) AS ?label) .
                        }
                        UNION
                        {
                            GRAPH ui:graph {
                                ?projectType teamwork:owlImports ?str .
                                ?uri spif:split ( ?str \" \" ) .
                                BIND (IRI(?uri) AS ?graph) .
                                BIND (teamwork:graphLabel(?graph) AS ?label) .
                                FILTER NOT EXISTS {
                                    GRAPH ?graph {
                                        ?gmd vaem:isMetadataFor ?graph .
                                    } .
                                } .
                            } .
                        } .
                        BIND (teamwork:singularProjectTypeLabel(teamwork:getProjectType(?graph)) AS ?maybePtype) .
                        BIND (COALESCE(?maybePtype, \"zzz\") AS ?pType) .
                    }
                    ORDER BY (?pType) }'>
                <swon:Values arg:name=\"importedGraphs\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <ui:if ui:condition=\"{= EXISTS {
                            ?projectGraph owl:imports ?graph .
                        } }\">
                            <ui:if ui:condition=\"{= (!teamwork:isNotImportable(?graph)) &amp;&amp; ((?graph = &lt;http://datashapes.org/graphql&gt;) || (!teamwork:isMandatoryImport(?graph, ?projectType))) }\">
                                <swon:Object let:type=\"{= teamwork:getProjectType(?graph) }\">
                                    <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?graph }\"/>
                                    <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                                    <ui:if ui:condition=\"{= bound(?type) &amp;&amp; (!teamwork:isSingletonProjectType(?type)) }\">
                                        <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                                    </ui:if>
                                    <ui:elseif ui:condition=\"{= bound(?type) &amp;&amp; teamwork:isSingletonProjectType(?type) }\">
                                        <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:genericSingletonProjectTypeLabel() }\"/>
                                    </ui:elseif>
                                    <ui:else>
                                        <swon:Value arg:name=\"projectType\" arg:value=\"{= false }\"/>
                                    </ui:else>
                                    <ui:if ui:condition=\"{= teamwork:isMandatoryImport(?graph, ?projectType) }\">
                                        <swon:Value arg:name=\"mandatory\" arg:value=\"{= true }\"/>
                                    </ui:if>
                                </swon:Object>
                            </ui:if>
                        </ui:if>
                    </ui:forEach>
                </swon:Values>
                <swon:Values arg:name=\"availableGraphs\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <ui:group let:type=\"{= teamwork:getProjectType(?graph) }\">
                            <ui:if ui:condition=\"{= NOT EXISTS {
                                ?projectGraph owl:imports ?graph .
                            } &amp;&amp; (!STRSTARTS(str(?graph), &quot;urn:x-evn-pub:&quot;)) }\">
                                <ui:if ui:condition=\"{= (!teamwork:isNotImportable(?graph)) &amp;&amp; ((?graph = &lt;http://datashapes.org/graphql&gt;) || (!teamwork:isMandatoryImport(?graph, ?projectType))) }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?graph }\"/>
                                        <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                                        <ui:if ui:condition=\"{= bound(?type) &amp;&amp; (!teamwork:isSingletonProjectType(?type)) }\">
                                            <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                                        </ui:if>
                                        <ui:elseif ui:condition=\"{= bound(?type) &amp;&amp; teamwork:isSingletonProjectType(?type) }\">
                                            <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:genericSingletonProjectTypeLabel() }\"/>
                                        </ui:elseif>
                                        <ui:else>
                                            <swon:Value arg:name=\"projectType\" arg:value=\"{= false }\"/>
                                        </ui:else>
                                    </swon:Object>
                                </ui:if>
                            </ui:if>
                        </ui:group>
                    </ui:forEach>
                </swon:Values>
            </ui:group>
        </ui:call>
    </ui:setContext>
</swon:Object>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:EdgLandingPageHeading
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <section class=\"col-xs-12\">
        <div class=\"widget-content\">
            <h1>Welcome to TopBraid EDG</h1>
            <span class=\"subHeading\">TopBraid Enterprise Data Governance&trade;</span>
            <p>TopBraid EDG&trade; is an agile data governance solution for today's dynamic enterprises. With EDG, you can choose one or combine two or more data governance packages to support a comprehensive but staged approach to data governance.</p>
        </div>
    </section>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:EditConstraintLibrariesPanel
  a ui:NodeClass ;
  ui:prototype """
<div id=\"div-edit-constraint-libraries\" title=\"Edit Constraint Libraries of {= teamwork:projectLabel(?projectGraph) }\">
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
            <ui:group letrs:libs=\"{#
                    SELECT *
                    WHERE {
                        rdf:nil teamwork:skosConstraintsLibrary ?lib .
                        BIND (EXISTS {
                            ?projectGraph spin:imports ?lib .
                        } AS ?imported) .
                    }
                    ORDER BY DESC (?lib) }\">
                <ui:forEach ui:resultSet=\"{= ?libs }\">
                    <ui:setContext ui:queryGraph=\"{= ?lib }\">
                        <div class=\"checkbox\">
                            <input checked=\"{= IF(?imported, &quot;checked&quot;, ?none) }\" onclick=\"teamwork.editConstraintLibrary('{= ?projectGraph }', '{= ?lib }', $(this).is(':checked'))\" type=\"checkbox\"/>
                            <span>&nbsp;{= ui:label(?lib) } ({= ?lib })</span>
                        </div>
                        <br/>
                    </ui:setContext>
                </ui:forEach>
            </ui:group>
        </ui:setContext>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:label "Edit constraint libraries panel" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:EditImportsBody
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "			" ;
    ] ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:group let:isEdg=\"{= spl:objectInGraph(?projectType, rdf:type, ui:unionGraph) }\">
        <!--  <ui:if ui:condition=\"{= ?isEdg = teamwork:ProjectType }\"> -->
        <teamwork:DataTable arg:dataColumnsEndpoint=\"teamwork:EditImportsBodyColumns\" arg:dataEndpoint=\"teamwork:EVNEditImportsService\" arg:dtType=\"editIncludes\" arg:editable=\"{= false }\" arg:filter=\"{= true }\" arg:hasCheckboxSelection=\"true\" arg:multiSelect=\"{= true }\" arg:pageLength=\"{= 10 }\" arg:queryParam=\"projectGraph\" arg:queryParamValues=\"{= ?projectGraph }\"/>
        <!-- </ui:if>
<ui:else>
<teamwork:DataTable arg:dataColumnsEndpoint=\"teamwork:EditImportsBodyColumns\"
arg:dataEndpoint=\"teamwork:EditImportsService\"
arg:dtType=\"editIncludes\"
arg:editable=\"false\"
arg:filter=\"true\"
arg:hasCheckboxSelection=\"true\"
arg:multiSelect=\"true\"
arg:pageLength=\"10\"
arg:queryParam=\"projectGraph\"
arg:queryParamValues=\"{= ?projectGraph }\"/>
</ui:else> -->
        <script> gadgets.Hub.publish('org.topbraid.edit.includes'); </script>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Edit imports body" ;
  rdfs:subClassOf ui:Element ;
.
teamwork:EditImportsBodyColumns
  a ui:NodeClass ;
  spin:private true ;
  ui:prototype """
<ui:group>
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Collection Name\"/>
            <swon:Value arg:name=\"data\" arg:value=\"projectLabel\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Collection Type\"/>
            <swon:Value arg:name=\"data\" arg:value=\"projectType\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:EditImportsService
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?projectGraph), ui:graph) }\">
        <ui:resourceView arg:projGraph=\"{= ?projectGraph }\" ui:matchIds=\"edg-edit-imports\" ui:resource=\"{= ?projectType }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Edit imports service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:EditNamespacesPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:GeneralProjectTab }\" let:canEdit=\"{= teamwork:currentUserIsProjectManager(?projectGraph) &amp;&amp; (!teamwork:isReadOnlyProject(?projectGraph)) }\">
    <h1>Namespaces and Prefixes for <em>{= teamwork:projectLabel(?projectGraph) }</em>
    </h1>
    <p>
			The following text area shows the namespace/prefix declarations in Turtle notation.
			Managers can modify them using the same syntax, unless the collection is marked read-only.
		</p>
    <ui:if ui:condition=\"{= ?canEdit }\">
        <p class=\"text-danger\">
			Editing namespace prefixes is a potentially dangerous, low-level operation.
			Please make sure you are aware of potential consequences before proceeding.
			Note that the default namespace (\"\") should not be specified here - instead use the dedicated Default Namespace widget.
			Furthermore, special care must be taken with common namespace prefixes such as rdf, rdfs and owl - these need to remain unchanged.
			Finally, any changes here will invalidate various caches, potentially slowing down operations for other users.
			Ideally, only make changes here immediately after an asset collection has been created.
		</p>
    </ui:if>
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <p>
            <textarea class=\"teamwork-namespaces-textarea\" disabled=\"{= IF(?canEdit, ?none, &quot;disabled&quot;) }\" id=\"textarea\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT *
                        WHERE {
                            ?namespace spif:prefix ?prefix .
                        }
                        ORDER BY (?prefix) }\">PREFIX {= ?prefix }: &lt;{= ?namespace }&gt;<ui:br/>
                </ui:forEach>
            </textarea>
            <ui:if ui:condition=\"{= ?canEdit }\">
                <div/>
                <button class=\"form-control btn-primary\" id=\"submit\" onclick=\"teamwork.editNamespaces('{= ?projectGraph }', $('#textarea'), $('#errorMessage'))\">Submit</button>
                <div class=\"text-danger\" id=\"errorMessage\"/>
            </ui:if>
        </p>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "A page that can be used to edit namespaces and prefixes." ;
  rdfs:label "Edit namespaces page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:EditNamespacesPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginValidExpression true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:EditNamespacesPage }\">
        <teamwork:ActionLink arg:comment=\"The namespaces and prefixes stored with each asset collection are used to abbreviate identifiers (URIs) in SPARQL queries and various file serializations.\" arg:icon=\"lib/teamwork/build/images/teamwork/default-namespace-icon.svg\" arg:link=\"{= ?link }\" arg:title=\"Namespaces and Prefixes\"/>
    </ui:createLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Namespaces and prefixes plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:EditNamespacesService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:str ;
      spl:valueType xsd:string ;
      rdfs:comment "The (Turtle) string." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:try>
        <sml:ConvertTextToRDF sml:replace=\"{= true }\" sml:serialization=\"{= sml:Turtle }\" sml:text=\"{= ?str }\">
            <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT *
                        WHERE {
                            ?namespace spif:prefix ?prefix .
                        } }\">
                    <ui:setPrefix ui:prefix=\"{= ?prefix }\"/>
                </ui:forEach>
            </ui:setContext>
            <ui:forEach ui:resultSet=\"{#
                    SELECT *
                    WHERE {
                        ?namespace spif:prefix ?prefix .
                    } }\">
                <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                    <ui:setPrefix ui:namespace=\"{= ?namespace }\" ui:prefix=\"{= ?prefix }\"/>
                </ui:setContext>
            </ui:forEach>
        </sml:ConvertTextToRDF>
    </ui:try>
    <ui:catch>
        <swon:Value arg:name=\"error\" arg:value=\"Error: {= ?exception }\"/>
    </ui:catch>
    <teamwork:resetPrefixMaps/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "Takes a (valid) Turtle string as input and attempts to replace all prefix declarations in the project graph with the prefixes from the string. Returns { } if everything is OK, or { error: \"message\" } otherwise." ;
  rdfs:label "Edit namespaces service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:EditProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:defaultNamespace ;
      spl:valueType xsd:string ;
      rdfs:comment "The default namespace entered by the user." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <!-- Note: Don't use teamwork:masterGraphForCurrentUser(?projectGraph) above (see EVN Editing wiki page) -->
    <ui:transaction ui:logMessage=\"Edit project name and comment\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?projectGraph rdfs:label ?oldLabel .
                    ?projectGraph rdfs:comment ?oldComment .
                    ?projectGraph swa:defaultNamespace ?oldNS .
                }
                INSERT {
                    ?projectGraph rdfs:label ?name .
                    ?projectGraph rdfs:comment ?comment .
                    ?projectGraph swa:defaultNamespace ?defaultNamespace .
                }
                WHERE {
                    ?projectGraph rdfs:label ?oldLabel .
                    OPTIONAL {
                        ?projectGraph rdfs:comment ?oldComment .
                    } .
                    OPTIONAL {
                        ?projectGraph swa:defaultNamespace ?oldNS .
                    } .
                } }\"/>
        <teamwork:RedirectToProject arg:projectGraph=\"{= ?projectGraph }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Called when the user submits the editProject page." ;
  rdfs:label "Edit project service" ;
  rdfs:subClassOf teamwork:LabelAndCommentService ;
.
teamwork:EditSourceCodeService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:testOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to only check syntax - no triples will be changed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource being edited." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:str ;
      spl:valueType xsd:string ;
      rdfs:comment "The (Turtle) string." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:try let:queryGraph=\"{= ui:currentQueryGraph() }\">
        <sml:ConvertTextToRDF sml:noStringSubstitution=\"{= true }\" sml:replace=\"{= true }\" sml:serialization=\"{= sml:Turtle }\" sml:text=\"{= ?str }\">
            <ui:if ui:condition=\"{= ?testOnly }\">
                <swon:Object/>
            </ui:if>
            <ui:else>
                <ui:setContext ui:queryGraph=\"{= ui:tempGraphCurrent }\">
                    <teamwork:collectTriplesForSubject arg:queryGraph=\"{= ?queryGraph }\" arg:subject=\"{= ?resource }\"/>
                </ui:setContext>
                <swa:addTriplesFromCurrentGraph arg:targetGraph=\"{= ui:tempGraphAdd }\"/>
                <swa:addTriplesFromNamedGraph arg:sourceGraph=\"{= ui:tempGraphCurrent }\" arg:targetGraph=\"{= ui:tempGraphDelete }\"/>
                <swa:deleteTriplesFromNamedGraph arg:sourceGraph=\"{= ui:tempGraphAdd }\" arg:targetGraph=\"{= ui:tempGraphDelete }\"/>
                <swa:deleteTriplesFromNamedGraph arg:sourceGraph=\"{= ui:tempGraphCurrent }\" arg:targetGraph=\"{= ui:tempGraphAdd }\"/>
                <ui:if ui:condition=\"{= swa:graphIsEmpty(ui:tempGraphAdd) &amp;&amp; swa:graphIsEmpty(ui:tempGraphDelete) }\">
                    <swon:Object/>
                </ui:if>
                <ui:else>
                    <ui:setContext ui:queryGraph=\"{= ?queryGraph }\">
                        <ui:transaction ui:logMessage=\"Source code edit\">
                            <ui:update ui:updateQuery=\"{!
                                    DELETE {
                                        ?s ?p ?o .
                                    }
                                    WHERE {
                                        GRAPH ui:tempGraphDelete {
                                            ?s ?p ?o .
                                        } .
                                    } }\"/>
                            <ui:update ui:updateQuery=\"{!
                                    INSERT {
                                        ?s ?p ?o .
                                    }
                                    WHERE {
                                        GRAPH ui:tempGraphAdd {
                                            ?s ?p ?o .
                                        } .
                                    } }\"/>
                        </ui:transaction>
                    </ui:setContext>
                </ui:else>
            </ui:else>
        </sml:ConvertTextToRDF>
    </ui:try>
    <ui:catch>
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"Error: {= REPLACE(?exception, &quot;org.apache.jena.riot.RiotException: &quot;, &quot;&quot;) }\"/>
        </swon:Object>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """Takes a (valid) Turtle string as input and attempts to replace all triples about a given subject with the new triples. Returns { } if everything is OK, or { error: \"message\" } otherwise.

The algorithm first parses the string and copies the triples into ui:tempGraphAdd. Then it fetches the old triples of the resource into ui:tempGraphCurrent and ui:tempGraphDelete. It removes all \"current\" triples from the \"add\" graph, and all \"add\" triples from the \"delete\" graph, so that only the changes remain. If there is any triple change left, it will perform the transaction.""" ;
  rdfs:subClassOf teamwork:Service ;
.
teamwork:EditTagService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to edit." ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction ui:logMessage=\"Edit tag name and comment\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?tag rdfs:label ?oldLabel .
                        ?tag rdfs:comment ?oldComment .
                    }
                    INSERT {
                        ?tag rdfs:label ?name .
                        ?tag rdfs:comment ?comment .
                    }
                    WHERE {
                        ?tag rdfs:label ?oldLabel .
                        OPTIONAL {
                            ?tag rdfs:comment ?oldComment .
                        } .
                    } }\"/>
        </ui:transaction>
        <teamwork:RedirectToProject arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Called when the user submits the editTag page." ;
  rdfs:label "Edit tag service" ;
  rdfs:subClassOf teamwork:LabelAndCommentService ;
.
teamwork:EditableIconPseudoProjectTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "disabled" ;
  teamwork:pluginIndex -110 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  rdfs:comment "A pseudo tab in the project tab bar that only shows an icon for the editable state of the project/tag." ;
  rdfs:label "Editable icon pseudo project tab" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:EditableImportsTemplate
  a rdfs:Class ;
  rdfs:label "Editable imports template" ;
  rdfs:subClassOf spin:SelectTemplate ;
.
teamwork:EditableImportsTemplates
  a spin:SelectTemplate ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The (current) project graph." ;
    ] ;
  rdfs:label "Editable imports templates" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:EditableStatus
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:comment "The status of a project or tag with regards to its editability. Used only for presentation in the UI. No logic should be based on these values. Adding more states is fine." ;
  rdfs:label "Editable status" ;
  rdfs:subClassOf rdfs:Resource ;
  sh:property [
      a sh:PropertyShape ;
      sh:path teamwork:faIcon ;
      sh:datatype xsd:string ;
      sh:description "An fa-xxx FontAwesome icon to use for this status" ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "FontAwesome icon" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdfs:comment ;
      sh:datatype xsd:string ;
      sh:description "Explanation text for this comment, shown in the UI" ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
.
teamwork:EditorApplications
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:comment "Abstract base class of all editor applications that can operate in the teamwork framework." ;
  rdfs:label "Teamwork editor applications" ;
  rdfs:subClassOf swa:Applications ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:EditorChrome
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:isProjectTabsPage ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Triggers some special behaviour for the chrome of the main project tabs page." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
      rdfs:comment "Identifies the type of page. Used by JavaScript to determine primary menu functionality. Also could be used by CSS to handle styling by page type." ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"header-container\">
        <ui:insertionPoint ui:pointId=\"header\"/>
    </div>
    <teamwork:MainMenu arg:currentCategory=\"{= COALESCE(?currentCategory, ?parentPage, ?projectType, IF(bound(?projectGraph), teamwork:getProjectType(?projectGraph), ?none)) }\"/>
    <main id=\"main\">
        <div id=\"appBody\">
            <ui:insertionPoint ui:pointId=\"main\"/>
        </div>
    </main>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates the main navigation areas of each page, including the header, the main menu (left hand side), and possibly the project tab bar. The header will show either the project title, or breadcrumbs (Home > (arg:parentPage|arg:projectType) > arg:title), or arg:title. The item to highlight in the main menu is determined by arg:currentCategory, or else by the current project, current project type, or parent page." ;
  rdfs:subClassOf teamwork:ChromeElements ;
.
teamwork:EditorErrorPrototype
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:masterGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\">
    <ui:group let:mainClass=\"{= spl:object(?masterGraph, teamwork:mainClass) }\">
        <ui:if ui:condition=\"{= teamwork:getProjectType(?masterGraph) = rdmprojects:ProjectType }\">
            <ui:if ui:condition=\"{= !bound(?mainClass) }\">
                <teamwork:Chrome arg:projectGraph=\"{= ?masterGraph }\" arg:projectTab=\"{= teamwork:EditorProjectTab }\">
                    <div class=\"datasetapp-application-padding-eight\">
                        <span>Datasets require some set up that has not been performed yet. </span>
                        <span>The first step is to make sure that at least one class is available to become the main class of the dataset. </span>
                        <ui:call ui:template=\"{= teamwork:PotentialMainClasses }\">
                            <ui:if ui:condition=\"{= spr:isEmpty(?rs) }\">
                                <span>However, no class has been found that could serve as the main entity (class) for this dataset. </span>
                                <span>The manager of a dataset can <b>Include an Ontology</b> from the <b>{= swa:labelInGraph(teamwork:GeneralProjectTab, &lt;http://topbraid.org/teamwork.ui&gt;) } Tab</b> to fix this. </span>
                                <span>That Ontology must define at least one class that is also a SHACL node shape.</span>
                            </ui:if>
                            <ui:elseif ui:condition=\"{= teamwork:currentUserIsProjectManager(?masterGraph) }\">
                                <div>&nbsp;</div>
                                <div>
                                    <span>Please select the main entity (class): </span>
                                    <select class=\"form-control\" id=\"mainClass\">
                                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                                            <option value=\"{= ui:encodeNode(?class, true, true) }\">{= ?label }</option>
                                        </ui:forEach>
                                    </select>
                                    <teamwork:Spaces/>
                                    <button class=\"btn btn-default\">
                                        <span>Continue</span>
                                        <ui:handle arg:class=\"$('#mainClass').val()\" ui:event=\"onclick\" ui:thenLoadId=\"reloader\">
                                            <ui:setContext ui:queryGraph=\"{= ?masterGraph }\">
                                                <ui:setPropertyValue arg:property=\"{= teamwork:mainClass }\" arg:value=\"{= ?class }\" ui:this=\"{= ?masterGraph }\"/>
                                            </ui:setContext>
                                        </ui:handle>
                                    </button>
                                    <ui:loadable ui:loadId=\"reloader\" ui:loadOnDemand=\"{= true }\">
                                        <script>location.reload()</script>
                                    </ui:loadable>
                                </div>
                            </ui:elseif>
                            <ui:else>
                                <span>Please ask a manager of this dataset to select a main entity (class).</span>
                            </ui:else>
                        </ui:call>
                    </div>
                </teamwork:Chrome>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= !swa:hasPrimaryKey(?mainClass) }\">
                    <teamwork:Chrome arg:projectGraph=\"{= ?masterGraph }\" arg:projectTab=\"{= teamwork:EditorProjectTab }\">
                        <div class=\"datasetapp-application-padding-eight\">
                            <span>Datasets require some set up that has not been performed yet. </span>
                            <span>The main entity (class) {= ui:label(?mainClass) } of the dataset does not have a primary key yet. This needs to be attached as a constraint to the class in the underlying Ontology using the Ontology Editor.</span>
                        </div>
                    </teamwork:Chrome>
                </ui:if>
                <ui:elseif ui:condition=\"{= NOT EXISTS {
                    ?masterGraph graphql:publicClass ?mainClass .
                } }\">
                    <ui:setContext ui:queryGraph=\"{= ?masterGraph }\">
                        <ui:setPropertyValue arg:property=\"{= graphql:publicClass }\" arg:value=\"{= ?mainClass }\" ui:this=\"{= ?masterGraph }\"/>
                    </ui:setContext>
                </ui:elseif>
            </ui:else>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Editor error prototype" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:EditorHeader
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:frozen ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to be in read-only mode." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:navigationTitle ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional text replacing \"Editor\" in the breadcrumbs." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:wflow=\"{= teamwork:currentTag() }\">
    <teamwork:Header arg:pageType=\"teamwork-editor {= IF(bound(?pageType), ?pageType, &quot;&quot;) } {= IF(bound(?wflow), &quot;workflow&quot;, &quot;&quot;) }\" arg:quickNavNewTab=\"{= true }\" arg:suppressSearch=\"{= true }\" ui:args=\"*\">
        <ui:insert ui:into=\"titleArea\">
            <teamwork:FavoriteProjectToggle ui:args=\"*\"/>
            <teamwork:ProjectTitle ui:args=\"*\"/>
        </ui:insert>
        <ui:insert ui:into=\"toolArea\">
            <ui:insertionPoint ui:pointId=\"buttons\"/>
            <teamwork:EditorSelect/>
        </ui:insert>
    </teamwork:Header>
    <ui:if ui:condition=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
        <teamwork:ProjectTabBar arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= COALESCE(ui:contextValue(&quot;projectTab&quot;), teamwork:EditorProjectTab) }\" arg:tag=\"{= teamwork:currentTag() }\" arg:useAbsoluteLinks=\"{= true }\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Editor header" ;
  rdfs:subClassOf teamwork:HeaderElements ;
.
teamwork:EditorProjectTab
  a teamwork:ProjectTab ;
  teamwork:cssClass "editor" ;
  teamwork:linkExpression [
      a teamwork:editorLink ;
      arg:projectGraph [
          sp:varName "projectGraph" ;
        ] ;
      arg:resource [
          sp:varName "unbound" ;
        ] ;
      arg:tag [
          sp:varName "tag" ;
        ] ;
      arg:tagIgnoreEditedResource true ;
    ] ;
  teamwork:pluginIndex 2 ;
  teamwork:pluginValidExpression [
      a teamwork:hasEditorApplication ;
      arg:projectType [
          sp:varName "projectType" ;
        ] ;
    ] ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  rdfs:label "Assets" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:EditorSelect
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:tag=\"{= teamwork:currentTag() }\">
    <ui:if ui:condition=\"{= bound(?projectGraph) }\">
        <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:group letrs:editors='{#
                    SELECT ?editor ?label ?faIcon ?encoded
                    WHERE {
                        GRAPH ui:graph {
                            {
                                FILTER (!teamwork:areOldEditorsDisabled()) .
                                ?projectType teamwork:projectEditorClass|teamwork:projectEditorClassOption ?editor .
                                BIND (CONCAT(ui:label(?editor), \" (\\\"Old\\\" Editor)\") AS ?label) .
                            }
                            UNION
                            {
                                FILTER NOT EXISTS {
                                    ?projectType teamwork:newEditorDisabled true .
                                } .
                                BIND (teamwork:TBApplication AS ?editor) .
                                BIND (ui:label(?editor) AS ?label) .
                            } .
                            BIND (spl:object(?editor, teamwork:faIcon) AS ?faIcon) .
                            BIND (ui:encodeNode(?editor) AS ?encoded) .
                        } .
                    }
                    ORDER BY (?label) }'>
                <ui:if ui:condition=\"{= spr:rowCount(?editors) &gt; 1 }\">
                    <ui:group let:old=\"{= COALESCE(ui:decodeNode(ui:param(&quot;_editorClass&quot;)), spl:objectInGraph(?teamGraph, teamwork:defaultEditorClass, ?teamGraph)) }\">
                        <ui:group let:editorLink=\"{= teamwork:editorLink(?projectGraph, ?none, ?tag) }\">
                            <ui:forEach ui:resultSet=\"{= ?editors }\">
                                <button class=\"form-control TeamworkHeaderButton\" disabled=\"{= IF((?old = ?editor), &quot;disabled&quot;, ?none) }\" onclick=\"window.location.href=&quot;{= ?editorLink }?_editorClass={= ENCODE_FOR_URI(?encoded) }&quot;\" style=\"top: -2px !important\" title=\"{= ?label }\">
                                    <ui:if ui:condition=\"{= bound(?faIcon) }\">
                                        <i aria-hidden=\"true\" class=\"fa fa-{= ?faIcon }\"/>
                                    </ui:if>
                                    <ui:else>
                                        <span class=\"text-danger\">Missing teamwork:faIcon</span>
                                    </ui:else>
                                </button>
                            </ui:forEach>
                        </ui:group>
                    </ui:group>
                </ui:if>
            </ui:group>
        </ui:group>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Editor select" ;
  rdfs:subClassOf teamwork:HeaderElements ;
.
teamwork:Elements
  a ui:NodeClass ;
  ui:abstract true ;
  ui:includeScript teamwork:InitBundle ;
  rdfs:label "Elements" ;
  rdfs:subClassOf swa:Elements ;
.
teamwork:EnsureSAFIndexInitialized
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:try>
        <safindex:initialize/>
    </ui:try>
    <ui:catch>
        <p class=\"text-danger\">ERROR during startup of SAF Index index: {= ?exception }</p>
        <ui:log ui:error=\"{= ?stackTrace }\"/>
    </ui:catch>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Ensure SAF index initialized" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:EnsureSingletonExists
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The project type." ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= spl:objectInGraph(?projectType, teamwork:singletonId, ui:graph) }\">
    <ui:group let:projectGraph=\"{= teamwork:masterGraph(?graphId) }\">
        <uix:asAdmin>
            <ui:if let:owlImports=\"{#
                    SELECT (GROUP_CONCAT(?import) AS ?result)
                    WHERE {
                        GRAPH ui:graph {
                            ?projectType teamwork:owlImports ?import .
                        } .
                    } }\" ui:condition=\"{= !smf:hasFile(?projectGraph) }\">
                <teamwork:createProject arg:defaultNamespace=\"{= spl:objectInGraph(?projectType, teamwork:singletonDefaultNamespace, ui:graph) }\" arg:id=\"{= ?graphId }\" arg:name=\"{= spl:objectInGraph(?projectType, teamwork:singularLabel, ui:graph) }\" arg:owlImports=\"{= ?owlImports }\" arg:projectType=\"{= ?projectType }\" arg:spinImports=\"{= spl:objectInGraph(?projectType, teamwork:spinImports, ui:graph) }\"/>
                <teamwork:CreateProjectPlugins arg:projectGraph=\"{= ?projectGraph }\" arg:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\"/>
            </ui:if>
        </uix:asAdmin>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Checks if a given teamwork:ProjectType already has a singleton instance, and if not then creates it for the current user." ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:EnsureSingletonsExist
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?projectType
        WHERE {
            GRAPH ui:graph {
                ?projectType teamwork:singletonId ?anyId .
            } .
        } }\">
    <teamwork:EnsureSingletonExists arg:projectType=\"{= ?projectType }\"/>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:EnsureTextIndexInitialized
  a ui:NodeClass ;
  ui:prototype """
<ui:if ui:condition=\"{= textindex:isEnabled() }\">
    <ui:group let:id=\"{= teamwork:textIndexId() }\">
        <ui:if ui:condition=\"{= NOT EXISTS {
            rdf:nil textindex:index ?id .
        } }\">
            <ui:try>
                <textindex:create arg:id=\"{= ?id }\" arg:persistent=\"{= true }\" arg:trackFunction=\"{= teamwork:isTextIndexTrackedGraph }\"/>
            </ui:try>
            <ui:catch>
                <ui:log ui:error=\"{= ?stackTrace }\"/>
            </ui:catch>
        </ui:if>
    </ui:group>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Ensure text index initialized" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:EnsureUsersBookmarksExist
  a ui:Operation ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:bookmarks=\"{= teamwork:getUserBookmarks() }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:if ui:condition=\"{= !bound(?bookmarks) }\">
            <ui:group let:bookmarks=\"{= BNODE() }\">
                <ui:setContext>
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?user teamwork:bookmarks ?bookmarks .
                                ?bookmarks a teamwork:Bookmarks .
                            }
                            WHERE {
                            } }\"/>
                </ui:setContext>
            </ui:group>
        </ui:if>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Ensure Users Bookmarks Exist" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:ErrorPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:status ;
      spl:valueType xsd:integer ;
      rdfs:comment "Optional HTTP status code, such as 404 for \"Not Found\"." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:message ;
      spl:valueType xsd:string ;
      rdfs:comment "The error message to display." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?status) }\">
        <ui:setResponseHeader ui:statusCode=\"{= ?status }\"/>
    </ui:if>
    <teamwork:Chrome arg:pageType=\"error-page\" ui:args=\"*\">
        <h1>An Error has occurred</h1>
        <div class=\"text-danger\">{= ?message }</div>
        <div class=\"teamwork-error-page-text\">Please use your browser's back button to return to the previous step and try again.</div>
    </teamwork:Chrome>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Shows an error page. Pass an error message in arg:message, and optionally use the other arguments to configure the navigation chrome (see teamwork:Chrome for details). Often, calling with ui:args=\"*\" works well." ;
  rdfs:label "Error page" ;
  rdfs:subClassOf teamwork:ChromeElements ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:ExecuteStatusChangeRules
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:newStatus ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The new status of the tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:oldStatus ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The old status" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag that changed its status." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team (TCH) graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
    <teamwork:executeStatusChangeRules arg:addedResultSet=\"{#
            SELECT ?subject ?predicate ?object
            WHERE {
                BIND (?tag AS ?subject) .
                BIND (teamwork:status AS ?predicate) .
                BIND (?newStatus AS ?object) .
            } }\" arg:deletedResultSet=\"{#
            SELECT ?subject ?predicate ?object
            WHERE {
                BIND (?tag AS ?subject) .
                BIND (teamwork:status AS ?predicate) .
                BIND (?oldStatus AS ?object) .
            } }\"/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Execute status change rules" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:ExistingObjectsHistory
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "object" ;
              ] ;
          ]
          [
            sp:varName "date" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "object" ;
          ]
          [
            sp:varName "date" ;
          ]
          [
            sp:varName "user" ;
          ]
          [
            sp:varName "comment" ;
          ]
          [
            sp:varName "tag" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "predicate" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTeamGraph ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  a sp:NamedGraph ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "predicate" ;
                          ] ;
                        sp:predicate teamwork:predicate ;
                        sp:subject [
                            sp:varName "triple" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "subject" ;
                          ] ;
                        sp:predicate teamwork:subject ;
                        sp:subject [
                            sp:varName "triple" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "object" ;
                          ] ;
                        sp:predicate teamwork:object ;
                        sp:subject [
                            sp:varName "triple" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "triple" ;
                          ] ;
                        sp:predicate teamwork:added ;
                        sp:subject [
                            sp:varName "change" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "date" ;
                          ] ;
                        sp:predicate dcterms:created ;
                        sp:subject [
                            sp:varName "change" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "user" ;
                          ] ;
                        sp:predicate sioc:has_creator ;
                        sp:subject [
                            sp:varName "change" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression [
                            a spl:object ;
                            sp:arg1 [
                                sp:varName "change" ;
                              ] ;
                            sp:arg2 rdfs:comment ;
                          ] ;
                        sp:variable [
                            sp:varName "comment" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression [
                            a spl:object ;
                            sp:arg1 [
                                sp:varName "change" ;
                              ] ;
                            sp:arg2 teamwork:tag ;
                          ] ;
                        sp:variable [
                            sp:varName "tag" ;
                          ] ;
                      ]
                      [
                        a sp:Filter ;
                        sp:expression [
                            a sp:or ;
                            sp:arg1 [
                                a spl:hasValue ;
                                sp:arg1 [
                                    sp:varName "change" ;
                                  ] ;
                                sp:arg2 teamwork:status ;
                                sp:arg3 teamwork:Committed ;
                              ] ;
                            sp:arg2 [
                                a teamwork:changeHasCurrentTag ;
                                arg:change [
                                    sp:varName "change" ;
                                  ] ;
                              ] ;
                          ] ;
                      ]
                    ) ;
                  sp:graphNameNode [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject to find deleted objects for." ;
    ] ;
  spin:private true ;
  rdfs:comment "Gets information on the history of existing objects of a given subject/predicate combination." ;
  rdfs:label "Existing objects history" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:ExpandableSectionContainer
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:additionalClasses ;
      spl:valueType xsd:string ;
      rdfs:comment "Any additional classes to apply on the container element, space delimited." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:collapsedByDefault ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Instructs the container to initially render in a collapsed state." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:headingLevel ;
      spl:valueType xsd:integer ;
      rdfs:comment "The heading level for the expandable section toggler." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:headingLabel ;
      spl:valueType xsd:string ;
      rdfs:comment "Text to use for the section heading." ;
    ] ;
  ui:prototype """
<ui:group let:ariaValue=\"{= IF((bound(?collapsedByDefault) &amp;&amp; ?collapsedByDefault), &quot;false&quot;, &quot;true&quot;) }\" let:collapsed=\"{= IF((bound(?collapsedByDefault) &amp;&amp; ?collapsedByDefault), &quot;is-collapsed &quot;, &quot;&quot;) }\">
    <section aria-expanded=\"{= ?ariaValue }\" class=\"expandable-section-container {= ?collapsed }{= ?additionalClasses }\">
        <ui:if ui:condition=\"{= ?headingLevel = 1 }\">
            <h1 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h1>
        </ui:if>
        <ui:if ui:condition=\"{= ?headingLevel = 2 }\">
            <h2 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h2>
        </ui:if>
        <ui:if ui:condition=\"{= (!bound(?headingLevel)) || (?headingLevel = 3) }\">
            <h3 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h3>
        </ui:if>
        <ui:if ui:condition=\"{= ?headingLevel = 4 }\">
            <h4 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h4>
        </ui:if>
        <ui:if ui:condition=\"{= ?headingLevel = 5 }\">
            <h5 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h5>
        </ui:if>
        <ui:if ui:condition=\"{= ?headingLevel = 6 }\">
            <h6 class=\"expandable-section-toggler\" tabindex=\"0\">{= ?headingLabel }</h6>
        </ui:if>
        <div class=\"expandable-section\">
            <ui:insertionPoint ui:pointId=\"mainContent\"/>
        </div>
    </section>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ExportEntireProjectPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 1 ;
  teamwork:pluginMayNotScale true ;
  teamwork:pluginValidExpression true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:group>
    <teamwork:ActionLink arg:comment=\"Exports the entire {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } in one of the formats below.\" arg:icon=\"lib/teamwork/build/images/teamwork/taxonomy-as-graph.svg\" arg:link=\"{= ?link }\" arg:title=\"Export {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } as a Graph\"/>
    <div class=\"export-taxonomy-options\">
        <ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:JSONLD }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
            <img alt=\"JSON-LD Icon\" src=\"lib/teamwork/build/images/teamwork/icon-json.svg\"/>
            <a class=\"dataLightCell\" href=\"{= ?link }\">JSON-LD</a>
        </ui:createLink>
        <ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:NTriple }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
            <img alt=\"N-Triple Icon\" src=\"lib/teamwork/build/images/teamwork/icon-n-triple.svg\"/>
            <a class=\"dataLightCell\" href=\"{= ?link }\">N-Triples</a>
        </ui:createLink>
        <ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:RDFXML }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
            <img alt=\"RDF Icon\" src=\"lib/teamwork/build/images/teamwork/export-rdf-xml.svg\"/>
            <a class=\"dataLightCell\" href=\"{= ?link }\">RDF/XML</a>
        </ui:createLink>
        <ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:Turtle }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
            <img alt=\"Turtle Format Icon\" src=\"lib/teamwork/build/images/teamwork/icon-turtle.svg\"/>
            <a class=\"dataLightCell\" href=\"{= ?link }\">Turtle</a>
            <a class=\"dataLightCell\" href=\"{= ?link }&amp;sorted=true\">Sorted Turtle (slower)</a>
        </ui:createLink>
        <ui:createLink arg:includeSystemTriples=\"true\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"trig\">
            <img alt=\"TriG Format Icon\" src=\"lib/teamwork/build/images/teamwork/icon-trig.svg\"/>
            <a class=\"dataLightCell\" href=\"{= ?link }\">TriG (with includes)</a>
        </ui:createLink>
        <ui:createLink arg:includeInferences=\"{= true }\" arg:includeSystemTriples=\"true\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"trig\">
            <a class=\"dataLightCell\" href=\"{= ?link }\" title=\"The resulting TriG file includes a dedicated named graph urn:x-topbraid:inferences containing any triples inferred using SHACL and SPIN rules. Note that this operation computes the inferences on-the-fly and may therefore be slow.\">TriG (with includes and inferences)</a>
        </ui:createLink>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Export asset collection as a graph plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:ExportPlugin
  a rdfs:Class ;
  rdfs:comment "Items to show up on the Export tab." ;
  rdfs:label "Export plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:ExportPlugins
  a teamwork:ExportPlugin ;
  rdfs:label "Export plugins" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ExportProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 27 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:ExportPlugin }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Export" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ExportSavedSearchPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex -99 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:SavedSearchExportPage }\">
    <teamwork:ActionLink arg:comment=\"Displays a list of all searches saved using the search form for this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }. Execution of the search will export the returned values in the chosen format\" arg:icon=\"lib/teamwork/build/images/teamwork/saved-search.svg\" arg:link=\"{= ?link }\" arg:title=\"Export using Saved Search\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Export using saved search plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:ExportTextFormats
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 1 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:group>
    <!--<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"teamwork:SavedSearchExportPage\">
<teamwork:ActionLink arg:comment=\"Exports the entire dataset in the selected format\" arg:icon=\"lib/teamwork/build/images/teamwork/saved-search.svg\" arg:link=\"{= ?link }\" arg:title=\"Export {= teamwork:projectLabel(?projectGraph) } in Text Format\"/>
</ui:createLink>-->
    <table>
        <tr>
            <td class=\"teamwork-action-link-icon\">
                <img alt=\"Saved Search\" height=\"48px\" src=\"lib/teamwork/build/images/teamwork/saved-search.svg\" width=\"48px\"/>
            </td>
            <td>
                <h2>Export {= teamwork:projectLabel(?projectGraph) } in Text Format</h2>
                <div class=\"teamwork-comment\">Exports entire {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } in the selected text format.</div>
                <ui:insertionPoint ui:pointId=\"body\"/>
            </td>
        </tr>
    </table>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Export asset collection in text format plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:ExternalGraphURIPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 6 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:setContext let:manager=\"{= teamwork:currentUserIsProjectManager(?projectGraph) &amp;&amp; (!teamwork:isReadOnlyProject(?projectGraph)) }\" let:oldValue=\"{= spl:objectInGraph(?projectGraph, teamwork:externalGraphURI, ?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= ?projectGraph }\" ui:silentTransactions=\"{= true }\">
    <ui:if ui:condition=\"{= ?manager || bound(?oldValue) }\">
        <teamwork:ActionLink arg:comment=\"The external graph URI is an optional alias for the asset collection identifier, used when exporting an asset collection as serialized RDF graph. It can also be used on import of interconnected RDF files when they are loaded into different asset collections - to appropriately re-route their owl:imports references.\" arg:faIcon=\"fas fa-external-link-alt\" arg:title=\"External Graph URI\">
            <div>
                <span>Graph URI:&nbsp;</span>
                <input class=\"form-control teamwork-external-graph-uri-manage-plugin-input\" disabled=\"{= IF((?manager &amp;&amp; (!bound(?tag))), ?none, &quot;disabled&quot;) }\" type=\"text\" value=\"{= ?oldValue }\">
                    <ui:handle arg:value=\"$(this).val() &amp;&amp; $(this).val() != '' ? '&lt;' + $(this).val() + '&gt;' : '&quot;&quot;'\" ui:event=\"onchange\">
                        <ui:setPropertyValue arg:property=\"{= teamwork:externalGraphURI }\" arg:value=\"{= IF((?value != &quot;&quot;), ?value, ?none) }\" ui:this=\"{= ?projectGraph }\"/>
                    </ui:handle>
                </input>
            </div>
        </teamwork:ActionLink>
    </ui:if>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "External graph URI plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:FavoriteProjectToggle
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:tag=\"{= COALESCE(?tag, teamwork:currentTag()) }\">
    <ui:group let:graph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\">
        <ui:if ui:condition=\"{= !teamwork:isSingletonProjectType(?projectType) }\">
            <ui:group let:item=\"{= teamwork:getItemFromUserBookmarks(?graph) }\">
                <span data-item=\"{= COALESCE(?item, ?nil) }\" data-selected=\"{= bound(?item) }\" data-uri=\"{= ?graph }\" id=\"favoriteProjectToggle\"/>
            </ui:group>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Favorite project toggle" ;
  rdfs:subClassOf teamwork:ProjectElements ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:FeedbackDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display comments about." ;
    ] ;
  ui:prototype """
<div id=\"div-feedback-dialog\" title=\"Comment on {= ui:label(?resource) }\">
    <div>
        <h3>Send a comment to the editors:</h3>
        <ui:group let:datatype=\"{= xsd:string }\" let:id=\"new-feedback_{= ui:uniqueId() }\">
            <table class=\"rich-text-editor\">
                <tr>
                    <td>
                        <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= ?datatype }\" arg:uid=\"{= ?uid }\"/>
                        <textarea class=\"form-control\" id=\"{= ?id }\" name=\"new-{= ?uid }\" rows=\"4\">{= ?object }</textarea>
                        <script>teamwork.initRichTextEditor('{= ?id }')</script>
                    </td>
                    <ui:if ui:condition=\"{= ?datatype = xsd:string }\">
                        <td class=\"swa-align-top\">
                            <swa:LangSelector arg:initialValue=\"{= lang(?object) }\" arg:uid=\"{= ?uid }\"/>
                        </td>
                    </ui:if>
                </tr>
            </table>
        </ui:group>
    </div>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Feedback dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
teamwork:Filter
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:appType ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:classSelectedEvent ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:qname ;
      spl:valueType xsd:string ;
      rdfs:comment "Optionally provide a qname value that can be used to limit the scope of potential GraphQL queries." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressAdvancedSearch ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressHierarchyViewButton ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressViewpointClass ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:viewPointClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultElementId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"filters-container\" let:isLocalSearch=\"{= teamwork:isAlwaysLocalSearch() }\" let:projectGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\" let:tag=\"{= teamwork:currentTag() }\" let:teamGraph=\"{= teamwork:currentTeamGraph() }\">
    <div class=\"filters\" data-app-name=\"{= ui:contextValue(&quot;swaAppName&quot;) }\" data-app-type=\"{= COALESCE(?appType, &quot;search&quot;) }\" data-base-graph=\"{= ui:currentQueryGraph() }\" data-class-selected-event=\"{= COALESCE(?classSelectedEvent, ?none) }\" data-container-id=\"{= COALESCE(?containerId, ?none) }\" data-graph-id=\"{= teamwork:graphIdFromGraph(ui:graphWithoutImports(ui:currentQueryGraph())) }\" data-has-advanced=\"{= COALESCE(?suppressAdvancedSearch, ?none) }\" data-is-manager=\"{= teamwork:currentUserHasPrivilege(?tag, teamwork:manager, ui:currentQueryGraph()) }\" data-local-search-disabled=\"{= COALESCE(bound(?isLocalSearch), false) }\" data-local-search-state=\"{= COALESCE(?isLocalSearch, swa:restoreSearchLocal(), false) }\" data-max-rows=\"{= COALESCE(teamwork:getUIMaxTableRows(), 5000) }\" data-project-graph=\"{= ?projectGraph }\" data-qname=\"{= COALESCE(?qname, ?none) }\" data-resource-type=\"{= ?resourceType }\" data-result-element-id=\"{= IF(bound(?resultElementId), ?resultElementId, ?none) }\" data-simple-search=\"{= IF(bound(?teamGraph), IF(spl:objectInGraph(?teamGraph, teamwork:enableSimpleSearchMode, ?teamGraph), &quot;checked&quot;, &quot;unchecked&quot;), ?none) }\" data-tag-id=\"{= IF(bound(?tag), teamwork:tagId(?tag), ?none) }\" id=\"{= COALESCE(?id, &quot;filters-app&quot;) }\">
        <div class=\"cp-preloader cp-preloader_relative\">
            <div class=\"cp-preloader__ball\"/>
        </div>
    </div>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressHierarchyViewButton) }\">
        <teamwork:HierarchyViewButton arg:buttonId=\"hierarchyView\" arg:resourceType=\"{= ?resourceType }\" arg:rootClass=\"{= ?rootClass }\" arg:treeMode=\"{= true }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressViewpointClass) }\">
        <teamwork:ClassTreeNavigationSelector arg:constrainRoot=\"{= bound(?viewPointClass) }\" arg:id=\"view-point-selector\" arg:rootClass=\"{= ?rootClass }\" arg:selected=\"{= COALESCE(?resourceType, ?rootClass) }\" arg:style=\"edg-filter\" arg:treeMode=\"{= false }\"/>
    </ui:if>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Filter" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:FilterSearchGadget
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:autoStart ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have the form submit its \"empty\" default search. This can be used to pre-populate any depending result widgets." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cacheId ;
      spl:valueType xsd:string ;
      rdfs:comment "An ID to activate caching." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:checkAllProperties ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have all properties (check boxes) checked by default, unless a search is restored or a search:defaultSearch exists." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraResourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "If specified, this type and its subclasses will also be shown in the type selection drop down. Use case is skos:Concept + skosxl:Label (extra)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:formId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id that shall be used for the new form. The system will generate a unique new id if left blank." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideCaseSensitivity ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to hide the check box for case sensitive search at the global text search." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideGlobalSearch ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress global text search. By default a text field will appear on the top of the form, allowing users to search across all string properties of the given resources. However, this may be slow and can therefore be disabled. If the class being searched over defines swa:textSearchProperties, then the text search will only operate on those explicitly enumerated properties - even if arg:hideGlobalSearch is true." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:localSearch ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to always use local search, false to always use global search, unspecified to allow the user to choose." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:plugin ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional plugin (subclass of swa:SearchFormPlugins) that will be inserted at the bottom of the search form." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:qname ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:searchButtonHandler ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of a JavaScript function to handle the click event for the Search button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:staticTitle ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to not have the gadget update the title of the surrounding window." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressActions ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, the drop down menu with actions will not appear." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressAdvancedSearch ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressExcludeSubclassesBox ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to never show the Exclude subclasses of X checkbox at the bottom." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressHierarchyViewButton ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressKeyPropertiesSelection ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disable the check boxes for selecting the result columns." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressLocalSearch ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have no local search option." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressNestedKeyPropertiesSelection ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressViewpointSelector ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:typeSelectable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to allow users to switch to the search class using a drop down box." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:fid=\"{= IF(bound(?formId), ?formId, ui:uniqueId()) }\" let:searchGraph=\"{= ui:createSessionGraph() }\">
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?staticTitle) }\">
        <swa:WindowTitleSetter arg:title=\"Search for {= ui:label(?resourceType) }\"/>
    </ui:if>
    <ui:setContext let:lid=\"{= IF(bound(?formId), CONCAT(?formId, &quot;LID&quot;), ui:uniqueId()) }\" ui:varName=\"mode\" ui:varValue=\"search\">
        <ui:if ui:condition=\"{= ?typeSelectable }\">
            <ui:loadable ui:loadId=\"{= ?fid }TypeSwitch\">
                <swa:SearchFormTypeSwitch arg:extraResourceType=\"{= ?extraResourceType }\" arg:fid=\"{= ?fid }\" arg:loadId=\"{= ?lid }\" arg:resourceType=\"{= ?resourceType }\" arg:selectedType=\"{= IF(bound(?restoreSearch), spl:object(?restoreSearch, search:rootType), ?none) }\"/>
            </ui:loadable>
        </ui:if>
        <ui:loadable class=\"ui-layout-content swa-search-form\" ui:loadId=\"{= ?lid }\">
            <ui:setContext ui:varName=\"resourceType\" ui:varValue=\"{= ?resourceType }\">
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNewTabLink }\">
                    <ui:setContext ui:varName=\"suppressRDFType\" ui:varValue=\"{= !?typeSelectable }\">
                        <ui:setContext ui:varName=\"swaRestoreSearch\" ui:varValue=\"{= COALESCE(?restoreSearch, spl:object(?resourceType, search:defaultSearch)) }\">
                            <ui:if ui:condition=\"{= bound(?restoreSearch) }\">
                                <script>{= ui:functionCall(\"swa.setWindowTitleIfExists\", ?fid, CONCAT(\"Search \", ui:label(?resourceType))) }</script>
                            </ui:if>
                            <ui:group let:resultsId=\"{= ?fid }_table-results\">
                                <teamwork:Filter arg:classSelectedEvent=\"{= ?classSelectedEvent }\" arg:containerId=\"{= ?containerId }\" arg:id=\"{= ?fid }_filters-app\" arg:qname=\"{= ?qname }\" arg:resourceType=\"{= ?resourceType }\" arg:resultElementId=\"{= ?resultsId }\" arg:rootClass=\"{= ?rootClass }\" arg:suppressAdvancedSearch=\"{= ?suppressAdvancedSearch }\" arg:suppressHierarchyViewButton=\"{= ?suppressHierarchyViewButton }\" arg:suppressViewpointClass=\"{= ?suppressViewpointSelector }\"/>
                                <ui:classView arg:frozen=\"{= ?frozen }\" arg:id=\"{= ?resultsId }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" ui:args=\"*\" ui:class=\"{= ?resourceType }\" ui:matchIds=\"datatables-results\" ui:resource=\"{= ?resourceType }\"/>
                            </ui:group>
                        </ui:setContext>
                    </ui:setContext>
                </ui:setContext>
            </ui:setContext>
        </ui:loadable>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """
""" ;
  rdfs:label "Filter search gadget" ;
  rdfs:subClassOf swa:SearchGadgets ;
.
teamwork:FindGQLSavedSearches
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "Search" ;
          ]
          [
            sp:varName "Author" ;
          ]
          [
            sp:varName "Type" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "query" ;
          ]
        ) ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "Search" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "Search" ;
          ]
          [
            sp:expression [
                a teamwork:userName ;
                arg:user [
                    sp:varName "creator" ;
                  ] ;
              ] ;
            sp:varName "Author" ;
          ]
          [
            sp:varName "Type" ;
          ]
          [
            sp:varName "query" ;
          ]
        ) ;
      sp:where (
          [
            sp:object graphql.search:GQLSearch ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "Type" ;
              ] ;
            sp:predicate search:rootType ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "creator" ;
              ] ;
            sp:predicate search:creator ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "query" ;
              ] ;
            sp:predicate graphql.search:queryTemplate ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "Search" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Find saved searches" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FindSavedSearches
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:groupBy (
          [
            sp:varName "Search" ;
          ]
          [
            sp:varName "Author" ;
          ]
          [
            sp:varName "Type" ;
          ]
          [
            sp:varName "creator" ;
          ]
        ) ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "Search" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "Search" ;
          ]
          [
            sp:expression [
                a teamwork:userName ;
                arg:user [
                    sp:varName "creator" ;
                  ] ;
              ] ;
            sp:varName "Author" ;
          ]
          [
            sp:varName "Type" ;
          ]
        ) ;
      sp:where (
          [
            sp:object search:Search ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "Type" ;
              ] ;
            sp:predicate search:rootType ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "creator" ;
              ] ;
            sp:predicate search:creator ;
            sp:subject [
                sp:varName "Search" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "Search" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Find saved searches" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:FunctionalPropertyBox
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject being edited or displayed." ;
    ] ;
  ui:prototype """
<ui:group let:maxRestriction=\"{= teamwork:maxCount1Restriction(?subject) }\" let:minRestriction=\"{= teamwork:minCount1Restriction(?subject) }\">
    <ui:group let:hasMaxCount=\"{= EXISTS {
        ?subject a owl:FunctionalProperty .
    } || bound(?maxRestriction) }\" let:maxLabel=\"at most one value permitted\" let:minLabel=\"at least one value required\">
        <ui:if ui:condition=\"{= swa:isViewMode() }\">
            <ui:if ui:condition=\"{= bound(?minRestriction) || ?hasMaxCount }\">
                <swa:LabeledElement arg:label=\"cardinality:\">
                    <ui:if ui:condition=\"{= bound(?minRestriction) }\">
                        <div class=\"swa-shifted-label\">{= ?minLabel }</div>
                    </ui:if>
                    <ui:if ui:condition=\"{= ?hasMaxCount }\">
                        <div class=\"swa-shifted-label\">{= ?maxLabel }</div>
                    </ui:if>
                </swa:LabeledElement>
            </ui:if>
        </ui:if>
        <ui:elseif ui:condition=\"{= swa:isEditMode() }\">
            <swa:LabeledElement arg:label=\"cardinality:\">
                <ui:group let:class=\"{= spl:object(?subject, rdfs:domain, ?class) }\" let:predicate=\"{= rdfs:subClassOf }\" let:uid=\"{= ui:uniqueId() }\">
                    <ui:if ui:condition=\"{= bound(?class) }\">
                        <ui:group let:new=\"{= IRI(CONCAT(&quot;urn:x-new-bnode:&quot;, ui:uniqueId())) }\" let:uid=\"{= ui:uniqueId() }\">
                            <swa:ObjectEditorHiddenFields arg:object=\"{= ?minRestriction }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
                            <ui:if ui:condition=\"{= bound(?minRestriction) }\">
                                <swa:ObjectEditorHiddenFields arg:groupId=\"minCount\" arg:newObject=\"{= ?minRestriction }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
                            </ui:if>
                            <ui:else>
                                <swa:ObjectEditorHiddenFields arg:groupId=\"minCount\" arg:newObject=\"{= owl:Restriction }\" arg:predicate=\"{= rdf:type }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-1\"/>
                                <swa:ObjectEditorHiddenFields arg:groupId=\"minCount\" arg:newObject=\"{= ?subject }\" arg:predicate=\"{= owl:onProperty }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-2\"/>
                                <swa:ObjectEditorHiddenFields arg:groupId=\"minCount\" arg:newObject=\"{= 1 }\" arg:predicate=\"{= owl:minCardinality }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-3\"/>
                                <swa:ObjectEditorHiddenFields arg:groupId=\"minCount\" arg:newObject=\"{= ?new }\" arg:predicate=\"{= rdfs:subClassOf }\" arg:subject=\"{= ?class }\" arg:uid=\"{= ?uid }-4\"/>
                            </ui:else>
                            <div class=\"checkbox swa-base-font\">
                                <input checked=\"{= IF(bound(?minRestriction), &quot;checked&quot;, ?none) }\" id=\"{= ?uid }-box\" type=\"checkbox\">{= ?minLabel }</input>
                                <script>$(\"#{= ?uid }-box\").change(function() {
if($(this).is(\":checked\")) {
swa.activateHiddenFields('minCount');
}
else {
swa.deactivateHiddenFields('minCount');
}
});</script>
                            </div>
                            <ui:if ui:condition=\"{= !bound(?minRestriction) }\">
                                <script>swa.deactivateHiddenFields('minCount')</script>
                            </ui:if>
                        </ui:group>
                        <ui:group let:uid=\"{= ui:uniqueId() }\">
                            <ui:if ui:condition=\"{= EXISTS {
                                ?subject a owl:FunctionalProperty .
                            } }\">
                                <swa:ObjectEditorHiddenFields arg:object=\"{= owl:FunctionalProperty }\" arg:predicate=\"{= rdf:type }\" ui:args=\"*\"/>
                                <div class=\"checkbox swa-base-font\">
                                    <input checked=\"checked\" name=\"new-{= ?uid }\" type=\"checkbox\" value=\"&lt;{= owl:FunctionalProperty }&gt;\">{= ?maxLabel }</input>
                                </div>
                            </ui:if>
                            <ui:else let:new=\"{= IRI(CONCAT(&quot;urn:x-new-bnode:&quot;, ui:uniqueId())) }\">
                                <ui:if ui:condition=\"{= bound(?maxRestriction) }\">
                                    <swa:ObjectEditorHiddenFields arg:object=\"{= ?maxRestriction }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
                                    <swa:ObjectEditorHiddenFields arg:groupId=\"maxCount\" arg:newObject=\"{= ?maxRestriction }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
                                </ui:if>
                                <ui:else>
                                    <swa:ObjectEditorHiddenFields arg:object=\"{= ?maxRestriction }\" arg:subject=\"{= ?class }\" ui:args=\"*\"/>
                                    <swa:ObjectEditorHiddenFields arg:groupId=\"maxCount\" arg:newObject=\"{= owl:Restriction }\" arg:predicate=\"{= rdf:type }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-1\"/>
                                    <swa:ObjectEditorHiddenFields arg:groupId=\"maxCount\" arg:newObject=\"{= ?subject }\" arg:predicate=\"{= owl:onProperty }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-2\"/>
                                    <swa:ObjectEditorHiddenFields arg:groupId=\"maxCount\" arg:newObject=\"{= 1 }\" arg:predicate=\"{= owl:maxCardinality }\" arg:subject=\"{= ?new }\" arg:uid=\"{= ?uid }-3\"/>
                                    <swa:ObjectEditorHiddenFields arg:groupId=\"maxCount\" arg:newObject=\"{= ?new }\" arg:predicate=\"{= rdfs:subClassOf }\" arg:subject=\"{= ?class }\" arg:uid=\"{= ?uid }-4\"/>
                                </ui:else>
                                <div class=\"checkbox swa-base-font\">
                                    <input checked=\"{= IF(?hasMaxCount, &quot;checked&quot;, ?none) }\" id=\"{= ?uid }-box\" type=\"checkbox\">{= ?maxLabel }</input>
                                    <script>$(\"#{= ?uid }-box\").change(function() {
if($(this).is(\":checked\")) {
swa.activateHiddenFields('maxCount');
}
else {
swa.deactivateHiddenFields('maxCount');
}
});</script>
                                </div>
                                <ui:if ui:condition=\"{= !?hasMaxCount }\">
                                    <script>swa.deactivateHiddenFields('maxCount')</script>
                                </ui:if>
                            </ui:else>
                        </ui:group>
                    </ui:if>
                </ui:group>
            </swa:LabeledElement>
        </ui:elseif>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Can be used to add or remove cardinality restriction on the domain class, on forms that edit properties. This is not a widget because it doesn't fit the usual patterns of one-row-per-value. In older versions this was using owl:FunctionalProperty to indicate maxCount=1, so this remains supported to a limited extent - new values will only use owl:maxCardinality." ;
  rdfs:subClassOf swa:FormElements ;
.
teamwork:GQLDefaultSearchJSON
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?node ?state ?template
                        WHERE {
                            ?Search graphql.search:defaultSearch ?node .
                            FILTER (?Search = ?resource) .
                            ?node graphql.search:appState ?state .
                            ?node graphql.search:queryTemplate ?template .
                        } }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?resource }\"/>
                        <swon:Value arg:name=\"appState\" arg:value=\"{= ?state }\"/>
                        <swon:Value arg:name=\"template\" arg:value=\"{= ?template }\"/>
                    </swon:Object>
                </ui:forEach>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?Search ?appState ?rootType ?Author ?template
                        WHERE {
                            ?Search graphql.search:defaultSearch ?node .
                            ?node search:rootType ?rootType .
                            ?node search:creator ?creator .
                            FILTER isIRI(?Search1) .
                            BIND (smf:userDisplayName(?creator) AS ?Author) .
                        }
                        ORDER BY (ui:label(?Search)) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?uri }\"/>
                        <swon:Value arg:name=\"Search\" arg:value=\"{= ?Search }\"/>
                        <swon:Value arg:name=\"Type\" arg:value=\"{= ?Type }\"/>
                        <swon:Value arg:name=\"Author\" arg:value=\"{= ?Author }\"/>
                        <swon:Value arg:name=\"queryType\" arg:value=\"SPARQL\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "GraphQL Saved searches dialog" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GQLSavedSearchJSON
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?resource ?state ?template
                        WHERE {
                            ?resource a graphql.search:GQLSearch .
                            ?resource graphql.search:appState ?state .
                            ?resource graphql.search:queryTemplate ?template .
                        } }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?resource }\"/>
                        <swon:Value arg:name=\"appState\" arg:value=\"{= ?state }\"/>
                        <swon:Value arg:name=\"template\" arg:value=\"{= ?template }\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "GraphQL Saved search" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GQLSavedSearchesJSON
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{#
                        SELECT (?Search1 AS ?uri) ?Type ?Search ?Author
                        WHERE {
                            ?Search1 a graphql.search:GQLSearch .
                            ?Search1 search:rootType ?Type1 .
                            ?Search1 search:creator ?creator .
                            FILTER isIRI(?Search1) .
                            BIND (smf:userDisplayName(?creator) AS ?Author) .
                            BIND (ui:label(?Type1) AS ?Type) .
                            BIND (ui:label(?Search1) AS ?Search) .
                        }
                        ORDER BY (ui:label(?Search)) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?uri }\"/>
                        <swon:Value arg:name=\"Search\" arg:value=\"{= ?Search }\"/>
                        <swon:Value arg:name=\"Type\" arg:value=\"{= ?Type }\"/>
                        <swon:Value arg:name=\"Author\" arg:value=\"{= ?Author }\"/>
                        <swon:Value arg:name=\"queryType\" arg:value=\"GQL\"/>
                    </swon:Object>
                </ui:forEach>
                <ui:forEach ui:resultSet='{#
                        SELECT (?Search1 AS ?uri) ?Search ?Type ?Author
                        WHERE {
                            ?Search1 a search:Search .
                            ?Search1 search:rootType ?Type1 .
                            ?Search1 search:creator ?creator .
                            FILTER isIRI(?Search1) .
                            BIND (smf:userDisplayName(?creator) AS ?Author) .
                            BIND (ui:label(?Type1) AS ?Type) .
                            BIND (ui:label(?Search1) AS ?Search) .
                            BIND (CONCAT(xsd:string(?Search1), \" \", xsd:string(?Type1)) AS ?uris) .
                        }
                        ORDER BY (ui:label(?Search)) }'>
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?uri }\"/>
                        <swon:Value arg:name=\"Search\" arg:value=\"{= ?Search }\"/>
                        <swon:Value arg:name=\"Type\" arg:value=\"{= ?Type }\"/>
                        <swon:Value arg:name=\"Author\" arg:value=\"{= ?Author }\"/>
                        <swon:Value arg:name=\"queryType\" arg:value=\"SPARQL\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "GraphQL Saved searches dialog" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GarbageCollectUserPermissions
  a ui:Method ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                GRAPH ui:tempGraph {
                    ?user a sioc:UserAccount .
                } .
            }
            WHERE {
                rdf:nil smf:user ?user .
            } }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?asset ?role ?user
            WHERE {
                VALUES ?role {
                    teamwork:viewer
                    teamwork:editor
                } .
                ?asset ?role ?user .
                FILTER smf:isUserAccount(?user) .
                FILTER NOT EXISTS {
                    GRAPH ui:tempGraph {
                        ?user a sioc:UserAccount .
                    } .
                } .
            } }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?asset ?role ?user .
                }
                WHERE {
                } }\"/>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Walks through all users enumerated as an EVN role in the current TCH graph and deletes those role triples where the user no longer exists as a known user to the system." ;
  rdfs:label "Garbage collect user permissions" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:GeneralPlugin
  a rdfs:Class ;
  rdfs:comment "These plugins show up on the Settings tab." ;
  rdfs:label "Settings plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:GeneralPlugins
  a teamwork:GeneralPlugin ;
  ui:abstract true ;
  rdfs:label "General plugins" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:GeneralProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 10 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<div let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <teamwork:ProjectWarningsSection ui:args=\"*\"/>
    <teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:GeneralPlugin }\" ui:args=\"*\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Settings" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
.
teamwork:GenerateJSONforAvailableGraphsInclusion
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "The keyword to add." ;
    ] ;
  ui:prototype """
<ui:group>
    <swon:Value arg:name=\"availableGraphs\">
        <swon:Array>
            <ui:setContext let:template=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?projectGraph), ui:graph) }\">
                <ui:call arg:predicate=\"{= edg:permittedProjectType }\" arg:projectType=\"{= ?projectType }\" ui:template=\"{= teamwork:GetGraphProjectTypes }\" ui:varName=\"permittedProjectTypes\">
                    <teamwork:GenerateJSONforGraphsOfGivenType arg:graphSet=\"{= ?permittedProjectTypes }\" arg:name=\"permitted\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?projectType }\"/>
                </ui:call>
                <ui:call arg:predicate=\"{= edg:requiredProjectType }\" arg:projectType=\"{= ?projectType }\" ui:template=\"{= teamwork:GetGraphProjectTypes }\" ui:varName=\"requiredProjectTypes\">
                    <teamwork:GenerateJSONforGraphsOfGivenType arg:graphSet=\"{= ?requiredProjectTypes }\" arg:name=\"required\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?projectType }\"/>
                </ui:call>
            </ui:setContext>
            <ui:forEach ui:resultSet=\"{= ?resultSet }\">
                <ui:group let:type=\"{= teamwork:getProjectType(?graph) }\">
                    <ui:if ui:condition=\"{= NOT EXISTS {
                        ?projectGraph owl:imports ?graph .
                    } &amp;&amp; (!STRSTARTS(str(?graph), &quot;urn:x-evn-pub:&quot;)) }\">
                        <ui:if ui:condition=\"{= !teamwork:isNotImportable(?graph) }\">
                            <ui:if ui:condition=\"{= !bound(?type) }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?graph }\"/>
                                    <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                                    <swon:Value arg:name=\"projectType\" arg:value=\"Other\"/>
                                </swon:Object>
                            </ui:if>
                        </ui:if>
                    </ui:if>
                </ui:group>
            </ui:forEach>
        </swon:Array>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate JSON for available graphs inclusion" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GenerateJSONforGraphsOfGivenType
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= spr:rowCount(?graphSet) &gt; 0 }\">
        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?graphSet }\">
            <ui:call arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?graphType }\" ui:template=\"{= teamwork:GraphsOfGivenTypeUnderTeamworkControl }\">
                <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <ui:if ui:condition=\"{= NOT EXISTS {
                            ?projectGraph owl:imports ?graph .
                        } }\">
                            <swon:Object let:type=\"{= teamwork:getProjectType(?graph) }\">
                                <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ui:encodeURL(str(?graph)) }\"/>
                                <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                                <ui:if ui:condition=\"{= bound(?type) &amp;&amp; (!teamwork:isSingletonProjectType(?type)) }\">
                                    <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                                </ui:if>
                                <ui:elseif ui:condition=\"{= bound(?type) &amp;&amp; teamwork:isSingletonProjectType(?type) }\">
                                    <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:genericSingletonProjectTypeLabel() }\"/>
                                </ui:elseif>
                                <ui:else>
                                    <swon:Value arg:name=\"projectType\" arg:value=\"{= false }\"/>
                                </ui:else>
                                <ui:if ui:condition=\"{= teamwork:isMandatoryImport(?graph, ?projectType) }\">
                                    <swon:Value arg:name=\"mandatory\" arg:value=\"{= true }\"/>
                                </ui:if>
                            </swon:Object>
                        </ui:if>
                    </ui:forEach>
                </ui:if>
            </ui:call>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:GenerateJSONforImportedGraphs
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "The keyword to add." ;
    ] ;
  ui:prototype """
<ui:group>
    <swon:Value arg:name=\"importedGraphs\">
        <swon:Array>
            <ui:forEach ui:resultSet=\"{= ?resultSet }\">
                <ui:if ui:condition=\"{= EXISTS {
                    ?projectGraph owl:imports ?graph .
                } }\">
                    <ui:if ui:condition=\"{= !teamwork:isNotImportable(?graph) }\">
                        <swon:Object let:type=\"{= teamwork:getProjectType(?graph) }\">
                            <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?graph }\"/>
                            <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                            <ui:if ui:condition=\"{= bound(?type) }\">
                                <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                            </ui:if>
                            <ui:else>
                                <swon:Value arg:name=\"projectType\" arg:value=\"{= false }\"/>
                            </ui:else>
                            <ui:if ui:condition=\"{= teamwork:isMandatoryImport(?graph, ?projectType) }\">
                                <swon:Value arg:name=\"mandatory\" arg:value=\"{= true }\"/>
                            </ui:if>
                        </swon:Object>
                    </ui:if>
                </ui:if>
            </ui:forEach>
        </swon:Array>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate JSON for imported graphs" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GenerateJSONforRequiredProjectTypeGraphsInclusion
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The keyword to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "The keyword to add." ;
    ] ;
  ui:prototype """
<ui:group>
    <swon:Value arg:name=\"requiredGraphs\">
        <swon:Array>
            <ui:setContext let:template=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?projectGraph), ui:graph) }\">
                <ui:call arg:predicate=\"{= edg:requiredProjectType }\" arg:projectType=\"{= ?projectType }\" ui:template=\"{= teamwork:GetGraphProjectTypes }\" ui:varName=\"requiredProjectTypes\">
                    <teamwork:GenerateJSONforGraphsOfGivenType arg:graphSet=\"{= ?requiredProjectTypes }\" arg:name=\"required\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?projectType }\"/>
                </ui:call>
            </ui:setContext>
            <ui:forEach ui:resultSet=\"{= ?resultSet }\">
                <ui:if ui:condition=\"{= EXISTS {
                    ?projectGraph owl:imports ?graph .
                } }\">
                    <ui:if ui:condition=\"{= !teamwork:isNotImportable(?graph) }\">
                        <swon:Object let:type=\"{= teamwork:getProjectType(?graph) }\">
                            <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?graph }\"/>
                            <swon:Value arg:name=\"projectLabel\" arg:value=\"{= ?label }\"/>
                            <ui:if ui:condition=\"{= bound(?type) }\">
                                <swon:Value arg:name=\"projectType\" arg:value=\"{= teamwork:singularProjectTypeLabel(?type) }\"/>
                            </ui:if>
                            <ui:else>
                                <swon:Value arg:name=\"projectType\" arg:value=\"{= false }\"/>
                            </ui:else>
                            <ui:if ui:condition=\"{= teamwork:isMandatoryImport(?graph, ?projectType) }\">
                                <swon:Value arg:name=\"mandatory\" arg:value=\"{= true }\"/>
                            </ui:if>
                        </swon:Object>
                    </ui:if>
                </ui:if>
            </ui:forEach>
        </swon:Array>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Generate JSON for required project type graphs for inclusion" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GetAssetBookmarks
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<teamwork:GetBookmarks arg:itemType=\"{= teamwork:AssetBookmark }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Get asset bookmarks" ;
  rdfs:subClassOf teamwork:GetBookmarks ;
.
teamwork:GetBookmarks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:bookmarks ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdfs:Class ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:bookmarks=\"{= COALESCE(?bookmarks, teamwork:getUserBookmarks()) }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:group letrs:items=\"{#
                SELECT ?item ?resource ?created ?queryGraph ?graphId ?projectGraph
                WHERE {
                    ?user teamwork:bookmarks ?bookmarks .
                    ?bookmarks teamwork:hasItem ?item .
                    ?item a ?itemType .
                    ?item teamwork:hasResource ?resource .
                    ?item dcterms:created ?created .
                    ?item teamwork:queryGraph ?queryGraph .
                    BIND (teamwork:graphIdFromGraph(ui:graphWithoutImports(?queryGraph)) AS ?graphId) .
                    BIND (teamwork:masterGraph(?graphId) AS ?projectGraph) .
                    FILTER smf:canRead(?projectGraph) .
                } }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:forEach ui:resultSet=\"{= ?items }\">
                            <swon:Object>
                                <swon:Value arg:name=\"item\" arg:value=\"{= ?item }\"/>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= ?resource }\"/>
                                <swon:Value arg:name=\"created\" arg:value=\"{= ?created }\"/>
                                <swon:Value arg:name=\"queryGraph\" arg:value=\"{= ?queryGraph }\"/>
                                <ui:if ui:condition=\"{= spif:graphExists(?projectGraph) }\">
                                    <ui:group let:tagId=\"{= teamwork:tagIdFromTagGraph(ui:graphWithoutImports(?queryGraph)) }\">
                                        <ui:group let:tag=\"{= IF(bound(?tagId), teamwork:tagById(?tagId), ?nil) }\">
                                            <ui:group let:link=\"{= teamwork:openEditorLink(?resource, ?projectGraph, ?tag) }\">
                                                <swon:Value arg:name=\"link\" arg:value=\"{= ?link }\"/>
                                                <ui:setContext ui:queryGraph=\"{= ?queryGraph }\">
                                                    <swon:Value arg:name=\"queryGraphLabel\" arg:value=\"{= CONCAT(teamwork:projectLabel(?projectGraph), IF(bound(?tag), CONCAT(&quot;:&quot;, teamwork:tagLabel(?projectGraph, ?tag)), &quot;&quot;)) }\"/>
                                                    <swon:Value arg:name=\"graphLink\" arg:value=\"{= teamwork:editorLink(?projectGraph, ?nil, ?tag) }\"/>
                                                    <swon:Value arg:name=\"graphIcon\" arg:value=\"governance-icon icon-block {= spl:objectInGraph(teamwork:getProjectType(?projectGraph), edg.v:icon, ui:graph) }\"/>
                                                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?resource) }\"/>
                                                    <ui:if ui:condition=\"{= COALESCE((!smf:isBound(spl:object(?resource, rdf:type))), true) }\">
                                                        <swon:Value arg:name=\"wasRemoved\" arg:value=\"true\"/>
                                                    </ui:if>
                                                </ui:setContext>
                                            </ui:group>
                                        </ui:group>
                                    </ui:group>
                                </ui:if>
                                <ui:else>
                                    <swon:Value arg:name=\"queryGraphLabel\" arg:value=\"{= ?projectGraph }\"/>
                                    <swon:Value arg:name=\"wasRemoved\" arg:value=\"true\"/>
                                </ui:else>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:group>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Get bookmarks" ;
  rdfs:subClassOf teamwork:BookmarkServices ;
.
teamwork:GetCollectionBookmarks
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:bookmarks=\"{= COALESCE(?bookmarks, teamwork:getUserBookmarks()) }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:group letrs:items=\"{#
                SELECT ?item ?resource ?created ?graphId ?projectGraph
                WHERE {
                    ?user teamwork:bookmarks ?bookmarks .
                    ?bookmarks teamwork:hasItem ?item .
                    ?item a teamwork:CollectionBookmark .
                    ?item teamwork:hasResource ?resource .
                    ?item dcterms:created ?created .
                    BIND (teamwork:graphIdFromGraph(ui:graphWithoutImports(?resource)) AS ?graphId) .
                    BIND (teamwork:masterGraph(?graphId) AS ?projectGraph) .
                    FILTER teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, teamwork:teamGraph(?projectGraph)) .
                } }\">
            <swon:Object>
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:forEach ui:resultSet=\"{= ?items }\">
                            <ui:group let:tagId=\"{= teamwork:tagIdFromTagGraph(ui:graphWithoutImports(?resource)) }\">
                                <ui:group let:tag=\"{= IF(bound(?tagId), teamwork:tagById(?tagId), ?nil) }\">
                                    <ui:group let:link=\"{= teamwork:editorLink(?projectGraph, ?nil, ?tag) }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"item\" arg:value=\"{= ?item }\"/>
                                            <swon:Value arg:name=\"uri\" arg:value=\"{= ?resource }\"/>
                                            <swon:Value arg:name=\"created\" arg:value=\"{= ?created }\"/>
                                            <swon:Value arg:name=\"link\" arg:value=\"{= ?link }\"/>
                                            <ui:if ui:condition=\"{= !spif:graphExists(?projectGraph) }\">
                                                <swon:Value arg:name=\"wasRemoved\" arg:value=\"true\"/>
                                            </ui:if>
                                            <ui:if ui:condition=\"{= bound(?tag) }\">
                                                <swon:Value arg:name=\"label\" arg:value=\"{= teamwork:tagLabel(?projectGraph, ?tag) }\"/>
                                            </ui:if>
                                            <ui:else>
                                                <swon:Value arg:name=\"label\" arg:value=\"{= teamwork:projectLabel(?projectGraph) }\"/>
                                            </ui:else>
                                            <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                                                <swon:Value arg:name=\"icon\" arg:value=\"governance-icon icon-block {= spl:object(teamwork:getProjectType(?projectGraph), edg.v:icon) }\"/>
                                            </ui:setContext>
                                        </swon:Object>
                                    </ui:group>
                                </ui:group>
                            </ui:group>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </swon:Object>
        </ui:group>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Get collection bookmarks" ;
  rdfs:subClassOf teamwork:GetBookmarks ;
.
teamwork:GetEditorLinkForResource
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to navigate to." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:unionGraphForCurrentUser() }\">
    <swon:Object let:graph=\"{= smf:definedIn(?resource) }\">
        <swon:Value arg:name=\"link\" arg:value=\"{= teamwork:editorLink(?graph, ?resource) }\"/>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Get editor link for resource" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GetGraphProjectTypes
  a spin:SelectTemplate ;
  a rdfs:Class ;
  a sh:Shape ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "graphType" ;
          ]
          [
            sp:varName "graphTypeLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "graphType" ;
              ] ;
            sp:predicate [
                sp:varName "predicate" ;
              ] ;
            sp:subject [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "graphType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphTypeLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
    ] ;
  spin:private true ;
  rdfs:label "Get permitted or required graph project types" ;
  rdfs:subClassOf spin:SelectTemplate ;
.
teamwork:GetHomeVocabularyService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:defaultGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A default to use if the resource is not defined in a collection." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource in question." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object let:homeVocabulary=\"{= smf:definedIn(?resource) }\">
    <ui:if ui:condition=\"{= bound(?homeVocabulary) }\">
        <ui:if ui:condition=\"{= teamwork:hasTeamGraph(URI(?homeVocabulary)) }\">
            <swon:Value arg:name=\"homeVocabulary\" arg:value=\"{= ?homeVocabulary }\"/>
        </ui:if>
        <ui:else>
            <swon:Value arg:name=\"homeVocabulary\" arg:value=\"{= ?defaultGraph }\"/>
        </ui:else>
    </ui:if>
    <ui:else>
        <swon:Value arg:name=\"error\" arg:value=\"Error: Could not find home vocabulary for resource {= ?resource }\"/>
    </ui:else>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "Takes a resource URI as input and returns the URI of the collection where it is defined.  If it can't be found, an error is returned." ;
  rdfs:subClassOf teamwork:Service ;
.
teamwork:GetMatchingProjectPlugins
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "index" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "plugin" ;
          ]
          [
            sp:varName "validForTags" ;
          ]
          [
            sp:varName "index" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "pluginType" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "plugin" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object true ;
                            sp:predicate teamwork:disabledProjectPlugin ;
                            sp:subject [
                                sp:varName "plugin" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          sp:object [
                              sp:varName "plugin" ;
                            ] ;
                          sp:predicate teamwork:projectPlugin ;
                          sp:subject [
                              sp:varName "projectType" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          sp:object [
                              sp:varName "expr" ;
                            ] ;
                          sp:predicate teamwork:pluginValidExpression ;
                          sp:subject [
                              sp:varName "plugin" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a spin:eval ;
                              sp:arg1 [
                                  sp:varName "expr" ;
                                ] ;
                              sp:arg2 arg:projectType ;
                              sp:arg3 [
                                  sp:varName "projectType" ;
                                ] ;
                              sp:arg4 arg:projectGraph ;
                              sp:arg5 [
                                  sp:varName "projectGraph" ;
                                ] ;
                              sp:arg6 arg:tag ;
                              sp:arg7 [
                                  sp:varName "tag" ;
                                ] ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "plugin" ;
                              ] ;
                            sp:predicate teamwork:disabledProjectPlugin ;
                            sp:subject [
                                sp:varName "projectType" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:teamGraph ;
                      sp:arg1 [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "teamGraph" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a uix:isAdmin ;
                        ] ;
                      sp:arg2 [
                          a sp:notExists ;
                          sp:elements (
                              [
                                a sp:NamedGraph ;
                                sp:elements (
                                    [
                                      sp:object [
                                          sp:varName "plugin" ;
                                        ] ;
                                      sp:predicate teamwork:projectPluginForAdminsOnly ;
                                      sp:subject [
                                          sp:varName "teamGraph" ;
                                        ] ;
                                    ]
                                  ) ;
                                sp:graphNameNode [
                                    sp:varName "teamGraph" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "plugin" ;
                        ] ;
                      sp:arg2 teamwork:pluginRequiresRole ;
                    ] ;
                  sp:variable [
                      sp:varName "requiredRole" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:not ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "requiredRole" ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a teamwork:currentUserHasPrivilege ;
                          arg:governedResource [
                              a sp:coalesce ;
                              sp:arg1 [
                                  sp:varName "tag" ;
                                ] ;
                              sp:arg2 [
                                  sp:varName "teamGraph" ;
                                ] ;
                            ] ;
                          arg:role [
                              sp:varName "requiredRole" ;
                            ] ;
                          arg:teamGraph [
                              sp:varName "teamGraph" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:not ;
                      sp:arg1 [
                          a sp:coalesce ;
                          sp:arg1 [
                              a spl:object ;
                              sp:arg1 [
                                  sp:varName "plugin" ;
                                ] ;
                              sp:arg2 teamwork:invalidForMaster ;
                            ] ;
                          sp:arg2 false ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "validForMaster" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          sp:varName "validForMaster" ;
                        ] ;
                      sp:arg2 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "tag" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "plugin" ;
                            ] ;
                          sp:arg2 teamwork:validForTags ;
                        ] ;
                      sp:arg2 false ;
                    ] ;
                  sp:variable [
                      sp:varName "validForTags" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:or ;
                          sp:arg1 [
                              a sp:not ;
                              sp:arg1 [
                                  a swa:falseOrUnbound ;
                                  arg:value [
                                      sp:varName "withInvalidForTags" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:or ;
                              sp:arg1 [
                                  sp:varName "validForTags" ;
                                ] ;
                              sp:arg2 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "tag" ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a teamwork:isACResult ;
                          arg:tag [
                              sp:varName "tag" ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "plugin" ;
                            ] ;
                          sp:arg2 teamwork:validForACResults ;
                        ] ;
                      sp:arg2 false ;
                    ] ;
                  sp:variable [
                      sp:varName "validForACResults" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:or ;
                          sp:arg1 [
                              sp:varName "validForACResults" ;
                            ] ;
                          sp:arg2 [
                              a sp:not ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "tag" ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:not ;
                          sp:arg1 [
                              a teamwork:isACResult ;
                              arg:tag [
                                  sp:varName "tag" ;
                                ] ;
                            ] ;
                        ] ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "plugin" ;
                            ] ;
                          sp:arg2 teamwork:pluginIndex ;
                        ] ;
                      sp:arg2 0 ;
                    ] ;
                  sp:variable [
                      sp:varName "index" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The current tag/working copy." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withInvalidForTags ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, plugins that are not valid for working copies will still be included in the result if we are in a working copy, with result variable ?validForTags set to false." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pluginType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The rdf:type of plugins to match against." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The type of project." ;
    ] ;
  spin:private true ;
  rdfs:label "Get matching project plugins" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:GetSourceCodeService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showIncluded ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the source code of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext let:queryGraph=\"{= ui:currentQueryGraph() }\" ui:queryGraph=\"{= ui:tempGraphSourceCode }\">
    <teamwork:collectTriplesForSubject arg:queryGraph=\"{= IF(COALESCE(?showIncluded, false), ui:graphWithImports(?queryGraph), ?queryGraph) }\" arg:subject=\"{= ?resource }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?namespace ?prefix
            WHERE {
                GRAPH ?queryGraph {
                    ?namespace spif:prefix ?prefix .
                } .
            } }\">
        <ui:setPrefix ui:namespace=\"{= ?namespace }\" ui:prefix=\"{= ?prefix }\"/>
    </ui:forEach>
    <ui:group let:source=\"{= smf:convertRDFToText() }\">
        <swon:Object>
            <swon:Value arg:name=\"source\" arg:value=\"{= ?source }\"/>
        </swon:Object>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Get source code service" ;
  rdfs:subClassOf teamwork:Service ;
.
teamwork:GraphInitDataJSON
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:mainClassOverride ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The value to return for mainClass." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <teamwork:GraphInitDataJSONPart ui:args=\"*\"/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "Produces JSON needed to initialize a TBApplication with things like languages and namespace prefixes." ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GraphInitDataJSONPart
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:mainClassOverride ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The value to return for mainClass." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:tag=\"{= teamwork:currentTag() }\">
    <swon:Value arg:name=\"config\">
        <swon:Object>
            <swon:Value arg:name=\"enableSPARQLUpdates\" arg:value=\"{= smf:configParam(&quot;enableSPARQLUpdates&quot;) }\"/>
            <swon:Value arg:name=\"maxRowCount\" arg:value=\"{= smf:configParam(&quot;uiMaxTableRows&quot;) }\"/>
            <swon:Value arg:name=\"dpCreateOption\" arg:value=\"{= tbl:dpCreateOption() }\"/>
            <swon:Value arg:name=\"disableLuceneIndexing\" arg:value=\"{= smf:configParam(&quot;disableLuceneIndexing&quot;) }\"/>
            <swon:Value arg:name=\"allowAnonymous\" arg:value=\"{= COALESCE(smf:configParam(&quot;allowAnonymous&quot;), false) }\"/>
            <swon:Value arg:name=\"prefersOldEditor\" arg:value=\"{= smf:configParam(&quot;teamworkEditorChoices&quot;) }\"/>
        </swon:Object>
    </swon:Value>
    <swon:Value arg:name=\"defaultNamespace\" arg:value=\"{= swa:getDefaultNamespace() }\"/>
    <swon:Value arg:name=\"editorLink\" arg:value=\"{= teamwork:editorLink(?projectGraph, ?tag) }\"/>
    <swon:Value arg:name=\"graphql\" arg:value=\"{= teamwork:graphQLPageLink(?projectGraph, ?tag) }\"/>
    <swon:Value arg:name=\"labelProperties\">
        <swon:RSArray arg:resultSet=\"{#
                SELECT ?uri
                WHERE {
                    ?prop (rdfs:subPropertyOf)* rdfs:label .
                    BIND (str(?prop) AS ?uri) .
                }
                ORDER BY (?uri) }\"/>
    </swon:Value>
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <swon:Value arg:name=\"graphType\" arg:value=\"{= ?projectType }\"/>
        <swon:Value arg:name=\"graphTypePluralLabel\" arg:value=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\"/>
        <swon:Value arg:name=\"graphTypeSingularLabel\" arg:value=\"{= teamwork:singularProjectTypeLabel(?projectType) }\"/>
        <swon:Value arg:name=\"graphTypeType\" arg:value=\"{= spl:objectInGraph(?projectType, teamwork:vocabularyType, ui:graph) }\"/>
        <swon:Value arg:name=\"shapesGraph\" arg:value=\"{= EXISTS {
            GRAPH ui:graph {
                ?projectType teamwork:isOntologyProjectType true .
            } .
        } }\"/>
        <swon:Value arg:name=\"skippedResultsGenerators\">
            <swon:RSArray arg:resultSet=\"{#
                    SELECT ?id
                    WHERE {
                        GRAPH ui:graph {
                            ?projectType teamwork:skippedResultsGenerator ?id .
                        } .
                    } }\"/>
        </swon:Value>
        <swon:Value arg:name=\"readOnly\" arg:value=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen() }\"/>
        <swon:Value arg:name=\"rootClass\" let:rootClass=\"{= teamwork:getRootClass(?projectGraph) }\">
            <swon:Object>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?rootClass) }\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"{= ?rootClass }\"/>
            </swon:Object>
        </swon:Value>
        <swon:Value arg:name=\"mainClass\" let:mainClass=\"{= COALESCE(?mainClassOverride, teamwork:getMainClass(?projectGraph)) }\">
            <ui:if ui:condition=\"{= bound(?mainClass) }\">
                <swon:Object>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?mainClass) }\"/>
                    <swon:Value arg:name=\"uri\" arg:value=\"{= ?mainClass }\"/>
                </swon:Object>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= ?projectType = taxonomies:ProjectType }\">
                    <swon:Object let:mainClass=\"{= skos:Concept }\">
                        <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?mainClass) }\"/>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?mainClass }\"/>
                    </swon:Object>
                </ui:if>
                <ui:else>
                    <swon:Null/>
                </ui:else>
            </ui:else>
        </swon:Value>
    </ui:group>
    <swon:Value arg:name=\"jiraConfigured\" arg:value=\"{= tracker:isJIRAConfiguredForProject(?projectGraph) }\"/>
    <swon:Value arg:name=\"isManager\" arg:value=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\"/>
    <swon:Value arg:name=\"isExplorer\" arg:value=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\"/>
    <swon:Value arg:name=\"canCreateProjects\" arg:value=\"{= teamwork:canCreateProject() }\"/>
    <swon:Value arg:name=\"canCreateTags\" arg:value=\"{= teamwork:currentUserCanCreateTags(?projectGraph) }\"/>
    <swon:Value arg:name=\"masterGraph\" arg:value=\"{= ?projectGraph }\"/>
    <swon:Value arg:name=\"masterGraphLabel\" arg:value=\"{= teamwork:graphLabel(?projectGraph) }\"/>
    <swon:Value arg:name=\"workflowId\" arg:value=\"{= teamwork:currentTagId() }\"/>
    <swon:Value arg:name=\"queryGraphURI\" arg:value=\"{= ui:currentQueryGraph() }\"/>
    <swon:Value arg:name=\"taxonomyTreeOrderByExpr\" arg:value=\"{= spl:object(?projectGraph, teamwork:taxonomyTreeOrderByExpr) }\"/>
    <swon:Value arg:name=\"uriPolicyConstructMethod\" arg:value=\"{= swa:getURIConstructMethod() }\"/>
    <swon:Value arg:name=\"uriPolicyReadOnly\" arg:value=\"{= swa:getUserCannotModifyURI() }\"/>
    <swon:Value arg:name=\"user\">
        <swon:Object>
            <swon:Value arg:name=\"label\" arg:value=\"{= smf:currentUserName() }\"/>
            <swon:Value arg:name=\"uri\" arg:value=\"{= smf:userWithName(smf:currentUserName()) }\"/>
        </swon:Object>
    </swon:Value>
    <swon:Value arg:name=\"explorerUsersCanUseSPARQLEndpoint\" arg:value=\"{= COALESCE(smf:configParam(&quot;explorerUsersCanUseSPARQLEndpoint&quot;), false) }\"/>
    <swon:Value arg:name=\"langs\">
        <swon:RSArray arg:resultSet='{#
                SELECT DISTINCT ?lang
                WHERE {
                    {
                        GRAPH ui:graph {
                            BIND (COALESCE(spl:object(swa:LangSelector, swa:customLanguages), spl:object(swa:LangSelector, swa:defaultLanguages)) AS ?langs) .
                        } .
                        ?lang spif:split ( ?langs \" \" ) .
                    } .
                    FILTER (?lang != \"\") .
                } }'/>
    </swon:Value>
    <swon:Value arg:name=\"governanceRoles\" let:graph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
        <swon:RSObjectArray arg:resultSet=\"{#
                SELECT ?uri ?label
                WHERE {
                    GRAPH ?graph {
                        rdf:nil edg:workflowParticipantProperties ?uri .
                        BIND (ui:label(?uri) AS ?label) .
                    } .
                }
                ORDER BY (?label) }\"/>
    </swon:Value>
    <swon:Value arg:name=\"prefixes\">
        <swon:Object>
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?prefix ?ns
                    WHERE {
                        ?ns spif:prefix ?prefix .
                    } }\">
                <swon:Value arg:name=\"{= ?ns }\" arg:value=\"{= ?prefix }\"/>
            </ui:forEach>
        </swon:Object>
    </swon:Value>
    <ui:setContext let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:userName=\"{= smf:currentUserName() }\" ui:queryGraph=\"{= teamwork:userDataGraph() }\">
        <swon:Value arg:name=\"defaultSystemLayoutName\" arg:value=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:defaultLayout, ui:graph), &quot;TabularEditor&quot;) }\"/>
        <ui:group let:json=\"{#
                SELECT ?json
                WHERE {
                    ?layout teamwork:defaultForProjectType ?projectType .
                    ?layout a teamwork:Layout .
                    ?layout teamwork:creator ?creator .
                    ?layout teamwork:json ?json .
                    BIND (spl:object(?layout, teamwork:private) AS ?private) .
                    FILTER ((!?private) || (?creator = ?userName)) .
                }
                ORDER BY (?private) }\">
            <ui:if ui:condition=\"{= bound(?json) }\">
                <swon:Value arg:name=\"defaultLayout\" arg:value=\"{= ?json }\"/>
            </ui:if>
        </ui:group>
    </ui:setContext>
    <ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <swon:Value arg:name=\"noInstancesMode\" arg:value=\"{= spl:objectInGraph(?teamGraph, ontologyprojects:noInstancesMode, ?teamGraph) }\"/>
    </ui:group>
    <ui:if ui:condition=\"{= bound(?tag) }\">
        <swon:Value arg:name=\"editedResource\" arg:value=\"{= spl:objectInGraph(?tag, teamwork:editedResource, teamwork:teamGraph(?projectGraph)) }\"/>
    </ui:if>
    <swon:Value arg:name=\"resultsGenerators\">
        <swon:RSObjectArray arg:resultSet=\"{#
                SELECT ?id ?label
                WHERE {
                    BIND (ui:currentQueryGraph() AS ?dataGraph) .
                    ?dataGraph smf:suitableResultsGenerators ( ?id ?label ) .
                } }\"/>
    </swon:Value>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Produces JSON needed to initialize a TBApplication with things like languages and namespace prefixes." ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GraphPermissionUserSelectEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<span let:name=\"new-{= ?uid }\">
    <input id=\"select-{= ?uid }\" name=\"{= ?name }\" type=\"hidden\" value=\"{= ?object }\"/>
    <div class=\"graph-permission-user-select\" data-new-value-element-id=\"select-{= ?uid }\" data-old-value-element-name=\"old-{= ?uid }\" id=\"select-{= ?name }\"/>
    <script>gadgets.Hub.publish('org.topbraid.swa.populateGraphPermissionUserDropdown', 'select-{= ?name }');</script>
</span>
"""^^ui:Literal ;
  rdfs:comment "Produces a simple HTML drop down (select) of all users or user groups." ;
  rdfs:label "Graph permission user select editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
teamwork:GraphQLServiceForShape
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The URI resource of the shape." ;
    ] ;
  ui:prototype """
<swon:Object let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:tag=\"{= teamwork:currentTag() }\">
    <swon:Value arg:name=\"result\" arg:value=\"{= teamwork:graphQLPageLinkForShape(?projectGraph, ?shape, ?tag) }\"/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "Returns the URL of the GraphQL service for the current query graph (Ontology) and a given shape" ;
  rdfs:label "GraphQL service for shape" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GraphURIPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 5 ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= ?projectGraph }\">
    <teamwork:ActionLink arg:comment=\"The graph URI is an internal identifier for any asset collection managed by this system. It is set automatically at creation of a new {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }.\" arg:icon=\"lib/teamwork/build/images/teamwork/default-namespace-icon.svg\" arg:title=\"Graph URI\">
        <div class=\"swa-inline-editor-text-parent\">{= ?projectGraph }</div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Graph URI plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:GraphsOfGivenTypeUnderTeamworkControl
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "graphTCH" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://spinrdf.org/spl> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "myProjectType" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "myProjectType" ;
                  ] ;
                sp:arg2 [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:projectLabel ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:subClassOf teamwork:EditableImportsTemplates ;
.
teamwork:Header
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:logo ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional logo image, overriding the default logo." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onSearchSelect ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript function to call when an item is selected from the global search" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
      rdfs:comment "True to suppress the default \"Home\" navigation bar entry." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:quickNavNewTab ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, links in the quick navigation menu open in a new tab." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressHome ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, the logo will not be a link to the home page." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressQuickNavigation ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, the \"hamburger\" quick navigation menu will not be displayed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressSearch ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to hide the global look up and quick navigation area." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:supressCreateNewCollection ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, the \"create new collection\" button will not be displayed" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "Title to display in the header." ;
    ] ;
  ui:prototype """
<header class=\"teamwork-page-header\" data-page-type=\"{= ?pageType }\" id=\"header\" role=\"banner\">
    <teamwork:HeaderLogoSection arg:logo=\"{= ?logo }\" arg:suppressHome=\"{= ?suppressHome }\"/>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressCreateNewCollection) }\">
        <ui:if ui:condition=\"{= teamwork:canCreateProject() }\">
            <div class=\"btn teamwork-new-collection-button\" id=\"create-new-collection\"/>
        </ui:if>
    </ui:if>
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressQuickNavigation) }\">
        <teamwork:QuickNavigationButton arg:newTab=\"{= ?quickNavNewTab }\"/>
    </ui:if>
    <div class=\"teamwork-tool-area\">
        <div class=\"teamwork-header-inserts\">
            <ui:insertionPoint ui:pointId=\"toolArea\"/>
        </div>
        <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressSearch) }\">
            <teamwork:HeaderSearchSection arg:onSelect=\"{= ?onSearchSelect }\"/>
        </ui:if>
        <div class=\"header-admin-section\" let:helpURL=\"{= spl:objectInGraph(teamwork:product(), teamwork:productHelpLink, ui:graph) }\">
            <teamwork:UserLinkArea/>
            <swa:Space/>
            <a class=\"help\" href=\"{= IF(regex(?helpURL, &quot;^https?:&quot;, &quot;i&quot;), ?helpURL, CONCAT(ui:lib(), &quot;/&quot;, ?helpURL)) }\" target=\"_blank\">
                <i class=\"fa fa-question-circle\" title=\"Help\"/>
            </a>
        </div>
    </div>
    <div class=\"teamwork-title-area\">
        <ui:if ui:condition=\"{= bound(?title) }\">{= ?title }</ui:if>
        <ui:insertionPoint ui:pointId=\"titleArea\"/>
    </div>
</header>
"""^^ui:Literal ;
  rdfs:comment "Teamwork-style header bar, with logo, title area, user name, and so on. A page title can be provided in arg:title. There are two insertion points, titleArea as an alternative to arg:title (handy for teamwork:Breadcrumbs), and toolArea for buttons or other controls. See also teamwork:Chrome, which should be used if the left-hand main menu should also be shown." ;
  rdfs:label "Header" ;
  rdfs:subClassOf teamwork:HeaderElements ;
.
teamwork:HeaderElements
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:HeaderLogoSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:logo ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional logo image, overloading the default logo." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressHome ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress the default \"Home\" navigation bar entry." ;
    ] ;
  ui:prototype """
<div class=\"logo-container\">
    <div id=\"swa-dialog-parent\"/>
    <ui:if ui:condition=\"{= bound(?logo) }\">
        <div>
            <img alt=\"Logo\" src=\"{= ?logo }\"/>
        </div>
    </ui:if>
    <ui:else>
        <teamwork:Logo arg:suppressHome=\"{= ?suppressHome }\"/>
    </ui:else>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:HeaderElements ;
.
teamwork:HeaderSearchSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onSelect ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript function to call when an item is selected" ;
    ] ;
  ui:prototype """
<div class=\"header-search-container\">
    <swa:AutoComplete arg:extraLabelFunction=\"{= teamwork:getHomeVocabularyLabel }\" arg:filterFunction=\"{= teamwork:filterNonTeamworkResources }\" arg:id=\"teamworkGlobalSearch\" arg:onSelect=\"{= COALESCE(?onSelect, &quot;teamwork.navigateToResource(resource)&quot;) }\" arg:placeholder=\"Global Lookup\" arg:queryGraph=\"{= teamwork:unionGraphForCurrentUser() }\" arg:sendQueryGraph=\"false\" arg:type=\"{= rdfs:Resource }\"/>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:HeaderElements ;
.
teamwork:HierarchyViewButton
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:buttonId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:treeMode ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group let:suppress=\"{= ui:contextValue(&quot;suppressHierarchyViewButton&quot;) }\">
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppress) }\">
        <div class=\"inline-block\" data-classURI=\"{= ?resourceType }\" data-graphId=\"{= teamwork:currentGraphId() }\" data-rootClass=\"{= ?rootClass }\" data-tagId=\"{= teamwork:currentTagId() }\" data-treeMode=\"{= ?treeMode }\" data-treeProp=\"{= ?none }\" id=\"{= ?buttonId }\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:HistoryMode
  a swa:Mode ;
  swa:formClass swa:SwitchableForm ;
  swa:formObjectPredicateSelectionTemplate teamwork:HistoryObjectPredicates ;
  swa:formSubjectPredicateSelectionTemplate swa:EmptyTemplate ;
  swa:isSingleConstant false ;
  swa:modeLabel "History&nbsp;of&nbsp;" ;
  swa:modeName "history" ;
  swa:objectWidgetClass swa:ObjectViewer ;
  swa:objectWidgetRowClass swa:ObjectViewerRow ;
  swa:objectsBodyClass teamwork:HistoryObjectsBody ;
  swa:subjectWidgetRowClass swa:SubjectViewerRow ;
  rdfs:comment "A view mode in which there might be a history section under each property." ;
  rdfs:label "History mode" ;
.
teamwork:HistoryObjectPredicates
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "predicate" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "predicate" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "o" ;
                      ] ;
                    sp:predicate [
                        sp:varName "predicate" ;
                      ] ;
                    sp:subject [
                        sp:varName "subject" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:currentTeamGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "teamGraph" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate teamwork:predicate ;
                          sp:subject [
                              sp:varName "triple" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "subject" ;
                            ] ;
                          sp:predicate teamwork:subject ;
                          sp:subject [
                              sp:varName "triple" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "triple" ;
                            ] ;
                          sp:predicate [
                              sp:varName "rel" ;
                            ] ;
                          sp:subject [
                              sp:varName "change" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a teamwork:changeHasCurrentTag ;
                              arg:change [
                                  sp:varName "change" ;
                                ] ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "teamGraph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Finds all predicates for a given subject, using all used properties and those that have a history entry." ;
  rdfs:label "History object predicates for subject" ;
  rdfs:subClassOf swa:ObjectPredicateSelectionTemplates ;
.
teamwork:HistoryObjectsBody
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:currentTag=\"{= teamwork:currentTag() }\">
    <ui:call arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" ui:template=\"{= teamwork:ExistingObjectsHistory }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <ui:if ui:condition=\"{= bound(?tag) || (((!bound(?tag)) &amp;&amp; (!bound(?currentTag))) &amp;&amp; bound(?user)) }\">
                <teamwork:AddedObjectHistoryEntry ui:args=\"*\"/>
            </ui:if>
            <ui:else>
                <teamwork:MasterObjectHistoryEntry ui:args=\"*\"/>
            </ui:else>
        </ui:forEach>
    </ui:call>
    <ui:call arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" ui:template=\"{= teamwork:DeletedObjects }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <teamwork:DeletedObjectHistoryEntry ui:args=\"*\"/>
        </ui:forEach>
    </ui:call>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The ObjectsBody used if we are in 'history' mode. This shows the default body plus deletes underneath. The adds will be displayed as part of the ObjectViewers." ;
  rdfs:label "History objects body" ;
  rdfs:subClassOf swa:ObjectsBody ;
.
teamwork:HomePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:expanded ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also show the projects that the user doesn't have access to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterKeyword ;
      spl:valueType xsd:string ;
      rdfs:comment "The teamwork:keyword to filter by." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:userName=\"{= smf:currentUserName() }\">
    <swa:BrowserCheck/>
    <ui:if ui:condition=\"{= !bound(?userName) }\">
        <teamwork:LogInForm/>
    </ui:if>
    <ui:elseif ui:condition=\"{= !tbl:hasValidLicense() }\">
        <div>This installation has not been registered yet.</div>
        <br/>
        <ui:if ui:condition=\"{= uix:isAdmin() }\">
            <div>Please use the <a href=\"admin/registration\">Product Registration</a> page as described in the documentation to register your installation and set up database connections as necessary.</div>
        </ui:if>
        <ui:else>
            <div>Please contact your administrator to use the Configuration administration page as described in the documentation.</div>
        </ui:else>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= !teamwork:isGraphStoreConfigured() }\">
        <div>This installation has no graph store configured yet.</div>
        <br/>
        <ui:if ui:condition=\"{= uix:isAdmin() }\">
            <ui:createLink ui:viewClass=\"{= teamworkconfig:ConfigEditor }\">
                <div>Please use the <a href=\"{= ?link }\">{= teamwork:getProductAbbreviation() } Configuration Parameters</a>
                    <swa:Space/>page as described in the documentation to set up the {= spl:objectInGraph(cfg:teamworkActiveDatabaseDriver, rdfs:label, ui:graph) }.</div>
            </ui:createLink>
        </ui:if>
        <ui:else>
            <div>Please contact your administrator to use the Configuration administration page as described in the documentation.</div>
        </ui:else>
    </ui:elseif>
    <ui:else>
        <ui:if ui:condition=\"{= (!smf:hasFile(teamwork:userDataGraph())) || (!smf:hasFile(teamwork:platformGovernanceGraph())) }\">
            <teamwork:InitAll/>
        </ui:if>
        <teamwork:Chrome arg:pageType=\"landing-page\" arg:title=\"Home\" let:content=\"{= spl:objectInGraph(teamwork:product(), teamwork:landingPage, ui:graph) }\">
            <ui:if ui:condition=\"{= bound(?content) }\">
                <ui:dynamicView ui:class=\"{= ?content }\"/>
            </ui:if>
            <ui:else>
                <div>ERROR: No teamwork:landingPage defined for {= teamwork:product() }</div>
            </ui:else>
        </teamwork:Chrome>
    </ui:else>
    <script>$(document).ready(function() {teamwork.initPopover()})</script>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "A page that lists all files under team control and (assuming that the current user is member of them) allows the user to click on them to navigate to the project page. If no user is logged in, then this page doubles as a log in page." ;
  rdfs:label "Home page" ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:HomePageTab
  a rdfs:Class ;
  a sh:NodeShape ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:visibility ;
      spl:valueType xsd:boolean ;
      rdfs:comment "A SPIN expression that must evaluate to true to make the tab visible." ;
    ] ;
  rdfs:label "Home page tab" ;
  rdfs:subClassOf swa:Tab ;
  sh:property teamwork:HomePageTab-mainMenuCategory ;
.
teamwork:HomePageTab-mainMenuCategory
  a sh:PropertyShape ;
  sh:path teamwork:mainMenuCategory ;
  sh:maxCount 1 ;
  sh:nodeKind sh:IRI ;
.
teamwork:HomePageTabs
  a teamwork:HomePageTab ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterKeyword ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional filter keyword as selected." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Note that these are called \"tabs\" for historical reasons - they are now stand-alone pages." ;
  rdfs:label "Home page tabs" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
teamwork:IconElement
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
      rdfs:comment "The URL of the icon to insert." ;
    ] ;
  ui:prototype """
<table>
    <tr>
        <td class=\"teamworkTD\">
            <img alt=\"Icon\" src=\"{= ?icon }\"/>
        </td>
        <td class=\"teamworkTD\">
            <ui:insertionPoint ui:pointId=\"main\"/>
        </td>
    </tr>
</table>
"""^^ui:Literal ;
  rdfs:label "Icon element" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ImportPlugin
  a rdfs:Class ;
  rdfs:comment "Items to show up on the Import tab." ;
  rdfs:label "Import plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:ImportPlugins
  a teamwork:ImportPlugin ;
  ui:abstract true ;
  rdfs:comment "Items to show up under the Importers section." ;
  rdfs:label "Import plugins" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ImportProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 25 ;
  teamwork:pluginRequiresRole teamwork:editor ;
  teamwork:pluginValidExpression [
      a sp:or ;
      sp:arg1 [
          a sp:not ;
          sp:arg1 [
              a sp:bound ;
              sp:arg1 [
                  sp:varName "tag" ;
                ] ;
            ] ;
        ] ;
      sp:arg2 [
          a sp:not ;
          sp:arg1 [
              a teamwork:isFrozenTag ;
              arg:tag [
                  sp:varName "tag" ;
                ] ;
              arg:teamGraph [
                  a teamwork:teamGraph ;
                  sp:arg1 [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
            ] ;
        ] ;
    ] ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:ImportPlugin }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Import" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ImportedByGeneralPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex -1 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" letrs:vocabs=\"{#
        SELECT ?vocabulary ?label
        WHERE {
            rdf:nil teamwork:readableGraphsUnderTeamControl ( ?vocabulary ?vocabTCH ) .
            GRAPH ?vocabulary {
                ?vocabulary owl:imports ?projectGraph .
            } .
            BIND (teamwork:projectLabel(?vocabulary) AS ?label) .
        }
        ORDER BY (?label) }\">
    <teamwork:ActionLink arg:comment=\"The following collections directly include the current {= teamwork:singularProjectTypeLabel(?projectType) }, by reference.\" arg:faIcon=\"fa-link\" arg:title=\"Included By\">
        <ui:if ui:condition=\"{= spr:isEmpty(?vocabs) }\">
            <span>none</span>
        </ui:if>
        <ui:else>
            <ul>
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?vocabs }\">
                    <li>
                        <a href=\"{= teamwork:editorLink(?vocabulary) }\">{= ?label }</a>
                    </li>
                </ui:forEach>
            </ul>
        </ui:else>
    </teamwork:ActionLink>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Included by plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:ImportsGeneralPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex -1 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:group let:isEdg=\"{= spl:objectInGraph(?projectType, rdf:type, ui:unionGraph) }\" let:manager=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) &amp;&amp; (!teamwork:isReadOnlyProject(?projectGraph)) }\">
        <teamwork:ActionLink arg:class=\"{= IF((?manager &amp;&amp; (!bound(?tag))), &quot;edit-includes&quot;, ?none) }\" arg:comment=\"Included collections are part of the current {= teamwork:singularProjectTypeLabel(?projectType) }, by reference.\" arg:dataEdgProject=\"{= ?isEdg }\" arg:dataProjectType=\"{= ?projectType }\" arg:dataUri=\"{= ?projectGraph }\" arg:faIcon=\"fa-link\" arg:title=\"Includes\">
            <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                <ui:loadable ui:loadId=\"imports-view-body\">
                    <ul let:areaGraph=\"{= teamwork:getSubjectAreaImportsGraph(?projectGraph) }\">
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                                SELECT ?import ?importLabel
                                WHERE {
                                    ?projectGraph owl:imports ?import .
                                    BIND (teamwork:projectLabel(?import) AS ?importLabel) .
                                    FILTER (!teamwork:isMandatoryImport(?import, ?projectType)) .
                                    FILTER (?import != ?areaGraph) .
                                }
                                ORDER BY (?importLabel) }\">
                            <li>
                                <ui:if ui:condition=\"{= teamwork:hasTeamGraph(?import) }\">
                                    <a href=\"{= teamwork:editorLink(?import) }\">{= ?importLabel }</a>
                                </ui:if>
                                <ui:else>
                                    <span title=\"{= ?import }\">{= COALESCE(?importLabel, ?import) }</span>
                                    <ui:if ui:condition=\"{= !bound(?importLabel) }\">
                                        <span class=\"text-danger\"> (Cannot resolve URI)</span>
                                    </ui:if>
                                </ui:else>
                            </li>
                        </ui:forEach>
                    </ul>
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                        <ui:if ui:condition=\"{= EXISTS {
                            skosxl:altLabel a ?any .
                        } &amp;&amp; NOT EXISTS {
                            ?any owl:imports &lt;http://topbraid.org/skos-xl.shapes&gt; .
                        } }\">
                            <p class=\"text-danger\">SKOS-XL is included yet SKOS-XL SHACL Shapes is not yet included. As a result, values of SKOS-XL properties may not display correctly.</p>
                        </ui:if>
                    </ui:setContext>
                </ui:loadable>
                <div>
                    <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= teamwork:getMandatoryImportedGraphs }\" ui:varName=\"rs2\">
                        <ui:if ui:condition=\"{= !spr:isEmpty(?rs2) }\">
                            <a href=\"javascript:void(0)\" onclick=\"swa.load('mandatoryIncludes');$(this).remove()\">Display system includes ({= spr:rowCount(?rs2) })</a>
                        </ui:if>
                    </ui:call>
                    <ui:loadable ui:loadId=\"mandatoryIncludes\" ui:loadOnDemand=\"{= true }\">
                        <div>System includes:</div>
                        <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= teamwork:getMandatoryImportedGraphs }\" ui:varName=\"rs3\">
                            <ul>
                                <ui:forEach ui:resultSet=\"{= ?rs3 }\">
                                    <li>{= ?importLabel }</li>
                                </ui:forEach>
                            </ul>
                        </ui:call>
                    </ui:loadable>
                </div>
            </ui:setContext>
            <ui:insertionPoint ui:pointId=\"actions\"/>
        </teamwork:ActionLink>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Includes plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:IncomingPropertyConstraintsSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate to show the constraints for." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= swa:isViewMode() }\">
        <ui:forEach ui:resultSet='{#
                SELECT ?pred ?predLabel
                WHERE {
                    VALUES (?pred ?predLabel) {
                        (sh:parameter \"Parameters\")
                        (sh:property \"Property Shapes\")
                    } .
                } }'>
            <ui:group letrs:constraints=\"{#
                    SELECT ?shape ?pred ?constraint
                    WHERE {
                        ?constraint sh:path ?predicate .
                        ?shape ?pred ?constraint .
                    }
                    ORDER BY (ui:label(?shape)) }\">
                <ui:if ui:condition=\"{= !spr:isEmpty(?constraints) }\">
                    <div class=\"swa-objects-group\">
                        <div class=\"swa-sub-title\">Local Property Characteristics</div>
                        <ui:forEach ui:resultSet=\"{= ?constraints }\">
                            <swa:LabeledElement arg:label=\"at {= ui:label(?shape) }:\">
                                <teamwork:PropertyShapeViewer arg:object=\"{= ?constraint }\" arg:suppressPredicate=\"{= true }\"/>
                            </swa:LabeledElement>
                        </ui:forEach>
                    </div>
                </ui:if>
            </ui:group>
        </ui:forEach>
    </ui:if>
    <ui:elseif ui:condition=\"{= swa:isEditMode() }\">
        <ui:forEach ui:resultSet='{#
                SELECT ?pred ?predLabel
                WHERE {
                    VALUES (?pred ?predLabel) {
                        (sh:parameter \"Parameter\")
                        (sh:property \"Property Shape\")
                    } .
                } }'>
            <ui:group letrs:propertyShapes=\"{#
                    SELECT ?shape ?pred ?propertyShape
                    WHERE {
                        ?propertyShape sh:path ?predicate .
                        ?shape ?pred ?propertyShape .
                    }
                    ORDER BY (ui:label(?shape)) }\">
                <ui:forEach ui:resultSet=\"{= ?propertyShapes }\">
                    <div class=\"swa-sub-title\" title=\"{= IF(isIRI(?propertyShape), CONCAT(&quot;Property shape URI: &quot;, str(?propertyShape)), &quot;Property shape is anonymous&quot;) }\">Local Property Characteristics at {= ui:label(?shape) }</div>
                    <div class=\"swa-base-font swa-gray teamwork-property-form-SHACL-info\">These are SHACL property shapes that specify constraints on the values of properties for a given set of target resources (e.g., members of a class).</div>
                    <teamwork:NestedPropertyShapeEditor arg:object=\"{= ?propertyShape }\" arg:suppressPredicate=\"{= true }\"/>
                </ui:forEach>
            </ui:group>
        </ui:forEach>
    </ui:elseif>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:FormElements ;
.
teamwork:InheritedConstraintsSection
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:group letrs:ics=\"{#
        SELECT ?constraint
        WHERE {
            ?resource (rdfs:subClassOf)+ ?superClass .
            FILTER (?superClass != ?resource) .
            ?superClass sh:property ?constraint .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?ics) }\">
        <div class=\"swa-objects-group\">
            <div class=\"swa-sub-title\">Inherited Property Constraints</div>
            <swa:LabeledElement arg:label=\"property shapes:\" let:id=\"{= ui:uniqueId() }\">
                <div class=\"swa-shifted-label\" id=\"{= ?id }\">
                    <span>{= spr:rowCount(?ics) } constraints on:</span>
                    <swa:Space/>
                    <ui:forEach ui:resultSet=\"{#
                            SELECT DISTINCT ?predicate ?predicateLabel
                            WHERE {
                                ?resource (rdfs:subClassOf)+ ?superClass .
                                FILTER (?superClass != ?resource) .
                                ?superClass sh:property/sh:path ?predicate .
                                FILTER isIRI(?predicate) .
                                BIND (swa:propertyLabelAtClassOrShape(?predicate, ?superClass) AS ?predicateLabel) .
                            }
                            ORDER BY (?predicateLabel) }\" ui:separator=\", \">{= ?predicateLabel }</ui:forEach>
                    <span>.</span>
                    <br/>
                    <a href=\"javascript:void(0)\" onclick=\"swa.load('{= ?id }-loadable');$('#{= ?id }').remove()\">Details</a>
                </div>
                <ui:loadable ui:loadId=\"{= ?id }-loadable\" ui:loadOnDemand=\"{= true }\">
                    <ui:forEach ui:resultSet=\"{#
                            SELECT ?constraint
                            WHERE {
                                ?resource (rdfs:subClassOf)+ ?superClass .
                                FILTER (?superClass != ?resource) .
                                ?superClass sh:property ?constraint .
                                ?constraint sh:path ?predicate .
                                FILTER isIRI(?predicate) .
                                BIND (swa:propertyLabelAtClassOrShape(?predicate, ?superClass) AS ?predicateLabel) .
                            }
                            ORDER BY (?predicateLabel) }\">
                        <teamwork:PropertyShapeViewer arg:object=\"{= ?constraint }\"/>
                    </ui:forEach>
                </ui:loadable>
            </swa:LabeledElement>
        </div>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:InitAll
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <teamwork:ensureSystemGraphsExist/>
    <teamwork:EnsureSingletonsExist/>
    <teamwork:EnsureTextIndexInitialized/>
    <teamwork:EnsureSAFIndexInitialized/>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:InitAllInstance
  a teamwork:InitAll ;
  rdfs:comment "This is called from Java during platform launch." ;
.
teamwork:InitBundle
  a ui:Script ;
  ui:dependsOn teamwork:LibraryBundle ;
  ui:prototype """
<ui:group>
    <meta content=\"teamwork:InitBundle\" name=\"teamwork-init-bundle-start\"/>
    <script src=\"{= ui:lib() }/teamwork/build/teamworkInit.bundle.js\"/>
    <meta content=\"teamwork:InitBundle\" name=\"teamwork-init-bundle-end\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Library bundle" ;
  rdfs:subClassOf ui:Scripts ;
.
teamwork:InlinePropertyWidget
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:additionalClasses ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "Resource Type needed to get proper data from server. " ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The viewClass necessary to get the correct data from the server." ;
    ] ;
  ui:prototype """
<div class=\"select-container {= ?additionalClasses }\" data-inline-add=\"true\" data-resource-type=\"{= ?resourceType }\" data-view-class=\"{= ?viewClass }\" id=\"inline-add\"/>
"""^^ui:Literal ;
  rdfs:comment """A widget that displays properties that can be added inline while in view mode on the details page.
ID is a static property for page refresh React rebuilding purposes. """ ;
  rdfs:label "Inline Property Widget" ;
  rdfs:subClassOf swa:MenuElements ;
.
teamwork:IsEditableProjectStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-pencil" ;
  rdfs:comment "You may make changes to this asset collection." ;
  rdfs:label "Is editable project status" ;
.
teamwork:IsEditableTagStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-pencil" ;
  rdfs:comment "You may make changes in this workflow." ;
  rdfs:label "Is editable tag status" ;
.
teamwork:IsFrozenTagStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-pause" ;
  rdfs:comment "This workflow is frozen for review." ;
  rdfs:label "Is frozen tag status" ;
.
teamwork:IsReadOnlyProjectStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-eye" ;
  rdfs:comment "You have read-only access to this asset collection." ;
  rdfs:label "Is read only project status" ;
.
teamwork:IsReadOnlyTagStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-eye" ;
  rdfs:comment "You have read-only access to this workflow." ;
  rdfs:label "Is read only tag status" ;
.
teamwork:IsReadOnlyTypeStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-eye" ;
  rdfs:comment "This type of asset collection is read-only." ;
  rdfs:label "Is read only type status" ;
.
teamwork:JSONLDFileExportPlugin
  a teamwork:ExportPlugin ;
  a owl:DeprecatedClass ;
  teamwork:pluginIndex 2 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:JSONLD }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
    <teamwork:ActionLink arg:comment=\"Creates an RDF file in JSON-LD format.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-json.svg\" arg:link=\"{= ?link }\" arg:title=\"JSON-LD\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "JSON-LD file export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:LabelAndCommentForm
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The URI of the project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to change." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:service ;
      spl:valueType ui:Element ;
      rdfs:comment "The SWP service to call back." ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= IF(bound(?tag), ?teamGraph, ?projectGraph) }\">
        <form action=\"swp\" let:resource=\"{= IF(bound(?tag), ?tag, ?projectGraph) }\">
            <input name=\"_viewClass\" type=\"hidden\" value=\"{= ?service }\"/>
            <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
            <ui:if ui:condition=\"{= bound(?tag) }\">
                <input name=\"tag\" type=\"hidden\" value=\"{= ?tag }\"/>
            </ui:if>
            <swa:LabeledElement arg:label=\"Name\">
                <input class=\"form-control teamwork-label-and-comment-form-name-input\" id=\"name-input\" name=\"name\" type=\"text\" value=\"{= IF(bound(?resource), ui:escapeJSON(spl:object(?resource, rdfs:label)), ?none) }\"/>
            </swa:LabeledElement>
            <br/>
            <swa:LabeledElement arg:label=\"Description\">
                <textarea class=\"form-control\" cols=\"80\" id=\"comment-area\" name=\"comment\" rows=\"4\">
                    <ui:if ui:condition=\"{= bound(?resource) }\">{= spl:object(?resource, rdfs:comment) }</ui:if>
                </textarea>
            </swa:LabeledElement>
            <div>
                <ui:insertionPoint ui:pointId=\"extras\"/>
            </div>
            <br/>
            <input type=\"submit\" value=\"Submit\"/>
        </form>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A form for entering a label and a comment." ;
  rdfs:label "Label and comment form" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:LabelAndCommentService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The comment/description of the new tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the new tag." ;
    ] ;
  ui:abstract true ;
  rdfs:label "Label and comment service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:LandingPageCarousel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:instance ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property pointing to an image URL" ;
    ] ;
  ui:prototype """
<swon:Object let:targetGraph=\"{= ui:graphWithImports(IRI(?baseGraph)) }\">
    <swon:Value arg:name=\"assets\">
        <!-- This is the case that uses files from the instance view -->
        <swon:Array>
            <ui:setContext ui:queryGraph=\"{= ?targetGraph }\">
                <ui:setContext letrs:files=\"{#
                        SELECT ?imageURL ?label
                        WHERE {
                            ?instance ?property ?imageURL .
                            BIND (spif:localName(?imageURL) AS ?label) .
                        } }\">
                    <ui:forEach ui:indexVar=\"rowIndex\" ui:resultSet=\"{= ?files }\" ui:separator=\",\">
                        <swon:Object>
                            <swon:Value arg:name=\"filepath\" arg:value=\"{= ?imageURL }\"/>
                            <swon:Value arg:name=\"altText\" arg:value=\"{= ?label }\"/>
                        </swon:Object>
                    </ui:forEach>
                </ui:setContext>
            </ui:setContext>
        </swon:Array>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:LandingPageCollections
  a ui:NodeClass ;
  ui:prototype """
<section class=\"col-xs-12\">
    <div class=\"widget-content\">
        <h2>Recently Viewed Collections</h2>
        <table class=\"table table-condensed\">
            <tbody>
                <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(teamwork:userDataGraph(), ui:graph) }\">
                    <ui:call ui:template=\"{= teamwork:GetRecentCollections }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <ui:if ui:condition=\"{= smf:hasFile(?item) &amp;&amp; smf:canRead(?item) }\">
                                <tr>
                                    <td>
                                        <div class=\"governance-asset-viewer-inline-block\">
                                            <governance:AssetViewerInline arg:compact=\"{= true }\" arg:resource=\"{= ?item }\"/>
                                        </div>
                                    </td>
                                </tr>
                            </ui:if>
                        </ui:forEach>
                    </ui:call>
                </ui:setContext>
            </tbody>
        </table>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:LandingPageGadgets ;
.
teamwork:LandingPageGadgets
  a ui:NodeClass ;
  ui:abstract true ;
  ui:responseType ui:HTML ;
  rdfs:label "Landing page gadgets" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:LandingPageSearch
  a ui:NodeClass ;
  ui:prototype """
<section class=\"col-xs-12\" let:id=\"{= ui:uniqueId() }\">
    <div class=\"widget-content\">
        <h2>Search the EDG </h2>
        <teamwork:LandingPageSearchMessage/>
        <div>
            <input class=\"search-portal-input\" id=\"{= ?id }\" placeholder=\"Start Typing...\" title=\"Searches across all {= teamwork:getProductAbbreviation() } assets that have been configured for inclusion by an administrator.\"/>
            <button class=\"btn btn-sm btn-primary search-portal-button\" data-link=\"search\" id=\"search-portal-button-{= ?id }\">
                <i class=\"fa fa-search\"/>
            </button>
        </div>
        <swa:WidgetInitializer arg:script=\"teamwork.initSearch('{= ?id }')\"/>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:LandingPageGadgets ;
.
teamwork:LandingPageSearchMessage
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(&lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt;), ui:graphWithImports(&lt;http://teamwork.topbraidlive.org/system/configconstraints&gt;)) }\">
        <ui:call ui:template=\"{= safconfig:IsSearchConfigured }\" ui:varName=\"results\">
            <ui:if ui:condition=\"{= spr:rowCount(?results) = 0 }\">
                <div>
                    <p>No collections have been added to search.</p>
                </div>
            </ui:if>
            <ui:else>
                <a data-icon=\"fa-question-circle\" onclick=\"swa.populateModalDialogAskingForBody('teamwork:getSearchGraphsModal', 'Graphs Included in Search the EDG', null)\">
                    <i class=\"fa fa-info-circle\" style=\"color: #15428B; cursor: pointer\"/>
                </a>
            </ui:else>
        </ui:call>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:LandingPageSubjectAreas
  a ui:NodeClass ;
  ui:prototype """
<section class=\"col-xs-12\">
    <div class=\"widget-content\">
        <h2>My Governance Roles</h2>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
            <governance:GovernanceRolesSection arg:compact=\"{= false }\" arg:party=\"{= smf:userWithName(smf:currentUserName()) }\" arg:withJobTitles=\"{= false }\"/>
        </ui:setContext>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:LandingPageGadgets ;
.
teamwork:LandingPageUpgradeGraphic
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <a href=\"http://www.topquadrant.com/products/topbraid-edg-gov-packs/\" target=\"_blank\">
        <img alt=\"Image of a globe with product icons scattered over the top. Icons represent EDG packages.\" src=\"lib/teamwork/build/images/teamwork/globe.png\" title=\"Learn more about all assets EDG can manage\"/>
    </a>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:LegacyPublishPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ExportProjectTab }\" arg:tag=\"{= ?tag }\" let:graph=\"{= ui:currentQueryGraph() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <h1>Publish {= teamwork:projectLabel(?projectGraph) } to Explorer</h1>
    <form id=\"publishForm\">
        <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
        <swa:LabeledElement arg:label=\"Short id:\">
            <input class=\"for-control teamwork-legacy-publish-page-id-input\" name=\"name\" type=\"text\"/>
        </swa:LabeledElement>
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
            <swa:LabeledElement arg:label=\"Display name:\" let:version=\"{= spl:objectInGraph(?projectGraph, metadata:version, ?projectGraph) }\">
                <input class=\"form-control teamwork-legacy-publish-page-name-input\" name=\"label\" type=\"text\" value=\"{= ui:label(?projectGraph) }{= IF(bound(?version), CONCAT(&quot; &quot;, str(?version)), ?none) }\"/>
            </swa:LabeledElement>
            <swa:LabeledElement arg:label=\"Description:\">
                <textarea class=\"form-control teamwork-legacy-publish-page-description-input\" cols=\"80\" name=\"comment\" type=\"text\">{= spl:object(?projectGraph, rdfs:comment) }</textarea>
            </swa:LabeledElement>
        </ui:setContext>
        <br/>
        <swa:LabeledElement arg:label=\"Includes to preserve:\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT DISTINCT ?import ?importLabel
                    WHERE {
                        BIND (ui:graphWithImports(?projectGraph) AS ?gwi) .
                        GRAPH ?gwi {
                            ?any owl:imports ?import .
                        } .
                        BIND (teamwork:graphLabel(?import) AS ?importLabel) .
                    }
                    ORDER BY (?importLabel) }\">
                <div>
                    <input name=\"preserve-{= ?import }\" type=\"checkbox\" value=\"true\"/>
                    <swa:Space/>
                    <span>{= ?importLabel } ({= ?import })</span>
                </div>
            </ui:forEach>
            <br/>
            <div>By default, all included graphs will be \"flattened\" into the exported graph, making it self-contained but potentially large. Select the graphs that shall not be \"flattened\" this way above. The graphs selected above are assumed to already exist on the Explorer server, for example via project upload.</div>
        </swa:LabeledElement>
        <br/>
        <swa:LabeledElement arg:label=\"Comments:\">
            <div class=\"checkbox\">
                <input name=\"allowFeedback\" type=\"checkbox\" value=\"true\"/>
                <span>Allow sending comments to the editors</span>
            </div>
        </swa:LabeledElement>
        <br/>
        <div>
The short id is a system-internal name that is used to generate URLs.
It must consist of characters and digits only.
The short id is <b>not</b> the display name for the end users.
</div>
        <br/>
        <input onclick=\"teamwork.publishProject()\" type=\"button\" value=\"Publish\"/>
    </form>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Publish page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:LibraryBundle
  a ui:Script ;
  ui:dependsOn swa:Bundle ;
  ui:dependsOn swa:VendorScripts ;
  ui:prototype """
<ui:group>
    <meta content=\"teamwork:LibraryBundle\" name=\"teamwork-library-bundle-start\"/>
    <script src=\"{= ui:lib() }/teamwork/build/teamwork.bundle.js\"/>
    <meta content=\"teamwork:LibraryBundle\" name=\"teamwork-library-bundle-end\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Library bundle" ;
  rdfs:subClassOf ui:Scripts ;
.
teamwork:LocalSearchManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 0 ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\" ui:silentTransactions=\"{= true }\">
        <teamwork:ActionLink arg:comment=\"Determines whether users can select to 'Return local results only' on search forms.\" arg:faIcon=\"fa-search\" arg:title=\"Local Search Options\">
            <div>
                <span>Local Search:&nbsp;</span>
                <select class=\"form-control\" let:old=\"{= spl:object(?teamGraph, teamwork:alwaysLocalSearch) }\">
                    <option value=\"0\">Users can choose</option>
                    <option selected=\"{= IF((!?old), &quot;selected&quot;, ?none) }\" value=\"false\">Always global search</option>
                    <option selected=\"{= IF(?old, &quot;selected&quot;, ?none) }\" value=\"true\">Always local search</option>
                    <ui:handle arg:value=\"eval($(this).val())\" ui:event=\"onchange\">
                        <ui:setPropertyValue arg:property=\"{= teamwork:alwaysLocalSearch }\" arg:value=\"{= IF((?value != 0), ?value, ?none) }\" ui:this=\"{= ?teamGraph }\"/>
                    </ui:handle>
                </select>
            </div>
        </teamwork:ActionLink>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Local search options plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:LogInForm
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <main class=\"teamwork-login-container\">
        <h1 class=\"teamwork-login-welcome\">Welcome to {= teamwork:applicationName() }</h1>
        <p class=\"text-muted\">
This system is configured in unprotected mode, you can choose any
user name that has been stored in the file <code>server.topbraidlive.org/dynamic/users.ttl</code>
without any password.
Your system administrator can configure the J2EE server, and TopBraid's <code>web.xml</code>
file to add protection, and integrate with your enterprise login.
</p>
        <aside class=\"teamwork-login-form-select\" let:usersGraph=\"{= teamwork:usersGraph() }\">
            <span>User name:&nbsp;</span>
            <select class=\"form-control\" id=\"userNameSelect\">
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?userName
                        WHERE {
                            GRAPH ?usersGraph {
                                ?user a sioc:UserAccount .
                                ?user rdfs:label ?userName .
                                FILTER ((?user != &lt;urn:x-tb-users:SPARQLUpdateAllowedUser&gt;) &amp;&amp; (?user != &lt;urn:x-tb-users:SPARQLUpdateBlockedUser&gt;)) .
                            } .
                        }
                        ORDER BY (?userName) }\">
                    <option>{= ?userName }</option>
                </ui:forEach>
            </select>
            <script>function logIn() {
					var userName = $('#userNameSelect').val();
					if (userName &amp;&amp; userName != '') {
						cookies.setCookie(\"username\", userName);
						location.reload();
					}
				}</script>
            <br/>
            <br/>
            <button class=\"btn btn-primary\" onclick=\"logIn()\" type=\"button\">Log in</button>
        </aside>
    </main>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Log in form" ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf teamwork:Elements ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:Logo
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressHome ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disable the link behind the icon." ;
    ] ;
  ui:prototype """
<a href=\"{= IF(swa:falseOrUnbound(?suppressHome), teamwork:homeLink(), ?none) }\">
    <ui:if ui:condition=\"{= !tbl:hasValidLicense() }\">
        <div class=\"teamwork-logo-default\"/>
    </ui:if>
    <ui:else>
        <div class=\"teamwork-logo {= spl:objectInGraph(teamwork:product(), teamwork:productLogoCSS, ui:graph) }\"/>
    </ui:else>
</a>
"""^^ui:Literal ;
  rdfs:comment "Produces a hyperlinked div with the appropriate style representing the current product." ;
  rdfs:label "Logo" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:LogoutLink
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:class=\"btn btn-primary btn-sm\" let:label=\"Log out\" let:style=\"vertical-align: 4px\">
    <ui:if ui:condition=\"{= uix:hasBasicAuth() }\">
        <a class=\"{= ?class }\" id=\"basic-auth-logout\" style=\"{= ?style }\">{= ?label }</a>
    </ui:if>
    <ui:else>
        <a class=\"{= ?class }\" href=\"purgeuser?app={= spif:lowerCase(teamwork:getProductAbbreviation()) }\" style=\"{= ?style }\">{= ?label }</a>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Logout link" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:LuceneIndexManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 11 ;
  teamwork:pluginValidExpression true ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; }\">
    <teamwork:ActionLink arg:icon=\"{= ui:lib() }/teamwork/build/images/teamwork/lucene-search.svg\" arg:title=\"Include this asset collection in the index for Search the EDG\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(teamwork:graphIsInIndex(?projectGraph), &quot;true&quot;, ?none) }\" disabled=\"{= IF(teamwork:graphIsInIndexBySubjectArea(?projectGraph), &quot;true&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <safconfig:BulkAddGraph arg:checked=\"{= ?checked }\" arg:graph=\"{= ?projectGraph }\"/>
                </ui:handle>
            </input>
            <span>{= spl:objectInGraph(safm:graphSearchable, rdfs:comment, &lt;http://saf.topbraidlive.org/metaschema/&gt;) }</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Enable/disable lucene index for this asset collection plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:MainMenu
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:currentCategory ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project type, tab or link to highlight." ;
    ] ;
  ui:prototype """
<ui:call ui:template=\"{= teamwork:MainMenuItems }\" ui:varName=\"items\">
    <nav class=\"{= ui:getSessionAttribute(&quot;primary-nav-state&quot;) }\" id=\"primaryNav\">
        <teamwork:MainMenuSection arg:id=\"primary-nav-section-dashboard\" arg:label=\"Dashboard\" arg:max=\"{= -80 }\" ui:args=\"*\"/>
        <teamwork:MainMenuSection arg:id=\"primary-nav-section-asset-collections\" arg:label=\"Asset Collections\" arg:max=\"{= 55 }\" arg:min=\"{= -80 }\" ui:args=\"*\"/>
        <ui:if ui:condition=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
            <teamwork:MainMenuSection arg:id=\"primary-nav-section-governance\" arg:label=\"Governance Model\" arg:min=\"{= 55 }\" ui:args=\"*\"/>
        </ui:if>
        <div class=\"version small\">Version: {= uix:getTBVersion() }</div>
    </nav>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "The left-hand main menu. Items are retrieved by a SPIN template, and more items can be added by equipping the teamwork:product() with additional teamwork:homePageTab, teamwork:mainMenuLink and teamwork:defaultProjectType values. The sections of the menu are hardcoded." ;
  rdfs:label "Main menu" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MainMenuItem
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:active ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Highlight the item? Only a single item in the main menu should be highlighted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:iconClass ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:link ;
      spl:valueType teamwork:MainMenuLink ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tab ;
      spl:valueType teamwork:HomePageTab ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:toolTip ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<li class=\"{= IF((bound(?active) &amp;&amp; ?active), &quot;active&quot;, ?none) }\">
    <ui:if ui:condition=\"{= bound(?projectType) }\">
        <ui:if ui:condition=\"{= teamwork:isSingletonProjectType(?projectType) }\">
            <ui:group let:projectGraph=\"{= teamwork:masterGraph(spl:objectInGraph(?projectType, teamwork:singletonId, ui:graph)) }\">
                <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, teamwork:teamGraph(?projectGraph)) }\">
                    <a data-icon=\"{= ?iconClass }\" href=\"{= teamwork:editorLink(?projectGraph) }\" tabindex=\"0\" title=\"{= ?toolTip }\">{= ?label }</a>
                </ui:if>
            </ui:group>
        </ui:if>
        <ui:else>
            <a data-icon=\"{= ?iconClass }\" href=\"{= teamwork:projectTypeLink(?projectType) }\" tabindex=\"0\" title=\"{= ?toolTip }\">{= ?label }</a>
        </ui:else>
    </ui:if>
    <ui:elseif ui:condition=\"{= bound(?tab) }\">
        <ui:createLink ui:viewClass=\"{= ?tab }\">
            <a data-icon=\"{= ?iconClass }\" href=\"{= ?link }\" tabindex=\"0\" title=\"{= ?toolTip }\">{= ?label }</a>
        </ui:createLink>
    </ui:elseif>
    <ui:elseif ui:condition=\"{= bound(?link) }\">
        <a data-icon=\"{= ?iconClass }\" href=\"{= spif:invoke(?link) }\" tabindex=\"0\" title=\"{= ?toolTip }\">{= ?label }</a>
    </ui:elseif>
    <ui:else>
        <a data-icon=\"{= ?iconClass }\" tabindex=\"0\" title=\"{= ?toolTip }\">{= ?label }</a>
    </ui:else>
</li>
"""^^ui:Literal ;
  rdfs:comment """Renders an item in the main menu. The link is specified in one of these ways:

- projectType: An asset collection type; the link will be to a page with collections of that type
- tab: A subclass of teamwork:Page that will be linked to
- link: A function that returns a URL to be used as the link""" ;
  rdfs:label "Main menu item" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MainMenuItems
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "index" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "tab" ;
          ]
          [
            sp:varName "link" ;
          ]
          [
            sp:varName "projectType" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "category" ;
          ]
          [
            sp:varName "key" ;
          ]
          [
            sp:varName "index" ;
          ]
          [
            sp:varName "toolTip" ;
          ]
          [
            sp:varName "iconClass" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a teamwork:product ;
                            ] ;
                          sp:variable [
                              sp:varName "product" ;
                            ] ;
                        ]
                        [
                          a sp:Union ;
                          sp:elements (
                              (
                                [
                                  a sp:Bind ;
                                  sp:expression teamwork:homeLink ;
                                  sp:variable [
                                      sp:varName "link" ;
                                    ] ;
                                ]
                                [
                                  a sp:Bind ;
                                  sp:expression [
                                      sp:varName "link" ;
                                    ] ;
                                  sp:variable [
                                      sp:varName "item" ;
                                    ] ;
                                ]
                              )
                              (
                                [
                                  sp:object [
                                      sp:varName "tab" ;
                                    ] ;
                                  sp:predicate teamwork:homePageTab ;
                                  sp:subject [
                                      sp:varName "product" ;
                                    ] ;
                                ]
                                [
                                  sp:object teamwork:HomePageTab ;
                                  sp:predicate rdf:type ;
                                  sp:subject [
                                      sp:varName "tab" ;
                                    ] ;
                                ]
                                [
                                  a sp:Bind ;
                                  sp:expression [
                                      sp:varName "tab" ;
                                    ] ;
                                  sp:variable [
                                      sp:varName "item" ;
                                    ] ;
                                ]
                              )
                              (
                                [
                                  sp:object [
                                      sp:varName "link" ;
                                    ] ;
                                  sp:predicate teamwork:mainMenuLink ;
                                  sp:subject [
                                      sp:varName "product" ;
                                    ] ;
                                ]
                                [
                                  a sp:Bind ;
                                  sp:expression [
                                      sp:varName "link" ;
                                    ] ;
                                  sp:variable [
                                      sp:varName "item" ;
                                    ] ;
                                ]
                              )
                            ) ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a spl:object ;
                              sp:arg1 [
                                  sp:varName "item" ;
                                ] ;
                              sp:arg2 arg:visibility ;
                            ] ;
                          sp:variable [
                              sp:varName "visibility" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:or ;
                              sp:arg1 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "visibility" ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a spin:eval ;
                                  sp:arg1 [
                                      sp:varName "visibility" ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "label" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "item" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  a spl:object ;
                                  sp:arg1 [
                                      sp:varName "item" ;
                                    ] ;
                                  sp:arg2 edg.v:icon ;
                                ] ;
                              sp:arg2 "not-bound" ;
                            ] ;
                          sp:variable [
                              sp:varName "iconClass" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  a spl:object ;
                                  sp:arg1 [
                                      sp:varName "item" ;
                                    ] ;
                                  sp:arg2 swa:tabIndex ;
                                ] ;
                              sp:arg2 1000 ;
                            ] ;
                          sp:variable [
                              sp:varName "index" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a spl:objectInGraph ;
                              sp:arg1 [
                                  sp:varName "item" ;
                                ] ;
                              sp:arg2 rdfs:comment ;
                              sp:arg3 ui:graph ;
                            ] ;
                          sp:variable [
                              sp:varName "toolTip" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a teamwork:product ;
                            ] ;
                          sp:variable [
                              sp:varName "product" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "projectType" ;
                            ] ;
                          sp:predicate teamwork:defaultProjectType ;
                          sp:subject [
                              sp:varName "product" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  a spl:object ;
                                  sp:arg1 [
                                      sp:varName "projectType" ;
                                    ] ;
                                  sp:arg2 edg.v:icon ;
                                ] ;
                              sp:arg2 "not-bound" ;
                            ] ;
                          sp:variable [
                              sp:varName "iconClass" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:and ;
                              sp:arg1 [
                                  a teamwork:hasProjectTypeLicense ;
                                  sp:arg1 [
                                      sp:varName "projectType" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a teamwork:isProjectTypeDisabled ;
                                      arg:projectType [
                                          sp:varName "projectType" ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  a teamwork:navMenuProjectTypeLabel ;
                                  arg:projectType [
                                      sp:varName "projectType" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a teamwork:pluralProjectTypeLabel ;
                                  arg:projectType [
                                      sp:varName "projectType" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "label" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:coalesce ;
                              sp:arg1 [
                                  a spl:object ;
                                  sp:arg1 [
                                      sp:varName "projectType" ;
                                    ] ;
                                  sp:arg2 teamwork:projectTypeWeight ;
                                ] ;
                              sp:arg2 0 ;
                            ] ;
                          sp:variable [
                              sp:varName "pti" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:add ;
                              sp:arg1 [
                                  sp:varName "pti" ;
                                ] ;
                              sp:arg2 30 ;
                            ] ;
                          sp:variable [
                              sp:varName "index" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a spl:objectInGraph ;
                              sp:arg1 [
                                  sp:varName "projectType" ;
                                ] ;
                              sp:arg2 rdfs:comment ;
                              sp:arg3 ui:graph ;
                            ] ;
                          sp:variable [
                              sp:varName "toolTip" ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "item" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a afn:localname ;
                    sp:arg1 [
                        sp:varName "item" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:concat ;
                    sp:arg1 "ForType-" ;
                    sp:arg2 [
                        a spif:toJavaIdentifier ;
                        sp:arg1 [
                            a teamwork:singularProjectTypeLabel ;
                            arg:projectType [
                                sp:varName "projectType" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "key" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        a sp:coalesce ;
                        sp:arg1 [
                            sp:varName "item" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "projectType" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:mainMenuCategory ;
                    sp:arg3 ui:graph ;
                  ] ;
                sp:arg2 [
                    sp:varName "item" ;
                  ] ;
                sp:arg3 [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "category" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment """Gets the items in the main menu (left hand side).

The item itself is one of these three:

?tab - teamwork:HomePageTabs subclass (a page to put into the menu)
?link - teamwork:MainMenuLinks subclass (a function returning a URL to put into the menu)
?projectType - teamwork:ProjectType subclass (a type to put into the menu)

Additional information about the item:

?label
?category - when to highlight the item; usually same as ?tab/?link/?projectType
?key - ???
?index - ordering
?toolTip
?iconClass - CSS class to apply, should be one of fa-xxx, tq-xxx, custom-xxx""" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:MainMenuLink
  a rdfs:Class ;
  rdfs:comment "This is one way to represent a link in the main navigation menu: a function that returns a URL to be linked to." ;
  rdfs:label "Main menu link" ;
  rdfs:subClassOf spin:Function ;
  sh:property teamwork:MainMenuLink-icon ;
  sh:property teamwork:MainMenuLink-mainMenuCategory ;
  sh:property teamwork:MainMenuLink-tabIndex ;
.
teamwork:MainMenuLink-icon
  a sh:PropertyShape ;
  sh:path edg.v:icon ;
  sh:datatype xsd:string ;
  sh:maxCount 1 ;
.
teamwork:MainMenuLink-mainMenuCategory
  a sh:PropertyShape ;
  sh:path teamwork:mainMenuCategory ;
  sh:maxCount 1 ;
  sh:nodeKind sh:IRI ;
.
teamwork:MainMenuLink-tabIndex
  a sh:PropertyShape ;
  sh:path swa:tabIndex ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
.
teamwork:MainMenuLinks
  a spin:Function ;
  spin:abstract true ;
  spin:returnType xsd:string ;
  ui:abstract true ;
  rdfs:comment """This superclass groups instances of teamwork:MainMenuLink: functions that return a URL for use in the main menu.

Note one useful pattern: make a subclass an instance of ui:Function, give it a ui:prototype body that computes a link via <ui:createLink> and returns it via <ui:return ui:result=\"{= ?link }\"/>.""" ;
  rdfs:label "Main menu link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:MainMenuSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:items ;
      spl:valueType spr:Table ;
      rdfs:comment "A result set as returned by teamwork:MainMenuItems" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:currentCategory ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Highlight the item with this ?category" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "HTML id for the heading" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:max ;
      spl:valueType xsd:integer ;
      rdfs:comment "Only show items with ?index < max" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:min ;
      spl:valueType xsd:integer ;
      rdfs:comment "Only show items with ?index >= min" ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?label) }\">
        <h4 id=\"{= ?id }\">{= ?label }</h4>
    </ui:if>
    <ul role=\"group\">
        <ui:forEach ui:resultSet=\"{= ?items }\">
            <ui:if ui:condition=\"{= ((!bound(?max)) || (?index &lt; ?max)) &amp;&amp; ((!bound(?min)) || (?index &gt;= ?min)) }\">
                <teamwork:MainMenuItem arg:active=\"{= ((!bound(?currentCategory)) &amp;&amp; (?category = teamwork:homeLink)) || (?category = ?currentCategory) }\" ui:args=\"*\"/>
            </ui:if>
        </ui:forEach>
    </ul>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Renders a section of the main menu, with an optional section heading, and items provided as a result set. A slice of the result set may be displayed, based on min and max values for the ?index column." ;
  rdfs:label "Main menu section" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ManagePlugin
  a rdfs:Class ;
  rdfs:comment "(Additional) items to show up on the Manage tab." ;
  rdfs:label "Manage plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:ManagePlugins
  a teamwork:ManagePlugin ;
  ui:abstract true ;
  rdfs:label "Manage plugins" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ManageProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 50 ;
  teamwork:pluginRequiresRole teamwork:manager ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags false ;
  ui:prototype """
<div let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
        <ui:if ui:condition=\"{= !teamwork:isReadOnlyProject(?projectGraph) }\">
            <ui:if ui:condition=\"{= teamwork:isGraphStoreConfigured() }\">
                <ui:if ui:condition=\"{= !teamwork:isSingletonProjectType(?projectType) }\">
                    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:CreateClonePage }\">
                        <teamwork:ActionLink arg:comment=\"Creates a new {= teamwork:singularProjectTypeLabel(?projectType) } that has the same content as {= teamwork:projectLabel(?projectGraph) }.\" arg:faIcon=\"fa-clone\" arg:link=\"{= ?link }\" arg:title=\"Create a Cloned Version\"/>
                    </ui:createLink>
                </ui:if>
            </ui:if>
            <ui:else>
                <div title=\"Please contact your administrator to use the Configuration administration page as described in the documentation.\">
                    <teamwork:ActionLink arg:comment=\"Creates a new {= teamwork:singularProjectTypeLabel(?projectType) } that has the same content as {= teamwork:projectLabel(?projectGraph) }.\" arg:faIcon=\"fa-clone\" arg:title=\"Create a Cloned Version\"/>
                </div>
            </ui:else>
            <teamwork:ActionLink arg:comment=\"Removes all contents from this {= teamwork:singularProjectTypeLabel(?projectType) }, including the change history. The contents will not be recoverable.\" arg:icon=\"lib/teamwork/build/images/teamwork/clear-icon.svg\" arg:link=\"{= ?link }\" arg:onClick=\"{= ui:functionCall(&quot;teamwork.clearProject&quot;, teamwork:projectLabel(?projectGraph), ?projectGraph) }\" arg:title=\"Clear\"/>
            <ui:if ui:condition=\"{= !teamwork:isSingletonProjectType(?projectType) }\">
                <teamwork:ActionLink arg:comment=\"Completely deletes this {= teamwork:singularProjectTypeLabel(?projectType) }, including the change history. The contents will not be recoverable.\" arg:faIcon=\"fas fa-trash-alt\" arg:link=\"{= ?link }\" arg:onClick=\"{= ui:functionCall(&quot;teamwork.deleteProject&quot;, teamwork:projectLabel(?projectGraph), ?projectGraph) }\" arg:title=\"Delete\"/>
            </ui:if>
        </ui:if>
        <ui:try>
            <teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:ManagePlugin }\" ui:args=\"*\"/>
        </ui:try>
        <ui:catch>
            <span class=\"text-danger\">{= ?exception }<br/>
            </span>
        </ui:catch>
    </ui:if>
</div>
"""^^ui:Literal ;
  rdfs:label "Manage" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
.
teamwork:MasterObjectHistoryEntry
  a ui:NodeClass ;
  ui:prototype """
<div class=\"teamwork-history-div teamwork-history-div-master\">
    <swa:ObjectViewer ui:args=\"*\"/>
    <div class=\"teamwork-history-details\">In production vocabulary</div>
</div>
"""^^ui:Literal ;
  rdfs:label "Master object history entry" ;
  rdfs:subClassOf teamwork:ObjectHistoryEntry ;
.
teamwork:MemberSummary
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governedResource ;
      spl:valueType teamwork:GovernedResource ;
      rdfs:comment "The GovernedResource (for roles)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user to display." ;
    ] ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= teamwork:usersGraph() }\">
    <teamwork:IconElement arg:icon=\"lib/teamwork/build/images/teamwork/User-48.png\">
        <ui:insert ui:into=\"main\">
            <b>
                <teamwork:UserLink arg:user=\"{= ?user }\"/>
            </b>
            <br/>
            <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                <div class=\"teamworkSubTitle\" let:role=\"{#
                        SELECT ?role
                        WHERE {
                            ?governedResource ?role ?user .
                        } }\">Role: <b>{= teamwork:roleLabel(?role) }</b>
                    <span>. </span>
                    <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
                        <ui:createLink arg:governedResource=\"{= ?governedResource }\" arg:teamGraph=\"{= ?teamGraph }\" arg:user=\"{= ?user }\" ui:viewName=\"changeRole\">
                            <a href=\"{= ?link }\">Remove</a>
                        </ui:createLink>
                    </ui:if>
                    <br/>
                </div>
            </ui:setContext>
        </ui:insert>
    </teamwork:IconElement>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Displays sioc:UserAccounts with a \"business card\"." ;
  rdfs:label "User account summary" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:MembersList
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:forTag ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if called for a working copy." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:readOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have this not editable, regardless of anything else." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:governedResource ;
      spl:valueType teamwork:GovernedResource ;
      rdfs:comment "The governed resource (for roles)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:potentialMembers ;
      spl:valueType sp:Select ;
      rdfs:comment "A result set enumerating the potential members to populate the grid with." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
      rdfs:comment "The title to display." ;
    ] ;
  ui:prototype """
<teamwork:ActionLink arg:comment=\"Defines permission profiles for individual users or groups of users (security roles) or organizations. A user that starts a workflow gets a Manager profile and can grant permissions to others. Workflow templates can specify permission levels for governance roles. In all cases, only users with at least a Viewer permission profile for the Production Copy, can have a profile for a Working Copy managed by a workflow.\" arg:faIcon=\"fa-users\" arg:title=\"{= ?title } Permissions\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:if ui:condition=\"{= ?readOnly }\">
            <p class=\"teamwork-comment\">The workflow governing this working copy does not depend on user roles specific to the working copy.  Therefore, the user roles cannot be edited.</p>
        </ui:if>
        <ui:group let:editable=\"{= swa:falseOrUnbound(?readOnly) &amp;&amp; teamwork:currentUserHasPrivilege(?governedResource, teamwork:manager, ?teamGraph) }\" let:rolesGraph=\"{= teamwork:rolesGraph() }\" let:usersGraph=\"{= teamwork:usersGraph() }\">
            <div class=\"teamwork-members-div\">
                <table letrs:roles=\"{#
                        SELECT ?label ?role
                        WHERE {
                            GRAPH ?rolesGraph {
                                ?role (rdfs:subPropertyOf)+ teamwork:role .
                                BIND (ui:label(?role) AS ?label) .
                            } .
                        }
                        ORDER BY (?label) }\">
                    <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                            SELECT ?user ?userName ?userRole ?inferredRole
                            WHERE {
                                ( ?potentialMembers 0 ) spr:colCells ?user .
                                BIND (teamwork:userOrRoleLabel(?user) AS ?userName) .
                                OPTIONAL {
                                    ?governedResource ?userRole ?user .
                                    rdf:nil teamwork:roleProperty ?userRole .
                                } .
                                BIND (IF(swa:falseOrUnbound(?forTag), teamwork:inferredPrivilegeAtProjectGraph(?projectGraph, ?user), teamwork:inferredPrivilegeAtTag(?projectGraph, ?governedResource, ?user)) AS ?inferredRole) .
                            }
                            ORDER BY (?userName) }\">
                        <tr let:activeRole=\"{= IF((!bound(?inferredRole)), ?userRole, teamwork:highestRole(?inferredRole, ?userRole)) }\">
                            <td>
                                <ui:if ui:condition=\"{= smf:isRole(?user) }\">
                                    <i class=\"fa fa-users\"/> &nbsp;
</ui:if>
                                <ui:else>
                                    <i class=\"governance-icon icon-block fa fa-user\"/> &nbsp;
</ui:else>
                            </td>
                            <td>
                                <span>{= ?userName }</span>
                            </td>
                            <td>
                                <div id=\"roleIcon-{= ?index }\"/>
                                <script>{= ui:functionCall(\"teamwork.updateRoleIcon\", ?index, ?activeRole) }</script>
                            </td>
                            <td>
                                <ui:if ui:condition=\"{= ?editable }\">
                                    <select class=\"form-control\" onchange=\"teamwork.changeRole('{= ?governedResource }', this.options[this.selectedIndex].value, '{= ?teamGraph }', '{= ?user }', {= ?index })\">
                                        <option selected=\"{= IF(((!bound(?userRole)) &amp;&amp; (!bound(?inferredRole))), &quot;selected&quot;, ?none) }\"/>
                                        <ui:forEach ui:resultSet=\"{= ?roles }\">
                                            <option selected=\"{= IF((?role = ?activeRole), &quot;selected&quot;, ?none) }\" value=\"{= ?role }\">{= ?label }<ui:if ui:condition=\"{= (!bound(?userRole)) &amp;&amp; (?role = ?inferredRole) }\"> (via governance role)</ui:if>
                                            </option>
                                        </ui:forEach>
                                    </select>
                                </ui:if>
                                <ui:else>{= afn:localname(?userRole) }</ui:else>
                            </td>
                        </tr>
                    </ui:forEach>
                </table>
            </div>
        </ui:group>
    </ui:setContext>
</teamwork:ActionLink>
"""^^ui:Literal ;
  rdfs:label "Members list" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:MessagePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:message ;
      spl:valueType xsd:string ;
      rdfs:comment "The message to display." ;
    ] ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" ui:args=\"*\">
    <div>{= ?message }</div>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "A simple page that only displays a \"success\" message." ;
  rdfs:label "Message page" ;
  rdfs:subClassOf teamwork:ChromeElements ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:MetadataFormBody
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:group default:subject=\"{= ?resource }\" default:tabular=\"{= true }\">
    <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Overview\">
        <swa:Object arg:editWidget=\"{= swa:PlainTextFieldEditor }\" arg:predicate=\"{= metadata:identifier }\"/>
        <swa:Object arg:predicate=\"{= metadata:officialName }\"/>
        <swa:Objects arg:predicate=\"{= metadata:purpose }\"/>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(teamwork:platformGovernanceGraph())) }\">
            <swa:Object arg:predicate=\"{= edg:subjectArea }\"/>
        </ui:setContext>
        <swa:Object arg:editWidget=\"{= swa:PlainTextFieldEditor }\" arg:predicate=\"{= metadata:version }\"/>
        <swa:LabeledElement arg:label=\"last updated:\">
            <div class=\"swa-object-row swa-shifted-label\">{= ui:label(teamwork:lastChangeTime(?resource)) }</div>
        </swa:LabeledElement>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Status\">
        <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:status }\"/>
    </swa:ObjectsEnum>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Metadata form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:MetadataPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 1000 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:if ui:condition=\"{= !teamwork:areOldEditorsDisabled() }\">
    <teamwork:ActionLink arg:faIcon=\"fa-wrench\" arg:title=\"Metadata\">
        <ui:try>
            <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(teamwork:masterGraphForCurrentUser(?projectGraph)), &lt;http://topbraid.org/metadata&gt;, &lt;http://topbraid.org/teamwork&gt;) }\">
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNoLink }\">
                    <div class=\"teamwork-metadata-form\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
                        <swa:SwitchableForm arg:editable=\"{= (!bound(?tag)) &amp;&amp; teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:editor, ?teamGraph) }\" arg:hideVisualizationsButton=\"{= true }\" arg:matchIds=\"metadata\" arg:matchIdsOnly=\"{= true }\" arg:resource=\"{= ?projectGraph }\" arg:showURI=\"{= false }\" arg:suppressHeader=\"{= true }\"/>
                    </div>
                </ui:setContext>
            </ui:setContext>
        </ui:try>
        <ui:catch>
            <span class=\"text-danger\">{= ?exception }<br/>
            </span>
        </ui:catch>
    </teamwork:ActionLink>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Metadata plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:MockDataTableColumnsJSON
  a ui:NodeClass ;
  ui:prototype """
<swon:Array>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"name\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Name\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"weight\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Weight\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"type\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Type\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
        <swon:Value arg:name=\"title\" arg:value=\"URI\"/>
    </swon:Object>
</swon:Array>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MockDataTableColumnsJSON2
  a ui:NodeClass ;
  ui:prototype """
<swon:Array>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"name\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Name2\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"weight\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Weight2\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"type\"/>
        <swon:Value arg:name=\"title\" arg:value=\"Type2\"/>
    </swon:Object>
    <swon:Object>
        <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
        <swon:Value arg:name=\"title\" arg:value=\"URI2\"/>
    </swon:Object>
</swon:Array>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MockDataTableJSON
  a ui:NodeClass ;
  ui:prototype """
<swon:Object>
    <swon:Value arg:name=\"data\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 1\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 2\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 3\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 4\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 5\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Garfield\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"orange tabby\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat6.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 6\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 7\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 8\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 9\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 10\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 11\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 12\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 13\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 14\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 15\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
        </swon:Array>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MockDataTableJSON2
  a ui:NodeClass ;
  ui:prototype """
<swon:Object>
    <swon:Value arg:name=\"data\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 1(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 2(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 3(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 4(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 5(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Garfield(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"orange tabby\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat6.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 6(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 7(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 8(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 9(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 10(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 11(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"4lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"persian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat1.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 12(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"18lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"exotic shorthair\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat2.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 13(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"9lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"abyssinian\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat3.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 14(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"burmese\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat4.jpg\"/>
            </swon:Object>
            <swon:Object>
                <swon:Value arg:name=\"name\" arg:value=\"Friendly cat 15(2)\"/>
                <swon:Value arg:name=\"weight\" arg:value=\"6.5lbs\"/>
                <swon:Value arg:name=\"type\" arg:value=\"ragdoll\"/>
                <swon:Value arg:name=\"uri\" arg:value=\"http://localhost:8082/images/cat5.jpg\"/>
            </swon:Object>
        </swon:Array>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:MustHaveAccessToProjectPage
  a ui:NodeClass ;
  ui:errorPrototype """
<ui:group>
    <ui:if ui:condition=\"{= (!bound(?projectGraph)) || (!teamwork:hasTeamGraph(?projectGraph)) }\">
        <teamwork:ErrorPage arg:message=\"Asset collection {= ?projectGraph } does not exist.\" arg:status=\"{= 404 }\"/>
    </ui:if>
    <ui:else let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:if ui:condition=\"{= !teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, ?teamGraph) }\">
            <teamwork:ErrorPage arg:message=\"You do not have access to this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\"/>
        </ui:if>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Base class for pages that require the current user to have access to given project." ;
  rdfs:label "Must have access to project page" ;
  rdfs:subClassOf teamwork:ProjectElements ;
  rdfs:subClassOf teamwork:RestrictedPage ;
.
teamwork:MustHaveAccessToProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI of the collection." ;
    ] ;
  ui:errorPrototype """
<ui:group>
    <ui:if ui:condition=\"{= !bound(?projectGraph) }\">
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"No project specified - invalid URL\"/>
        </swon:Object>
    </ui:if>
    <ui:else>
        <ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:if ui:condition=\"{= !teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, ?teamGraph) }\">
                <swon:Object>
                    <swon:Value arg:name=\"error\" arg:value=\"You do not have access to this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\"/>
                </swon:Object>
            </ui:if>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Base class for services that require the current user to have access to given project." ;
  rdfs:label "Must have access to project service" ;
  rdfs:subClassOf teamwork:RestrictedService ;
.
teamwork:MustHaveAccessToTagPage
  a ui:NodeClass ;
  ui:abstract true ;
  ui:errorPrototype """
<ui:group>
    <ui:if ui:condition=\"{= (!bound(?projectGraph)) || (!teamwork:hasTeamGraph(?projectGraph)) }\">
        <teamwork:ErrorPage arg:message=\"Asset collection {= ?projectGraph } does not exist.\" arg:status=\"{= 404 }\"/>
    </ui:if>
    <ui:else let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:if ui:condition=\"{= bound(?tag) }\">
            <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                <ui:if ui:condition=\"{= NOT EXISTS {
                    ?tag a teamwork:Tag .
                } }\">
                    <teamwork:ErrorPage arg:message=\"Workflow {= ?tag } does not exist.\" arg:status=\"{= 404 }\"/>
                </ui:if>
                <ui:elseif ui:condition=\"{= !teamwork:currentUserHasPrivilege(?tag, teamwork:viewer, ?teamGraph) }\">
                    <teamwork:ErrorPage arg:message=\"You do not have access to this workflow.\"/>
                </ui:elseif>
            </ui:setContext>
        </ui:if>
        <ui:else>
            <ui:if ui:condition=\"{= !teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, ?teamGraph) }\">
                <teamwork:ErrorPage arg:message=\"You do not have access to this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }\"/>
            </ui:if>
        </ui:else>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays an error page if the current user does not have access to the current tag." ;
  rdfs:label "Must have access to tag page" ;
  rdfs:subClassOf teamwork:RestrictedPage ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:NTFileExportPlugin
  a teamwork:ExportPlugin ;
  a owl:DeprecatedClass ;
  teamwork:pluginIndex 3 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:NTriple }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
    <teamwork:ActionLink arg:comment=\"Creates an RDF file in N-Triples format.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-n-triple.svg\" arg:link=\"{= ?link }\" arg:title=\"N-Triple\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "NT file export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:NavigationDivider
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:group> &gt; </ui:group>
"""^^ui:Literal ;
  rdfs:label "Navigation divider" ;
  rdfs:subClassOf swa:Elements ;
.
teamwork:NeighborGramHeaderLabelFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    a swa:resourceType ;
                    arg:resource [
                        sp:varName "focusNode" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "typeLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "focusNode" ;
                      ] ;
                  ] ;
                sp:arg2 "  (" ;
                sp:arg3 [
                    sp:varName "typeLabel" ;
                  ] ;
                sp:arg4 ")" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "The header label function for the NeighborGram, displaying the ui:label of the focus node and the label of the rdf:type in parantheses." ;
  rdfs:label "NeighborGram header label function" ;
  rdfs:subClassOf swa:HeaderLabelFunctions ;
.
teamwork:NeighborGramPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  ui:prototype """
<teamwork:NeighborGramTemplate ui:args=\"*\">
    <ui:insert ui:into=\"header\">
        <teamwork:Header arg:onSearchSelect=\"neighborGram.setFocusNode(resource)\" arg:suppressQuickNavigation=\"{= true }\">
            <span id=\"selectedNode\">NeighborGram&trade; for {= ui:label(?focusNode) }</span>
        </teamwork:Header>
    </ui:insert>
</teamwork:NeighborGramTemplate>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf swa:ScriptElements ;
.
teamwork:NeighborGramTemplate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The focus node of the diagram" ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>NeighborGram&trade;</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:defaultQueryGraph=\"{= IF(teamwork:hasTeamGraph(ui:currentQueryGraph()), ui:currentQueryGraph(), ui:graphWithImports(IRI(smf:definedIn(?focusNode)))) }\" let:headerLabelFunction=\"{= teamwork:NeighborGramHeaderLabelFunction }\" let:nodeFocusedEvent=\"org.topbraid.neighborGram.nodeFocused\" ui:varName=\"swaAppName\" ui:varValue=\"NeighborGram\">
    <div class=\"ui-layout-north\" id=\"headerPanel\">
        <ui:insertionPoint ui:pointId=\"header\"/>
    </div>
    <div class=\"ui-layout-center\" id=\"center-pane\">
        <swa:NeighborGramPane arg:focusNode=\"{= ?focusNode }\"/>
    </div>
    <ui:setContext ui:varName=\"swaOnOpenResource\" ui:varValue=\"teamwork.onOpenNeighborGramResource(teamwork.getHomeVocabulary(resource,'{= ui:currentQueryGraph() }','{= ?defaultQueryGraph }'), resource);\">
        <swa:Window arg:id=\"detailsPanel\" arg:layoutPanel=\"east\" arg:title=\"{= spif:invoke(?headerLabelFunction, ?focusNode) }\">
            <ui:insert ui:into=\"1\">
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= teamwork:createNeighborGramLink }\">
                    <swa:WindowTitleSetter arg:title=\"{= spif:invoke(?headerLabelFunction, ?focusNode) }\"/>
                    <swa:ViewForm arg:resource=\"{= ?focusNode }\" arg:showURI=\"{= true }\" arg:showURIEditorLink=\"{= true }\"/>
                    <swa:SubscribeArgument arg:argumentName=\"focusNode\" arg:event=\"{= ?nodeFocusedEvent }\"/>
                </ui:setContext>
            </ui:insert>
        </swa:Window>
    </ui:setContext>
    <swa:Initializer/>
    <script>var layout;
	$(document).ready(function () {
		layout = $('body').layout({
			applyDefaultStyles: true,
			defaults: {
				resizable: true,
				slidable: true
			},
			north: {
				closable: false,
				pane_spacing: 0,
				resizable: false,
				slidable: false,
				spacing_open: 0,
				togglerLength_open: 0
			},
			center: {
				onresize_end:  function () { neighborGram.refreshLayout(); }
			},
			east: {
				initClosed: true,
				togglerTip_closed: 'More Details',
				size: window.innerWidth * 0.25
			}
		});
	});</script>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf swa:ScriptElements ;
.
teamwork:NestedPropertyShapeEditor
  a swa:ObjectEditorClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressPredicate ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress the sh:path predicate." ;
    ] ;
  ui:private true ;
  ui:prototype """
<div class=\"teamwork-nested-property-shape-editor\" let:homeGraph=\"{= IF(bound(?object), IRI(smf:definedIn(?object)), ?none) }\">
    <ui:if ui:condition=\"{= bound(?object) &amp;&amp; dash:isDeactivated(?object) }\">
        <div class=\"teamwork-constraint-deactivated\" let:graph=\"{= smf:tripleDefinedIn(?object, sh:deactivated, true) }\">
            <span>Deactivated</span>
            <ui:if ui:condition=\"{= bound(?graph) }\">
                <span> in </span>
                <b>{= teamwork:projectLabel(?graph) }</b>
            </ui:if>
        </div>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?homeGraph) &amp;&amp; (?homeGraph != teamwork:currentMasterGraph()) }\">
        <div class=\"swa-home-graph\">
            <span>Included from </span>
            <b>{= teamwork:projectLabel(?homeGraph) }</b>
            <ui:if ui:condition=\"{= isBlank(?object) }\">
                <span> and not extensible here</span>
            </ui:if>
        </div>
    </ui:if>
    <ui:setContext let:id=\"{= ui:uniqueId() }\" ui:varName=\"resourceType\" ui:varValue=\"{= sh:PropertyShape }\">
        <div id=\"{= ?id }\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT DISTINCT ?group
                    WHERE {
                        ?unbound swa:propertyGroupsForNode ?group .
                        FILTER (swa:falseOrUnbound(?suppressPredicate) || (?group != tosh:AboutPropertyGroup)) .
                        BIND (COALESCE(spl:object(?group, sh:order), 9999999) AS ?order) .
                        BIND (ui:label(?group) AS ?label) .
                    }
                    ORDER BY (?order) (?label) }\">
                <swa:ShapePropertyGroupSection arg:focusNode=\"{= ?object }\" arg:group=\"{= ?group }\"/>
            </ui:forEach>
        </div>
        <script>teamwork.showMessageIfAllPropertyGroupsHidden('{= ?id }')</script>
    </ui:setContext>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf swa:ObjectEditor ;
.
teamwork:NoEditorApplicationStatus
  a teamwork:EditableStatus ;
  teamwork:faIcon "fa-stop" ;
  rdfs:comment "This type of asset collection cannot be viewed or edited." ;
  rdfs:label "No editor application status" ;
.
teamwork:NodeShapeFormBody
  a ui:ResourceViewClass ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, rdfs:Class) }\">
        <teamwork:SimpleClassFormBody arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <ui:else>
        <div default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\">
            <ui:if ui:condition=\"{= swa:isViewMode() }\">
                <teamwork:ResourceHistoryPanel arg:resource=\"{= ?resource }\"/>
            </ui:if>
            <swa:ObjectsEnum arg:label=\"Labels and Description\">
                <swa:Objects arg:predicate=\"{= rdfs:label }\"/>
                <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= rdfs:comment }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
                <swa:ObjectsPlaceholder arg:filterFunction=\"{= swa:isAnnotationProperty }\" arg:suppressShapeSection=\"{= true }\"/>
            </swa:ObjectsEnum>
            <swa:ObjectsEnum arg:label=\"Targets and Applicability\">
                <swa:Objects arg:predicate=\"{= sh:targetClass }\"/>
                <swa:Objects arg:predicate=\"{= sh:targetObjectsOf }\"/>
                <swa:Objects arg:predicate=\"{= sh:targetSubjectsOf }\"/>
                <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:targetNode }\"/>
                <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:target }\"/>
                <swa:Objects arg:predicate=\"{= dash:applicableToClass }\"/>
                <swa:Objects arg:editWidget=\"{= teamwork:WorkflowParticipantPropertySelectEditor }\" arg:hideInModes=\"search\" arg:predicate=\"{= dash:defaultViewForRole }\" arg:viewWidget=\"{= teamwork:WorkflowParticipantPropertyViewer }\"/>
            </swa:ObjectsEnum>
            <swa:ObjectsEnum arg:label=\"Constraints\">
                <swa:Objects arg:editWidget=\"{= teamwork:PropertyShapeEditor }\" arg:label=\"property shapes\" arg:predicate=\"{= sh:property }\"/>
                <swa:Objects arg:hideInModes=\"edit,search\" arg:predicate=\"{= sh:sparql }\"/>
            </swa:ObjectsEnum>
            <swa:ObjectsPlaceholder arg:filterFunction=\"{= teamwork:filterSimpleClassFormProperties }\" arg:label=\"Additional Characteristics\"/>
            <ui:if let:loadId=\"{= ui:uniqueId() }\" ui:condition=\"{= swa:isViewMode() }\">
                <div class=\"swa-objects-group\">
                    <swa:LoadableFormSection arg:label=\"Relevant Properties Table\" arg:loadId=\"{= ?loadId }\">
                        <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                            <swaclasses:RelevantPropertiesWidget arg:class=\"{= ?resource }\"/>
                        </ui:loadable>
                    </swa:LoadableFormSection>
                </div>
            </ui:if>
            <teamwork:UMLDiagramsSection arg:kind=\"Node Shape\"/>
        </div>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The default view for sh:NodeShape." ;
  rdfs:label "Node shape form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:ObjectHistoryEntry
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The comment attached to the teamwork:Change (if any)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag (working copy) associated with an item." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:date ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The time stamp of the edit." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      rdfs:comment "The value that was deleted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate in the deleted triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject in the deleted triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user object that has made the change." ;
    ] ;
  ui:abstract true ;
  rdfs:comment "Abstract base class for added or deleted object history entries." ;
  rdfs:label "Object history entry" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:OnOpenResourceService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to open." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object let:graph=\"{= IRI(smf:definedIn(?resource)) }\">
    <ui:if ui:condition=\"{= (bound(?graph) &amp;&amp; teamwork:hasTeamGraph(?graph)) &amp;&amp; teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, teamwork:teamGraph(?graph)) }\">
        <ui:if ui:condition=\"{= teamwork:currentGraphIsTag(?graph) }\">
            <swon:Value arg:name=\"link\" arg:value=\"{= teamwork:editorLink(teamwork:tagId(?graph)) }#{= ENCODE_FOR_URI(str(?resource)) }\"/>
        </ui:if>
        <ui:else>
            <swon:Value arg:name=\"link\" arg:value=\"{= teamwork:editorLink(?graph) }#{= ENCODE_FOR_URI(str(?resource)) }\"/>
        </ui:else>
    </ui:if>
</swon:Object>
"""^^ui:Literal ;
  rdfs:comment "This service is used by the arrow button that shows up behind resources on forms. The service determines whether the resource is from a different home graph, and then returns a link to the right editor with a direct deep link into the given resource." ;
  rdfs:label "On open resource service" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:Page
  a ui:NodeClass ;
  ui:abstract true ;
  ui:headIncludes """
<ui:group>
    <title>TopBraid {= teamwork:getProductAbbreviation() }</title>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Root class for all top-level pages." ;
  rdfs:label "Page" ;
  rdfs:subClassOf swa:Elements ;
.
teamwork:ParseIfLiteral
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:node ;
      rdfs:comment "The node to render." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isLiteral(?node) }\">
        <ui:parse ui:str=\"{= ?node }\"/>
    </ui:if>
    <ui:else>{= ui:label(?node) }</ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "If a given node (arg:node) is a literal, then this uses <ui:parse> to render it, otherwise ui:label." ;
  rdfs:label "Parse if literal" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:PermissionsAssignmentFormBody
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:group let:masterGraph=\"{= teamwork:currentMasterGraph() }\">
    <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Permissions\" arg:open=\"{= false }\" arg:openable=\"{= ?openable }\" default:hideIfEmpty=\"{= true }\" let:rolesGraph=\"{= teamwork:rolesGraph() }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?property
                WHERE {
                    GRAPH ?rolesGraph {
                        ?property (rdfs:subPropertyOf)+ teamwork:role .
                    } .
                } }\">
            <swa:Objects arg:editWidget=\"{= teamwork:GraphPermissionUserSelectEditor }\" arg:predicate=\"{= ?property }\" arg:subject=\"{= ?resource }\" arg:viewWidget=\"{= governance:AssetViewer }\"/>
        </ui:forEach>
    </swa:ObjectsEnum>
    <ui:setContext default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?masterGraph }\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), teamwork:platformGovernanceGraph()) }\">
        <ui:group letrs:subjectAreaPermissions=\"{#
                SELECT DISTINCT ?permission
                WHERE {
                    ?masterGraph edg:subjectArea ?subjectArea .
                    ?permission a edg:PermissionGovernanceRoleProperty .
                    ?subjectArea ?permission ?role .
                } }\">
            <ui:if ui:condition=\"{= !spr:isEmpty(?subjectAreaPermissions) }\">
                <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Edit Permissions via Subject Areas\">
                    <ui:forEach ui:resultSet=\"{= ?subjectAreaPermissions }\">
                        <swa:LabeledElement arg:label=\"{= ui:label(?permission) }:\">
                            <ui:forEach ui:resultSet=\"{#
                                    SELECT DISTINCT ?role
                                    WHERE {
                                        ?masterGraph edg:subjectArea ?subjectArea .
                                        ?subjectArea ?permission ?role .
                                    } }\">
                                <governance:AssetViewer arg:object=\"{= ?role }\"/>
                            </ui:forEach>
                        </swa:LabeledElement>
                    </ui:forEach>
                </swa:ObjectsEnum>
            </ui:if>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays a section that shows permissions assignments for the resource. Editable." ;
  rdfs:label "Permissions assignment form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:Plugin
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:index ;
      spl:valueType xsd:integer ;
      rdfs:comment "An optional index that can be used by containers to determine the ordering of the plugins. The rule of thumb is that lower values will show up further left/up." ;
    ] ;
  rdfs:label "Plugin" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:PopulateUsersDropdown
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withHiddenRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include \"hidden\" systen users and roles" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include security roles as well as users." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "HTML id of the select element to populate" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:selectedUser ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "Optional user (<urn:x-tb:users:xxx>) to initially select in the dropdown." ;
    ] ;
  ui:prototype """
<script let:temp=\"{= IF(bound(?selectedUser), ui:encodeNode(?selectedUser, true, true), ?null) }\">{= ui:functionCall(\"teamwork.populateUsersDropdown\", ?id, ?temp, ?withRoles, ?withHiddenRoles) }</script>
"""^^ui:Literal ;
  rdfs:comment "Populates a select element with options for each user known to the system. The list is only loaded from the server once, to speed up situations with many users and multiple such dropdowns on a page." ;
  rdfs:label "populate users dropdown" ;
  rdfs:subClassOf ui:ViewElements ;
.
teamwork:PostCreateProjectFromHandler
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:keepSubjectAreas ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:version ;
      spl:valueType xsd:string ;
      rdfs:comment "Optionally specify a version for the new project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?targetGraph) }\">
    <ui:subTask ui:subTaskName=\"{= ?name }: Copying master graph\" ui:work=\"{= 1 }\">
        <ui:setContext ui:queryGraph=\"{= ?targetGraph }\" ui:silentTransactions=\"{= true }\">
            <ui:transaction ui:logMessage=\"Copying master graph\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?s ?p ?o .
                        }
                        WHERE {
                            GRAPH ?sourceGraph {
                                ?s ?p ?o .
                            } .
                        } }\"/>
            </ui:transaction>
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?sourceGraph ?p ?o .
                    }
                    INSERT {
                        ?targetGraph ?p ?o .
                    }
                    WHERE {
                        ?sourceGraph ?p ?o .
                    } }\"/>
            <ui:setPropertyValue arg:property=\"{= rdfs:label }\" arg:value=\"{= ?name }\" ui:this=\"{= ?targetGraph }\"/>
            <ui:if ui:condition=\"{= bound(?version) }\">
                <ui:setPropertyValue arg:property=\"{= metadata:version }\" arg:value=\"{= ?version }\" ui:this=\"{= ?targetGraph }\"/>
            </ui:if>
            <ui:setPropertyValue arg:property=\"{= metadata:status }\" arg:value=\"{= metadata:UnderDevelopmentStatus }\" ui:this=\"{= ?targetGraph }\"/>
            <ui:if ui:condition=\"{= bound(?subjectArea) }\">
                <ui:setPropertyValue arg:property=\"{= IRI(&quot;http://edg.topbraid.solutions/model/subjectArea&quot;) }\" arg:value=\"{= ?subjectArea }\" ui:this=\"{= ?targetGraph }\"/>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= swa:falseOrUnbound(?keepSubjectAreas) }\">
                    <ui:removePropertyValues arg:property=\"{= IRI(&quot;http://edg.topbraid.solutions/model/subjectArea&quot;) }\" ui:this=\"{= ?targetGraph }\"/>
                </ui:if>
            </ui:else>
        </ui:setContext>
    </ui:subTask>
    <ui:subTask ui:subTaskName=\"{= ?name }: Copying metadata\" ui:work=\"{= 1 }\">
        <ui:group let:newTCH=\"{= teamwork:teamGraph(?targetGraph) }\" let:oldTCH=\"{= teamwork:teamGraph(?sourceGraph) }\">
            <ui:setContext ui:queryGraph=\"{= ?newTCH }\" ui:silentTransactions=\"{= true }\">
                <ui:transaction ui:logMessage=\"Copying metadata\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?newTCH ?p ?o .
                            }
                            WHERE {
                                GRAPH ?oldTCH {
                                    ?oldTCH ?p ?o .
                                } .
                                FILTER (?p != teamwork:indexingServer) .
                            } }\"/>
                </ui:transaction>
                <ui:removePropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?sourceGraph }\" ui:this=\"{= ?newTCH }\"/>
                <ui:removePropertyValues arg:property=\"{= teamwork:published }\" ui:this=\"{= ?newTCH }\"/>
                <ui:addPropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?targetGraph }\" ui:this=\"{= ?newTCH }\"/>
                <ui:setPropertyValue arg:property=\"{= dcterms:created }\" arg:value=\"{= now() }\" ui:this=\"{= ?newTCH }\"/>
            </ui:setContext>
        </ui:group>
    </ui:subTask>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?plugin
            WHERE {
                GRAPH ui:graph {
                    ?projectType teamwork:clonePlugin ?plugin .
                } .
            } }\">
        <ui:dynamicView arg:newProjectGraph=\"{= ?targetGraph }\" arg:oldProjectGraph=\"{= ?sourceGraph }\" ui:class=\"{= ?plugin }\"/>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a clone of a given project, under a different name." ;
  rdfs:label "Clone project service" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:PostView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType sioc:Post ;
      rdfs:comment "The sioc:Post to render." ;
    ] ;
  ui:prototype """
<div let:content=\"{= spl:object(?subject, sioc:content) }\" let:created=\"{= spl:object(?subject, dcterms:created) }\" let:has_creator=\"{= spl:object(?subject, sioc:has_creator) }\">
    <div>
        <ui:if ui:condition=\"{= bound(?content) }\">
            <ui:parse ui:str=\"{= html:encodeBRs(?content) }\"/>
        </ui:if>
        <ui:else>(Empty)</ui:else>
    </div>
    <div class=\"teamwork-post-view-info\">Created by: <teamwork:UserLabel arg:node=\"{= ?has_creator }\"/> on <teamwork:DateTime arg:node=\"{= ?created }\"/>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:comment "Default rendering of a sioc:Post." ;
  rdfs:label "Post view" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:PotentialUsersAndGroupsForProject
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "user" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "user" ;
                      ] ;
                    sp:predicate smf:user ;
                    sp:subject () ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "role" ;
                      ] ;
                    sp:predicate smf:role ;
                    sp:subject () ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:roleURI ;
                        arg:roleName [
                            sp:varName "role" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "user" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a teamwork:isHiddenRole ;
                    arg:role [
                        sp:varName "user" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Used to populate the list of potential users and groups in the roles section of a project's page. Includes all known users and groups in the system." ;
  rdfs:label "Potential users and groups for project" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:PotentialUsersAndGroupsForTag
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "user" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "user" ;
                      ] ;
                    sp:predicate [
                        sp:varName "role" ;
                      ] ;
                    sp:subject [
                        sp:varName "teamGraph" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "role" ;
                      ] ;
                    sp:predicate teamwork:roleProperty ;
                    sp:subject () ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:masterGraphForCurrentTeamGraph ;
                      ] ;
                    sp:variable [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "user" ;
                      ] ;
                    sp:predicate teamwork:partyInAnyGovernanceRoleAtProjectGraph ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:or ;
                        sp:arg1 [
                            a smf:isRole ;
                            arg:resource [
                                sp:varName "user" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a smf:isUserAccount ;
                            arg:node [
                                sp:varName "user" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The teamGraph" ;
    ] ;
  spin:private true ;
  rdfs:comment "Used to populate the list of potential users and groups for tags of a given teamGraph. This returns all users and groups that already have roles in the surrounding project including those derived by governance roles." ;
  rdfs:label "Potential users and groups for tag" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:PrintViewForm
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showURI ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include the URI of the resource in the header." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showURIEditorLink ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a -> button behind the URI, allowing users to navigate to the resource in its dedicated editor." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display." ;
    ] ;
  ui:prototype """
<ui:setContext ui:varName=\"mode\" ui:varValue=\"view\">
    <form class=\"swa-form view-mode ui-layout-content\">
        <ui:if ui:condition=\"{= ?showURI }\">
            <div class=\"swa-uri\" let:op=\"{= ui:contextValue(&quot;swaOnOpenResource&quot;) }\">
                <ui:if ui:condition=\"{= ?showURIEditorLink &amp;&amp; bound(?op) }\">
                    <a href=\"javascript:void(0)\" onclick=\"var resource='{= ui:encodeNode(?resource, true, true) }';{= ?op };\" title=\"Open in a new Window\">
                        <span>{= ?resource }</span>
                        <span class=\"swa-uri-resource-viewer-menu swa-icon ui-icon ui-icon-arrow-1-e\"/>
                    </a>
                </ui:if>
                <ui:else>
                    <span>{= ?resource }</span>
                </ui:else>
            </div>
        </ui:if>
        <div class=\"swa-form-body\">
            <ui:setContext ui:varName=\"swa-no-edit-button\" ui:varValue=\"{= true }\">
                <ui:resourceView ui:matchIds=\"view,form\" ui:resource=\"{= ?resource }\"/>
                <swa:DataViewsSection arg:resource=\"{= ?resource }\"/>
            </ui:setContext>
            <script>setTimeout(swa.whenReady(function() { window.print() }),250);</script>
        </div>
    </form>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "A read-only print form that can be inserted into an swa:Window to display the details of a given resource." ;
  rdfs:label "View form" ;
  rdfs:subClassOf swa:Form ;
.
teamwork:ProjectElements
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI of the vocabulary." ;
    ] ;
  ui:abstract true ;
  rdfs:label "Project elements" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ProjectPage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dialogMessage ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional message that can be set from a caller to be displayed in a dialog when the page is loaded." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "The tab to highlight in the tab bar" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tabName ;
      spl:valueType xsd:string ;
      rdfs:comment "DEPRECATED. Use arg:projectTab instead." ;
    ] ;
  ui:headIncludes """
<ui:group>
    <script src=\"{= ui:lib() }/teamwork/build/teamworkflows.bundle.js\"/>
    <script>teamwork.initRichTextEditors()</script>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <script>document.title=\"{= teamwork:graphLabel(?projectGraph) } Project\"</script>
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:isProjectTabsPage=\"{= true }\" arg:pageType=\"project-page\" arg:projectTab=\"{= COALESCE(?projectTab, IF(bound(?tag), teamwork:StatusTagTab, teamwork:DashboardProjectTab)) }\" ui:args=\"*\">
            <script>swa.queryGraphURI = '{= ui:currentQueryGraph() }';</script>
            <ui:call arg:pluginType=\"{= teamwork:ProjectTab }\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" arg:tag=\"{= ?tag }\" arg:withInvalidForTags=\"{= true }\" ui:template=\"{= teamwork:GetMatchingProjectPlugins }\" ui:varName=\"tabs\">
                <ui:forEach ui:resultSet=\"{= ?tabs }\">
                    <ui:loadable class=\"project-tab\" id=\"loadable-tabs-{= afn:localname(?plugin) }\" ui:loadOnDemand=\"{= true }\">
                        <ui:if ui:condition=\"{= bound(?tag) &amp;&amp; (!?validForTags) }\">
                            <p>This is unavailable when in a workflow.</p>
                            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                <button class=\"btn btn-primary teamwork-leave-workflow-link\" onclick=\"$('a.teamwork-leave-workflow-link')[0].click()\" type=\"button\">
                                    <i class=\"fa fa-times-circle\"/> Leave workflow and return to production copy</button>
                            </ui:createLink>
                        </ui:if>
                        <ui:else>
                            <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:class=\"{= ?plugin }\"/>
                        </ui:else>
                    </ui:loadable>
                </ui:forEach>
            </ui:call>
        </teamwork:Chrome>
    </ui:setContext>
    <ui:if ui:condition=\"{= bound(?dialogMessage) }\">
        <script>{= ui:functionCall(\"swa.populateModalDialog\", ?dialogMessage) }</script>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The main page of an asset collection, responsible for handling the project tab bar and displaying the appropriate tab." ;
  rdfs:label "Project page" ;
  rdfs:subClassOf tasks:Elements ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ProjectPlugin
  a rdfs:Class ;
  rdfs:label "Project plugin" ;
  rdfs:subClassOf ui:NodeClass ;
.
teamwork:ProjectPluginsPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pluginType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class of plugins." ;
    ] ;
  ui:prototype """
<ui:call arg:pluginType=\"{= ?pluginType }\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" arg:tag=\"{= ?tag }\" ui:template=\"{= teamwork:GetMatchingProjectPlugins }\">
    <ui:forEach ui:resultSet=\"{= ?rs }\">
        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:class=\"{= ?plugin }\"/>
    </ui:forEach>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "A section at the bottom of project pages with links to run plugins such as importers and reports." ;
  rdfs:label "Project plugins panel" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ProjectSummary
  a rdfs:Class ;
  rdfs:label "Project summary" ;
  rdfs:subClassOf ui:NodeClass ;
.
teamwork:ProjectSummaryGroup
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The partial label." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType rdf:Property ;
      rdfs:comment "The role property." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate ui:resultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "The result set with ?projectGraph as its first column." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group letrs:rs=\"{#
        SELECT ?projectGraph ?teamGraph
        WHERE {
            ?resultSet spr:rowIndices ?rowIndex .
            BIND (spr:cell(?resultSet, ?rowIndex, 0) AS ?projectGraph) .
            BIND (spr:cell(?resultSet, ?rowIndex, 1) AS ?teamGraph) .
            FILTER (((!bound(?role)) &amp;&amp; (!teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, ?teamGraph))) || ((bound(?role) &amp;&amp; teamwork:currentUserHasPrivilegeOnMasterGraph(?role, ?teamGraph)) &amp;&amp; (!(teamwork:currentUserHasBetterRoleAtProject(?role, ?teamGraph) || (uix:isAdmin() &amp;&amp; (?role != teamwork:manager)))))) .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
        <ui:forEach ui:indexVar=\"row\" ui:resultSet=\"{= ?rs }\">
            <teamwork:ProjectSummaryView arg:loadLazily=\"{= ?row &gt; 10 }\" arg:projectGraph=\"{= ?projectGraph }\"/>
        </ui:forEach>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A group of project summaries for all projects where the current user has a given role in." ;
  rdfs:label "Project summary group" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ProjectSummaryView
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:loadLazily ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, display only the title line, and load the rest of the summary lazily in a separate HTTP call." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withProjectType ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to also show the vocabulary type behind the name." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:if ui:condition=\"{= bound(?teamGraph) }\">
        <ui:group let:hasEditorApp=\"{= teamwork:hasEditorApplication(?projectType) }\" let:isExplorer=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
            <section class=\"teamwork-with-icon\" let:link=\"{= IF(?hasEditorApp, teamwork:editorLink(?projectGraph), teamwork:projectLink(?projectGraph)) }\">
                <div class=\"icon\">
                    <a href=\"{= ?link }\">
                        <governance:Icon arg:type=\"{= ?projectType }\"/>
                    </a>
                </div>
                <div class=\"body\">
                    <h3>
                        <a href=\"{= ?link }\">{= teamwork:projectLabel(?projectGraph) }</a>
                        <ui:if ui:condition=\"{= EXISTS {
                            GRAPH ?projectGraph {
                                ?projectGraph metadata:isEnterprise true .
                            } .
                        } }\">
                            <swa:Space/>
                            <span>(Enterprise Dataset)</span>
                        </ui:if>
                        <ui:if ui:condition=\"{= ?withProjectType }\">
                            <swa:Space/>
                            <span>({= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) })</span>
                        </ui:if>
                    </h3>
                    <ui:try>
                        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                            <ui:group let:comment=\"{= spl:object(?projectGraph, rdfs:comment) }\">
                                <ui:if ui:condition=\"{= bound(?comment) }\">
                                    <p class=\"small text-muted\">
                                        <ui:parse ui:str=\"{= ?comment }\"/>
                                    </p>
                                </ui:if>
                            </ui:group>
                        </ui:setContext>
                    </ui:try>
                    <ui:loadable ui:loadLater=\"{= !swa:falseOrUnbound(?loadLazily) }\">
                        <ui:setContext ui:shapesGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?teamGraph), teamwork:workflowsGraph()) }\">
                            <ui:group letrs:tags=\"{#
                                    SELECT ?tag ?tagLabel ?canView
                                    WHERE {
                                        ( ?projectGraph ?teamGraph ) teamwork:tags ( ?tag ?tagLabel ) .
                                        BIND (teamwork:currentUserHasPrivilege(?tag, teamwork:viewer, ?teamGraph) AS ?canView) .
                                        FILTER teamwork:hasTagTransitions(?projectGraph, ?tag) .
                                    }
                                    ORDER BY (?tagLabel) }\">
                                <div>
                                    <span>Created by</span>
                                    <swa:Space/>
                                    <teamwork:UserLink arg:user=\"{= teamwork:getCreator(?teamGraph) }\"/>
                                    <swa:Space/>
                                    <span>on {= ui:label(teamwork:getCreated(?teamGraph)) }.</span>
                                    <ui:group let:changeUser=\"{= teamwork:lastChangeUser(?projectGraph) }\">
                                        <ui:if ui:condition=\"{= bound(?changeUser) }\">
                                            <swa:Space/>
                                            <span>Last changed by</span>
                                            <swa:Space/>
                                            <teamwork:UserLink arg:user=\"{= ?changeUser }\"/>
                                            <swa:Space/>
                                            <span>on {= ui:label(teamwork:lastChangeTime(?projectGraph)) }.</span>
                                        </ui:if>
                                    </ui:group>
                                    <swa:Space/>
                                    <strong>You have actions for {= spr:rowCount(?tags) } workflows.</strong>
                                    <br/>
                                </div>
                                <ui:try>
                                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                                        <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:projectSummaryClass, ui:graph), teamwork:DefaultProjectSummary) }\"/>
                                    </ui:setContext>
                                </ui:try>
                                <ui:catch>
                                    <span class=\"teamworkSummary text-danger\">{= ?exception }<br/>
                                    </span>
                                </ui:catch>
                                <ui:if ui:condition=\"{= (!teamwork:isExplorerUser(smf:userWithName(smf:currentUserName()))) || teamwork:explorerUsersCanViewWorkingCopies() }\">
                                    <ui:if ui:condition=\"{= !spr:isEmpty(?tags) }\">
                                        <div>
                                            <strong>You have permissions for: </strong>
                                            <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                                                <ui:forEach ui:resultSet=\"{= ?tags }\">
                                                    <ui:if ui:condition=\"{= ?canView }\">
                                                        <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                                                            <a href=\"{= ?link }\">{= teamwork:tagLabelWithWorkflow(?projectGraph, ?tag) }</a>
                                                        </ui:createLink>
                                                        <swa:Space/>
                                                    </ui:if>
                                                </ui:forEach>
                                            </ui:setContext>
                                        </div>
                                    </ui:if>
                                    <ui:if ui:condition=\"{= teamwork:currentUserCanCreateTags(?projectGraph) }\">
                                        <div>
                                            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:AddTagPage }\">
                                                <a href=\"{= ?link }\">Start new workflow</a>
                                            </ui:createLink>
                                        </div>
                                    </ui:if>
                                </ui:if>
                            </ui:group>
                        </ui:setContext>
                    </ui:loadable>
                </div>
            </section>
        </ui:group>
    </ui:if>
    <ui:else>Error: Cannot find team graph for {= ?projectGraph }</ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays a project summary consisting of an icon, link, information about the author and last changes. Also has a plug-in mechanism that can display different details for each project type - see teamwork:ProjectSummary." ;
  rdfs:label "Project summary view" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ProjectTab
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:comment "Metaclass for the tabs showing up on a project's home page. Can contain metadata about when and where they show up." ;
  rdfs:label "Project tab" ;
  rdfs:subClassOf swa:Tab ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
  sh:property [
      a sh:PropertyShape ;
      sh:path teamwork:cssClass ;
      sh:datatype xsd:string ;
      sh:description "CSS class that will be used when this is rendered as HTML." ;
      sh:maxCount 1 ;
    ] ;
.
teamwork:ProjectTabBar
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "The tab to highlight in the project tab bar." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:useAbsoluteLinks ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If provided, then a base URL will be generated for tabs that only provide a tabId but no full tabLink." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:call arg:pluginType=\"{= teamwork:ProjectTab }\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" arg:tag=\"{= ?tag }\" arg:withInvalidForTags=\"{= true }\" let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:status=\"{= teamwork:getProjectOrTagEditableState(?projectGraph, ?tag) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:template=\"{= teamwork:GetMatchingProjectPlugins }\" ui:varName=\"tabs\">
    <nav class=\"{= IF(bound(?tag), &quot;in-workflow&quot;, ?none) }\" id=\"project-tab-bar\">
        <ui:if ui:condition=\"{= bound(?tag) }\">
            <div class=\"workflow-bar\">
                <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                    <ui:group let:subject=\"{= spl:object(?tag, teamwork:editedResource) }\">
                        <span>
                            <ui:if ui:condition=\"{= bound(?subject) }\">
                                <span>Workflow about</span>
                                <swa:Space/>
                                <a class=\"btn btn-primary btn-xs\" href=\"{= teamwork:editorLink(?projectGraph, ?subject, ?tag) }\">{= swa:labelInGraph(?subject, teamwork:queryGraph(true, teamwork:graphIdFromMasterGraph(?projectGraph), teamwork:tagId(?tag), smf:currentUserName())) }</a>
                            </ui:if>
                            <ui:else>Workflow</ui:else>
                            <ui:createLink arg:tag=\"{= ?tag }\" ui:sendQueryGraph=\"{= true }\" ui:viewClass=\"{= teamwork:SetTagNameUpdateService }\">
                                <swa:TextFieldInlineEditor arg:readOnly=\"{= !teamwork:currentUserHasPrivilege(?tag, teamwork:manager, teamwork:teamGraph(?projectGraph)) }\" arg:updateLink=\"{= ?link }\" arg:value=\"{= teamwork:tagLabel(?projectGraph, ?tag) }\"/>
                            </ui:createLink>
                        </span>
                    </ui:group>
                </ui:setContext>
                <a class=\"teamwork-leave-workflow-link\" href=\"\" title=\"Leave workflow and return to production copy\">
                    <i class=\"fa fa-times-circle\"/>
                </a>
            </div>
        </ui:if>
        <ul id=\"project-tabs\">
            <ui:setContext ui:queryGraph=\"{= ui:graph }\">
                <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:varName=\"projectPageLink\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                    <ui:forEach ui:resultSet=\"{= ?tabs }\">
                        <ui:if ui:condition=\"{= ?plugin = teamwork:EditableIconPseudoProjectTab }\">
                            <teamwork:TabBarItem arg:cssClass=\"{= spl:object(?plugin, teamwork:cssClass) }\" arg:faIcon=\"{= spl:object(?status, teamwork:faIcon) }\" arg:hideLabel=\"{= true }\" arg:label=\"{= spl:object(?status, rdfs:comment) }\"/>
                        </ui:if>
                        <ui:else>
                            <teamwork:TabBarItem arg:active=\"{= ?plugin = ?projectTab }\" arg:cssClass=\"{= spl:object(?plugin, teamwork:cssClass) } {= IF(((!?validForTags) &amp;&amp; bound(?tag)), &quot;unavailable&quot;, &quot;&quot;) }\" arg:faIcon=\"{= IF((?plugin = teamwork:StatusTagTab), &quot;fa-cog&quot;, ?none) }\" arg:hideLabel=\"{= ?plugin = teamwork:StatusTagTab }\" arg:label=\"{= COALESCE(IF((?plugin = teamwork:EditorProjectTab), spl:object(?projectType, teamwork:editorProjectTabLabel), ?none), ui:label(?plugin)) }\" arg:leaveWorkflowUrl=\"{= IF(bound(?tag), teamwork:getLeaveWorkflowLink(?projectGraph, ?plugin), ?nothing) }\" arg:link=\"{= teamwork:getProjectTabLink(?plugin, ?projectGraph, ?tag, IF(swa:falseOrUnbound(?useAbsoluteLinks), &quot;&quot;, ?projectPageLink)) }\" target=\"{= spl:object(?plugin, html:target) }\"/>
                        </ui:else>
                    </ui:forEach>
                </ui:createLink>
            </ui:setContext>
        </ul>
        <div class=\"border-bottom\"/>
    </nav>
    <teamwork:prependRecentProjects arg:project=\"{= ?projectGraph }\"/>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "The tab bar in the header showing the project tabs." ;
  rdfs:label "Project tab bar" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ProjectTabs
  a teamwork:ProjectTab ;
  ui:abstract true ;
  rdfs:comment "Superclass of all teamwork:ProjectTab instances (tabs appearing in the project tab bar)." ;
  rdfs:label "Project tabs" ;
  rdfs:subClassOf teamwork:ProjectElements ;
  rdfs:subClassOf teamwork:Tabs ;
.
teamwork:ProjectTitle
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:if ui:condition=\"{= teamwork:isSingletonProjectType(?projectType) }\">
        <governance:Icon arg:muted=\"{= true }\" arg:toolTip=\"{= teamwork:singularProjectTypeLabel(?projectType) }\" arg:type=\"{= ?projectType }\"/>
    </ui:if>
    <ui:else>
        <ui:createLink arg:type=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\" ui:viewClass=\"{= teamwork:AssetsPage }\">
            <a href=\"{= ?link }\">
                <governance:Icon arg:muted=\"{= true }\" arg:toolTip=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\" arg:type=\"{= ?projectType }\"/>
            </a>
        </ui:createLink>
    </ui:else>
    <swa:Space/>
    <swa:Space/>
    <a href=\"{= teamwork:editorLink(?projectGraph, ?projectGraph) }\" id=\"TeamworkProjectTitle\" style=\"text-decoration: none\">{= teamwork:projectLabel(?projectGraph) }</a>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ProjectType
  ui:instanceView """
<ui:group let:projectGraph=\"{= ?projGraph }\" ui:id=\"edg-edit-imports\" ui:priority=\"{= -1 }\">
    <ui:group>
        <swon:Object>
            <ui:setContext let:template=\"{= COALESCE(spl:objectInGraph(?this, teamwork:editableImportsTemplate, ui:graph), teamwork:DefaultEditableImports) }\" ui:queryGraph=\"{= ?projectGraph }\">
                <ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= ?template }\" ui:varName=\"initialGraphsList\">
                    <ui:group letrs:allGraphs='{#
                            SELECT DISTINCT ?graph ?label ?pType
                            WHERE {
                                {
                                    ?initialGraphsList spr:rowIndices ?rowIndex .
                                    BIND (spr:cell(?initialGraphsList, ?rowIndex, 0) AS ?graph) .
                                    BIND (spr:cell(?initialGraphsList, ?rowIndex, 1) AS ?label) .
                                }
                                UNION
                                {
                                    GRAPH ui:graph {
                                        ?this teamwork:owlImports ?str .
                                        ?uri spif:split ( ?str \" \" ) .
                                        BIND (IRI(?uri) AS ?graph) .
                                        BIND (teamwork:graphLabel(?graph) AS ?label) .
                                    } .
                                } .
                                BIND (teamwork:singularProjectTypeLabel(teamwork:getProjectType(?graph)) AS ?maybePtype) .
                                BIND (COALESCE(?maybePtype, \"zzz\") AS ?pType) .
                            }
                            ORDER BY (?pType) }'>
                        <swon:Value arg:name=\"projectGraph\" arg:value=\"{= ?projectGraph }\"/>
                        <swon:Value arg:name=\"projectLabel\" arg:value=\"{= teamwork:projectLabel(?projectGraph) }\"/>
                        <teamwork:GenerateJSONforAvailableGraphsInclusion arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?this }\" arg:resultSet=\"{= ?allGraphs }\"/>
                        <teamwork:GenerateJSONforRequiredProjectTypeGraphsInclusion arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?this }\" arg:resultSet=\"{= ?allGraphs }\"/>
                        <teamwork:GenerateJSONforImportedGraphs arg:projectGraph=\"{= ?projectGraph }\" arg:projectType=\"{= ?this }\" arg:resultSet=\"{= ?allGraphs }\"/>
                    </ui:group>
                </ui:call>
            </ui:setContext>
        </swon:Object>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
.
teamwork:ProjectTypeSection
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to display." ;
    ] ;
  ui:private true ;
  ui:prototype """
<div let:loadId=\"{= ui:uniqueId() }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
    <ui:if ui:condition=\"{= teamwork:canCreateProject() }\">
        <div>
            <ui:if ui:condition=\"{= teamwork:isGraphStoreConfigured() }\">
                <ui:if ui:condition=\"{= !teamwork:isSingletonProjectType(?projectType) }\">
                    <ui:createLink arg:projectType=\"{= ?projectType }\" ui:viewClass=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:createProjectPageClass, ui:graph), teamwork:DefaultCreateProjectPage) }\">
                        <a class=\"btn btn-primary\" href=\"{= ?link }\">Create New {= teamwork:singularProjectTypeLabel(?projectType) }</a>
                    </ui:createLink>
                </ui:if>
            </ui:if>
            <ui:else>
                <span title=\"Please contact your administrator to use the {= teamwork:getProductAbbreviation() } Configuration administration page as described in the documentation.\">Create New {= teamwork:singularProjectTypeLabel(?projectType) }</span>
            </ui:else>
        </div>
    </ui:if>
    <ui:if ui:condition=\"{= ?projectType = taggerprojects:ProjectType }\">
        <ui:if ui:condition=\"{= !autotagger:isMauiServerConfigured() }\">
            <br/>
            <div class=\"popup\" onclick=\"teamwork.acPopup()\">
Auto-classification has not been configured
<i class=\"fa fa-info-circle\"/>
                <span class=\"popuptext\" id=\"myPopup\">
Please refer to the \"Using Auto Classifier\" section of our
<a class=\"help\" href=\"http://wiki.topquadrant.com\">documentation</a>
                </span>
            </div>
            <div class=\"acpopup-spacing\"/>
        </ui:if>
    </ui:if>
    <ui:loadable ui:loadId=\"{= ?loadId }\">
        <ui:group>
            <ui:dynamicView ui:class=\"{= spl:objectInGraph(?projectType, teamwork:extraCreateProjectSectionClass, ui:graph) }\"/>
            <div class=\"teamwork-project-type-section-keyword-spacing\"/>
            <section class=\"teamwork-with-icon\">
                <div class=\"icon\">
                    <governance:Icon arg:type=\"{= ?projectType }\"/>
                </div>
                <h2 class=\"teamwork-assets-title\">{= teamwork:pluralProjectTypeLabel(?projectType) }</h2>
            </section>
            <ui:if ui:condition=\"{= teamwork:isExplorerUser(?user) }\">
                <h2>Published {= teamwork:pluralProjectTypeLabel(?projectType) } that you can view</h2>
                <div data-project-type=\"{= ?projectType }\" data-published=\"true\" id=\"project-page-type\">
                    <swa:SimpleDataTableResults/>
                </div>
            </ui:if>
            <ui:else>
                <div data-project-type=\"{= ?projectType }\" data-published=\"false\" id=\"project-page-type\">
                    <swa:SimpleDataTableResults/>
                </div>
            </ui:else>
        </ui:group>
    </ui:loadable>
</div>
"""^^ui:Literal ;
  rdfs:comment "A section appearing on the home page for a given project type. Lists all projects of this type and a link to create new projects etc." ;
  rdfs:label "Project type section" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ProjectWarnings
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:comment "Abstract superclass of SWP elements that will be inserted into the beginning of the tab bodies. Can be used to insert some critical warnings, for example about missing imports." ;
  rdfs:label "Project warnings" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:ProjectWarningsSection
  a ui:NodeClass ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?warningElement
        WHERE {
            GRAPH ui:graph {
                ?warningElement rdfs:subClassOf teamwork:ProjectWarnings .
            } .
        }
        ORDER BY (?warningElement) }\">
    <ui:dynamicView arg:projectGraph=\"{= ?projectGraph }\" ui:class=\"{= ?warningElement }\"/>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:comment "Displays warnings related to the project's configuration, as generated by subclasses of teamwork:ProjectWarnings." ;
  rdfs:label "Project warnings section" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:PropertyFormSHACLInfo
  a ui:NodeClass ;
  ui:prototype """
<ui:if ui:condition=\"{= tosh:shaclExists() &amp;&amp; swa:isEditMode() }\">
    <div class=\"swa-base-font swa-gray teamwork-property-form-SHACL-info\">These are RDFS and OWL properties that may be used to support inferencing but do not necessarily enforce constraints. Consider using SHACL property shapes for constraints and many more choices.</div>
</ui:if>
"""^^ui:Literal ;
  rdfs:subClassOf ui:Element ;
.
teamwork:PropertyShapeEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?object) }\">
        <swa:BNodeViewerEditor ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <div id=\"{= ?uid }-buttons\">
            <span>Add property constraint: </span>
            <swa:Space/>
            <button onclick=\"$('#{= ?uid }-buttons').remove();swa.load('add-property-{= ?uid }')\">On a property</button>
            <swa:Space/>
            <button onclick=\"$('#{= ?uid }-buttons').remove();swa.load('reuse-shape-{= ?uid }')\">Reuse existing property constraint</button>
        </div>
        <ui:loadable ui:loadId=\"add-property-{= ?uid }\" ui:loadOnDemand=\"{= true }\">
            <div class=\"swa-objects-group-compact-parent\" let:c=\"{= IRI(CONCAT(&quot;urn:x-new-bnode:&quot;, ui:uniqueId())) }\" let:id=\"{= ui:uniqueId() }\">
                <div class=\"swa-objects-group-compact\">
                    <swa:LabeledElement arg:class=\"swa-labeled-element-width-onehundred\" arg:label=\"on property:\">
                        <swa:AutoComplete arg:onSelect=\"$('#new-{= ?id }').val('&lt;' + resource + '&gt;');$('.deact-{= ?id }').removeAttr('disabled');\" arg:type=\"{= rdf:Property }\"/>
                    </swa:LabeledElement>
                </div>
                <div class=\"teamwork-property-shape-editor-save\">(Click on this after saving changes for the details)</div>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"resource-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?c, true) }\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"path-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(sh:path) }\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" id=\"new-{= ?id }\" name=\"new-{= ?id }\" type=\"hidden\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ui:encodeNode(?c, true) }\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"resource-type-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?c, true) }\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"path-type-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(rdf:type) }\"/>
                <input class=\"deact-{= ?id }\" disabled=\"disabled\" name=\"new-type-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(sh:PropertyShape) }\"/>
            </div>
        </ui:loadable>
        <ui:loadable ui:loadId=\"reuse-shape-{= ?uid }\" ui:loadOnDemand=\"{= true }\">
            <ui:group letrs:pshapes='{#
                    SELECT ?ps ?label
                    WHERE {
                        ?subject sh:targetClass|dash:applicableToClass ?class .
                        ?class (rdfs:subClassOf)* ?c .
                        ?c sh:property ?ps .
                        FILTER isIRI(?ps) .
                        ?ps sh:path ?path .
                        BIND (ui:label(?path) AS ?pathLabel) .
                        BIND (ui:label(?c) AS ?classLabel) .
                        BIND (CONCAT(?pathLabel, \" at \", ?classLabel) AS ?label) .
                    }
                    ORDER BY (?label) }'>
                <ui:if ui:condition=\"{= spr:isEmpty(?pshapes) }\">
                    <span class=\"text-danger\">No suitable property shapes found - it would show all named property shapes attached to classes that are targeted or applicable to this shape {= ui:label(?subject) }.</span>
                </ui:if>
                <ui:else>
                    <select name=\"new-{= ?uid }\">
                        <ui:forEach ui:resultSet=\"{= ?pshapes }\">
                            <option value=\"{= ui:encodeNode(?ps) }\">{= ?label }</option>
                        </ui:forEach>
                    </select>
                </ui:else>
            </ui:group>
        </ui:loadable>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Displays just a swa:BNodeViewerEditor for existing property shapes, and a sole field for sh:path for new entries." ;
  rdfs:label "Property shape editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
teamwork:PropertyShapeViewer
  a swa:ObjectViewerClass ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:eq ;
          sp:arg1 [
              sp:varName "predicate" ;
            ] ;
          sp:arg2 sh:property ;
        ] ;
      swa:weight 15 ;
    ] ;
  ui:prototype """
<teamwork:AbstractPropertyShapeViewer ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:comment "The default view of the predicate sh:property. If the surrounding environment supports it, this will be wholly clickable to navigate to the blank node." ;
  rdfs:label "Property shape viewer" ;
  rdfs:subClassOf teamwork:AbstractPropertyShapeViewer ;
.
teamwork:PropertyShapeViewerBody
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:shape ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property shape." ;
    ] ;
  ui:private true ;
  ui:prototype """
<div letrs:ps=\"{#
        SELECT ?predicateLabel ?object
        WHERE {
            ?shape ?predicate ?object .
            FILTER (?predicate NOT IN (rdf:type, sh:path)) .
            BIND (swa:propertyLabelAtNode(?predicate, ?shape) AS ?predicateLabel) .
        }
        ORDER BY (?predicateLabel) (ui:label(?object)) }\" style=\"padding-left: 8px;\">
    <table class=\"swa-labeled-objects-table\">
        <tr>
            <td class=\"swa-labeled-objects-label-td swa-labeled-objects-tabular-label\" style=\"width: 100px !important; min-width: 100px !important\">
                <div class=\"swa-shifted-label\">
                    <label class=\"swa-property-label\">on property:</label>
                </div>
            </td>
            <td let:path=\"{= spl:object(?shape, sh:path) }\">{= IF(bound(?path), ui:label(?path), \"[Missing]\") }</td>
        </tr>
        <ui:forEach ui:resultSet=\"{= ?ps }\">
            <tr>
                <td class=\"swa-labeled-objects-label-td swa-labeled-objects-tabular-label\" style=\"width: 100px !important; min-width: 100px !important\">
                    <div class=\"swa-shifted-label\">
                        <label class=\"swa-property-label\">{= ?predicateLabel }:</label>
                    </div>
                </td>
                <td>{= ui:label(?object) }</td>
            </tr>
        </ui:forEach>
    </table>
</div>
"""^^ui:Literal ;
  rdfs:label "Property shape viewer body" ;
  rdfs:subClassOf swa:FormElements ;
.
teamwork:PublishContentTagSetImports
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:imports ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Graph imports" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:objectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Tagging vocabulary (object graph) for the tag set" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Content (subject) graph for the tag set" ;
    ] ;
  ui:prototype """
<ui:group let:objectGraphWithImports=\"{= ui:graphWithImports(?objectGraph) }\" let:subjectGraphWithImports=\"{= ui:graphWithImports(?subjectGraph) }\">
    <ui:group letrs:contentGraphs=\"{#
            SELECT ?contentGraph ?contentTeamGraph
            WHERE {
                GRAPH ?subjectGraphWithImports {
                    ?subjectGraph (owl:imports)* ?contentGraph .
                } .
                FILTER teamwork:hasTeamGraph(?contentGraph) .
                BIND (teamwork:teamGraph(?contentGraph) AS ?contentTeamGraph) .
            } }\">
        <ui:if ui:condition=\"{= spr:rowCount(?contentGraphs) &gt; 0 }\">
            <h2>Publish content graphs:</h2>
            <ui:forEach ui:resultSet=\"{= ?contentGraphs }\">
                <ui:setContext ui:queryGraph=\"{= ?contentGraph }\">
                    <p>
                        <div class=\"checkbox\">
                            <input checked=\"checked\" class=\"includedGraphToPublish\" id=\"{= smf:definedInFile(?contentGraph) }\" type=\"checkbox\"/>
                            <label for=\"file-{= smf:definedInFile(?contentGraph) }\">{= teamwork:projectLabel(?contentGraph) }</label>
                        </div>
                    </p>
                    <input id=\"file-{= smf:definedInFile(?contentGraph) }\" name=\"file-{= smf:definedInFile(?contentGraph) }\" type=\"hidden\" value=\"true\"/>
                </ui:setContext>
                <ui:setContext ui:queryGraph=\"{= ?contentTeamGraph }\">
                    <input id=\"file-{= smf:definedInFile(?contentTeamGraph) }\" name=\"file-{= smf:definedInFile(?contentTeamGraph) }\" type=\"hidden\" value=\"true\"/>
                </ui:setContext>
            </ui:forEach>
        </ui:if>
    </ui:group>
    <ui:if ui:condition=\"{= spr:rowCount(?imports) &gt; 0 }\">
        <h2>Publish tag property graphs:</h2>
        <ui:forEach ui:resultSet=\"{= ?imports }\">
            <ui:setContext ui:queryGraph=\"{= ?import }\">
                <p>
                    <div class=\"checkbox\">
                        <input checked=\"checked\" class=\"includedGraphToPublish\" id=\"{= smf:definedInFile(?import) }\" type=\"checkbox\"/>
                        <label for=\"file-{= smf:definedInFile(?import) }\">{= teamwork:projectLabel(?import) }</label>
                    </div>
                </p>
                <input id=\"file-{= smf:definedInFile(?import) }\" name=\"file-{= smf:definedInFile(?import) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
            <ui:setContext ui:queryGraph=\"{= ?importTeamGraph }\">
                <input id=\"file-{= smf:definedInFile(?importTeamGraph) }\" name=\"file-{= smf:definedInFile(?importTeamGraph) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
        </ui:forEach>
    </ui:if>
    <ui:group letrs:taggingGraphs=\"{#
            SELECT ?taggingGraph ?taggingTeamGraph
            WHERE {
                GRAPH ?objectGraphWithImports {
                    ?objectGraph (owl:imports)* ?taggingGraph .
                } .
                FILTER teamwork:hasTeamGraph(?taggingGraph) .
                BIND (teamwork:teamGraph(?taggingGraph) AS ?taggingTeamGraph) .
            } }\">
        <ui:if ui:condition=\"{= spr:rowCount(?taggingGraphs) &gt; 0 }\">
            <h2>Publish tagging vocabularies:</h2>
            <ui:forEach ui:resultSet=\"{= ?taggingGraphs }\">
                <ui:setContext ui:queryGraph=\"{= ?taggingGraph }\">
                    <p>
                        <div class=\"checkbox\">
                            <input checked=\"checked\" class=\"includedGraphToPublish\" id=\"{= smf:definedInFile(?taggingGraph) }\" type=\"checkbox\"/>
                            <label for=\"file-{= smf:definedInFile(?taggingGraph) }\">{= teamwork:projectLabel(?taggingGraph) }</label>
                        </div>
                    </p>
                    <input id=\"file-{= smf:definedInFile(?taggingGraph) }\" name=\"file-{= smf:definedInFile(?taggingGraph) }\" type=\"hidden\" value=\"true\"/>
                </ui:setContext>
                <ui:setContext ui:queryGraph=\"{= ?taggingTeamGraph }\">
                    <input id=\"file-{= smf:definedInFile(?taggingTeamGraph) }\" name=\"file-{= smf:definedInFile(?taggingTeamGraph) }\" type=\"hidden\" value=\"true\"/>
                </ui:setContext>
            </ui:forEach>
        </ui:if>
    </ui:group>
    <p>By default, all included graphs will be published to the
		Explorer server, completing the import closure but potentially
		making the data transfer large.  Unselect the graphs above that
		shall not be sent.  The graphs not selected above are assumed
		to already exist on the Explorer server, for example having
		previously been published.</p>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Publish content tag set imports section" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:PublishExportPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 4 ;
  teamwork:pluginMayNotScale true ;
  ui:prototype """
<ui:if ui:condition=\"{= teamwork:hasEVNViewerLicense() }\">
    <ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:PublishPage }\">
                <teamwork:ActionLink arg:comment=\"Allows read-only Explorer users to browse the {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }.\" arg:icon=\"lib/teamwork/build/images/teamwork/taxonomy-as-explorer.svg\" arg:link=\"{= ?link }\" arg:title=\"Publish {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } for Explorer Users\"/>
            </ui:createLink>
        </ui:if>
    </ui:group>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Publish asset collection for Explorer users plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:PublishImports
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:imports ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Graph imports" ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= spr:rowCount(?imports) &gt; 0 }\">
        <h2>Publish included graphs:</h2>
        <ui:forEach ui:resultSet=\"{= ?imports }\">
            <ui:setContext ui:queryGraph=\"{= ?import }\">
                <p>
                    <div class=\"checkbox\">
                        <input checked=\"checked\" class=\"includedGraphToPublish\" id=\"{= smf:definedInFile(?import) }\" type=\"checkbox\"/>
                        <label for=\"file-{= smf:definedInFile(?import) }\">{= teamwork:projectLabel(?import) }</label>
                    </div>
                </p>
                <input id=\"file-{= smf:definedInFile(?import) }\" name=\"file-{= smf:definedInFile(?import) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
            <ui:setContext ui:queryGraph=\"{= ?importTeamGraph }\">
                <input id=\"file-{= smf:definedInFile(?importTeamGraph) }\" name=\"file-{= smf:definedInFile(?importTeamGraph) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
        </ui:forEach>
        <p>By default, all included graphs will be published to the
			Explorer server, completing the import closure but potentially
			making the data transfer large.  Unselect the graphs above that
			shall not be sent.  The graphs not selected above are assumed
			to already exist on the Explorer server, for example having
			previously been published.</p>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Publish imports section" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:PublishPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ExportProjectTab }\" arg:tag=\"{= ?tag }\" let:graphWithImports=\"{= ui:graphWithImports(?projectGraph) }\" let:progressId=\"progress-{= spif:random() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:loadable ui:loadId=\"publishPage\">
        <h1>Publish <em>{= teamwork:projectLabel(?projectGraph) }</em> to Explorer Users</h1>
        <br/>
        <form id=\"publishedStatusForm\" let:publishedStatus=\"{= teamwork:isPublishedToExplorerUsers(?teamGraph) }\">
            <input id=\"publishProjectGraph\" name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
            <input id=\"publishProjectTeamGraph\" name=\"teamGraph\" type=\"hidden\" value=\"{= ?teamGraph }\"/>
            <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                <label for=\"publishedStatus\">Status</label>
                <swa:Space/>
                <select class=\"form-control\" id=\"publishedStatus\" name=\"publishedStatus\" onchange=\"teamwork.updatePublishStatus(this, '{= ?progressId }');\">
                    <ui:if ui:condition=\"{= ?publishedStatus }\">
                        <option value=\"unpublished\">Unpublished</option>
                        <option selected=\"selected\" value=\"published\">Published</option>
                        <option value=\"republished\">Update Published Copy</option>
                    </ui:if>
                    <ui:else>
                        <option selected=\"selected\" value=\"unpublished\">Unpublished</option>
                        <option value=\"published\">Published</option>
                    </ui:else>
                </select>
            </ui:setContext>
        </form>
        <br/>
        <form id=\"publishForm\" letrs:imports=\"{#
                SELECT ?import ?importTeamGraph
                WHERE {
                    GRAPH ?graphWithImports {
                        ?projectGraph (owl:imports)+ ?import .
                    } .
                    FILTER (?projectGraph != ?import) .
                    FILTER teamwork:hasTeamGraph(?import) .
                    BIND (teamwork:teamGraph(?import) AS ?importTeamGraph) .
                } }\" method=\"post\">
            <input name=\"serverURL\" type=\"hidden\" value=\"{= smf:configParam(&quot;explorerServer&quot;) }\"/>
            <input name=\"userName\" type=\"hidden\" value=\"{= smf:configParam(&quot;explorerServerUserName&quot;) }\"/>
            <input name=\"progressId\" type=\"hidden\" value=\"{= ?progressId }\"/>
            <ui:if ui:condition=\"{= teamwork:isTaggerProject(?projectGraph) }\">
                <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                    <teamwork:PublishContentTagSetImports arg:imports=\"{= ?imports }\" arg:objectGraph=\"{= spl:object(?projectGraph, tagger:objectGraph) }\" arg:projectGraph=\"{= ?projectGraph }\" arg:subjectGraph=\"{= spl:object(?projectGraph, tagger:subjectGraph) }\"/>
                </ui:setContext>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= spr:rowCount(?imports) &gt; 0 }\">
                    <teamwork:PublishImports arg:imports=\"{= ?imports }\" arg:projectGraph=\"{= ?projectGraph }\"/>
                </ui:if>
            </ui:else>
            <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                <input name=\"file-{= smf:definedInFile(?projectGraph) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
            <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                <input name=\"file-{= smf:definedInFile(?teamGraph) }\" type=\"hidden\" value=\"true\"/>
            </ui:setContext>
            <input name=\"clearGraph\" type=\"hidden\" value=\"true\"/>
            <input name=\"sendTriples\" type=\"hidden\" value=\"true\"/>
            <input name=\"sendUIConfig\" type=\"hidden\" value=\"true\"/>
        </form>
        <script>$(\".includedGraphToPublish\").click(function(){
					teamwork.toggleIncludedGraphs(this);
				});</script>
    </ui:loadable>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Publish page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:PublishProjectService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withImports ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Also publish all graphs that this collection imports." ;
    ] ;
  ui:prototype """
<ui:setContext ui:silentTransactions=\"{= true }\">
    <teamwork:publishProject ui:args=\"*\">
        <swon:Object>
            <swon:Value arg:name=\"files\" arg:value=\"{= ?files }\"/>
            <swon:Value arg:name=\"projects\" arg:value=\"{= ?projects }\"/>
        </swon:Object>
    </teamwork:publishProject>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Publish a collection (project) To Explorer" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:PublishProjectToExplorerService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Teamwork (TCH) graph" ;
    ] ;
  ui:prototype """
<ui:group letrs:imports=\"{#
        SELECT ?import ?importTeamGraph
        WHERE {
            BIND (ui:graphWithImports(?projectGraph) AS ?graphWithImports) .
            GRAPH ?graphWithImports {
                ?projectGraph (owl:imports)+ ?import .
            } .
            FILTER (?projectGraph != ?import) .
            FILTER teamwork:hasTeamGraph(?import) .
            BIND (teamwork:teamGraph(?import) AS ?importTeamGraph) .
        } }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction ui:logMessage=\"Publish {= teamwork:projectLabel(?projectGraph) } to Explorer\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?teamGraph teamwork:published true .
                    }
                    WHERE {
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
    <ui:forEach ui:resultSet=\"{= ?imports }\">
        <ui:setContext ui:queryGraph=\"{= ?importTeamGraph }\">
            <ui:transaction ui:logMessage=\"Publish {= teamwork:projectLabel(?import) } to Explorer\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?importTeamGraph teamwork:published true .
                        }
                        WHERE {
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Publish project to Explorer service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:PublishedProjectSummary
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  ui:prototype """
<table>
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <tr>
            <td class=\"teamworkTD\">
                <img alt=\" Published Project Icon\" src=\"lib/teamwork/build/images/teamwork/Project-48.png\"/>
            </td>
            <td class=\"teamworkTD\">
                <b>
                    <a href=\"{= teamwork:publishedGraphName(?projectGraph) }.evn\">{= ui:label(?projectGraph) }</a>
                </b>
                <br/>
                <span class=\"teamworkSummary\" let:publisher=\"{= teamwork:publisher(?projectGraph) }\">
                    <ui:group let:comment=\"{= spl:object(?projectGraph, rdfs:comment) }\">
                        <ui:parse ui:str=\"{= ?comment }\"/>
                    </ui:group>
                    <br/>Published {= ui:label(spl:object(?projectGraph, dcterms:created)) }<ui:if ui:condition=\"{= bound(?publisher) }\">
                        <swa:Space/>by {= afn:localname(?publisher) }</ui:if>
                    <ui:if ui:condition=\"{= teamwork:currentUserCanUnpublish(?projectGraph) }\">
                        <swa:Space/>
                        <a href=\"javascript:void(0)\" onclick=\"{= ui:functionCall(&quot;teamwork.unpublish&quot;, teamwork:publishedGraphName(?projectGraph)) }\">Delete</a>
                    </ui:if>
                </span>
            </td>
        </tr>
    </ui:setContext>
</table>
"""^^ui:Literal ;
  rdfs:comment "Displays a summary of a published vocabulary, with a hyperlink to launch the explorer." ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:PublishedProjectSummaryGroup
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterKeyword ;
      spl:valueType xsd:string ;
      rdfs:comment "filter keyword" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The (current) user." ;
    ] ;
  ui:prototype """
<ui:group letrs:publishedProjects=\"{#
        SELECT ?projectGraph ?teamGraph
        WHERE {
            rdf:nil teamwork:graphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
            FILTER teamwork:isPublishedToExplorerUsers(?teamGraph) .
            FILTER (teamwork:getProjectType(?projectGraph) = ?projectType) .
        } }\">
    <ui:if ui:condition=\"{= !spr:isEmpty(?publishedProjects) }\">
        <ui:forEach ui:resultSet=\"{= ?publishedProjects }\">
            <teamwork:ProjectSummaryView arg:projectGraph=\"{= ?projectGraph }\"/>
            <ui:if ui:condition=\"{= teamwork:explorerUsersCanViewWorkingCopies() }\">
                <ui:group letrs:tags=\"{#
                        SELECT ?tag ?tagLabel
                        WHERE {
                            ( ?projectGraph ?teamGraph ) teamwork:tags ( ?tag ?tagLabel ) .
                        }
                        ORDER BY (?tagLabel) }\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?tags) }\">
                        <div>
                            <span>View Working Copy: </span>
                            <ui:forEach ui:resultSet=\"{= ?tags }\" ui:separator=\"&nbsp; \">
                                <a href=\"{= teamwork:editorLink(?projectGraph, ?none, ?tag) }\">{= ?tagLabel }</a>
                            </ui:forEach>
                        </div>
                    </ui:if>
                </ui:group>
            </ui:if>
        </ui:forEach>
    </ui:if>
    <ui:else>
        <br/>
        <span>No published {= teamwork:pluralProjectTypeLabel(?projectType) } found</span>
        <ui:if ui:condition=\"{= bound(?filterKeyword) }\">
            <span>&nbsp;with the keyword \"{= ?filterKeyword }\"</span>
        </ui:if>
        <span>.</span>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A group of ProjectSummaries for all projects currently published to Explorer users." ;
  rdfs:label "Published project summary group" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:QuickNavigationButton
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:newTab ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have it open a new browser tab." ;
    ] ;
  ui:prototype """
<ui:if ui:condition=\"{= smf:hasCurrentUser() }\">
    <i class=\"teamwork-quick-navigation-button fas fa-bars fa-2x\" id=\"teamwork-quicknavmenu\" onclick=\"{= ui:functionCall(&quot;teamwork.openQuickNavigationMenu&quot;, &quot;teamwork-quicknavmenu&quot;, ?newTab) }\" title=\"Quick Navigation to your collections\"/>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Quick navigation button" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:QuickNavigationMenuService
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext letrs:projects=\"{#
        SELECT ?projectGraph
        WHERE {
            rdf:nil teamwork:readableGraphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
        } }\" ui:queryGraph=\"{= ui:graph }\">
    <swon:Object letrs:projectTypes=\"{#
            SELECT ?projectType
            WHERE {
                BIND (teamwork:product() AS ?product) .
                ?product teamwork:defaultProjectType ?projectType .
                FILTER ((teamwork:hasProjectTypeLicense(?projectType) &amp;&amp; (!teamwork:isProjectTypeDisabled(?projectType))) &amp;&amp; teamwork:hasEditorApplication(?projectType)) .
                BIND (teamwork:pluralProjectTypeLabel(?projectType) AS ?typeLabel) .
                BIND (COALESCE(spl:object(?projectType, teamwork:projectTypeWeight), 0) AS ?index) .
            }
            ORDER BY (?index) }\">
        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?projectTypes }\">
            <ui:if ui:condition=\"{= teamwork:isSingletonProjectType(?projectType) }\">
                <ui:group let:graphId=\"{= spl:object(?projectType, teamwork:singletonId) }\">
                    <ui:group let:projectGraph=\"{= teamwork:masterGraph(?graphId) }\">
                        <ui:if ui:condition=\"{= smf:canRead(?projectGraph) }\">
                            <ui:if ui:condition=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
                                <teamwork:QuickNavigationMenuServiceHelper arg:projectGraph=\"{= ?projectGraph }\"/>
                            </ui:if>
                        </ui:if>
                    </ui:group>
                </ui:group>
            </ui:if>
            <ui:else>
                <ui:group letrs:rs=\"{#
                        SELECT ?projectGraph ?label
                        WHERE {
                            ?projects spr:rowIndices ?rowIndex .
                            BIND (spr:cell(?projects, ?rowIndex, 0) AS ?projectGraph) .
                            BIND (teamwork:getProjectType(?projectGraph) AS ?thisType) .
                            FILTER (?thisType = ?projectType) .
                            BIND (teamwork:projectLabel(?projectGraph) AS ?label) .
                        }
                        ORDER BY (?label) }\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
                        <swon:Value arg:name=\"internal_menu_item {= ?index }\">
                            <swon:Object>
                                <swon:Value arg:name=\"name\" arg:value=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\"/>
                                <ui:group let:icon=\"{= spl:objectInGraph(?projectType, teamwork:projectTypeIcon, ui:graph) }\">
                                    <ui:if ui:condition=\"{= bound(?icon) }\">
                                        <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
                                    </ui:if>
                                </ui:group>
                                <swon:Value arg:name=\"items\">
                                    <swon:Object>
                                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                                            <ui:try>
                                                <teamwork:QuickNavigationMenuServiceHelper arg:projectGraph=\"{= ?projectGraph }\"/>
                                            </ui:try>
                                            <ui:catch/>
                                        </ui:forEach>
                                    </swon:Object>
                                </swon:Value>
                            </swon:Object>
                        </swon:Value>
                    </ui:if>
                    <ui:else>
                        <ui:if ui:condition=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
                            <ui:group letrs:publishedProjects=\"{#
                                    SELECT ?projectGraph ?label
                                    WHERE {
                                        rdf:nil teamwork:graphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
                                        FILTER teamwork:isPublishedToExplorerUsers(?teamGraph) .
                                        BIND (teamwork:getProjectType(?projectGraph) AS ?thisType) .
                                        FILTER (?thisType = ?projectType) .
                                        BIND (teamwork:projectLabel(?projectGraph) AS ?label) .
                                    }
                                    ORDER BY (?label) }\">
                                <ui:if ui:condition=\"{= !spr:isEmpty(?publishedProjects) }\">
                                    <swon:Value arg:name=\"internal_menu_item {= ?index }\">
                                        <swon:Object>
                                            <swon:Value arg:name=\"name\" arg:value=\"{= teamwork:pluralProjectTypeLabel(?projectType) }\"/>
                                            <ui:group let:icon=\"{= spl:objectInGraph(?projectType, teamwork:projectTypeIcon, ui:graph) }\">
                                                <ui:if ui:condition=\"{= bound(?icon) }\">
                                                    <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
                                                </ui:if>
                                            </ui:group>
                                            <swon:Value arg:name=\"items\">
                                                <swon:Object>
                                                    <ui:forEach ui:resultSet=\"{= ?publishedProjects }\">
                                                        <ui:try>
                                                            <teamwork:QuickNavigationMenuServiceHelper arg:projectGraph=\"{= ?projectGraph }\"/>
                                                        </ui:try>
                                                        <ui:catch/>
                                                    </ui:forEach>
                                                </swon:Object>
                                            </swon:Value>
                                        </swon:Object>
                                    </swon:Value>
                                </ui:if>
                            </ui:group>
                        </ui:if>
                    </ui:else>
                </ui:group>
            </ui:else>
        </ui:forEach>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A service delivering a quick navigation JSON structure suitable for hierarchical menus, out of the box for jQuery UI contextmenus. The service returns a menu with two levels: the top level are the vocabulary types (ontology etc) and their children are the specific vocabularies that the current user has access to. For vocabulary types that are marked to be singletons, only the name of the vocabulary is returned on the first level." ;
  rdfs:label "Vocabulary quick navigation menu service" ;
  rdfs:seeAlso <http://localhost:8083/tbl/swp?_viewClass=teamwork:QuickNavigationMenuService> ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:QuickNavigationMenuServiceChildren
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parentsResultSet ;
      spl:valueType spr:Table ;
      rdfs:comment "The result set containing the parents." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The projectGraph to render the JSON for." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:if ui:condition=\"{= !spr:isEmpty(?parentsResultSet) }\">
    <ui:group let:childTemplate=\"{= spl:objectInGraph(teamwork:getProjectType(?projectGraph), teamwork:navigationTreeChildSelectTemplate, ui:graph) }\">
        <swon:Value arg:name=\"items\">
            <swon:Object>
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?parentsResultSet }\">
                    <swon:Value arg:name=\"{= COALESCE(?link, CONCAT(&quot;internal_menu_item&quot;, str(?index))) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"name\" arg:value=\"{= ?label }\"/>
                            <ui:if ui:condition=\"{= bound(?icon) }\">
                                <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
                            </ui:if>
                            <ui:if ui:condition=\"{= bound(?childTemplate) &amp;&amp; bound(?child) }\">
                                <ui:call arg:parent=\"{= ?child }\" arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= ?childTemplate }\" ui:varName=\"children\">
                                    <teamwork:QuickNavigationMenuServiceChildren arg:parentsResultSet=\"{= ?children }\" arg:projectGraph=\"{= ?projectGraph }\"/>
                                </ui:call>
                            </ui:if>
                        </swon:Object>
                    </swon:Value>
                </ui:forEach>
            </swon:Object>
        </swon:Value>
    </ui:group>
</ui:if>
"""^^ui:Literal ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:QuickNavigationMenuServiceHelper
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The projectGraph to render the JSON for." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <swon:Value arg:name=\"{= teamwork:editorLink(?projectGraph) }\">
        <swon:Object let:rootTemplate=\"{= spl:objectInGraph(teamwork:getProjectType(?projectGraph), teamwork:navigationTreeRootSelectTemplate, ui:graph) }\">
            <swon:Value arg:name=\"name\" arg:value=\"{= teamwork:projectLabel(?projectGraph) }\"/>
            <ui:group let:icon=\"{= spl:objectInGraph(teamwork:getProjectType(?projectGraph), teamwork:projectTypeIcon, ui:graph) }\">
                <ui:if ui:condition=\"{= bound(?icon) }\">
                    <swon:Value arg:name=\"icon\" arg:value=\"{= ?icon }\"/>
                </ui:if>
            </ui:group>
            <ui:if ui:condition=\"{= false &amp;&amp; bound(?rootTemplate) }\">
                <ui:call arg:parent=\"{= ?projectGraph }\" arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= ?rootTemplate }\" ui:varName=\"roots\">
                    <teamwork:QuickNavigationMenuServiceChildren arg:parentsResultSet=\"{= ?roots }\" arg:projectGraph=\"{= ?projectGraph }\"/>
                </ui:call>
            </ui:if>
        </swon:Object>
    </swon:Value>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:RDFXMLFileExportPlugin
  a teamwork:ExportPlugin ;
  a owl:DeprecatedClass ;
  teamwork:pluginIndex 4 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:RDFXML }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
    <teamwork:ActionLink arg:comment=\"Creates an RDF file in RDF/XML format.\" arg:icon=\"lib/teamwork/build/images/teamwork/export-rdf-xml.svg\" arg:link=\"{= ?link }\" arg:title=\"RDF/XML\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "RDF/XML file export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:ReadOnlyManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 15 ;
  teamwork:pluginValidExpression true ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\" ui:silentTransactions=\"{= true }\">
        <teamwork:ActionLink arg:comment=\"Determines whether this asset collection is read-only for everyone. No workflows can be created etc.\" arg:faIcon=\"fa-lock\" arg:title=\"Read-only\">
            <div class=\"checkbox\">
                <input checked=\"{= IF(teamwork:isReadOnlyProject(?projectGraph), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                    <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                        <ui:setPropertyValue arg:property=\"{= teamwork:readOnly }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?teamGraph }\"/>
                    </ui:handle>
                </input>
                <span>This {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } is read-only.</span>
            </div>
        </teamwork:ActionLink>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Read-only plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:RecordCountsOnlyManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 10 ;
  teamwork:pluginValidExpression [
      a sp:not ;
      sp:arg1 [
          a teamwork:isReadOnlyProject ;
          arg:projectGraph [
              sp:varName "projectGraph" ;
            ] ;
        ] ;
    ] ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <teamwork:ActionLink arg:icon=\"{= ui:lib() }/teamwork/build/images/teamwork/record-counts-only-icon.svg\" arg:title=\"Record Triple Counts only\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(spl:object(?teamGraph, teamwork:recordCountsOnly), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:setPropertyValue arg:property=\"{= teamwork:recordCountsOnly }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?teamGraph }\"/>
                    <teamwork:refreshRecordDetailsFlags arg:graphId=\"{= teamwork:graphIdFromMasterGraph(?projectGraph) }\"/>
                </ui:handle>
            </input>
            <span>If activated then the change history (of the production copy) will only record the numbers of added and deleted triples instead of the details about each triple. This can significantly reduce the size of the metadata. Working copies remain unaffected. Already existing change history entries will not be modified.</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Record triple counts only plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:RedirectToProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "Redirect to a different than the default tab." ;
    ] ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" let:tab=\"{= COALESCE(?projectTab, teamwork:EditorProjectTab) }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
    <swa:RedirectAfterPost arg:url=\"{= teamwork:getProjectTabLink(?tab, ?projectGraph, ?tag, ?link) }\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Redirects to the main tab of an asset collection (or workflow within the collection). This is done as an HTTP redirect using the status code \"303 See Other\". This is a good practice after a successful POST request, as it prevents double POST requests when the user hits Refresh or the back button." ;
  rdfs:label "Redirect to project" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:RelationshipTreePage
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:root ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the tree" ;
    ] ;
  ui:prototype """
<teamwork:RelationshipTreeTemplate ui:args=\"*\">
    <ui:insert ui:into=\"header\">
        <teamwork:Header>
            <ui:group>Relationship Tree starting at {= ui:label(?root) }\"</ui:group>
        </teamwork:Header>
    </ui:insert>
</teamwork:RelationshipTreeTemplate>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf swa:ScriptElements ;
.
teamwork:RelationshipTreeTemplate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:root ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the tree" ;
    ] ;
  ui:prototype """
<ui:group>
    <div>
        <ui:insertionPoint ui:pointId=\"header\"/>
    </div>
    <swa:RelationshipTreePage arg:root=\"{= ?root }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf swa:ScriptElements ;
.
teamwork:RemoveConstraintLibraryService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The library to add or remove." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:masterGraphForCurrentUser(?projectGraph) }\">
    <ui:transaction ui:logMessage=\"Remove constraint library {= ?graph }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?projectGraph spin:imports ?graph .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Callback used from the constraints library page to add a spin:import." ;
  rdfs:label "Remove constraint library service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:RemoveFromLuceneIndexDeletePlugin
  a teamwork:DeletePlugin ;
  ui:prototype """
<safconfig:BulkAddGraph arg:checked=\"{= false }\" arg:graph=\"{= ?projectGraph }\"/>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:DeletePlugins ;
.
teamwork:RemoveImportService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:import ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The graph to import." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:masterGraphForCurrentUser(?projectGraph) }\">
    <ui:transaction ui:logMessage=\"Remove owl:imports {= teamwork:projectLabel(?import) } from {= teamwork:projectLabel(?projectGraph) }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?projectGraph owl:imports ?import .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Remove import service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:RemoveResourcesFromBookmarks
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:bookmarks ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:items ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:bookmarks=\"{= COALESCE(?bookmarks, teamwork:getUserBookmarks()) }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:json ui:str=\"{= ?items }\" ui:varName=\"pairs\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?bookmarks teamwork:hasItem ?item .
                            ?item ?anyP ?anyO .
                        }
                        WHERE {
                            ?user teamwork:bookmarks ?bookmarks .
                            ?pairs ui:jsonArrayMembers ?object .
                            BIND (ui:jsonString(ui:jsonValue(?object, &quot;uri&quot;)) AS ?strItem) .
                            BIND (IRI(spif:decodeURL(?strItem)) AS ?item) .
                            ?bookmarks teamwork:hasItem ?item .
                            ?item ?anyP ?anyO .
                        } }\"/>
            </ui:transaction>
        </ui:json>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add resource to basket" ;
  rdfs:subClassOf teamwork:BookmarkServices ;
.
teamwork:ReportPlugin
  a rdfs:Class ;
  rdfs:comment "Items to show up on the Reports tab." ;
  rdfs:label "Report plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:ReportPlugins
  a teamwork:ReportPlugin ;
  teamwork:pluginMayNotScale true ;
  ui:abstract true ;
  rdfs:label "Report plugins" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ReportSubtitle
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <h2 class=\"teamwork-report-subtitle-info\">
            <span>{= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }&nbsp;<em>{= teamwork:projectLabel(?projectGraph) }</em>
            </span>
            <ui:if ui:condition=\"{= bound(?tag) }\">, working copy <em>{= ui:label(?tag) }</em>
            </ui:if>
        </h2>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Report subtitle" ;
  rdfs:subClassOf teamwork:TagReportElements ;
.
teamwork:ReportUsageAction
  a swa:ResourceAction ;
  arg:appName "EVN" ;
  arg:onSelect "teamwork.reportUsage(resourceURI)" ;
  rdfs:label "Report usage..." ;
  owl:versionInfo "This is currently disabled because it's unclear whether we really want/need by-resource usage reports in the first version." ;
.
teamwork:ReportUsageDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display comments about." ;
    ] ;
  ui:prototype """
<div id=\"div-report-usage-dialog\" title=\"Report Usage of {= ui:label(?resource) }\">
    <div>
        <h3>Report Usage of {= ui:label(?resource) }:</h3>
        <div>Intent:</div>
        <textarea autocomplete=\"off\" class=\"form-control teamwork-comment-add-text-area teamwork-report-usage-dialog-textarea\" id=\"usage-note\" rows=\"5\"/>
    </div>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Report usage dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
teamwork:ReportsProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 30 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:ReportPlugin }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Reports" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:RequiredImportsCheck
  a ui:NodeClass ;
  ui:prototype """
<ui:loadable ui:loadId=\"teamwork-required-imports-check\">
    <ui:group letrs:missingProjectTypes=\"{#
            SELECT ?pt ?ptLabel
            WHERE {
                GRAPH ui:graph {
                    BIND (teamwork:getProjectType(?projectGraph) AS ?projectType) .
                    ?projectType edg:requiredProjectType ?pt .
                    FILTER (!teamwork:hasImportOfType(?projectGraph, ?pt)) .
                    BIND (teamwork:singularProjectTypeLabel(?pt) AS ?ptLabel) .
                } .
            }
            ORDER BY (?ptLabel) }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?missingProjectTypes) }\">
            <div class=\"text-danger\">
                <p>
                    <i class=\"fa fa-exclamation-triangle\"/>
                    <swa:Space/>Some important information is missing for this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) }. Make sure to include at least one of each of the the following asset/vocabulary types:</p>
                <ul>
                    <ui:forEach ui:resultSet=\"{= ?missingProjectTypes }\">
                        <li>{= ?ptLabel }</li>
                    </ui:forEach>
                </ul>
            </div>
        </ui:if>
    </ui:group>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:comment "Checks if an asset collection has all its required imports, and displays an error message if not" ;
  rdfs:label "Required imports check" ;
  rdfs:subClassOf teamwork:ProjectWarnings ;
.
teamwork:ResourceActionButtons
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional id for the button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to apply the action(s) on. If left blank, then a getter expression must be provided." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceGetter ;
      spl:valueType xsd:string ;
      rdfs:comment "A JavaScript expression that is evaluated to return the URI of the selected resource." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional CSS style for the button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:toolTip ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional tool tip text to appear on the button." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:call arg:appName=\"{= ui:contextValue(&quot;swaAppName&quot;) }\" arg:desktopId=\"{= ?desktopId }\" arg:resource=\"{= ?resource }\" ui:template=\"{= swa:ResourceActions }\">
    <script>var resourceURI='{= ?resource }';</script>
    <ui:forEach ui:resultSet=\"{= ?rs }\">
        <ui:if ui:condition=\"{= ?enabled }\">
            <button class=\"btn btn-default btn-xs swa-button swa-resource-action-button\" id=\"{= ui:uniqueId() }\" onclick=\"{= ?onSelect }\" title=\"{= ?label }\">
                <div class=\"{= ?iconClass }\"/>
            </button>
            <swa:Space/>
        </ui:if>
    </ui:forEach>
</ui:call>
"""^^ui:Literal ;
  rdfs:comment "A list of buttons corresponding to ResourceActions for a given resource. The resource is either a constant or delivered dynamically through a (JavaScript) getter expression." ;
  rdfs:label "Resource action buttons" ;
  rdfs:subClassOf swa:ButtonElements ;
.
teamwork:ResourceHistoryPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display." ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{#
        SELECT ?date ?user
        WHERE {
            {
                BIND (teamwork:currentTeamGraph() AS ?teamGraph) .
                FILTER bound(?teamGraph) .
            } .
            ( ?teamGraph ?resource ) teamwork:resourceHistory ( ?date ?user ) .
        }
        ORDER BY DESC (?date)
        LIMIT 1 }\">
    <div class=\"teamwork-resource-history-panel\">Last edited by <teamwork:UserLink arg:user=\"{= ?user }\"/>
        <swa:Space/>on {= ui:label(?date) }</div>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:comment "Shows up at the top of forms to show most recent change date of a given resource." ;
  rdfs:label "Resource history panel" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:ResourceWithURI
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:iri ;
                sp:arg1 [
                    sp:varName "uri" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "someClass" ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:uri ;
      spl:valueType xsd:string ;
      rdfs:comment "The URI of the resource to get." ;
    ] ;
  rdfs:label "Find resource with URI" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:ResourcesByURIPart
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "someClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:contains ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "uriPart" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:uriPart ;
      spl:valueType xsd:string ;
      rdfs:comment "A sub-string of the URI of the resources." ;
    ] ;
  rdfs:label "Find resources by URI part" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:ResourcesByURIRegex
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "someClass" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:regex ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "regex" ;
                  ] ;
                sp:arg3 "i" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:regex ;
      spl:valueType xsd:string ;
      rdfs:comment "The regular expression." ;
    ] ;
  rdfs:label "Find resources by URI regular expression" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:RestrictedPage
  a ui:NodeClass ;
  ui:abstract true ;
  ui:errorPrototype """
<ui:group let:userName=\"{= smf:currentUserName() }\">
    <ui:if ui:condition=\"{= !bound(?userName) }\">
        <teamwork:HomePage/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Groups all top-level pages of the teamwork app framework that requires a user to be logged in. Displays an error page if no user is logged in." ;
  rdfs:label "Page" ;
  rdfs:subClassOf teamwork:Page ;
.
teamwork:RestrictedService
  a ui:NodeClass ;
  ui:abstract true ;
  ui:errorPrototype """
<ui:group let:userName=\"{= smf:currentUserName() }\">
    <ui:if ui:condition=\"{= !bound(?userName) }\">
        <swon:Value arg:name=\"error\" arg:value=\"Not logged in\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Groups all top-level services of the teamwork app framework that require a user to be logged in.  Generates an error if no user is logged in." ;
  rdfs:label "Restricted service" ;
  rdfs:subClassOf teamwork:Service ;
.
teamwork:RevertChange
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The teamwork:Change to revert." ;
    ] ;
  ui:mutationFieldName "revertChange" ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:currentTeamGraph() }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?subject ?predicate ?object .
            }
            WHERE {
                GRAPH ?teamGraph {
                    ?change teamwork:added ?triple .
                    ?triple teamwork:subject ?subject .
                    ?triple teamwork:predicate ?predicate .
                    ?triple teamwork:object ?object .
                } .
            } }\"/>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subject ?predicate ?object .
            }
            WHERE {
                GRAPH ?teamGraph {
                    ?change teamwork:deleted ?triple .
                    ?triple teamwork:subject ?subject .
                    ?triple teamwork:predicate ?predicate .
                    ?triple teamwork:object ?object .
                } .
            } }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Reverts a given change, producing a new 'forward' change." ;
  rdfs:label "Revert change" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:SavedSearchExportPage
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"project-page search-export-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ExportProjectTab }\" arg:tag=\"{= ?tag }\" let:graph=\"{= ui:currentQueryGraph() }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" let:workingCopy=\"{= teamwork:queryGraph(true, teamwork:graphIdFromMasterGraph(?projectGraph), teamwork:tagId(?tag), smf:currentUserName()) }\">
    <h1>Saved Searches for <em>{= IF(bound(?tag), teamwork:tagId(?tag), teamwork:projectLabel(?projectGraph)) }</em>
    </h1>
    <ui:setContext ui:queryGraph=\"{= IF(bound(?tag), ?workingCopy, ?projectGraph) }\">
        <ui:call arg:baseURI=\"{= ?projectGraph }\" arg:predicate=\"{= rdfs:comment }\" ui:template=\"{= teamwork:FindSavedSearches }\" ui:varName=\"searchrs\">
            <table border=\"0\" class=\"teamwork-saved-search-export-page\">
                <ui:forEach ui:resultSet=\"{= ?searchrs }\">
                    <ui:if ui:condition=\"{= bound(?Search) }\">
                        <ui:group let:sstring=\"{= xsd:string(?Search) }\">
                            <ui:group let:searchid=\"{= smf:subString(?sstring, (smf:lastIndexOf(?sstring, &quot;:&quot;) + 1), fn:string-length(?sstring)) }\">
                                <form action=\"savedsearch\" let:searchIdStr=\"{= str(?Search) }\" let:ssBase=\"{= IF(bound(?tag), xsd:string(?workingCopy), CONCAT(&quot;http://rdfex.org/withImports?uri=&quot;, xsd:string(?projectGraph), &quot;:&quot;, smf:currentUserName())) }\">
                                    <tr>
                                        <td class=\"teamwork-saved-search-export-page\">
                                            <p class=\"teamwork-saved-search-export-page\">
                                                <span class=\"teamwork-saved-search-export-page\">
                                                    <b>Search id:</b>
                                                </span>
                                                <swa:Space/>{= ui:label(?Search) }</p>
                                            <swa:LabeledElement arg:label=\"Class:\">{= ui:label(?Type) }</swa:LabeledElement>
                                            <swa:LabeledElement arg:label=\"Service URL:\">
                                                <script>var url = document.URL; var server = url.substring(0, url.indexOf(\"/tbl\")+4); document.write(\"&lt;input class='teamwork-saved-search-export-page-input-width' type='text' value='\",server + \"{= CONCAT(\"/savedsearch?_format=text/csv&amp;_id=\", smf:subString(?searchIdStr, (spif:lastIndexOf(?searchIdStr, \":\") + 1), fn:string-length(?searchIdStr)), \"&amp;_base=\", ?ssBase) }\" + \"'/&gt;\");</script>
                                            </swa:LabeledElement>
                                            <swa:LabeledElement arg:label=\"Result Format:\">
                                                <select class=\"form-control teamwork-saved-search-export-page-select-width\" name=\"_format\">
                                                    <option value=\"xml\">XML</option>
                                                    <option selected=\"true\" value=\"text/csv\">Text/CSV</option>
                                                    <option value=\"json-simple\">Simple JSON</option>
                                                    <option value=\"simple\">Simple TSV</option>
                                                    <option value=\"text/tab-separated-values\">Text/TSV</option>
                                                </select>
                                            </swa:LabeledElement>
                                            <input name=\"_id\" type=\"hidden\" value=\"{= ?searchid }\"/>
                                            <input name=\"_base\" type=\"hidden\" value=\"{= ?ssBase }\"/>
                                        </td>
                                        <td class=\"teamwork-saved-search-export-page-form-button\">
                                            <input formaction=\"savedsearch\" id=\"submit-button\" type=\"submit\" value=\"Export\"/>
                                        </td>
                                    </tr>
                                </form>
                            </ui:group>
                        </ui:group>
                    </ui:if>
                    <ui:else>
                        <p>No saved searches found.</p>
                    </ui:else>
                </ui:forEach>
            </table>
        </ui:call>
        <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
            <ui:group let:isOntologyProjectType=\"{= COALESCE(spl:objectInGraph(?projectType, teamwork:isOntologyProjectType, ui:graph), false) }\">
                <ui:if ui:condition=\"{= !?isOntologyProjectType }\">
                    <ui:call arg:baseURI=\"{= ?projectGraph }\" ui:template=\"{= teamwork:FindGQLSavedSearches }\" ui:varName=\"gqlsearchrs\">
                        <ui:group let:graphId=\"{= CONCAT(teamwork:graphIdFromGraph(ui:graphWithoutImports(ui:currentQueryGraph())), IF(bound(?tag), CONCAT(&quot;.&quot;, teamwork:tagId(?tag)), &quot;&quot;)) }\">
                            <table border=\"0\" class=\"teamwork-saved-search-export-page\">
                                <ui:forEach ui:resultSet=\"{= ?gqlsearchrs }\">
                                    <ui:if ui:condition=\"{= bound(?Search) }\">
                                        <ui:group let:sstring=\"{= xsd:string(?Search) }\">
                                            <ui:group let:searchid=\"{= smf:subString(?sstring, (smf:lastIndexOf(?sstring, &quot;:&quot;) + 1), fn:string-length(?sstring)) }\">
                                                <tr>
                                                    <td class=\"teamwork-saved-search-export-page\">
                                                        <p class=\"teamwork-saved-search-export-page\">
                                                            <span class=\"teamwork-saved-search-export-page\">
                                                                <b>Search id:</b>
                                                            </span>
                                                            <swa:Space/>{= ui:label(?Search) }</p>
                                                        <swa:LabeledElement arg:label=\"Class:\">{= ui:label(?Type) }</swa:LabeledElement>
                                                        <swa:LabeledElement arg:label=\"Service URL:\">
                                                            <script>var url = document.URL;
var server = url.substring(0, url.indexOf(\"/tbl\")+4);
var query=encodeURIComponent('{= ui:escapeJSON(?query) }');
document.write(\"&lt;input class='service-url teamwork-saved-search-export-page-input-width' type='text' value='\",server + \"{= CONCAT(\"/graphql/\", ?graphId, \"?export=true&amp;label=\", ui:label(?Search), \"&amp;query=\") }\" + query + \"'/&gt;\");</script>
                                                        </swa:LabeledElement>
                                                    </td>
                                                    <td class=\"teamwork-saved-search-export-page-form-button\">
                                                        <form action=\"graphql/{= ?graphId }?export=true&amp;label={= ENCODE_FOR_URI(ui:label(?Search)) }\" class=\"gql-export-form\" method=\"post\">
                                                            <input name=\"query\" type=\"hidden\" value=\"{= ?query }\"/>
                                                            <input id=\"submit-button\" type=\"submit\" value=\"Export\"/>
                                                        </form>
                                                    </td>
                                                </tr>
                                            </ui:group>
                                        </ui:group>
                                    </ui:if>
                                    <ui:else>
                                        <p>No saved searches found.</p>
                                    </ui:else>
                                </ui:forEach>
                            </table>
                        </ui:group>
                    </ui:call>
                </ui:if>
            </ui:group>
        </ui:group>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Saved search export page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
teamwork:SavedSearchFilterSnippet
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:alias ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:facet ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:_='{#
        SELECT ?action ?property ?input ?facetValue ?subjectVar
        WHERE {
            ?resource search:facet ?facet .
            ?facet a search:PropertyFacet .
            ?facet search:facetValue ?facetValue .
            ?facet search:subjectVarName ?subjectVar .
            ?facetValue a ?action .
            ?facet search:property ?property .
            OPTIONAL {
                ?facetValue search:subString ?input .
            } .
            OPTIONAL {
                ?facetValue search:object ?input .
            } .
            OPTIONAL {
                ?facetValue search:rootConcept ?input .
            } .
            OPTIONAL {
                ?facetValue search:pattern ?input .
            } .
            OPTIONAL {
                ?facetValue search:min ?min .
                ?facetValue search:max ?max .
                BIND (CONCAT(str(?min), \",\", str(?max)) AS ?input) .
            } .
            OPTIONAL {
                ?facetValue search:minCardinality ?min .
                ?facetValue search:maxCardinality ?max .
                BIND (CONCAT(str(?min), \",\", str(?max)) AS ?input) .
            } .
        } }'>
    <swon:Object>
        <swon:Value arg:name=\"action\" arg:value=\"{= ?action }\"/>
        <swon:Value arg:name=\"property\" arg:value=\"{= ?property }\"/>
        <!--ui:setContext ui:queryGraph=\"ui:unionGraph\"-->
        <ui:group let:fieldName=\"{= teamwork:getGQLFieldName(?property, ?rootType) }\">
            <swon:Value arg:name=\"gqlAlias\" arg:value=\"{= ?alias }_{= ?fieldName }\"/>
            <swon:Value arg:name=\"gqlName\" arg:value=\"{= ?fieldName }\"/>
            <swon:Value arg:name=\"path\" arg:value=\"{= IF(bound(?alias), CONCAT(?alias, &quot;.&quot;, ?fieldName), ?fieldName) }\"/>
            <swon:Value arg:name=\"pathLabel\" arg:value=\"{= IF(bound(?alias), CONCAT(?alias, &quot; &quot;, ui:label(?rootType)), ui:label(?rootType)) }\"/>
            <swon:Value arg:name=\"subjectVarName\" arg:value=\"{= ?subjectVar }\"/>
            <ui:if ui:condition=\"{= ?action = search:NestedFacetValue }\">
                <swon:Value arg:name=\"value\">
                    <swon:Array letrs:nested=\"{#
                            SELECT ?facet_1
                            WHERE {
                                ?facetValue search:facet ?facet_1 .
                                ?facet_1 a search:PropertyFacet .
                            } }\">
                        <ui:forEach ui:resultSet=\"{= ?nested }\">
                            <teamwork:SavedSearchFilterSnippet arg:alias=\"{= ?fieldName }\" arg:facet=\"{= ?facet_1 }\" arg:resource=\"{= ?facetValue }\" arg:rootType=\"{= COALESCE(swa:localRangeAtClass(?rootType, ?property), ?rootType) }\"/>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= isURI(?input) }\">
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?input }\"/>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(IRI(?input)) }\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?input }\"/>
                </ui:else>
            </ui:else>
        </ui:group>
        <!--/ui:setContext-->
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  rdfs:label """Saved Search Filter Snippet
""" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:SavedSearchJSON
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:default ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:og=\"{= ui:currentQueryGraph() }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
        <swon:Object>
            <swon:Value arg:name=\"data\">
                <swon:Array>
                    <swon:Object>
                        <ui:group let:_=\"{#
                                SELECT ?type ?textSearch
                                WHERE {
                                    ?resource a search:Search .
                                    ?resource search:rootType ?type .
                                    OPTIONAL {
                                        ?resource search:string ?textSearch .
                                    } .
                                } }\">
                            <swon:Value arg:name=\"resourceType\" arg:value=\"{= ?type }\"/>
                            <swon:Value arg:name=\"textSearch\" arg:value=\"{= ?textSearch }\"/>
                        </ui:group>
                        <swon:Value arg:name=\"filters\">
                            <swon:Array>
                                <ui:forEach ui:resultSet=\"{#
                                        SELECT ?rootType ?facet
                                        WHERE {
                                            ?resource a search:Search .
                                            ?resource search:facet ?facet .
                                            ?resource search:rootType ?rootType .
                                            ?facet a search:PropertyFacet .
                                        } }\">
                                    <ui:setContext ui:queryGraph=\"{= ?og }\">
                                        <teamwork:SavedSearchFilterSnippet arg:facet=\"{= ?facet }\" arg:resource=\"{= ?resource }\" arg:rootType=\"{= ?rootType }\"/>
                                    </ui:setContext>
                                </ui:forEach>
                            </swon:Array>
                        </swon:Value>
                        <swon:Value arg:name=\"columns\">
                            <swon:Array>
                                <ui:forEach ui:resultSet='{#
                                        SELECT ?rootType ?colProp ?colIndex ?subjectVarName
                                        WHERE {
                                            ?resource a search:Search .
                                            ?resource search:rootType ?rootType .
                                            ?resource spin:column ?column .
                                            ?column search:columnProperty ?colProp .
                                            ?column search:columnSubjectVarName \"result\" .
                                            OPTIONAL {
                                                ?column spin:columnIndex ?colIndex .
                                            } .
                                        } }'>
                                    <swon:Object>
                                        <swon:Value arg:name=\"property\" arg:value=\"{= ?colProp }\"/>
                                        <ui:setContext ui:queryGraph=\"{= ?og }\">
                                            <ui:setContext ui:queryGraph=\"{= ui:unionGraph }\">
                                                <ui:group let:fieldName=\"{= teamwork:getGQLFieldName(?colProp, ?rootType) }\">
                                                    <swon:Value arg:name=\"gqlAlias\" arg:value=\"_{= ?fieldName }\"/>
                                                    <swon:Value arg:name=\"gqlName\" arg:value=\"{= ?fieldName }\"/>
                                                    <swon:Value arg:name=\"path\" arg:value=\"{= ?fieldName }\"/>
                                                    <swon:Value arg:name=\"pathLabel\" arg:value=\"{= ui:label(?colProp) }\"/>
                                                    <swon:Value arg:name=\"subjectVarName\" arg:value=\"{= ?subjectVarName }\"/>
                                                </ui:group>
                                            </ui:setContext>
                                        </ui:setContext>
                                        <swon:Value arg:name=\"index\" arg:value=\"{= ?colIndex }\"/>
                                    </swon:Object>
                                </ui:forEach>
                            </swon:Array>
                        </swon:Value>
                    </swon:Object>
                </swon:Array>
            </swon:Value>
        </swon:Object>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Saved search" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:SavedSearchesDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:formId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the form to restore." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
      rdfs:comment "The load id." ;
    ] ;
  ui:prototype """
<div id=\"div-{= ?loadId }\">
    <ui:loadable class=\"teamwork-saved-searches-dialog-grid\" ui:loadId=\"savedSearchesGrid\">
        <swa:ResultSetGrid arg:colWidths=\"0,240,120,100\" arg:dtType=\"savedSearches\" arg:hiddenColName=\"uris\" arg:resultSet='{#
                SELECT ?uris ?Search ?Type ?Author
                WHERE {
                    ?Search1 a search:Search .
                    ?Search1 search:rootType ?Type1 .
                    ?Search1 search:creator ?creator .
                    FILTER isIRI(?Search1) .
                    BIND (smf:userDisplayName(?creator) AS ?Author) .
                    BIND (ui:label(?Type1) AS ?Type) .
                    BIND (ui:label(?Search1) AS ?Search) .
                    BIND (CONCAT(xsd:string(?Search1), \" \", xsd:string(?Type1)) AS ?uris) .
                }
                ORDER BY (ui:label(?Search)) }'/>
    </ui:loadable>
    <br/>
    <div>Service URL (for copy and paste):</div>
    <input class=\"form-control teamwork-saved-searches-dialog-input\" id=\"searchURL\" type=\"text\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Saved searches dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
teamwork:SavedSearchesFooterPlugin
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <button class=\"btn btn-default btn-xs swa-button\" onclick=\"teamwork.saveSearch('{= ?formId }')\" title=\"Save current search...\">
        <div class=\"ui-icon ui-icon-disk\"/>
    </button>
    <swa:Space/>
    <button class=\"btn btn-default btn-xs swa-button\" onclick=\"teamwork.showSavedSearchesDialog('{= ?formId }')\" title=\"Show saved searches...\">
        <div class=\"ui-icon ui-icon-folder-open\"/>
    </button>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Saved searches footer plugin" ;
  rdfs:subClassOf swa:SearchFormFooterPlugins ;
.
teamwork:SavedSearchesWithDefaultButtonFooterPlugin
  a swa:SearchFormFooterPlugin ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:currentTeamGraph() }\">
    <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:manager, ?teamGraph) }\">
        <button class=\"btn btn-default btn-xs swa-button\" onclick=\"teamwork.saveDefaultSearch('{= ?formId }')\" title=\"Save current search as the default search for all users...\">
            <div class=\"ui-icon ui-icon-star\"/>
        </button>
        <swa:Space/>
    </ui:if>
    <teamwork:SavedSearchesFooterPlugin ui:args=\"*\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Saved searches with default button footer plugin" ;
  rdfs:subClassOf swa:SearchFormFooterPlugins ;
.
teamwork:SearchResultsModalBody
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:viewPointClass ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:suppressHierarchyViewButton ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group let:frozen=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen() }\" let:resultTableId=\"tb-results-table_{= ui:uniqueId() }\" let:selectedResourceType=\"{= COALESCE(?resourceType, rdfs:Resource) }\">
    <teamwork:Filter arg:resultElementId=\"{= ?resultTableId }\" arg:rootClass=\"{= COALESCE(?viewPointClass, ?nil) }\" arg:suppressHierarchyViewButton=\"{= IF(bound(?suppressHierarchyViewButton), ?suppressHierarchyViewButton, true) }\" arg:viewPointClass=\"{= ?viewPointClass }\"/>
    <ui:classView arg:frozen=\"{= true }\" arg:hasFixedHeader=\"false\" arg:hasFixedToolbar=\"false\" arg:hasMultiSelect=\"false\" arg:hasSelectAll=\"false\" arg:hideToolbar=\"true\" arg:id=\"{= ?resultTableId }\" arg:resourceSelectedEvent=\"org.topbraid.search.app.instanceSelected\" ui:args=\"*\" ui:class=\"{= ?selectedResourceType }\" ui:matchIds=\"datatables-results\" ui:resource=\"{= ?selectedResourceType }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Component that will render the necessary components to render the search-app.  An initialization script must be called on the JavaScript side in order to complete the initialization process." ;
  rdfs:label "Search results modal body" ;
  rdfs:subClassOf swa:DialogElements ;
.
teamwork:SearchVocabularyFormBody
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:setContext let:old=\"{= ui:currentQueryGraph() }\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
    <swa:ObjectsEnum arg:label=\"General\">
        <swa:Object arg:predicate=\"{= rdf:type }\" arg:searchWidget=\"{= teamwork:VocabularyTypeSelectFacet }\"/>
        <swa:Object arg:predicate=\"{= rdfs:label }\"/>
        <swa:Object arg:label=\"description\" arg:predicate=\"{= rdfs:comment }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Metadata\">
        <swa:Object arg:predicate=\"{= metadata:identifier }\"/>
        <swa:Object arg:predicate=\"{= metadata:officialName }\"/>
        <swa:Objects arg:predicate=\"{= metadata:purpose }\"/>
        <swa:Objects arg:predicate=\"{= edg:subjectArea }\"/>
        <ui:if ui:condition=\"{= teamwork:product() = edgproduct:EDG }\">
            <ui:setContext ui:queryGraph=\"{= ?old }\">
                <swa:Object arg:predicate=\"{= teamwork:mainClass }\"/>
                <swa:Object arg:predicate=\"{= teamwork:relatedClass }\"/>
            </ui:setContext>
        </ui:if>
        <swa:Object arg:predicate=\"{= metadata:status }\"/>
    </swa:ObjectsEnum>
    <teamwork:GovernanceRolesSection/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Search vocabulary form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:Service
  a ui:NodeClass ;
  ui:abstract true ;
  ui:responseType ui:JSON ;
  rdfs:comment "Root class for all top-level services." ;
  rdfs:label "Service" ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:SetDefaultEditorPlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 14 ;
  teamwork:pluginValidExpression [
      a sp:and ;
      sp:arg1 [
          a sp:exists ;
          sp:elements (
              [
                a sp:NamedGraph ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "any" ;
                        ] ;
                      sp:predicate teamwork:projectEditorClassOption ;
                      sp:subject [
                          sp:varName "projectType" ;
                        ] ;
                    ]
                  ) ;
                sp:graphNameNode ui:graph ;
              ]
            ) ;
        ] ;
      sp:arg2 [
          a sp:not ;
          sp:arg1 [
              a teamwork:areOldEditorsDisabled ;
            ] ;
        ] ;
    ] ;
  ui:prototype """
<ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext let:projectEditorClass=\"{= spl:objectInGraph(?projectType, teamwork:projectEditorClass, ui:graph) }\" ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:ActionLink arg:faIcon=\"fa-columns\" arg:title=\"Set Default App (among &quot;Old&quot; Editors only)\">
            <div>
                <span>Default App (for editing/viewing):&nbsp;</span>
                <select class=\"form-control\" let:old=\"{= spl:object(?teamGraph, teamwork:defaultEditorClass) }\">
                    <ui:forEach ui:resultSet=\"{#
                            SELECT ?editor ?label
                            WHERE {
                                GRAPH ui:graph {
                                    ?projectType teamwork:projectEditorClass|teamwork:projectEditorClassOption ?editor .
                                    BIND (ui:label(?editor) AS ?label) .
                                } .
                            }
                            ORDER BY (?label) }\">
                        <option selected=\"{= IF((?old = ?editor), &quot;selected&quot;, ?none) }\" value=\"&lt;{= ?editor }&gt;\">{= ?label }</option>
                    </ui:forEach>
                    <ui:handle arg:value=\"$(this).val()\" ui:event=\"onchange\">
                        <ui:setPropertyValue arg:property=\"{= teamwork:defaultEditorClass }\" arg:value=\"{= IF(((?value != ?old) || (!bound(?old))), ?value, ?none) }\" ui:this=\"{= ?teamGraph }\"/>
                    </ui:handle>
                </select>
            </div>
        </teamwork:ActionLink>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Set default editor plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:SetDefaultNamespaceUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to change the name of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:if ui:condition=\"{= (!bound(?newValue)) || (!spif:isValidURI(?newValue)) }\">
        <swon:Value arg:name=\"status\" arg:value=\"error\"/>
        <swon:Value arg:name=\"message\" arg:value=\"Not a valid URI.\"/>
    </ui:if>
    <ui:elseif ui:condition=\"{= !teamwork:isValidDefaultNamespace(?newValue) }\">
        <swon:Value arg:name=\"status\" arg:value=\"error\"/>
        <swon:Value arg:name=\"message\" arg:value=\"Default namespace must end with a / or #.\"/>
    </ui:elseif>
    <ui:else>
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\" ui:silentTransactions=\"{= true }\">
            <ui:setPropertyValue arg:property=\"{= swa:defaultNamespace }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?projectGraph }\"/>
        </ui:setContext>
        <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
    </ui:else>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set default namespace update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
teamwork:SetImportSubjectAreaGraphsPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 0 ;
  ui:prototype """
<ui:setContext let:areaGraph=\"{= teamwork:getSubjectAreaImportsGraph(?projectGraph) }\" ui:queryGraph=\"{= ?projectGraph }\">
    <teamwork:ActionLink arg:faIcon=\"fa-link\" arg:title=\"Includes based on Subject Area\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(EXISTS {
                ?projectGraph owl:imports ?areaGraph .
            }, &quot;checked&quot;, ?none) }\" disabled=\"{= IF(teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:editor, teamwork:teamGraph(?projectGraph)), ?none, &quot;disabled&quot;) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:if ui:condition=\"{= ?checked }\">
                        <ui:addPropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?areaGraph }\" ui:this=\"{= ?projectGraph }\"/>
                    </ui:if>
                    <ui:else>
                        <ui:removePropertyValue arg:property=\"{= owl:imports }\" arg:value=\"{= ?areaGraph }\" ui:this=\"{= ?projectGraph }\"/>
                    </ui:else>
                </ui:handle>
            </input>
            <span>If activated then all asset collections from the same subject area will be automatically included.</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Includes based on subject area plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
teamwork:SetPerResourceGovernanceRolesManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 9 ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <teamwork:ActionLink arg:faIcon=\"fa-at\" arg:title=\"Enable Per-Asset Governance Roles\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(spl:object(?projectGraph, teamwork:perResourceGovernanceRolesEnabled), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:setPropertyValue arg:property=\"{= teamwork:perResourceGovernanceRolesEnabled }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?projectGraph }\"/>
                </ui:handle>
            </input>
            <span>If activated then it is possible to define governance roles for each individual asset/resource by switching to <em>Stewardship</em> view on asset forms, where available.</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Enable per-asset governance roles" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:SetProjectCommentUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to change the comment of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\" ui:silentTransactions=\"{= true }\">
        <ui:setPropertyValue arg:property=\"{= rdfs:comment }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?projectGraph }\"/>
    </ui:setContext>
    <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set project comment update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
teamwork:SetProjectNameUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to change the name of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:if ui:condition=\"{= (!bound(?newValue)) || (STRLEN(spif:trim(?newValue)) = 0) }\">
        <swon:Value arg:name=\"status\" arg:value=\"error\"/>
        <swon:Value arg:name=\"message\" arg:value=\"The title must not be empty.\"/>
    </ui:if>
    <ui:else>
        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\" ui:silentTransactions=\"{= true }\">
            <ui:setPropertyValue arg:property=\"{= rdfs:label }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?projectGraph }\"/>
        </ui:setContext>
        <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
    </ui:else>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set project name update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
teamwork:SetSimpleSearchModePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 13 ;
  ui:prototype """
<ui:setContext let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <teamwork:ActionLink arg:faIcon=\"fa-keyboard\" arg:title=\"Enable Simple Search\">
        <div class=\"checkbox\">
            <input checked=\"{= IF(spl:object(?teamGraph, teamwork:enableSimpleSearchMode), &quot;checked&quot;, ?none) }\" type=\"checkbox\">
                <ui:handle arg:checked=\"this.checked\" ui:event=\"onclick\">
                    <ui:setPropertyValue arg:property=\"{= teamwork:enableSimpleSearchMode }\" arg:value=\"{= ?checked }\" ui:this=\"{= ?teamGraph }\"/>
                </ui:handle>
            </input>
            <span>If activated then search filters are removed, allowing the user to use only the text input search.</span>
        </div>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Enable simple search plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:SetTagCommentUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to change the comment of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:setContext ui:silentTransactions=\"{= true }\">
        <ui:setPropertyValue arg:property=\"{= rdfs:comment }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?tag }\"/>
    </ui:setContext>
    <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set tag comment update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
teamwork:SetTagNameUpdateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to edit." ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object>
    <ui:if ui:condition=\"{= (!bound(?newValue)) || (STRLEN(spif:trim(?newValue)) = 0) }\">
        <swon:Value arg:name=\"status\" arg:value=\"error\"/>
        <swon:Value arg:name=\"message\" arg:value=\"The title must not be empty.\"/>
    </ui:if>
    <ui:else>
        <ui:setContext ui:silentTransactions=\"{= true }\">
            <ui:setPropertyValue arg:property=\"{= rdfs:label }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ?tag }\"/>
        </ui:setContext>
        <swon:Value arg:name=\"status\" arg:value=\"ok\"/>
    </ui:else>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Set tag name update service" ;
  rdfs:subClassOf swa:InlineEditorUpdateServices ;
.
teamwork:ShowAffectedTagsAction
  a swa:ResourceAction ;
  arg:appName "Editor" ;
  arg:condition [
      a sp:or ;
      sp:arg1 [
          a sp:and ;
          sp:arg1 [
              a teamwork:isExplorerUser ;
              sp:arg1 [
                  a smf:userWithName ;
                  sp:arg1 [
                      a smf:currentUserName ;
                    ] ;
                ] ;
            ] ;
          sp:arg2 [
              a teamwork:explorerUsersCanViewWorkingCopies ;
            ] ;
        ] ;
      sp:arg2 [
          a sp:and ;
          sp:arg1 [
              a sp:not ;
              sp:arg1 [
                  a teamwork:isExplorerUser ;
                  sp:arg1 [
                      a smf:userWithName ;
                      sp:arg1 [
                          a smf:currentUserName ;
                        ] ;
                    ] ;
                ] ;
            ] ;
          sp:arg2 [
              a teamwork:currentGraphHasTeamGraph ;
            ] ;
        ] ;
    ] ;
  arg:onSelect "teamwork.showAffectedTags(resourceURI)" ;
  swa:readOnly true ;
  rdfs:label "Show affected working copies..." ;
.
teamwork:ShowAffectedTagsDialog
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to operate on." ;
    ] ;
  ui:prototype """
<div id=\"div-affected-tags-dialog\" title=\"Working Copies affected by {= ui:label(?resource) }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:currentTeamGraph()) }\">
        <teamwork:AffectedTagsView arg:node=\"{= ?resource }\"/>
    </ui:setContext>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Show affected tags dialog" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:SigmaNeighborGramAction
  a swa:VisualizationAction ;
  arg:appName "Ontology,Editor" ;
  arg:condition true ;
  arg:onSelect "window.open(swa.servlet + '?_base=' + swa.queryGraphURI + '&_viewClass=teamwork:NeighborGramPage' + '&focusNode=' + escape(resourceURI))" ;
  swa:readOnly true ;
  rdfs:label "NeighborGram™..." ;
.
teamwork:SimpleClassFormBody
  a ui:ResourceViewClass ;
  ui:private true ;
  ui:prototype """
<div default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\">
    <ui:if ui:condition=\"{= swa:isViewMode() }\">
        <teamwork:ResourceHistoryPanel arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <swa:ObjectsEnum arg:label=\"Labels and Description\">
        <swa:Objects arg:predicate=\"{= rdfs:label }\"/>
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= rdfs:comment }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
        <swa:ObjectsPlaceholder arg:filterFunction=\"{= swa:isAnnotationProperty }\" arg:suppressShapeSection=\"{= true }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Class Characteristics\">
        <swa:Objects arg:label=\"sub-class of\" arg:predicate=\"{= rdfs:subClassOf }\"/>
        <ui:if ui:condition=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, owl:Class) }\">
            <swa:Objects arg:label=\"equivalent class\" arg:predicate=\"{= owl:equivalentClass }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= spl:instanceOf(dash:abstract, rdf:Property) }\">
            <swa:Object arg:predicate=\"{= dash:abstract }\"/>
        </ui:if>
        <ui:if ui:condition=\"{= (bound(?resource) &amp;&amp; (swa:isViewMode() || EXISTS {
            ?resource spin:constraint ?any .
        })) &amp;&amp; spl:instanceOf(spin:constraint, rdf:Property) }\">
            <!-- Use ui:dynamicView hack, avoids testing rdf:type and making the whole enum invisible -->
            <ui:dynamicView arg:hideIfEmpty=\"{= true }\" arg:label=\"SPIN constraints\" arg:predicate=\"{= spin:constraint }\" arg:subject=\"{= ?resource }\" ui:class=\"{= swa:Objects }\"/>
        </ui:if>
    </swa:ObjectsEnum>
    <ui:if ui:condition=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, sh:Shape) }\">
        <swa:ObjectsEnum arg:label=\"Constraints\">
            <swa:Objects arg:editWidget=\"{= teamwork:PropertyShapeEditor }\" arg:label=\"property shapes\" arg:predicate=\"{= sh:property }\"/>
            <swa:Objects arg:hideInModes=\"edit,search\" arg:predicate=\"{= sh:sparql }\"/>
            <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:targetClass }\"/>
            <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:targetNode }\"/>
            <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:target }\"/>
            <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:targetObjectsOf }\"/>
            <swa:Objects arg:hideInModes=\"edit\" arg:predicate=\"{= sh:targetSubjectsOf }\"/>
        </swa:ObjectsEnum>
        <ui:if ui:condition=\"{= swa:isViewMode() }\">
            <teamwork:InheritedConstraintsSection arg:resource=\"{= ?resource }\"/>
        </ui:if>
        <swa:ObjectsEnum arg:label=\"Rules\">
            <swa:Objects arg:editWidget=\"{= swa:SourceCodeEditor }\" arg:label=\"rules\" arg:predicate=\"{= sh:rule }\" arg:viewWidget=\"{= swa:SourceCodeViewer }\"/>
        </swa:ObjectsEnum>
    </ui:if>
    <swa:ObjectsPlaceholder arg:filterFunction=\"{= teamwork:filterSimpleClassFormProperties }\" arg:hidePropertiesFunction=\"{= teamwork:isHiddenPropertyAtClass }\" arg:hidePropertyGroupsFunction=\"{= teamwork:isHiddenPropertyGroupAtClass }\" arg:label=\"Additional Characteristics\"/>
    <ui:if let:loadId=\"{= ui:uniqueId() }\" ui:condition=\"{= swa:isViewMode() }\">
        <div class=\"swa-objects-group\">
            <swa:LoadableFormSection arg:label=\"Relevant Properties Table\" arg:loadId=\"{= ?loadId }\">
                <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                    <swaclasses:RelevantPropertiesWidget arg:class=\"{= ?resource }\"/>
                </ui:loadable>
            </swa:LoadableFormSection>
        </div>
    </ui:if>
    <teamwork:UMLDiagramsSection arg:kind=\"Class\"/>
</div>
"""^^ui:Literal ;
  rdfs:comment "The default view for classes, including support for SHACL if the class is also a shape." ;
  rdfs:label "Simple class form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:SimpleDatatypePropertyFormBody
  a ui:ResourceViewClass ;
  ui:private true ;
  ui:prototype """
<div default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\" default:tabular=\"{= true }\">
    <ui:if ui:condition=\"{= swa:isViewMode() }\">
        <teamwork:ResourceHistoryPanel arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <swa:ObjectsEnum arg:label=\"Labels and Description\">
        <swa:Objects arg:predicate=\"{= rdfs:label }\"/>
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= rdfs:comment }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
        <swa:ObjectsPlaceholder arg:filterFunction=\"{= swa:isAnnotationProperty }\"/>
    </swa:ObjectsEnum>
    <ui:if ui:condition=\"{= (!teamwork:isSHACLPreferred()) || teamwork:requiresPropertyAxiomSection(?resource) }\">
        <swa:ObjectsEnum arg:label=\"Global Property Characteristics\">
            <teamwork:PropertyFormSHACLInfo/>
            <swa:Object arg:predicate=\"{= rdfs:domain }\"/>
            <swa:Object arg:editWidget=\"{= teamwork:DatatypeRangeEditor }\" arg:predicate=\"{= rdfs:range }\" arg:viewWidget=\"{= teamwork:DatatypeRangeViewer }\"/>
            <swa:Objects arg:label=\"sub-property of\" arg:predicate=\"{= rdfs:subPropertyOf }\"/>
            <teamwork:FunctionalPropertyBox/>
        </swa:ObjectsEnum>
    </ui:if>
    <swa:ObjectsPlaceholder arg:filterFunction=\"{= teamwork:filterSimplePropertyFormProperties }\" arg:label=\"Other Properties\"/>
    <teamwork:IncomingPropertyConstraintsSection arg:predicate=\"{= ?resource }\"/>
</div>
"""^^ui:Literal ;
  rdfs:comment "A simple version of the default view for owl:DatatypeProperty, with widget groups for Annotation Properties and Attribute Characteristics (only allowing single values for rdfs:domain and rdfs:range) and all other properties hidden." ;
  rdfs:label "Simple datatype property form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:SimpleFormEditorApplication
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editing ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:readOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to always be in read-only mode." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The selected resource." ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?resource) }\">
    <teamwork:ErrorPage arg:message=\"Missing resource argument\"/>
</ui:if>
"""^^ui:Literal ;
  ui:headIncludes """
<ui:group>
    <title>TopBraid {= teamwork:getProductAbbreviation() } Editor</title>
    <ui:if ui:condition=\"{= teamwork:getProjectType(teamwork:currentMasterGraph()) = taxonomies:ProjectType }\">
        <script>(function(){ teamwork.initRichTextEditors(teamwork.injectLinkToConceptButton); })();</script>
    </ui:if>
    <ui:else>
        <script>(function(){ teamwork.initRichTextEditors(); })();</script>
    </ui:else>
    <style>.ui-layout-toggler-east-closed {
  background-image: url(\"lib/teamwork/build/images/teamwork/SourceCodePanelVertical.png\") !important ;
  background-color: #204d74 !important;
}</style>
    <teamwork:initEastTogglerSimpleFormEditor/>
    <script>tbf.setLinkFunction(teamwork.getSimpleFormEditorLinkRelative);</script>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:frozen=\"{= ((teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen()) || ?readOnly) || (bound(?resource) &amp;&amp; teamwork:isReadOnlyResource(?resource)) }\">
    <script>document.title = \"{= ui:escapeJSON(ui:label(?resource)) } - {= teamwork:graphLabel(teamwork:masterGraph(teamwork:currentGraphId())) }\"</script>
    <ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"Simple,Editor{= IF(?frozen, &quot;,ReadOnly&quot;, ?none) }\">
        <ui:setContext ui:varName=\"swaCategoryFunction\" ui:varValue=\"{= swa:categoryByNamespace }\">
            <ui:setContext ui:varName=\"createHRefFunction\" ui:varValue=\"{= teamwork:createSimpleFormEditorHRef }\">
                <teamwork:EditorChrome>
                    <ui:insert ui:into=\"header\">
                        <teamwork:EditorHeader arg:frozen=\"{= ?frozen }\">
                            <teamwork:UndoButton arg:hidden=\"{= ?frozen }\"/>
                        </teamwork:EditorHeader>
                    </ui:insert>
                    <ui:insert ui:into=\"main\">
                        <teamwork:ChromeBorderLayout arg:customEast=\"initEastToggler\" arg:northFixed=\"{= true }\" arg:storageKey=\"org.topbraidlive.teamwork.SimpleFormEditor\" default:editable=\"{= !?frozen }\">
                            <swa:Window arg:id=\"simpleappFormWindow\" arg:layoutPanel=\"center\" arg:title=\"Selected Resource\">
                                <teamwork:SwitchableFormGadget arg:createLinkFunctionOverride=\"{= teamwork:createOpenInNewFormEditorLink }\" arg:editing=\"{= ?editing }\" arg:pagination=\"{= true }\" arg:readOnly=\"{= ?frozen }\" arg:resource=\"{= ?resource }\" arg:suppressDetailsButton=\"{= true }\" ui:args=\"*\"/>
                            </swa:Window>
                            <ui:if ui:condition=\"{= isIRI(?resource) &amp;&amp; (!COALESCE(smf:configParam(&quot;teamworkDisableSourceCodeEditing&quot;), false)) }\">
                                <swa:Window arg:id=\"simpleappSourceWindow\" arg:layoutPanel=\"east\" arg:title=\"Source Code\">
                                    <teamwork:SourceCodeGadget arg:frozen=\"{= ?frozen || teamwork:currentUserCannotEditSourceCode(teamwork:currentMasterGraph()) }\" ui:args=\"*\"/>
                                </swa:Window>
                            </ui:if>
                        </teamwork:ChromeBorderLayout>
                    </ui:insert>
                </teamwork:EditorChrome>
            </ui:setContext>
        </ui:setContext>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A simple editor/viewer application consisting of a full-screen form for a selected resource, inside the usual teamwork Chrome (header etc)." ;
  rdfs:label "Simple form editor application" ;
  rdfs:subClassOf teamwork:EditorApplications ;
.
teamwork:SimpleFormEditorLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                    sp:arg2 teamwork:editedResource ;
                    sp:arg3 [
                        a teamwork:teamGraph ;
                        sp:arg1 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "r" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "." ;
                        sp:arg2 [
                            a teamwork:tagId ;
                            arg:tag [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 ".editor?_editorClass=teamwork:SimpleFormEditorApplication" ;
                sp:arg4 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "r" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a swa:falseOrUnbound ;
                            arg:value [
                                sp:varName "tagIgnoreEditedResource" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "&resource=" ;
                        sp:arg2 [
                            a sp:encode_for_uri ;
                            sp:arg1 [
                                a sp:str ;
                                sp:arg1 [
                                    sp:varName "r" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to deep link to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag to produce a link for." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagIgnoreEditedResource ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, the edited resource of ?tag (if any) will be ignored, and the editor won't start with the resource selected." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph to open." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Produces a relative URL to open the SimpleFormEditor for a passed in resource within its project graph" ;
  rdfs:label "simple form editor link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:SimplePropertyFormBody
  a ui:ResourceViewClass ;
  ui:private true ;
  ui:prototype """
<div default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\" default:tabular=\"{= true }\">
    <ui:if ui:condition=\"{= swa:isViewMode() }\">
        <teamwork:ResourceHistoryPanel arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <swa:ObjectsEnum arg:label=\"Labels and Description\">
        <swa:Objects arg:predicate=\"{= rdfs:label }\"/>
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= rdfs:comment }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
        <swa:ObjectsPlaceholder arg:filterFunction=\"{= swa:isAnnotationProperty }\"/>
    </swa:ObjectsEnum>
    <ui:if ui:condition=\"{= (!teamwork:isSHACLPreferred()) || teamwork:requiresPropertyAxiomSection(?resource) }\">
        <swa:ObjectsEnum arg:label=\"Global Property Characteristics\">
            <teamwork:PropertyFormSHACLInfo/>
            <swa:Object arg:predicate=\"{= rdfs:domain }\"/>
            <swa:Object arg:predicate=\"{= rdfs:range }\"/>
            <swa:Objects arg:label=\"sub-property of\" arg:predicate=\"{= rdfs:subPropertyOf }\"/>
            <ui:if ui:condition=\"{= bound(?resource) &amp;&amp; spl:instanceOf(?resource, owl:ObjectProperty) }\">
                <swa:Object arg:predicate=\"{= owl:inverseOf }\"/>
            </ui:if>
            <teamwork:FunctionalPropertyBox/>
        </swa:ObjectsEnum>
    </ui:if>
    <swa:ObjectsPlaceholder arg:filterFunction=\"{= teamwork:filterSimplePropertyFormProperties }\" arg:label=\"Additional Properties\"/>
    <teamwork:IncomingPropertyConstraintsSection arg:predicate=\"{= ?resource }\"/>
</div>
"""^^ui:Literal ;
  rdfs:comment "A simple version of the default view for rdf:Property." ;
  rdfs:label "Simple property form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:SimpleResourceFormBody
  a ui:ResourceViewClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideSubjects ;
      spl:valueType xsd:boolean ;
      rdfs:comment "true to hide incoming references." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\" default:tabular=\"{= true }\" let:projectGraph=\"{= teamwork:currentMasterGraph() }\">
    <ui:if ui:condition=\"{= !bound(?projectGraph) }\">
        <swa:ResourceFormBody arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <ui:else>
        <ui:group let:per=\"{= bound(?projectGraph) &amp;&amp; teamwork:isPerResourceGovernanceRolesEnabled(?projectGraph) }\">
            <ui:if ui:condition=\"{= swa:isViewMode() }\">
                <teamwork:ResourceHistoryPanel arg:resource=\"{= ?resource }\"/>
            </ui:if>
            <ui:if let:title=\"Governance Roles for this Asset\" ui:condition=\"{= ?per }\">
                <ui:group let:tag=\"{= teamwork:currentTag() }\">
                    <ui:if ui:condition=\"{= swa:isEditMode() &amp;&amp; (!bound(?tag)) }\">
                        <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"{= ?title }\" arg:openable=\"{= true }\" arg:subject=\"{= ?resource }\">
                            <ui:forEach ui:resultSet=\"{#
                                    SELECT ?predicate ?label
                                    WHERE {
                                        rdf:nil teamwork:activatedWorkflowParticipantProperties ?predicate .
                                        BIND (swa:labelInGraph(?predicate, ui:graphWithImports(teamwork:platformGovernanceGraph())) AS ?label) .
                                    }
                                    ORDER BY (?label) }\">
                                <swa:Objects arg:editWidget=\"{= teamwork:WorkflowParticipantSelectEditor }\" arg:label=\"{= ?label }\" arg:predicate=\"{= ?predicate }\"/>
                            </ui:forEach>
                        </swa:ObjectsEnum>
                    </ui:if>
                    <ui:elseif ui:condition=\"{= bound(?resource) &amp;&amp; (!swa:isSearchMode()) }\">
                        <ui:group letrs:predicates=\"{#
                                SELECT ?predicate ?label
                                WHERE {
                                    rdf:nil teamwork:activatedWorkflowParticipantProperties ?predicate .
                                    FILTER EXISTS {
                                        ?resource ?predicate ?any .
                                    } .
                                    BIND (swa:labelInGraph(?predicate, ui:graphWithImports(teamwork:platformGovernanceGraph())) AS ?label) .
                                }
                                ORDER BY (?label) }\">
                            <ui:if ui:condition=\"{= !spr:isEmpty(?predicates) }\">
                                <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"{= ?title }\" arg:openable=\"{= true }\" arg:subject=\"{= ?resource }\">
                                    <ui:if ui:condition=\"{= swa:isEditMode() }\">
                                        <p class=\"text-danger\">These Governance Roles can only be edited on the production copy.</p>
                                    </ui:if>
                                    <ui:forEach ui:resultSet=\"{= ?predicates }\">
                                        <swa:LabeledElement arg:label=\"{= ?label }:\">
                                            <ui:forEach ui:resultSet=\"{#
                                                    SELECT ?object
                                                    WHERE {
                                                        ?resource ?predicate ?object .
                                                    } }\">
                                                <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), teamwork:workflowsGraph(), &lt;urn:x-tb-authgraph&gt;) }\">
                                                    <teamwork:WorkflowParticipantViewer ui:args=\"*\"/>
                                                </ui:setContext>
                                            </ui:forEach>
                                        </swa:LabeledElement>
                                    </ui:forEach>
                                </swa:ObjectsEnum>
                            </ui:if>
                        </ui:group>
                    </ui:elseif>
                </ui:group>
            </ui:if>
            <swa:ObjectsPlaceholder arg:filterFunction=\"{= IF(?per, teamwork:isNotWorkflowParticipantProperty, ?none) }\" arg:label=\"Other Properties\" arg:shapeSectionAbove=\"{= true }\"/>
            <ui:if ui:condition=\"{= (!swa:isEditMode()) &amp;&amp; swa:falseOrUnbound(?hideSubjects) }\">
                <ui:call arg:object=\"{= ?resource }\" ui:template=\"{= IF(swa:isSearchMode(), swa:SuitableSubjectPredicates, swa:UsedSubjectPredicates) }\">
                    <swa:SubjectsGroup arg:filterFunction=\"{= swa:isNotUsedInInversePath }\" arg:label=\"Incoming References\" arg:object=\"{= ?resource }\" arg:predicates=\"{= ?rs }\"/>
                </ui:call>
            </ui:if>
            <ui:insertionPoint ui:pointId=\"bottom\"/>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """The default view for any resources, based on SHACL property groups.

This only works if the current query graph is opened with a teamwork graph as current query graph, otherwise it falls back to swa:ResourceFormBody.""" ;
  rdfs:label "Simple resource form body" ;
  rdfs:subClassOf swa:FormBody ;
.
teamwork:SourceCodeGadget
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:frozen ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to be in read-only mode." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource being edited." ;
    ] ;
  ui:prototype """
<ui:group let:queryGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\">
    <div class=\"action-bar\">
        <div style=\"float: left\">
            <button class=\"btn btn-default btn-xs\" disabled=\"disabled\" id=\"assignButton\">
                <span aria-hidden=\"true\"/>Save Changes</button>
            <swa:Spaces/>
            <span class=\"text-danger\" id=\"errorDisplay\"/>
        </div>
        <div style=\"float: right\">
            <input id=\"showIncludedButton\" type=\"checkbox\"/>
            <span class=\"swa-history-checkbox\" title=\"If activated then the source code viewer will also show triples coming from included graphs. In this case, editing becomes disabled.\">Show Included</span>
        </div>
        <div style=\"clear: both\"/>
    </div>
    <ui:loadable autocomplete=\"off\" class=\"teamwork-source-textarea ui-layout-content\" disabled=\"{= IF(?frozen, &quot;disabled&quot;, ?none) }\" spellcheck=\"false\" ui:elementType=\"textarea\" ui:loadId=\"sourceCodeTextArea\">
        <ui:setContext ui:queryGraph=\"{= ui:tempGraphSourceCode }\">
            <teamwork:collectTriplesForSubject arg:queryGraph=\"{= IF(COALESCE(?showIncluded, false), ui:graphWithImports(?queryGraph), ?queryGraph) }\" arg:subject=\"{= ?resource }\"/>
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?namespace ?prefix
                    WHERE {
                        GRAPH ?queryGraph {
                            ?namespace spif:prefix ?prefix .
                        } .
                    } }\">
                <ui:setPrefix ui:namespace=\"{= ?namespace }\" ui:prefix=\"{= ?prefix }\"/>
            </ui:forEach>
            <ui:group let:source=\"{= smf:convertRDFToText() }\">
                <ui:group>{= spif:replaceAll(?source, \"\\\\r\", \"\") }</ui:group>
                <ui:if ui:condition=\"{= NOT EXISTS {
                    ?s ?p ?o .
                } }\"># No triples are defined for this resource in this graph.
<ui:if ui:condition=\"{= swa:falseOrUnbound(?showIncluded) }\"># All information displayed on the form is coming from included graphs.</ui:if>
                </ui:if>
            </ui:group>
        </ui:setContext>
    </ui:loadable>
    <script>teamwork.editSourceCodeInit('{= ?queryGraph }', '{= ?resource }', $('#sourceCodeTextArea'), $('#errorDisplay'), $('#assignButton'), $('#showIncludedButton'), 'sourceCodeTextArea')</script>
    <swa:Subscribe arg:code=\"swa.load('sourceCodeTextArea', {showIncluded: $('#showIncludedButton').is(':checked')})\" arg:event=\"org.topbraid.swa.change\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Source code gadget" ;
  rdfs:subClassOf swa:Gadgets ;
.
teamwork:Spaces
  a ui:NodeClass ;
  ui:prototype """
<ui:group>&nbsp;&nbsp;&nbsp;</ui:group>
"""^^ui:Literal ;
  rdfs:label "Spaces" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:StatusChangeCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "sc" ;
                  ] ;
              ] ;
            sp:varName "count" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "sc" ;
              ] ;
            sp:predicate teamwork:statusChange ;
            sp:subject spin:_arg1 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root view." ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:SummarySearchResultsGadget
  a swa:Gadget ;
  ui:private true ;
  ui:prototype """
<ui:setContext let:id=\"{= ui:uniqueId() }\" ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createEventLink }\">
    <ui:setContext ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
        <div class=\"swa-facets-results-bar\">
            <div class=\"swa-facets-results-bar-pages\">
                <a id=\"{= ?id }-previousPage\">&laquo; Previous</a>
                <span> | </span>
                <strong id=\"{= ?id }-startIndex\">0</strong>
                <span> - </span>
                <strong id=\"{= ?id }-endIndex\">0</strong>
                <span> of </span>
                <strong id=\"{= ?id }-count\">0</strong>
                <span> | </span>
                <a id=\"{= ?id }-nextPage\">Next &raquo;</a>
            </div>
            <div class=\"swa-float-right swa-summary-search-results-gadget-autocomplete\">
                <select autocomplete=\"false\" class=\"form-control swa-facets-search-field swa-summary-search-results-gadget-autocomplete-select\" id=\"{= ?id }-sortField\" title=\"Sorting options\">
                    <option selected=\"selected\" value=\"\">By label</option>
                </select>
            </div>
            <div class=\"swa-float-right swa-summary-search-results-gadget-autocomplete\">
                <select autocomplete=\"false\" class=\"form-control swa-facets-search-field swa-summary-search-results-gadget-autocomplete-select\" id=\"{= ?id }-pageSize\" title=\"Sorting options\">
                    <option selected=\"selected\" value=\"10\">10 per page</option>
                    <option value=\"20\">20 per page</option>
                    <option value=\"50\">50 per page</option>
                </select>
            </div>
            <div class=\"swa-clear-both\"/>
        </div>
        <div class=\"ui-layout-content\" id=\"{= ?id }-owner\">
            <ui:loadable class=\"swa-facets-results-gadget\" ui:loadId=\"{= ?id }\">
                <ui:if ui:condition=\"{= bound(?searchGraph) }\">
                    <ui:setContext let:startIndex=\"{= COALESCE(?startIndex, 0) }\" ui:queryGraph=\"{= ?searchGraph }\" ui:varName=\"searchGraph\" ui:varValue=\"{= ?searchGraph }\">
                        <ui:group let:pageSize=\"{= COALESCE(?pageSize, 10) }\" let:search=\"{= search:theSearch() }\">
                            <ui:group let:queryGraph=\"{= spl:object(?search, search:queryGraph) }\" letrs:results=\"{#
                                    SELECT ?result ?totalCount
                                    WHERE {
                                        ( ?search ?startIndex ?pageSize ?sortProperty ) search:result ( ?result ?totalCount ) .
                                    } }\">
                                <div class=\"swa-facets-results-list\">
                                    <ui:if ui:condition=\"{= spr:cell(?results, 0, 1) &gt; 0 }\">
                                        <ui:forEach ui:resultSet=\"{= ?results }\">
                                            <div class=\"swa-facets-result-summary\" onclick=\"{= swa:createEventLink(?result) }\">
                                                <ui:setContext ui:queryGraph=\"{= ?queryGraph }\">
                                                    <ui:resourceView ui:matchIds=\"summary\" ui:resource=\"{= ?result }\"/>
                                                </ui:setContext>
                                            </div>
                                        </ui:forEach>
                                    </ui:if>
                                </div>
                                <ui:group let:rowCount=\"{= spr:cell(?results, 0, 1) }\">
                                    <script>$(\"#{= ?id }-count\").text(\"{= ?rowCount }\");</script>
                                    <script>$(\"#{= ?id }-startIndex\").text(\"{= IF((?rowCount = 0), 0, (?startIndex + 1)) }\");</script>
                                    <script>$(\"#{= ?id }-endIndex\").text(\"{= IF((?rowCount &lt; (?startIndex + ?pageSize)), ?rowCount, (?startIndex + ?pageSize)) }\");</script>
                                    <ui:if ui:condition=\"{= ?startIndex &gt; 0 }\">
                                        <script>$(\"#{= ?id }-previousPage\").attr(\"onclick\", \"swa.reloadSummarySearchResults('{= ?id }', Math.max(0, {= ?startIndex } - swa.getSummarySearchPageSize('{= ?id }')), '{= ?searchGraph }')\");$(\"#{= ?id }-previousPage\").attr(\"href\", \"javascript:void(0)\");</script>
                                    </ui:if>
                                    <ui:else>
                                        <script>$(\"#{= ?id }-previousPage\").attr(\"onclick\", null);$(\"#{= ?id }-previousPage\").attr(\"href\", null);</script>
                                    </ui:else>
                                    <ui:if ui:condition=\"{= (?startIndex + ?pageSize) &lt; ?rowCount }\">
                                        <script>$(\"#{= ?id }-nextPage\").attr(\"onclick\", \"swa.reloadSummarySearchResults('{= ?id }', {= ?startIndex } + swa.getSummarySearchPageSize('{= ?id }'), '{= ?searchGraph }')\");$(\"#{= ?id }-nextPage\").attr(\"href\", \"javascript:void(0)\");</script>
                                    </ui:if>
                                    <ui:else>
                                        <script>$(\"#{= ?id }-nextPage\").attr(\"onclick\", null);$(\"#{= ?id }-nextPage\").attr(\"href\", null);</script>
                                    </ui:else>
                                </ui:group>
                                <script>$(\"#{= ?id }-pageSize\").attr(\"onchange\", \"swa.reloadSummarySearchResults('{= ?id }', {= ?startIndex }, '{= ?searchGraph }')\");</script>
                                <script>$(\"#{= ?id }-sortField\").attr(\"onchange\", \"swa.reloadSummarySearchResults('{= ?id }', {= ?startIndex }, '{= ?searchGraph }')\");</script>
                                <script>$(\".swa-sort-field\").remove();</script>
                                <ui:group>
                                    <ui:forEach ui:resultSet=\"{#
                                            SELECT ?columnProperty
                                            WHERE {
                                                GRAPH ui:graph {
                                                    ?searchGraph search:columnPropertiesFromTheSearch ?columnProperty .
                                                } .
                                            } }\">
                                        <script>$(\"#{= ?id }-sortField\").append('&lt;option class=\"swa-sort-field\" value=\"{= ?columnProperty }\"&gt;By {= swa:labelInGraph(?columnProperty, ?queryGraph) }&lt;/option&gt;');</script>
                                    </ui:forEach>
                                    <ui:if ui:condition=\"{= bound(?sortProperty) }\">
                                        <script>$(\"#{= ?id }-sortField\").val(\"{= ?sortProperty }\");</script>
                                    </ui:if>
                                </ui:group>
                            </ui:group>
                        </ui:group>
                    </ui:setContext>
                </ui:if>
            </ui:loadable>
            <swa:Subscribe arg:code=\"swa.reloadSummarySearchResults('{= ?id }', 0, data)\" arg:event=\"{= swa:searchEvent(?searchEvent) }\" arg:ownerId=\"{= ?id }-owner\"/>
        </div>
    </ui:setContext>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment """DEPRECATED: As of TopBraid 6.1 the faceted search components are marked for deletion and should no longer be used.

Displays the search results in a vertical arrangement of up to 10-50 resource, using their summary view.""" ;
  rdfs:label "Summary search results gadget" ;
  rdfs:subClassOf swa:SearchResultsGadgets ;
.
teamwork:SwitchableFormGadget
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:createLinkFunctionOverride ;
      spl:valueType spin:Function ;
      rdfs:comment "An override for the create link function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editing ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to start in editing mode." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideVisualizationsButton ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:pagination ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true will add the client side pagination widget." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:readOnly ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if the ?resource is not editable." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:refreshFilterFunction ;
      spl:valueType xsd:string ;
      rdfs:comment "See same argument at swa:SwitchableFormGadget." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current resource being displayed." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressDetailsButton ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to not have the details button." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "The event that triggers switching resources." ;
    ] ;
  ui:prototype """
<ui:group let:frozen=\"{= (teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen()) || ?readOnly }\">
    <swa:SwitchableFormGadget arg:allowHistoryMode=\"{= !teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\" arg:allowLogMessage=\"{= true }\" arg:detailsButtonHandler=\"{= IF((isIRI(?resource) &amp;&amp; swa:falseOrUnbound(?suppressDetailsButton)), ui:functionCall(&quot;teamwork.openInSimpleFormEditor&quot;, ?resource), ?none) }\" arg:editing=\"{= ?editing }\" arg:footerPlugin=\"{= teamwork:CommentsButtonBar }\" arg:hideVisualizationsButton=\"{= ?hideVisualizationsButton }\" arg:pagination=\"{= COALESCE(?pagination, false) }\" arg:readOnly=\"{= ?frozen }\" arg:reportStorageKey=\"teamwork-form-reports-activated\" arg:resource=\"{= ?resource }\" arg:resourceSelectedEvent=\"{= ?resourceSelectedEvent }\" arg:showResourceActions=\"{= true }\" arg:showType=\"{= true }\" arg:showURI=\"{= true }\" ui:args=\"*\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A pre-configured variation of swa:SwitchableFormGadget that also has a button to edit comments." ;
  rdfs:label "Switchable form gadget" ;
  rdfs:subClassOf swa:Gadgets ;
.
teamwork:TBApplication
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "The project tab to pre-select (this is mostly for the platform governance UI)." ;
    ] ;
  teamwork:faIcon "layer-group" ;
  ui:errorPrototype """
<teamwork:EditorErrorPrototype/>
"""^^ui:Literal ;
  ui:headIncludes """
<ui:group>
    <title>TopBraid {= teamwork:getProductAbbreviation() } Editor</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\">
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <ui:group let:frozen=\"{= (teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen()) || ?readOnly }\">
            <ui:setContext ui:varName=\"projectTab\" ui:varValue=\"{= ?projectTab }\">
                <teamwork:EditorChrome arg:projectTab=\"{= ?projectTab }\">
                    <ui:insert ui:into=\"header\">
                        <teamwork:EditorHeader arg:frozen=\"{= ?frozen }\" arg:pageType=\"tb-application\">
                            <div class=\"HeaderButtonParent\" id=\"HeaderButtonParent\"/>
                        </teamwork:EditorHeader>
                    </ui:insert>
                    <ui:insert ui:into=\"main\">
                        <ui:group let:initService=\"{= spl:objectInGraph(?projectType, teamwork:newEditorInitService, ui:graph) }\">
                            <ui:loadable class=\"ApplicationParent\" data-graph=\"{= ui:currentQueryGraph() }\" data-init-service=\"{= IF(bound(?initService), ?initService, ?nil) }\" ui:loadId=\"ApplicationParent\"/>
                            <div id=\"modal-root\"/>
                            <swa:Initializer/>
                        </ui:group>
                    </ui:insert>
                </teamwork:EditorChrome>
            </ui:setContext>
        </ui:group>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "TopBraid Application (\"New\" Editor)" ;
  rdfs:subClassOf teamwork:EditorApplications ;
.
teamwork:TBFHistoryJSON
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:appName ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:fields ;
      spl:valueType xsd:string ;
      rdfs:comment "A JSON encoded array of field metadata as delivered by the client." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:focusNode ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource (subject) being edited." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"{= ?appName }\">
    <swon:Object>
        <ui:json ui:str=\"{= ?fields }\" ui:varName=\"fields\">
            <ui:forEach ui:resultSet='{#
                    SELECT *
                    WHERE {
                        ?fields ui:jsonArrayMembers ?object .
                        BIND (IRI(ui:jsonString(ui:jsonValue(?object, \"predicate\"))) AS ?predicate) .
                        BIND (xsd:boolean(ui:jsonString(ui:jsonValue(?object, \"inverse\"))) AS ?inverse) .
                        BIND (ui:jsonString(ui:jsonValue(?object, \"path\")) AS ?path) .
                        BIND (xsd:boolean(ui:jsonString(ui:jsonValue(?object, \"single\"))) AS ?single) .
                        FILTER (?inverse = false) .
                    } }'>
                <ui:bind>
                    <ui:stringify ui:varName=\"html\">
                        <ui:setContext ui:varName=\"mode\" ui:varValue=\"edit\">
                            <teamwork:HistoryObjectsBody arg:subject=\"{= ?focusNode }\" ui:args=\"*\"/>
                        </ui:setContext>
                    </ui:stringify>
                    <swon:Value arg:name=\"{= ?path }\" arg:value=\"{= ?html }\"/>
                </ui:bind>
            </ui:forEach>
        </ui:json>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Callback to fetch the history widgets when history mode is activated." ;
  rdfs:label "TBF history JSON" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:TabBarItem
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:active ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, this is the active tab." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:cssClass ;
      spl:valueType xsd:string ;
      rdfs:comment "CSS class to use on this item." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:faIcon ;
      spl:valueType xsd:string ;
      rdfs:comment "A FontAwesome icon to display on the tab (starting with \"fa-\")" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:hideLabel ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set, the label will only be displayed as a tooltip. Only works when an icon is provided." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:leaveWorkflowUrl ;
      spl:valueType xsd:string ;
      rdfs:comment "URL that leaves the current workflow if we are on that this tab while in a workflow" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:link ;
      spl:valueType xsd:string ;
      rdfs:comment "The URL to link to." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate html:target ;
      spl:valueType xsd:string ;
      rdfs:comment "Value for the HTML target attribute" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label to display on the tab." ;
    ] ;
  ui:prototype """
<li class=\"{= ?cssClass } {= IF(?active, &quot;active&quot;, ?none) }\" data-leave-workflow-url=\"{= ?leaveWorkflowUrl }\">
    <a href=\"{= ?link }\" id=\"{= ?label }-tab\" target=\"{= ?target }\">
        <ui:if ui:condition=\"{= bound(?faIcon) }\">
            <ui:if ui:condition=\"{= swa:falseOrUnbound(?hideLabel) }\">
                <i aria-hidden=\"true\" class=\"fa {= ?faIcon }\"/>
                <swa:Space/>
            </ui:if>
            <ui:else>
                <i class=\"fa {= ?faIcon }\" title=\"{= ?label }\"/>
            </ui:else>
        </ui:if>
        <ui:if ui:condition=\"{= swa:falseOrUnbound(?hideLabel) }\">{= ?label }</ui:if>
    </a>
</li>
"""^^ui:Literal ;
  rdfs:comment "Renders one of the tab riders in a tab bar." ;
  rdfs:label "Tab bar item" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:Tabs
  a swa:Tab ;
  rdfs:label "Tabs" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TagElements
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag being displayed." ;
    ] ;
  ui:abstract true ;
  rdfs:label "Tag elements" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:TagReportElements
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:label "Tag report elements" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:TagSummary
  a ui:NodeClass ;
  ui:prototype """
<div let:committed=\"{= EXISTS {
    ?tag teamwork:status teamwork:Committed .
} }\" let:tagLabel=\"{= teamwork:tagLabel(?projectGraph, ?tag) }\">
    <teamwork:IconElement arg:icon=\"lib/teamwork/build/images/teamwork/Tag-48.png\">
        <ui:if ui:condition=\"{= ?committed }\">
            <span>{= ?tagLabel }</span>
        </ui:if>
        <ui:else>
            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ProjectPage }\">
                <a href=\"{= ?link }\">{= ?tagLabel }</a>
            </ui:createLink>
        </ui:else>
        <br/>
        <span class=\"teamworkSubTitle\" let:archiveDate=\"{= spl:object(?tag, teamwork:archiveDate) }\" let:archiver=\"{= spl:object(?tag, teamwork:archiver) }\" let:creator=\"{= spl:object(?tag, sioc:has_creator) }\">
            <span>Created by </span>
            <teamwork:UserLink arg:user=\"{= ?creator }\"/>
            <swa:Space/>
            <span>on {= ui:label(spl:object(?tag, dcterms:created)) }.</span>
            <ui:group let:lastChange=\"{= spl:object(?tag, teamwork:lastChange) }\">
                <ui:if ui:condition=\"{= bound(?lastChange) &amp;&amp; (!?archived) }\">
                    <swa:Space/>
                    <span>Last changed by</span>
                    <swa:Space/>
                    <teamwork:UserLink arg:user=\"{= spl:object(?lastChange, sioc:has_creator) }\"/>
                    <swa:Space/>
                    <span>on {= ui:label(spl:object(?lastChange, dcterms:created)) }.</span>
                </ui:if>
            </ui:group>
            <ui:if ui:condition=\"{= ?committed }\">
                <br/>
                <ui:group let:_=\"{#
                        SELECT ?committer ?commitDate
                        WHERE {
                            ?tag teamwork:statusChange ?sc .
                            ?sc teamwork:newStatus teamwork:Committed .
                            ?sc dcterms:created ?commitDate .
                            ?sc sioc:has_creator ?committer .
                        } }\">
                    <ui:if ui:condition=\"{= bound(?committer) }\">
                        <span>Committed by {= teamwork:userName(?committer) } on {= ui:label(?commitDate) }.</span>
                        <swa:Space/>
                    </ui:if>
                </ui:group>
                <ui:if ui:condition=\"{= bound(?archiveDate) }\">
                    <span>Archived <ui:if ui:condition=\"{= bound(?archiver) }\"> by <teamwork:UserLink arg:user=\"{= ?archiver }\"/>
                            <swa:Space/>
                        </ui:if>on {= ui:label(spl:object(?tag, teamwork:archiveDate)) }</span>
                </ui:if>
                <ui:else>
                    <ui:group let:count=\"{#
                            SELECT (COUNT(?triple) AS ?result)
                            WHERE {
                                ?change teamwork:tag ?tag .
                                ?change teamwork:added|teamwork:deleted ?triple .
                            } }\">
                        <span>{= ?count } triple change entries.</span>
                        <ui:if ui:condition=\"{= ?count &gt; 0 }\">
                            <swa:Space/>
                            <a href=\"javascript:void(0)\" onclick=\"{= ui:functionCall(&quot;teamwork.archiveTag&quot;, ?projectGraph, ?tag, ?tagLabel) }\">Archive</a>
                        </ui:if>
                    </ui:group>
                </ui:else>
                <br/>
                <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:StatusChangeHistoryPage }\">
                    <a href=\"{= ?link }\">View Transition History</a>
                    <swa:Space/>
                </ui:createLink>
            </ui:if>
        </span>
        <br/>
        <span class=\"teamworkSummary\">{= spl:object(?tag, rdfs:comment) }<br/>
        </span>
    </teamwork:IconElement>
</div>
"""^^ui:Literal ;
  rdfs:comment "A horizontal row in a TagsList, showing the details of a given teamwork:Tag." ;
  rdfs:label "Tag summary" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:TagsForProject
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "flowLabel" ;
          ]
          [
            sp:varName "priorityLabel" ;
          ]
          [
            sp:varName "actions" ;
          ]
          [
            sp:varName "userToAct" ;
          ]
          [
            sp:varName "statusLabel" ;
          ]
          [
            sp:varName "createDate" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "resourceLabel" ;
          ]
          [
            sp:varName "location" ;
          ]
          [
            sp:varName "tag" ;
          ]
          [
            sp:varName "viewable" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object teamwork:Tag ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "tag" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a teamwork:isTerminatedTag ;
                            arg:projectGraph [
                                sp:varName "projectGraph" ;
                              ] ;
                            arg:tag [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "dateTime" ;
                    ] ;
                  sp:predicate dcterms:created ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "creator" ;
                    ] ;
                  sp:predicate sioc:has_creator ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                      sp:arg2 teamwork:priority ;
                    ] ;
                  sp:variable [
                      sp:varName "priority" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                      sp:arg2 teamwork:editedResource ;
                    ] ;
                  sp:variable [
                      sp:varName "resource" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:currentUserHasPrivilege ;
                      arg:governedResource [
                          sp:varName "tag" ;
                        ] ;
                      arg:role teamwork:viewer ;
                      arg:teamGraph [
                          sp:varName "teamGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "viewable" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:potentialTagTransitionRolesString ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "userToActSpaced" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:potentialTagTransitionsString ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "actionsSpaced" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagLabel ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "flowLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "status" ;
                  ] ;
                arg:resourceGraph [
                    a teamwork:workflowsGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "statusLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:replaceAll ;
                sp:arg1 [
                    sp:varName "actionsSpaced" ;
                  ] ;
                sp:arg2 "," ;
                sp:arg3 ", <br>" ;
              ] ;
            sp:variable [
                sp:varName "actions" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:replaceAll ;
                sp:arg1 [
                    sp:varName "userToActSpaced" ;
                  ] ;
                sp:arg2 "," ;
                sp:arg3 ", <br>" ;
              ] ;
            sp:variable [
                sp:varName "userToAct" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "viewable" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "resource" ;
                      ] ;
                    arg:resourceGraph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resourceLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:editorLink ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:resource [
                    sp:varName "resource" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "location" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "priority" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "priority" ;
                      ] ;
                    arg:resourceGraph [
                        a teamwork:workflowsGraph ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "priorityLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a xsd:date ;
                sp:arg1 [
                    sp:varName "dateTime" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "createDate" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:TagsForProjectColumns
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:prototype """
<ui:group>
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Workflow\"/>
            <swon:Value arg:name=\"data\" arg:value=\"workflow\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Asset\"/>
            <swon:Value arg:name=\"data\" arg:value=\"asset\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"State\"/>
            <swon:Value arg:name=\"data\" arg:value=\"state\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Creator\"/>
            <swon:Value arg:name=\"data\" arg:value=\"creator\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Started&nbsp;&nbsp;\"/>
            <swon:Value arg:name=\"data\" arg:value=\"date-started\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Priority\"/>
            <swon:Value arg:name=\"data\" arg:value=\"priority\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Next Actions\"/>
            <swon:Value arg:name=\"data\" arg:value=\"next-actions\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Responsible Roles\"/>
            <swon:Value arg:name=\"data\" arg:value=\"responsible-party\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TagsForProjectCompleted
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "flowLabel" ;
          ]
          [
            sp:varName "nextAction" ;
          ]
          [
            sp:varName "statusLabel" ;
          ]
          [
            sp:varName "createDate" ;
          ]
          [
            sp:varName "creator" ;
          ]
          [
            sp:varName "commitDate" ;
          ]
          [
            sp:varName "resourceLabel" ;
          ]
          [
            sp:varName "stateChangeCount" ;
          ]
          [
            sp:varName "location" ;
          ]
          [
            sp:varName "tag" ;
          ]
          [
            sp:varName "viewable" ;
          ]
          [
            sp:varName "priorityLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                (
                  [
                    sp:object teamwork:Tag ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "tag" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:isTerminatedTag ;
                        arg:projectGraph [
                            sp:varName "projectGraph" ;
                          ] ;
                        arg:tag [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                  ]
                )
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "dateTime" ;
                    ] ;
                  sp:predicate dcterms:created ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "creator" ;
                    ] ;
                  sp:predicate sioc:has_creator ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                      sp:arg2 teamwork:editedResource ;
                    ] ;
                  sp:variable [
                      sp:varName "resource" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                      sp:arg2 teamwork:archiveDate ;
                    ] ;
                  sp:variable [
                      sp:varName "archiveDate" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "tag" ;
                        ] ;
                      sp:arg2 teamwork:priority ;
                    ] ;
                  sp:variable [
                      sp:varName "priority" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "sc" ;
                          ] ;
                        sp:predicate teamwork:statusChange ;
                        sp:subject [
                            sp:varName "tag" ;
                          ] ;
                      ]
                      [
                        sp:object teamwork:Committed ;
                        sp:predicate teamwork:newStatus ;
                        sp:subject [
                            sp:varName "sc" ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "commitDateTime" ;
                          ] ;
                        sp:predicate dcterms:created ;
                        sp:subject [
                            sp:varName "sc" ;
                          ] ;
                      ]
                      [
                        a sp:Bind ;
                        sp:expression [
                            a xsd:date ;
                            sp:arg1 [
                                sp:varName "commitDateTime" ;
                              ] ;
                          ] ;
                        sp:variable [
                            sp:varName "commitDate" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagLabel ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "flowLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "archiveDate" ;
                      ] ;
                  ] ;
                sp:arg2 "None" ;
                sp:arg3 "Archive Working Copy" ;
              ] ;
            sp:variable [
                sp:varName "nextAction" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "archiveDate" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "Archived on " ;
                    sp:arg2 [
                        a sp:str ;
                        sp:arg1 [
                            a ui:label ;
                            sp:arg1 [
                                sp:varName "archiveDate" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "status" ;
                      ] ;
                    arg:resourceGraph [
                        a teamwork:workflowsGraph ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "statusLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a xsd:date ;
                sp:arg1 [
                    sp:varName "dateTime" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "createDate" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        sp:varName "viewable" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "resource" ;
                      ] ;
                    arg:resourceGraph [
                        a teamwork:queryGraph ;
                        arg:editable true ;
                        arg:graphId [
                            a teamwork:graphIdFromMasterGraph ;
                            arg:graph [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        arg:tagId [
                            a teamwork:tagId ;
                            arg:tag [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                        arg:userName [
                            a smf:currentUserName ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resourceLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "priority" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a swa:labelInGraph ;
                    arg:resource [
                        sp:varName "priority" ;
                      ] ;
                    arg:resourceGraph [
                        a teamwork:workflowsGraph ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "priorityLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:StatusChangeCount ;
                sp:arg1 [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "stateChangeCount" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:editorLink ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:resource [
                    sp:varName "resource" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "location" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    sp:varName "tag" ;
                  ] ;
                arg:role teamwork:viewer ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "viewable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:TagsForProjectCompletedColumns
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:prototype """
<ui:group>
    <swon:Array>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Workflow\"/>
            <swon:Value arg:name=\"data\" arg:value=\"workflow\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Asset\"/>
            <swon:Value arg:name=\"data\" arg:value=\"asset\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"State\"/>
            <swon:Value arg:name=\"data\" arg:value=\"state\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Creator\"/>
            <swon:Value arg:name=\"data\" arg:value=\"creator\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Started&nbsp;&nbsp;\"/>
            <swon:Value arg:name=\"data\" arg:value=\"date-started\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Priority\"/>
            <swon:Value arg:name=\"data\" arg:value=\"priority\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"# Changes\"/>
            <swon:Value arg:name=\"data\" arg:value=\"changed\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Completed\"/>
            <swon:Value arg:name=\"data\" arg:value=\"date-completed\"/>
        </swon:Object>
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"Next Actions\"/>
            <swon:Value arg:name=\"data\" arg:value=\"next-actions\"/>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TagsForProjectCompletedWrapper
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:prototype """
<ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= teamwork:TagsForProjectCompleted }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?location }\"/>
                        <swon:Value arg:name=\"workflow\" arg:value=\"{= ?flowLabel }\"/>
                        <swon:Value arg:name=\"priority\" arg:value=\"{= ?priorityLabel }\"/>
                        <swon:Value arg:name=\"next-actions\" arg:value=\"{= ?nextAction }\"/>
                        <swon:Value arg:name=\"state\" arg:value=\"{= ?statusLabel }\"/>
                        <swon:Value arg:name=\"date-started\" arg:value=\"{= spif:dateFormat(?createDate, &quot;YYYY-MM-dd&quot;) }\"/>
                        <swon:Value arg:name=\"creator\" arg:value=\"{= smf:userDisplayName(?creator) }\"/>
                        <swon:Value arg:name=\"date-completed\" arg:value=\"{= IF(bound(?commitDate), spif:dateFormat(?commitDate, &quot;YYYY-MM-dd&quot;), &quot;&quot;) }\"/>
                        <swon:Value arg:name=\"asset\" arg:value=\"{= ?resourceLabel }\"/>
                        <swon:Value arg:name=\"changed\" arg:value=\"{= ?stateChangeCount }\"/>
                        <swon:Value arg:name=\"tag\" arg:value=\"{= ?tag }\"/>
                        <swon:Value arg:name=\"viewable\" arg:value=\"{= ?viewable }\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:call>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TagsForProjectWrapper
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  ui:prototype """
<ui:call arg:projectGraph=\"{= ?projectGraph }\" ui:template=\"{= teamwork:TagsForProject }\">
    <swon:Object>
        <swon:Value arg:name=\"data\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <swon:Object>
                        <swon:Value arg:name=\"uri\" arg:value=\"{= ?location }\"/>
                        <swon:Value arg:name=\"workflow\" arg:value=\"{= ?flowLabel }\"/>
                        <swon:Value arg:name=\"priority\" arg:value=\"{= ?priorityLabel }\"/>
                        <swon:Value arg:name=\"next-actions\" arg:value=\"{= ?actions }\"/>
                        <swon:Value arg:name=\"responsible-party\" arg:value=\"{= ?userToAct }\"/>
                        <swon:Value arg:name=\"state\" arg:value=\"{= ?statusLabel }\"/>
                        <swon:Value arg:name=\"date-started\" arg:value=\"{= spif:dateFormat(?createDate, &quot;YYYY-MM-dd&quot;) }\"/>
                        <swon:Value arg:name=\"creator\" arg:value=\"{= smf:userDisplayName(?creator) }\"/>
                        <swon:Value arg:name=\"asset\" arg:value=\"{= ?resourceLabel }\"/>
                        <swon:Value arg:name=\"tag\" arg:value=\"{= ?tag }\"/>
                        <swon:Value arg:name=\"viewable\" arg:value=\"{= ?viewable }\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</ui:call>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TagsList
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:status ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The status to match against." ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:group letrs:rs=\"{#
                SELECT ?tag
                WHERE {
                    ?tag a teamwork:Tag .
                    ?tag teamwork:status ?status .
                    FILTER (teamwork:currentUserHasPrivilege(?tag, teamwork:viewer, ?teamGraph) || teamwork:currentUserHasPrivilege(?teamGraph, teamwork:manager, ?teamGraph)) .
                }
                ORDER BY (ui:label(?tag)) }\">
            <ui:if ui:condition=\"{= (?status = teamwork:Uncommitted) || (spr:rowCount(?rs) &gt; 0) }\">
                <div>
                    <h2>{= smf:replaceAll(smf:titleCase(teamwork:labelInTeamworkGraph(?status)), \" For \", \" for \") } Working Copies</h2>
                    <div>
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <span>
                                <teamwork:TagSummary arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
                            </span>
                        </ui:forEach>
                    </div>
                </div>
            </ui:if>
            <ui:if ui:condition=\"{= (?status = teamwork:Committed) &amp;&amp; (spr:rowCount(?rs) = 0) }\">
                <p>No working copies have been committed to production yet.</p>
            </ui:if>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A list of tags in a working copy." ;
  rdfs:label "Tags list" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
teamwork:TagsProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 35 ;
  teamwork:pluginValidExpression [
      a sp:not ;
      sp:arg1 [
          a teamwork:isReadOnlyProject ;
          arg:projectGraph [
              sp:varName "projectGraph" ;
            ] ;
        ] ;
    ] ;
  teamwork:validForACResults true ;
  teamwork:validForTags false ;
  ui:prototype """
<div>
    <ui:if ui:condition=\"{= teamwork:isReadOnlyProject(?projectGraph) }\">
        <p class=\"text-danger\">This {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } is read-only and no new workflows can be started.</p>
    </ui:if>
    <ui:elseif ui:condition=\"{= teamwork:currentUserCanCreateTags(?projectGraph) }\">
        <div class=\"teamwork-start-workflow\" id=\"start-workflow\">
            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= teamwork:AddTagPage }\">
                <a class=\"btn btn-default no-underline\" href=\"{= ?link }\" id=\"start-new-workflow-link\" role=\"button\">Start new Workflow</a>
                <br/>
            </ui:createLink>
        </div>
    </ui:elseif>
    <div let:uncommittedId=\"uncommittedWorkflows-{= ui:uniqueId() }\">
        <h2>Workflows in Progress</h2>
        <div id=\"uncommittedWorkflows\">
            <teamwork:DataTable arg:dataColumnsEndpoint=\"teamwork:TagsForProjectColumns\" arg:dataEndpoint=\"teamwork:TagsForProjectWrapper\" arg:dtType=\"workflowDataTable\" arg:editable=\"{= false }\" arg:hasWorkflowAsset=\"{= true }\" arg:hasWorkflowHome=\"{= true }\" arg:hideIfEmpty=\"{= true }\" arg:id=\"{= ?uncommittedId }\" arg:queryParam=\"projectGraph\" arg:queryParamValues=\"{= ?projectGraph }\"/>
            <div class=\"ui-helper-hidden-accessible\">None</div>
        </div>
        <script>gadgets.Hub.publish('org.topbraid.swa.rebuildTable','{= ?uncommittedId }' );</script>
    </div>
    <div let:committedId=\"committedWorkflows-{= ui:uniqueId() }\">
        <h2>Completed Workflows</h2>
        <div id=\"committedWorkflows\">
            <teamwork:DataTable arg:dataColumnsEndpoint=\"teamwork:TagsForProjectCompletedColumns\" arg:dataEndpoint=\"teamwork:TagsForProjectCompletedWrapper\" arg:dtType=\"workflowDataTable\" arg:editable=\"{= false }\" arg:hasArchiveConfig=\"{= true }\" arg:hasTransitionHistory=\"{= true }\" arg:hideIfEmpty=\"{= true }\" arg:id=\"{= ?committedId }\" arg:queryParam=\"projectGraph\" arg:queryParamValues=\"{= ?projectGraph }\"/>
            <div class=\"ui-helper-hidden-accessible\">None</div>
        </div>
        <script>gadgets.Hub.publish('org.topbraid.swa.rebuildTable','{= ?committedId }' );</script>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Workflows" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
.
teamwork:TemplateQueries
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "template" ;
          ]
          [
            sp:varName "templateGraph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentMasterGraph ;
              ] ;
            sp:variable [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "template" ;
                    ] ;
                  sp:predicate teamwork:templateQuery ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
          [
            a sp:Bind ;
            sp:expression ui:graph ;
            sp:variable [
                sp:varName "templateGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Template queries" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:TemplateQueryButton
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "The event to select a resource." ;
    ] ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\">
    <ui:if ui:condition=\"{= bound(?projectGraph) }\">
        <ui:if ui:condition=\"{= EXISTS {
            BIND (teamwork:getProjectType(?projectGraph) AS ?projectType) .
            GRAPH ui:graph {
                ?projectType teamwork:templateQuery ?anyQuery .
            } .
        } }\">
            <swa:Space/>
            <button class=\"btn btn-default btn-xs swa-button\" onclick=\"{= ui:functionCall(&quot;swa.openTemplateCallDialog&quot;, teamwork:TemplateQueries, ?null, ?null, ?resourceSelectedEvent) }\" title=\"Execute template query\">
                <div class=\"ui-icon ui-icon-circle-triangle-e\"/>
            </button>
            <swa:Space/>
        </ui:if>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Template query button" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:TransformPlugin
  a rdfs:Class ;
  rdfs:label "Transform plugin" ;
  rdfs:subClassOf teamwork:ProjectPlugin ;
.
teamwork:TransformPlugins
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:label "Transform plugins" ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:TransformProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 26 ;
  teamwork:pluginRequiresRole teamwork:editor ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<teamwork:ProjectPluginsPanel arg:pluginType=\"{= teamwork:TransformPlugin }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Transform" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:TriplesTable
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "Either teamwork:added or teamwork:deleted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The Change object." ;
    ] ;
  ui:prototype """
<div letrs:rs=\"{#
        SELECT ?s ?p ?o
        WHERE {
            ?subject ?predicate ?triple .
            ?triple teamwork:subject ?s .
            ?triple teamwork:predicate ?p .
            ?triple teamwork:object ?o .
        } }\">
    <h3>{= spr:rowCount(?rs) } {= afn:localname(?predicate) } triples</h3>
    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
        <table class=\"teamwork-triples-table\">
            <tr>
                <th width=\"33%\">Subject</th>
                <th class=\"teamwork-triples-table-predicate\">Predicate</th>
                <th width=\"33%\">Object</th>
            </tr>
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <tr>
                    <td>
                        <swa:Label arg:node=\"{= ?s }\"/>
                    </td>
                    <td class=\"teamwork-triples-table-subject\">
                        <swa:Label arg:node=\"{= ?p }\"/>
                    </td>
                    <td>
                        <swa:Label arg:node=\"{= ?o }\"/>
                    </td>
                </tr>
            </ui:forEach>
        </table>
    </ui:if>
</div>
"""^^ui:Literal ;
  rdfs:label "Triples table" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:TurtleFileExportPlugin
  a teamwork:ExportPlugin ;
  a owl:DeprecatedClass ;
  teamwork:pluginIndex 2 ;
  teamwork:pluginMayNotScale true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:id=\"ExportToRDF\" arg:projectGraph=\"{= ?projectGraph }\" arg:serialization=\"{= sml:Turtle }\" arg:tag=\"{= ?tag }\" ui:queryGraph=\"{= teamwork:projectOrTagGraph(?projectGraph, ?tag) }\" ui:servlet=\"sparqlmotion\">
    <teamwork:ActionLink arg:comment=\"Creates an RDF file in Turtle format.\" arg:icon=\"lib/teamwork/build/images/teamwork/icon-turtle.svg\" arg:link=\"{= ?link }\" arg:title=\"Turtle\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Turtle file export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
teamwork:UMLDiagramsSection
  a ui:ResourceViewClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:kind ;
      spl:valueType xsd:string ;
      rdfs:comment "A label such as \"Class\" or \"Node Shape\"" ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:if let:loadId=\"{= ui:uniqueId() }\" ui:condition=\"{= swa:isViewMode() }\">
    <div class=\"swa-sub-title\">
        <span>{= ?kind } Diagrams</span>
        <div class=\"mgl-3em\" style=\"margin-top: 8px\">
            <ui:if ui:condition=\"{= spl:instanceOf(?this, rdfs:Class) }\">
                <swa:CollapsibleLoadableFormSection arg:label=\"Inheritance View\" arg:loadId=\"IV_{= ?loadId }\">
                    <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"IV_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                        <edg:ClassDiagramShowingInheritance arg:focusClass=\"{= ?this }\"/>
                    </ui:loadable>
                </swa:CollapsibleLoadableFormSection>
                <swa:CollapsibleLoadableFormSection arg:label=\"Inheritance View - no attributes\" arg:loadId=\"IV-noatts_{= ?loadId }\">
                    <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"IV-noatts_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                        <edg:ClassDiagramShowingInheritance arg:attributesFilterFunction=\"{= edg:NoAttributesFilterFunction }\" arg:focusClass=\"{= ?this }\"/>
                    </ui:loadable>
                </swa:CollapsibleLoadableFormSection>
            </ui:if>
            <swa:CollapsibleLoadableFormSection arg:label=\"Associations View - 1 level\" arg:loadId=\"AV1_{= ?loadId }\">
                <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"AV1_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                    <edg:ClassDiagramShowingAssociations arg:degreeOfSeparation=\"{= 1 }\" arg:focusClass=\"{= ?this }\"/>
                </ui:loadable>
            </swa:CollapsibleLoadableFormSection>
            <swa:CollapsibleLoadableFormSection arg:label=\"Associations View - 1 level - no attributes\" arg:loadId=\"AV1-noatts_{= ?loadId }\">
                <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"AV1-noatts_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                    <edg:ClassDiagramShowingAssociations arg:attributesFilterFunction=\"{= edg:NoAttributesFilterFunction }\" arg:degreeOfSeparation=\"{= 1 }\" arg:focusClass=\"{= ?this }\"/>
                </ui:loadable>
            </swa:CollapsibleLoadableFormSection>
            <swa:CollapsibleLoadableFormSection arg:label=\"Associations View - 2 levels\" arg:loadId=\"AV2_{= ?loadId }\">
                <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"AV2_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                    <edg:ClassDiagramShowingAssociations arg:degreeOfSeparation=\"{= 2 }\" arg:focusClass=\"{= ?this }\"/>
                </ui:loadable>
            </swa:CollapsibleLoadableFormSection>
            <swa:CollapsibleLoadableFormSection arg:label=\"Associations View - 2 levels - no attributes\" arg:loadId=\"AV2-noatts_{= ?loadId }\">
                <ui:loadable class=\"swa-loadable-form-section-body\" ui:loadId=\"AV2-noatts_{= ?loadId }\" ui:loadOnDemand=\"{= true }\">
                    <edg:ClassDiagramShowingAssociations arg:attributesFilterFunction=\"{= edg:NoAttributesFilterFunction }\" arg:degreeOfSeparation=\"{= 2 }\" arg:focusClass=\"{= ?this }\"/>
                </ui:loadable>
            </swa:CollapsibleLoadableFormSection>
        </div>
    </div>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "UML diagrams section" ;
  rdfs:subClassOf swa:FormElements ;
.
teamwork:URIConstructionRulesManagePlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 0 ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\" ui:silentTransactions=\"{= true }\">
        <teamwork:ActionLink arg:comment=\"Determines the default construction rules for URIs for this collection.\" arg:faIcon=\"fa-search\" arg:title=\"URI Construction Rules\">
            <ui:group let:URIClassPrefix=\"{= spl:object(?teamGraph, teamwork:URIClassPrefix) }\" let:URIConstructMethod=\"{= spl:object(?teamGraph, teamwork:URIConstructMethod) }\" let:URICounterOffset=\"{= spl:object(?teamGraph, teamwork:URICounterOffset) }\" let:URIPrefixSeparator=\"{= spl:object(?teamGraph, teamwork:URIPrefixSeparator) }\" let:UserCannotModifyURI=\"{= spl:object(?teamGraph, teamwork:userCannotModifyURI) }\" let:noUriOptions=\"{= !swa:falseOrUnbound(?noUriOptions) }\">
                <div data-no-uri-options=\"{= ?noUriOptions }\" data-submit-on-change=\"{= true }\" data-uri-class-prefix=\"{= ?URIClassPrefix }\" data-uri-construct-method=\"{= ?URIConstructMethod }\" data-uri-counter-offset=\"{= ?URICounterOffset }\" data-uri-counter-separator=\"{= ?URIPrefixSeparator }\" data-user-cannot-modify-uri=\"{= ?UserCannotModifyURI }\" id=\"create-project-options\"/>
                <script>gadgets.Hub.publish('uri-construction-plugin-init', 'create-project-options')</script>
            </ui:group>
        </teamwork:ActionLink>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "URI Construction rules for this asset collection plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
teamwork:UndoButton
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:hidden ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Convenience argument that suppresses the button, same as surrounding it with a ui:if." ;
    ] ;
  ui:prototype """
<ui:if ui:condition=\"{= swa:falseOrUnbound(?hidden) &amp;&amp; (!teamwork:isExplorerUser(smf:userWithName(smf:currentUserName()))) }\">
    <swa:Space/>
    <button onclick=\"teamwork.undo('{= teamwork:currentTeamGraph() }', '{= teamwork:currentTag() }')\" title=\"Undo most recent edit\">
        <div class=\"fas fa-undo\"/>
    </button>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Undo button" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:UndoChangeHandler
  a swa:EditHandlerClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to undo." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph containing the Change metadata." ;
    ] ;
  ui:prototype """
<ui:group let:graphId=\"{= teamwork:graphIdFromTeamGraph(?teamGraph) }\" let:tagId=\"{= teamwork:tagId(teamwork:getTagIfUncommitted(?change, ?teamGraph)) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:queryGraph(true, ?graphId, ?tagId, smf:currentUserName()) }\">
        <ui:transaction ui:logMessage=\"Undo of Change {= spl:objectInGraph(?change, rdfs:comment, ?teamGraph) }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?subject ?predicate ?object .
                    }
                    WHERE {
                        GRAPH ?teamGraph {
                            ?change teamwork:added ?triple .
                            ?triple teamwork:subject ?subject .
                            ?triple teamwork:predicate ?predicate .
                            ?triple teamwork:object ?object .
                        } .
                    } }\"/>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?subject ?predicate ?object .
                    }
                    WHERE {
                        GRAPH ?teamGraph {
                            ?change teamwork:deleted ?triple .
                            ?triple teamwork:subject ?subject .
                            ?triple teamwork:predicate ?predicate .
                            ?triple teamwork:object ?object .
                        } .
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Performs an undo on a given teamwork:Change. This will create a new change where the deleted and added triples have been swapped from the original Change." ;
  rdfs:label "Undo change handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
teamwork:UnpublishProjectFromExplorerService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Teamwork (TCH) graph" ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
    <ui:transaction ui:logMessage=\"Unpublish {= teamwork:projectLabel(?projectGraph) } from Explorer\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?teamGraph teamwork:published true .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Unpublish project from Explorer service" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
teamwork:UnpublishProjectService
  a ui:Service ;
  ui:prototype """
<ui:setContext ui:silentTransactions=\"{= true }\">
    <teamwork:unpublishProject ui:args=\"*\">
        <swon:Object>
            <swon:Value arg:name=\"status\" arg:value=\"{= ?status }\"/>
        </swon:Object>
    </teamwork:unpublishProject>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Unpublish a vocabulary (project) from Explorer" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectService ;
.
teamwork:UpdateURIConstructionRulesHandler
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:field ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:newValue ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= bound(?field) }\">
        <ui:setPropertyValue arg:property=\"{= IRI(?field) }\" arg:value=\"{= ?newValue }\" ui:this=\"{= ui:currentQueryGraph() }\"/>
    </ui:if>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Update task handler" ;
  rdfs:subClassOf swa:EditHandlers ;
.
teamwork:UserJSONService
  a ui:JSONService ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withHiddenRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include \"hidden\" systen users and roles" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Add security roles as well as users" ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Array>
    <ui:if ui:condition=\"{= ?withRoles }\">
        <ui:group letrs:roles=\"{#
                SELECT ?resource ?label
                WHERE {
                    rdf:nil smf:role ?label .
                    BIND (smf:roleURI(?label) AS ?resource) .
                    FILTER (?withHiddenRoles || (!teamwork:isHiddenRole(?resource))) .
                }
                ORDER BY (?label) }\">
            <ui:if ui:condition=\"{= spr:rowCount(?roles) &gt; 0 }\">
                <swon:Object>
                    <swon:Value arg:name=\"label\" arg:value=\"Security Roles\"/>
                    <swon:Value arg:name=\"options\">
                        <swon:Array>
                            <ui:forEach ui:resultSet=\"{= ?roles }\">
                                <swon:Object>
                                    <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                                    <swon:Value arg:name=\"value\" arg:value=\"{= ?resource }\"/>
                                </swon:Object>
                            </ui:forEach>
                        </swon:Array>
                    </swon:Value>
                </swon:Object>,
</ui:if>
        </ui:group>
    </ui:if>
    <swon:Object>
        <swon:Value arg:name=\"label\" arg:value=\"Users\"/>
        <swon:Value arg:name=\"options\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{#
                        SELECT ?resource ?label
                        WHERE {
                            rdf:nil smf:user ?resource .
                            FILTER (?withHiddenRoles || (!teamwork:isHiddenRole(?resource))) .
                            BIND (smf:userDisplayName(?resource) AS ?label) .
                        }
                        ORDER BY (?label) }\">
                    <swon:Object>
                        <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                        <swon:Value arg:name=\"value\" arg:value=\"{= ?resource }\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </swon:Value>
    </swon:Object>
</swon:Array>
"""^^ui:Literal ;
  rdfs:comment "A JSON service that returns a list of all users as an array of objects. Security roles can also be added. This list can get heavy and is often used many times on a page, so we want to load it separetely." ;
  rdfs:label "User JSONService" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:UserLabel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user to display." ;
    ] ;
  ui:prototype """
<ui:group let:name=\"{= afn:localname(?node) }\">
    <span>{= ?name }</span>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Should be used to display a User." ;
  rdfs:label "User label" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:UserLink
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withIcon ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional CSS style for the hyperlink." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user to display." ;
    ] ;
  ui:prototype """
<span class=\"{= ?class }\" let:function=\"{= teamwork:getUserLinkFunction() }\" let:isDialog=\"{= ui:contextValue(&quot;isDialog&quot;) }\" let:label=\"{= smf:userDisplayName(?user) }\">
    <ui:if ui:condition=\"{= bound(?withIcon) &amp;&amp; ?withIcon }\">
        <i class=\"fa fa-user\"/>
        <swa:Space/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?function) }\">
        <a href=\"{= spif:invoke(?function, ?user) }\" target=\"{= IF((bound(?isDialog) &amp;&amp; ?isDialog), &quot;_blank&quot;, ?none) }\">{= ?label }</a>
    </ui:if>
    <ui:else>{= ?label }</ui:else>
</span>
"""^^ui:Literal ;
  rdfs:comment "A hyperlink to the details page for a given user. The function producing the actual URLs is pluggable, and determined by the product's teamwork:userLinkFunction property (cached)." ;
  rdfs:label "User link" ;
  rdfs:subClassOf ui:Element ;
.
teamwork:UserLinkArea
  a ui:NodeClass ;
  ui:prototype """
<span class=\"teamwork-user-link-header\" let:userName=\"{= smf:currentUserName() }\">
    <ui:if ui:condition=\"{= bound(?userName) }\">
        <span>Hello,</span>
        <swa:Space/>
        <strong>
            <teamwork:UserLink arg:user=\"{= smf:userWithName(?userName) }\" arg:withIcon=\"{= true }\"/>
        </strong>
    </ui:if>
    <ui:else>
        <span>Not logged in.</span>
    </ui:else>
</span>
"""^^ui:Literal ;
  rdfs:comment "Note that this is not a subclass of teamwork:Elements, because it is also used by the EVN editor - which should not use the ExtJS CSS." ;
  rdfs:label "User link area" ;
  rdfs:subClassOf ui:Element ;
.
teamwork:UserOptionsService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withHiddenRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to include \"hidden\" systen users and roles" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:withRoles ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Add security roles as well as users to the dropdown." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= ?withRoles }\">
        <swa:Options arg:encodeValues=\"{= true }\" arg:resultSet=\"{#
                SELECT ?resource ?label
                WHERE {
                    rdf:nil smf:role ?label .
                    BIND (smf:roleURI(?label) AS ?resource) .
                    FILTER (?withHiddenRoles || (!teamwork:isHiddenRole(?resource))) .
                }
                ORDER BY (?label) }\" arg:title=\"Security roles\"/>
    </ui:if>
    <swa:Options arg:encodeValues=\"{= true }\" arg:resultSet=\"{#
            SELECT ?resource ?label
            WHERE {
                rdf:nil smf:user ?resource .
                FILTER (?withHiddenRoles || (!teamwork:isHiddenRole(?resource))) .
                BIND (smf:userDisplayName(?resource) AS ?label) .
            }
            ORDER BY (?label) }\" arg:title=\"{= IF(?withRoles, &quot;Users&quot;, ?none) }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "An HTML snippet service that returns a list of all users, as option elements. Options can also be added for security roles. This list can get heavy and is often used many times on a page, so we want to load it separetely. See JS teamwork.populateUsersDropdown()." ;
  rdfs:label "User options service" ;
  rdfs:subClassOf ui:Services ;
.
teamwork:UserRolesProjectTab
  a teamwork:ProjectTab ;
  teamwork:pluginIndex 20 ;
  teamwork:pluginValidExpression true ;
  teamwork:validForACResults true ;
  teamwork:validForTags true ;
  ui:prototype """
<div let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\" let:wg=\"{= teamwork:workflowsGraph() }\">
    <ui:if ui:condition=\"{= bound(?tag) }\">
        <ui:group let:readOnly=\"{= NOT EXISTS {
            GRAPH ?teamGraph {
                BIND (teamwork:getTagWorkflowTemplate(?tag, ?projectGraph) AS ?template) .
            } .
            GRAPH ?wg {
                ?template teamwork:transition ?transition .
                ?transition teamwork:requiredTagPermissionRole ?anyRole .
            } .
        } }\">
            <ui:call arg:teamGraph=\"{= ?teamGraph }\" ui:template=\"{= teamwork:PotentialUsersAndGroupsForTag }\">
                <teamwork:MembersList arg:forTag=\"{= true }\" arg:governedResource=\"{= ?tag }\" arg:potentialMembers=\"{= ?rs }\" arg:projectGraph=\"{= ?projectGraph }\" arg:readOnly=\"{= ?readOnly }\" arg:title=\"Working Copy\"/>
            </ui:call>
        </ui:group>
    </ui:if>
    <ui:else>
        <ui:loadable ui:loadId=\"permission-roles-loadable\" ui:loadLater=\"{= true }\">
            <teamwork:ActionLink arg:comment=\"Defines permission profiles for individual users, groups of users (security roles) or organizations. Users with the Viewers profile have read-only access. They can make comments, run exports and reports and, unless their governance role disallows it, start new workflows. Users with the Editors permission profile can also make changes to the content and update some of the collection's metadata. Users with the Managers permission profile can also modify permission profiles and governance roles, and can change other advanced settings for the collection by Manage tab.\" arg:faIcon=\"fa-users\" arg:title=\"{= teamwork:singularProjectTypeLabel(?projectType) } Permissions\">
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNoLink }\">
                    <div class=\"teamwork-metadata-form\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
                        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(?teamGraph), teamwork:rolesGraph(), &lt;urn:x-tb-authgraph&gt;) }\">
                            <swa:SwitchableForm arg:editable=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\" arg:hideVisualizationsButton=\"{= true }\" arg:matchIds=\"roles\" arg:matchIdsOnly=\"{= true }\" arg:resource=\"{= ?teamGraph }\" arg:showURI=\"{= false }\" arg:suppressHeader=\"{= true }\"/>
                        </ui:setContext>
                    </div>
                </ui:setContext>
            </teamwork:ActionLink>
        </ui:loadable>
        <div id=\"governance-roles\">
            <teamwork:ActionLink arg:comment=\"Defines the governance roles for individual users, groups of users (security roles) or organizations. Use of governance roles is optional. They represent rights and responsibilities of stakeholders engaged in various aspects of data governance processes. Governance roles can convey permission-profile access to a collection itself as well as permission-profiles for the governance processes (workflows) that maintain a collection. Any user that has a governance role for a collection is automatically granted at minimum a Viewer permission profile for it and for any workflow on the collection. Higher profiles for a role can be set on the Governance Areas page or within a workflow template.\" arg:faIcon=\"fa-users\" arg:title=\"{= teamwork:singularProjectTypeLabel(?projectType) } Governance Roles\">
                <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNoLink }\">
                    <div class=\"teamwork-metadata-form\">
                        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                            <swa:SwitchableForm arg:editable=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\" arg:hideVisualizationsButton=\"{= true }\" arg:matchIds=\"raci\" arg:matchIdsOnly=\"{= true }\" arg:resource=\"{= ?projectGraph }\" arg:showURI=\"{= false }\" arg:suppressHeader=\"{= true }\"/>
                        </ui:setContext>
                    </div>
                </ui:setContext>
            </teamwork:ActionLink>
        </div>
    </ui:else>
    <swa:Subscribe arg:code=\"swa.load('permission-roles-loadable')\" arg:event=\"org.topbraid.swa.change\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Users" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:ViewChangeHistoryPlugin
  a teamwork:ReportPlugin ;
  teamwork:pluginValidExpression true ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:group let:resource=\"{= COALESCE(?tag, ?teamGraph) }\">
        <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilege(?resource, teamwork:viewer, ?teamGraph) }\">
            <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= teamwork:ChangeHistoryPage }\">
                <!-- <i aria-hidden=\"true\" class=\"far fa-clock\"/> -->
                <teamwork:ActionLink arg:comment=\"Shows the change history.\" arg:icon=\"lib/teamwork/build/images/teamwork/Clock.svg\" arg:link=\"{= ?link }\" arg:title=\"View Change History\"/>
            </ui:createLink>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "View change history plugin" ;
  rdfs:subClassOf teamwork:ReportPlugins ;
.
teamwork:ViewFormGadget
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showResourceActions ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, show the resource actions menu" ;
    ] ;
  ui:prototype """
<ui:group let:sourceGraph=\"{= spl:object(ui:graphWithoutImports(ui:currentQueryGraph()), dcterms:source) }\">
    <swa:ViewFormGadget ui:args=\"*\"/>
    <ui:if ui:condition=\"{= bound(?resource) }\">
        <ui:if ui:condition=\"{= (bound(?showResourceActions) &amp;&amp; ?showResourceActions) || bound(?sourceGraph) }\">
            <div class=\"swa-form-footer\">
                <ui:if ui:condition=\"{= bound(?showResourceActions) &amp;&amp; ?showResourceActions }\">
                    <teamwork:ResourceActionButtons arg:resource=\"{= ?resource }\" ui:args=\"*\"/>
                </ui:if>
                <ui:if ui:condition=\"{= bound(?sourceGraph) }\">
                    <div class=\"swa-float-right\">
                        <swa:Button arg:class=\"btn btn-default btn-sm test-feedback-button\" arg:iconClass=\"ui-icon ui-icon-comment\" arg:label=\"Send Comment\" arg:onClick=\"teamwork.sendFeedback('{= ?resource }', '{= ?sourceGraph }', '{= ?origin }')\"/>
                    </div>
                </ui:if>
            </div>
        </ui:if>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "View form gadget" ;
  rdfs:subClassOf swa:ViewFormGadget ;
.
teamwork:Vocabulary
  search:facetedSearch [
      a search:Search ;
      search:excludedFacetProperty spin:imports ;
      search:excludedFacetProperty metadata:fact ;
      search:excludedFacetProperty metadata:officialName ;
      search:excludedFacetProperty metadata:transformedUsing ;
      search:excludedFacetProperty teamwork:editor ;
      search:excludedFacetProperty teamwork:indexingServer ;
      search:excludedFacetProperty teamwork:initialChangeStatus ;
      search:excludedFacetProperty teamwork:manager ;
      search:excludedFacetProperty teamwork:projectType ;
      search:excludedFacetProperty teamwork:role ;
      search:excludedFacetProperty teamwork:viewer ;
      search:excludedFacetProperty owl:backwardCompatibleWith ;
      search:excludedFacetProperty owl:incompatibleWith ;
      search:excludedFacetProperty owl:priorVersion ;
      search:excludedFacetProperty owl:versionIRI ;
      search:facet [
          a search:PropertyFacet ;
          search:property metadata:status ;
        ] ;
      search:facet [
          a search:PropertyFacet ;
          search:property teamwork:mainClass ;
        ] ;
    ] ;
  ui:instanceView """
<teamwork:MetadataFormBody arg:resource=\"{= ?this }\" ui:id=\"metadata\"/>
"""^^ui:Literal ;
  ui:instanceView """
<teamwork:SearchVocabularyFormBody arg:resource=\"{= ?this }\" ui:id=\"search\"/>
"""^^ui:Literal ;
.
teamwork:VocabularyLinkViewer
  a swa:ObjectViewerClass ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:and ;
          sp:arg1 [
              a sp:and ;
              sp:arg1 [
                  a sp:eq ;
                  sp:arg1 [
                      sp:varName "kind" ;
                    ] ;
                  sp:arg2 "uri" ;
                ] ;
              sp:arg2 [
                  a swa:hasCurrentAppName ;
                  arg:appName "Editor" ;
                ] ;
            ] ;
          sp:arg2 [
              a sp:or ;
              sp:arg1 [
                  a sp:or ;
                  sp:arg1 [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "type" ;
                        ] ;
                      sp:arg2 owl:Ontology ;
                    ] ;
                  sp:arg2 [
                      a sp:eq ;
                      sp:arg1 [
                          sp:varName "type" ;
                        ] ;
                      sp:arg2 teamwork:Vocabulary ;
                    ] ;
                ] ;
              sp:arg2 [
                  a sp:exists ;
                  sp:elements (
                      [
                        sp:object teamwork:Vocabulary ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "type" ;
                          ] ;
                      ]
                    ) ;
                ] ;
            ] ;
        ] ;
      swa:weight 70 ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= teamwork:hasTeamGraph(?object) &amp;&amp; teamwork:currentUserHasPrivilegeOnMasterGraph(teamwork:viewer, teamwork:teamGraph(?object)) }\">
        <div class=\"swa-shifted-label\">
            <ui:group let:link=\"{= teamwork:editorLink(?object) }\">
                <a class=\"swa-link\" href=\"javascript:void(0)\" id=\"{= ?uid }\" onclick=\"window.open(&quot;{= ?link }&quot;)\">{= teamwork:projectLabel(?object) }</a>
            </ui:group>
        </div>
    </ui:if>
    <ui:else>
        <swa:URIResourceViewer ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Hyperlink to open a target vocabulary in a new browser window. Used when the value is an EVN vocabulary that the user has access to." ;
  rdfs:label "Vocabulary link viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
teamwork:VocabularyTypeSelectFacet
  a swa:ObjectFacetClass ;
  ui:private true ;
  ui:prototype """
<span let:name=\"value{= ?uid }\">
    <select class=\"form-control {= swa:testClass(?predicate) }\" name=\"{= ?name }\">
        <option/>
        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                SELECT DISTINCT ?type ?label
                WHERE {
                    GRAPH ui:graph {
                        ?type rdfs:subClassOf teamwork:Vocabulary .
                        BIND (teamwork:product() AS ?product) .
                        ?product teamwork:defaultProjectType ?projectType .
                        ?projectType teamwork:vocabularyType ?type .
                        FILTER (teamwork:hasProjectTypeLicense(?projectType) &amp;&amp; (!teamwork:isProjectTypeDisabled(?projectType))) .
                        BIND (ui:label(?type) AS ?label) .
                    } .
                }
                ORDER BY (?label) }\">
            <option selected=\"{= IF((?object = ?type), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(?type, true, true) }\">{= ?label }</option>
        </ui:forEach>
    </select>
</span>
"""^^ui:Literal ;
  rdfs:comment "A drop down box of all available subclasses of teamwork:Vocabulary (in the ui:graph)." ;
  rdfs:subClassOf swa:ObjectFacet ;
.
teamwork:WorkflowParticipantPropertySelectEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<span let:name=\"new-{= ?uid }\" let:pg=\"{= ui:graphWithImports(teamwork:platformGovernanceGraph()) }\">
    <select class=\"form-control {= swa:testClass(?predicate) }\" name=\"{= ?name }\">
        <option/>
        <option selected=\"{= IF((?object = dash:all), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(dash:all, true, true) }\">{= ui:label(dash:all) }</option>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?role ?label
                WHERE {
                    ?any teamwork:activatedWorkflowParticipantProperties ?role .
                    BIND (swa:labelInGraph(?role, ?pg) AS ?label) .
                }
                ORDER BY (?label) }\">
            <option selected=\"{= IF((?object = ?role), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(?role, true, true) }\">{= ?label }</option>
        </ui:forEach>
    </select>
</span>
"""^^ui:Literal ;
  rdfs:label "Workflow participant property select editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
teamwork:WorkflowParticipantPropertyViewer
  a swa:ObjectViewerClass ;
  ui:private true ;
  ui:prototype """
<div class=\"swa-shifted-label\" title=\"{= ?object }\">
    <span class=\"swa-label\">{= swa:labelInGraph(?object, ui:graphWithImports(teamwork:platformGovernanceGraph())) }</span>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf swa:ObjectViewer ;
.
teamwork:allowAnonymous
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a smf:configParam ;
                arg:param "allowAnonymous" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the system has been configured to allow anonymous access" ;
  rdfs:label "allows anonymous" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:alwaysLocalSearch
  a rdf:Property ;
  rdfs:comment "For triples stored at the owl:Ontology in the TCH graph, this signals that the local search button is always active." ;
  rdfs:domain owl:Ontology ;
  rdfs:label "always local search" ;
  rdfs:range xsd:boolean ;
.
teamwork:applicationName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    a teamwork:product ;
                  ] ;
                arg:resourceGraph ui:graph ;
              ] ;
            sp:variable [
                sp:varName "baseName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "TopBraid " ;
                sp:arg2 [
                    sp:varName "baseName" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the name of the application as is displayed in the header." ;
  rdfs:label "application name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:areOldEditorsDisabled
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    a smf:configParam ;
                    arg:param "teamworkEditorChoices" ;
                  ] ;
                sp:arg2 "Disable Old Editors where New Editors available" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "are old editors disabled" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:basketLink
  a spin:Function ;
  a teamwork:MainMenuLink ;
  a rdf:Property ;
  edg.v:icon "fas fa-shopping-basket" ;
  arg:visibility [
      a sp:not ;
      sp:arg1 [
          a teamwork:allowAnonymous ;
        ] ;
    ] ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression "#" ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  swa:tabIndex -999 ;
  rdfs:comment "Users global basket." ;
  rdfs:label "Basket" ;
  rdfs:subClassOf teamwork:MainMenuLinks ;
.
teamwork:bulkUpdate
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:addGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to add the triples of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:deleteGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to delete the triple of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:destGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to modify." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:logMessage ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional log message for the ui:transaction." ;
    ] ;
  rdfs:comment "performs a bulk update using SWPUtil in Java" ;
  rdfs:label "bulkUpdate" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:canCreateProject
  a spin:Function ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current TBL user is allowed to create new teamwork projects." ;
  rdfs:label "can create project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:change
  a rdf:Property ;
  rdfs:label "change" ;
.
teamwork:changeHasCurrentOrNoTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTag ;
              ] ;
            sp:variable [
                sp:varName "tag" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "tag" ;
                                ] ;
                              sp:predicate teamwork:tag ;
                              sp:subject [
                                  sp:varName "change" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given change is associated with the current tag, or no tag. This function must be executed over the team graph." ;
  rdfs:label "change has current or no tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:changeHasCurrentTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTag ;
              ] ;
            sp:variable [
                sp:varName "tag" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:notExists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "any" ;
                                ] ;
                              sp:predicate teamwork:tag ;
                              sp:subject [
                                  sp:varName "change" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "tag" ;
                                ] ;
                              sp:predicate teamwork:tag ;
                              sp:subject [
                                  sp:varName "change" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given change is associated with the current tag, or none if the user is editing the master graph. This function must be executed over the team graph." ;
  rdfs:label "change has current tag" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:clearPlugin
  a rdf:Property ;
  rdfs:comment "Links a vocabulary type with additional code (represented via teamwork:ClearPlugins) that shall be executed after a vocabulary of this type has been cleared." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "clear plugin" ;
  rdfs:range teamwork:ClearPlugin ;
.
teamwork:clearProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to clear." ;
    ] ;
  ui:private true ;
  rdfs:label "clear project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:cloneBlankNode
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:oldObject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The old blank node." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject of the triple." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:newObject=\"{= BNODE() }\">
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subject ?predicate ?newObject .
            }
            WHERE {
            } }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?p ?o
            WHERE {
                ?oldObject ?p ?o .
            } }\">
        <ui:if ui:condition=\"{= isBlank(?o) }\">
            <teamwork:cloneBlankNode arg:oldObject=\"{= ?o }\" arg:predicate=\"{= ?p }\" arg:subject=\"{= ?newObject }\"/>
        </ui:if>
        <ui:else>
            <ui:addPropertyValue arg:property=\"{= ?p }\" arg:value=\"{= ?o }\" ui:this=\"{= ?newObject }\"/>
        </ui:else>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a deep clone of a blank node value so that all values are copied into a new blank node, and nested blank nodes are handled recursively." ;
  rdfs:label "clone blank node" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:cloneLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:lang ;
                sp:arg1 [
                    sp:varName "label" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "lang" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 [
                    sp:varName "label" ;
                  ] ;
                sp:arg2 " Copy" ;
              ] ;
            sp:variable [
                sp:varName "str" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:gt ;
                    sp:arg1 [
                        a fn:string-length ;
                        sp:arg1 [
                            sp:varName "lang" ;
                          ] ;
                      ] ;
                    sp:arg2 0 ;
                  ] ;
                sp:arg2 [
                    a sp:strlang ;
                    sp:arg1 [
                        sp:varName "str" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "lang" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "str" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The old label, possibly including language tag." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Generates a new label from a given label, so that the result can be used in a clone operation. By default this simply appends \"Copy\", but future versions could use language-specific strings or numbers." ;
  rdfs:label "clone label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:clonePlugin
  a rdf:Property ;
  rdfs:comment "Links a vocabulary type with additional code (represented via teamwork:ClonePlugins) that shall be executed after a vocabulary of this type has been cloned." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "clone plugin" ;
  rdfs:range teamwork:ClonePlugin ;
.
teamwork:cloneResource
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to clone." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isBlank(?resource) }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?s ?p ?resource
                WHERE {
                    ?s ?p ?resource .
                } }\">
            <teamwork:cloneBlankNode arg:oldObject=\"{= ?resource }\" arg:predicate=\"{= ?p }\" arg:subject=\"{= ?s }\"/>
        </ui:forEach>
    </ui:if>
    <ui:else>
        <ui:group let:new=\"{= swa:newResource(spl:object(?resource, rdf:type)) }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?new ?p ?newObject .
                    }
                    WHERE {
                        ?resource ?p ?oldObject .
                        FILTER (!isBlank(?oldObject)) .
                        BIND (IF((?p IN (skos:prefLabel, rdfs:label)), teamwork:cloneLabel(?oldObject), ?oldObject) AS ?newObject) .
                    } }\"/>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?s ?p ?new .
                    }
                    WHERE {
                        ?s ?p ?resource .
                    } }\"/>
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?p ?oldObject
                    WHERE {
                        ?resource ?p ?oldObject .
                        FILTER isBlank(?oldObject) .
                    } }\">
                <teamwork:cloneBlankNode arg:oldObject=\"{= ?oldObject }\" arg:predicate=\"{= ?p }\" arg:subject=\"{= ?new }\"/>
            </ui:forEach>
        </ui:group>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "clone resource" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:collectTriplesForSubject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:queryGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The query graph for the original triples." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject resource." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subject ?p ?o .
            }
            WHERE {
                GRAPH ?queryGraph {
                    ?subject ?p ?o .
                } .
            } }\"/>
    <ui:forEach ui:resultSet=\"{#
            SELECT ?bnode
            WHERE {
                GRAPH ?queryGraph {
                    ?subject ?p ?bnode .
                    FILTER (isBlank(?bnode) || (?p = sh:property)) .
                } .
                FILTER NOT EXISTS {
                    ?bnode ?anyP ?anyO .
                } .
            } }\">
        <teamwork:collectTriplesForSubject arg:queryGraph=\"{= ?queryGraph }\" arg:subject=\"{= ?bnode }\"/>
    </ui:forEach>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "collect triples for subject" ;
  rdfs:subClassOf ui:Operations ;
.
teamwork:commitTagChange
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to commit." ;
    ] ;
  ui:private true ;
  rdfs:label "commit tag change" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:createNeighborGramLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "neighborGram.setFocusNode('" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 "')" ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Create a link to a NeighborGram for a resource." ;
  rdfs:label "create Neighborgram link" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
teamwork:createOpenInNewFormEditorLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "anyO" ;
                            ] ;
                          sp:predicate [
                              sp:varName "anyP" ;
                            ] ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a ui:functionCall ;
                    sp:arg1 "teamwork.openInSimpleFormEditor" ;
                    sp:arg2 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a swa:createNewTabLink ;
                    arg:resource [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "create open in new form editor link" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
teamwork:createProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The description of the project." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataPlatform ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Data Platform flag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultNamespace ;
      spl:valueType xsd:string ;
      rdfs:comment "The default namespace" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional ID that would be used as graph ID if present. Otherwise, an ID will be derived from the name." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:luceneIndex ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:owlImports ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:spinImports ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the new project. Also used to produce a graph ID - unless arg:id is also present." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The project type." ;
    ] ;
  rdfs:comment "A control element used during the server handler that creates a new project." ;
  rdfs:label "create project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:createProjectPageClass
  a rdf:Property ;
  rdfs:comment "The class of the SWP page that is used to create new instances of this project type. If not specified, the teamwork:DefaultCreateProjectPage will be used." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "create project page class" ;
  rdfs:range teamwork:CreateProjectPage ;
.
teamwork:createSimpleFormEditorHRef
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:isIRI ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentMasterGraph ;
              ] ;
            sp:variable [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:graphIdFromGraph ;
                    arg:graph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:concat ;
                        sp:arg1 "." ;
                        sp:arg2 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg3 "" ;
                  ] ;
                sp:arg3 ".editor" ;
              ] ;
            sp:variable [
                sp:varName "editor" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "editor" ;
                  ] ;
                sp:arg2 "?_editorClass=teamwork:SimpleFormEditorApplication&resource=" ;
                sp:arg3 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:subClassOf swa:CreateHRefFunctions ;
.
teamwork:cssClass
  a owl:DatatypeProperty ;
  rdfs:comment "CSS class that will be used when this is rendered as HTML." ;
  rdfs:label "css class" ;
  rdfs:range xsd:string ;
.
teamwork:currentUserCanUnpublish
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:publisher ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "creator" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "creator" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "creator" ;
                      ] ;
                    sp:arg2 [
                        a smf:userWithName ;
                        sp:arg1 [
                            a smf:currentUserName ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "current user can unpublish" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasBetterRoleAtProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "role" ;
                    ] ;
                  sp:path [
                      a sp:ModPath ;
                      sp:modMax -2 ;
                      sp:modMin 1 ;
                      sp:subPath rdfs:subPropertyOf ;
                    ] ;
                  sp:subject [
                      sp:varName "betterRole" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://topbraid.org/teamwork> ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a teamwork:currentUserHasRoleAtProject ;
                    arg:role [
                        sp:varName "betterRole" ;
                      ] ;
                    arg:teamGraph [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:currentUserHasEquivalentGovernanceRoleAtProject ;
                    arg:projectGraph [
                        a teamwork:masterGraphForTeamGraph ;
                        arg:teamGraph [
                            sp:varName "teamGraph" ;
                          ] ;
                      ] ;
                    arg:role [
                        sp:varName "betterRole" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType rdf:Property ;
      rdfs:comment "The teamwork role - maybe unbound to check for all roles." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team graph." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current user has a better role (e.g. editor instead of viewer) for a given project." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasEquivalentGovernanceRoleAtProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a ui:graphWithImports ;
                  sp:arg1 [
                      a teamwork:platformGovernanceGraph ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "governanceGraph" ;
                ] ;
            ]
            [
              a sp:NamedGraph ;
              sp:elements (
                  [
                    sp:object [
                        sp:varName "subjectArea" ;
                      ] ;
                    sp:predicate edg:subjectArea ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                ) ;
              sp:graphNameNode [
                  sp:varName "projectGraph" ;
                ] ;
            ]
            [
              a sp:NamedGraph ;
              sp:elements (
                  [
                    sp:object [
                        sp:varName "role" ;
                      ] ;
                    sp:predicate edg:equivlentTeamworkPermissionRole ;
                    sp:subject [
                        sp:varName "equivalentRole" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "governanceRole" ;
                      ] ;
                    sp:predicate [
                        sp:varName "equivalentRole" ;
                      ] ;
                    sp:subject [
                        sp:varName "subjectArea" ;
                      ] ;
                  ]
                ) ;
              sp:graphNameNode [
                  sp:varName "governanceGraph" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a teamwork:currentUserHasGovernanceRole ;
                  arg:projectGraph [
                      sp:varName "projectGraph" ;
                    ] ;
                  arg:role [
                      sp:varName "governanceRole" ;
                    ] ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph to check" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType teamwork:PermissionRoleProperty ;
      rdfs:comment "The role for which to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the currently logged in user has an inferred teamwork permission (e.g. editor/manager) in a given master graph. This checks for governance roles assigned to the subject areas that the master graph has, and the equivalent teamwork permisson that the governance role may have." ;
  rdfs:label "current user has governance role" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasProjectTypeGraphs
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    sp:varName "teamGraph" ;
                  ] ;
                arg:role teamwork:viewer ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "thisType" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    sp:varName "thisType" ;
                  ] ;
                sp:arg2 [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The ProjectType to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserHasRoleAtProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          a sp:Bind ;
                          sp:expression [
                              a smf:userWithName ;
                              sp:arg1 [
                                  a smf:currentUserName ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "user" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "user" ;
                            ] ;
                          sp:predicate [
                              sp:varName "role" ;
                            ] ;
                          sp:subject [
                              sp:varName "teamGraph" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          sp:object [
                              sp:varName "ldapRole" ;
                            ] ;
                          sp:predicate [
                              sp:varName "role" ;
                            ] ;
                          sp:subject [
                              sp:varName "teamGraph" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:and ;
                              sp:arg1 [
                                  a smf:isRole ;
                                  arg:resource [
                                      sp:varName "ldapRole" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a smf:checkCurrentUserRole ;
                                  arg:roleName [
                                      a smf:roleName ;
                                      arg:resource [
                                          sp:varName "ldapRole" ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType rdf:Property ;
      rdfs:comment "The teamwork role - maybe unbound to check for all roles." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The team graph." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "current user has role at project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:currentUserOwnsSavedSearch
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "creator" ;
              ] ;
            sp:predicate search:creator ;
            sp:subject [
                sp:varName "search" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "creator" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "creator" ;
                      ] ;
                    sp:arg2 [
                        a smf:userWithName ;
                        sp:arg1 [
                            a smf:currentUserName ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:search ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current user is the creator of a saved search" ;
  rdfs:label "current user owns saved search" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:customHeaderInsert
  a rdf:Property ;
  rdfs:comment "An element to insert into the header for this project's non-editor project tabs. For backwards compatibility with \"classic\" editors; new editors should not customize the header. Values should be subclasses of teamwork:CustomHeaderInsert." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "custom header insert" ;
  rdfs:range ui:NodeClass ;
.
teamwork:deletePlugin
  a rdf:Property ;
  rdfs:comment "Links a vocabulary type with additional code (represented via teamwork:DeletePlugins) that shall be executed when a vocabulary of this type has been deleted. The plugin is invoked after the user has confirmed the intent to delete, but before the project graph is deleted and unregistered." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "delete plugin" ;
  rdfs:range teamwork:DeletePlugin ;
.
teamwork:deleteProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The IRI of the master graph to delete, e.g. urn:x-evn-master:geo." ;
    ] ;
  rdfs:comment "Deletes a master graph and associated TCH graph." ;
  rdfs:label "delete project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:disabledProjectPlugin
  a rdf:Property ;
  rdfs:comment "Disables a plugin that would otherwise be valid for this project type." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "disabled project plugin" ;
  rdfs:range teamwork:ProjectPlugin ;
.
teamwork:editableImportsTemplate
  a rdf:Property ;
  rdfs:comment "Points to a SPIN template (must be subclass of teamwork:EditableImportsTemplates) that delivers a list of graphs (?graph) and their labels (?label) to be presented when the user clicks \"Edit Includes\". If none is specified, then teamwork:DefaultEditableImports is used." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "editable imports template" ;
  rdfs:range teamwork:EditableImportsTemplate ;
.
teamwork:editorContentsEditableByProjectType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "projectType" ;
                  ] ;
                sp:arg2 teamwork:projectEditableContentsFunction ;
                sp:arg3 ui:graph ;
              ] ;
            sp:variable [
                sp:varName "function" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "function" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spif:invoke ;
                    sp:arg1 [
                        sp:varName "function" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the project graph" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "checks if the project type specifies extra logic for determining if the contents of the graph are editable. If so executes the function." ;
  rdfs:label "editor contents editable by project type" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:editorProjectTabLabel
  a rdf:Property ;
  rdfs:comment "Overrides the label shown on the tab that invokes the editor application in the project tab bar." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "editor project tab label" ;
  rdfs:range xsd:string ;
.
teamwork:ensureSystemGraphsExist
  a ui:NodeClass ;
  rdfs:comment "Initializes the Teamwork system graphs if they are not yet initialized. Will error if the Teamwork storage backend has not been configured. This can be checked with teamwork:isGraphStoreConfigured()." ;
  rdfs:label "ensure system graphs exist" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:executeCommitRules
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:addedResultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "A result set with three columns (s, p, o) of added triples." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:deletedResultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "A result set with three columns (s, p, o) of deleted triples." ;
    ] ;
  ui:private true ;
  rdfs:comment "A natively implemented control element that executes all registered teamwork:CommitRules." ;
  rdfs:label "execute commit rules" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:executePreCommitRules
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current master graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The tag that is being committed." ;
    ] ;
  ui:private true ;
  rdfs:comment "A natively implemented control element that executes all registered teamwork:PreCommitRules." ;
  rdfs:label "execute pre-commit rules" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:executeStatusChangeRules
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:addedResultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "A result set with three columns (s, p, o) of added triples." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:deletedResultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "A result set with three columns (s, p, o) of deleted triples." ;
    ] ;
  ui:private true ;
  rdfs:comment "A natively implemented control element that executes all registered teamwork:StatusChangeRules." ;
  rdfs:label "execute status change rules" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:explorerUsersCanViewWorkingCopies
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate cfg:explorerUsersCanViewWorkingCopies ;
                  sp:subject config:configuration ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether Explorer users can view working copies." ;
  rdfs:label "Explorer users can view working copies" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:extraCreateProjectSectionClass
  a rdf:Property ;
  rdfs:comment "Can point to an SWP view that shall be inserted after the section for the project type on the home page. Can contain links to help pages etc." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "extra create project section class" ;
  rdfs:range ui:NodeClass ;
.
teamwork:filterNonTeamworkResources
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:definedIn ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:strstarts ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "graph" ;
                              ] ;
                          ] ;
                        sp:arg2 "urn:x-evn-master:" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:strstarts ;
                        sp:arg1 [
                            a sp:str ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                          ] ;
                        sp:arg2 "urn:x-evn-master:" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Filters out any resource that doesn't have a teamwork graph as its home graph or which is the owl:Ontology of a teamwork graph itself." ;
  rdfs:subClassOf swa:FilterFunctions ;
.
teamwork:filterPotentialMainClasses
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "publicClass" ;
              ] ;
            sp:predicate graphql:publicClass ;
            sp:subject [
                sp:varName "schema" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "publicClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "node" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "This needs to remain aligned with teamwork:PotentialMainClasses." ;
  rdfs:label "filter potential main classes" ;
  rdfs:subClassOf swa:FilterFunctions ;
.
teamwork:filterSimpleClassFormProperties
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a swa:isNonAnnotationProperty ;
                arg:predicate [
                    sp:varName "node" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notIn ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
                sp:arg10 owl:hasKey ;
                sp:arg11 spin:constraint ;
                sp:arg12 spin:rule ;
                sp:arg13 spin:constructor ;
                sp:arg14 dash:applicableToClass ;
                sp:arg15 dash:defaultViewForRole ;
                sp:arg2 rdf:type ;
                sp:arg3 owl:oneOf ;
                sp:arg4 owl:complementOf ;
                sp:arg5 owl:intersectionOf ;
                sp:arg6 owl:unionOf ;
                sp:arg7 owl:disjointWith ;
                sp:arg8 owl:disjointUnionOf ;
                sp:arg9 owl:equivalentClass ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "filter simple class form properties" ;
  rdfs:subClassOf swa:FilterFunctions ;
.
teamwork:filterSimplePropertyFormProperties
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a swa:isNonAnnotationProperty ;
                arg:predicate [
                    sp:varName "node" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notIn ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
                sp:arg2 rdf:type ;
                sp:arg3 rdfs:subPropertyOf ;
                sp:arg4 owl:equivalentProperty ;
                sp:arg5 owl:inverseOf ;
                sp:arg6 owl:propertyChainAxiom ;
                sp:arg7 owl:propertyDisjointWith ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "filter simple property form properties" ;
  rdfs:subClassOf swa:FilterFunctions ;
.
teamwork:filterSystemResourcesExceptOWLThing
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                    sp:arg2 owl:Thing ;
                  ] ;
                sp:arg2 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:and ;
                                    sp:arg1 [
                                        a swa:filterSystemResources ;
                                        arg:node [
                                            sp:varName "node" ;
                                          ] ;
                                      ] ;
                                    sp:arg2 [
                                        a sp:not ;
                                        sp:arg1 [
                                            a sp:strstarts ;
                                            sp:arg1 [
                                                a sp:str ;
                                                sp:arg1 [
                                                    sp:varName "node" ;
                                                  ] ;
                                              ] ;
                                            sp:arg2 "http://www.w3.org/ns/shacl#" ;
                                          ] ;
                                      ] ;
                                  ] ;
                                sp:arg2 [
                                    a sp:not ;
                                    sp:arg1 [
                                        a sp:strstarts ;
                                        sp:arg1 [
                                            a sp:str ;
                                            sp:arg1 [
                                                sp:varName "node" ;
                                              ] ;
                                          ] ;
                                        sp:arg2 "http://spinrdf.org/" ;
                                      ] ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:not ;
                                sp:arg1 [
                                    a sp:strstarts ;
                                    sp:arg1 [
                                        a sp:str ;
                                        sp:arg1 [
                                            sp:varName "node" ;
                                          ] ;
                                      ] ;
                                    sp:arg2 "http://topbraid.org/tosh#" ;
                                  ] ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:not ;
                            sp:arg1 [
                                a sp:strstarts ;
                                sp:arg1 [
                                    a sp:str ;
                                    sp:arg1 [
                                        sp:varName "node" ;
                                      ] ;
                                  ] ;
                                sp:arg2 "http://datashapes.org/dash#" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a sp:strstarts ;
                            sp:arg1 [
                                a sp:str ;
                                sp:arg1 [
                                    sp:varName "node" ;
                                  ] ;
                              ] ;
                            sp:arg2 "http://datashapes.org/graphql#" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Filters out any resources from the RDF, RDFS, OWL, SPIN and SHACL namespaces, except owl:Thing." ;
  rdfs:label "filter system resources except owl:Thing" ;
  rdfs:subClassOf swa:FilterFunctions ;
.
teamwork:findChangeForTriple
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "change" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate teamwork:subject ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object spin:_arg2 ;
            sp:predicate teamwork:predicate ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object spin:_arg3 ;
            sp:predicate teamwork:object ;
            sp:subject [
                sp:varName "triple" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "triple" ;
              ] ;
            sp:predicate spin:_arg4 ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
          [
            sp:object spin:_arg5 ;
            sp:predicate teamwork:tag ;
            sp:subject [
                sp:varName "change" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      rdfs:comment "The object of the triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg4 ;
      spl:valueType rdf:Property ;
      rdfs:comment "teamwork:added or deleted." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg5 ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag." ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:Change ;
  rdfs:label "find change for triple" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getEditorIconFa
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:if ;
            sp:arg1 [
                sp:varName "frozen" ;
              ] ;
            sp:arg2 "pause" ;
            sp:arg3 [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        sp:varName "application" ;
                      ] ;
                  ] ;
                sp:arg2 "stop" ;
                sp:arg3 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            sp:varName "editor" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "editable" ;
                          ] ;
                      ] ;
                    sp:arg2 "pencil" ;
                    sp:arg3 "eye" ;
                  ] ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:hasEditorApplication ;
                arg:projectType [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "application" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    a sp:coalesce ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
                arg:role teamwork:editor ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "editor" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:editorContentsEditableByProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "editable" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a teamwork:isFrozenTag ;
                    arg:tag [
                        sp:varName "tag" ;
                      ] ;
                    arg:teamGraph [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "frozen" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns an icon suitable for the state of the editor for the given project or tag" ;
  rdfs:label "get editor icon (FontAwesome)" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getFromAddress
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate cfg:smtpServerFrom ;
                  sp:subject [
                      sp:varName "any" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the currently configured SMTP From address, which is unbound by default." ;
  rdfs:label "get From Address" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getGQLFieldName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "fieldName" ;
                  ] ;
                sp:arg2 [
                    sp:varName "gname" ;
                  ] ;
                sp:arg3 [
                    sp:varName "bname" ;
                  ] ;
              ] ;
            sp:varName "name" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a afn:namespace ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespace" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 graphql:name ;
              ] ;
            sp:variable [
                sp:varName "gname" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a graphql:fieldName ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fieldName" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "namespace" ;
                      ] ;
                    sp:arg2 "http://edg.topbraid.solutions/model/" ;
                  ] ;
                sp:arg2 [
                    a spif:localName ;
                    sp:arg1 [
                        sp:varName "property" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:replace ;
                    sp:arg1 [
                        a smf:qname ;
                        sp:arg1 [
                            sp:varName "property" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "_" ;
                    sp:arg4 "i" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "bname" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment """SELECT (COALESCE(?gname, ?bname) AS ?name)
WHERE {
    BIND (afn:namespace(?property) AS ?namespace) .
    BIND (spl:object(?resource, graphql:name) AS ?gname) .
    BIND (IF((?namespace = \"http://edg.topbraid.solutions/model/\"), spif:localName(?property), REPLACE(smf:qname(?property), \":\", \"_\", \"i\")) AS ?bname) .
}""" ;
  rdfs:comment """SELECT ?name
WHERE {
    BIND (afn:namespace(?property) AS ?namespace) .
    BIND (IF((?namespace = \"http://edg.topbraid.solutions/model/\"), spif:localName(?property), REPLACE(smf:qname(?property), \":\", \"_\", \"i\")) AS ?name) .
}""" ;
  rdfs:label "get GQLField name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getGQLResourceName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "gname" ;
                  ] ;
                sp:arg2 [
                    sp:varName "bname" ;
                  ] ;
              ] ;
            sp:varName "name" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a afn:namespace ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "namespace" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:object ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 graphql:name ;
              ] ;
            sp:variable [
                sp:varName "gname" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "namespace" ;
                      ] ;
                    sp:arg2 "http://edg.topbraid.solutions/model/" ;
                  ] ;
                sp:arg2 [
                    a spif:localName ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a sp:replace ;
                    sp:arg1 [
                        a smf:qname ;
                        sp:arg1 [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                    sp:arg2 ":" ;
                    sp:arg3 "_" ;
                    sp:arg4 "i" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "bname" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "get GQL resource name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getHomeVocabularyLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:definedIn ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphURI" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "graphURI" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 " (in " ;
                    sp:arg2 [
                        a teamwork:projectLabel ;
                        arg:projectGraph [
                            a sp:iri ;
                            sp:arg1 [
                                sp:varName "graphURI" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg3 ")" ;
                  ] ;
                sp:arg3 [
                    sp:varName "none" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the home graph of." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "get home vocabulary label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getItemFromUserBookmarks
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:userDataGraph ;
              ] ;
            sp:variable [
                sp:varName "qg" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 spin:_arg2 ;
                sp:arg2 [
                    a teamwork:getUserBookmarks ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "userBookmarks" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "item" ;
                    ] ;
                  sp:predicate teamwork:hasItem ;
                  sp:subject [
                      sp:varName "userBookmarks" ;
                    ] ;
                ]
                [
                  sp:object spin:_arg1 ;
                  sp:predicate teamwork:hasResource ;
                  sp:subject [
                      sp:varName "item" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "qg" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType teamwork:Bookmarks ;
      rdfs:comment "The target bookmarks." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The target resource." ;
    ] ;
  rdfs:label "is in user bookmarks" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getLeaveWorkflowLink
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectTab ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "The currently selected tab" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:useDefaultTab=\"{= (!bound(?projectTab)) || EXISTS {
    GRAPH ui:graph {
        ?projectTab teamwork:invalidForMaster true .
    } .
} }\">
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:varName=\"projectPageLink\" ui:viewClass=\"{= teamwork:ProjectPage }\">
        <ui:group let:link=\"{= teamwork:getProjectTabLink(IF(?useDefaultTab, teamwork:EditorProjectTab, ?projectTab), ?projectGraph, ?noTag, ?projectPageLink) }\">
            <ui:return ui:result=\"{= ?link }\"/>
        </ui:group>
    </ui:createLink>
</ui:group>
"""^^ui:Literal ;
  ui:responseType xsd:string ;
  rdfs:comment "Given a project and tab, and assuming we are on that tab in a workflow of that project, returns a link that takes us out of the workflow to the corresponding tab on the production copy. Handles the case of tabs that do not exist on the production copy." ;
  rdfs:label "get leave workflow link" ;
  rdfs:subClassOf ui:Functions ;
.
teamwork:getMandatoryImportedGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "importLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "import" ;
          ]
          [
            sp:varName "importLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "import" ;
              ] ;
            sp:predicate owl:imports ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isMandatoryImport ;
                arg:graph [
                    sp:varName "import" ;
                  ] ;
                arg:projectType [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:projectLabel ;
                arg:projectGraph [
                    sp:varName "import" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "importLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      rdfs:comment "The node to find changes about." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Delivers a list of those graphs that are imported into a given vocabulary and are marked mandatory for its project type." ;
  rdfs:label "get mandatory imported graphs" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:getMatchesByPredicate
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "sourceType" ;
          ]
          [
            sp:varName "targetType" ;
          ]
          [
            sp:varName "targetLabel" ;
          ]
          [
            sp:varName "editable" ;
          ]
          [
            sp:varName "comment" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "target" ;
              ] ;
            sp:predicate [
                sp:varName "matchPredicate" ;
              ] ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "inverse" ;
                  ] ;
                sp:arg2 [
                    sp:varName "target" ;
                  ] ;
                sp:arg3 [
                    sp:varName "source" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sourceType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "inverse" ;
                  ] ;
                sp:arg2 [
                    sp:varName "source" ;
                  ] ;
                sp:arg3 [
                    sp:varName "target" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "targetType" ;
                  ] ;
                arg:resourceGraph [
                    sp:varName "labelGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetLabel" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "source" ;
                    ] ;
                  sp:predicate rdf:subject ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "matchPredicate" ;
                    ] ;
                  sp:predicate rdf:predicate ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "target" ;
                    ] ;
                  sp:predicate rdf:object ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "comment" ;
                    ] ;
                  sp:predicate rdfs:comment ;
                  sp:subject [
                      sp:varName "s" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression true ;
            sp:variable [
                sp:varName "editable" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:inverse ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:labelGraph ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:matchPredicate ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:getMaxChildIndex
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Max ;
                sp:expression [
                    sp:varName "index" ;
                  ] ;
              ] ;
            sp:varName "maxIndex" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:TriplePath ;
                  sp:object [
                      sp:varName "index" ;
                    ] ;
                  sp:path [
                      a sp:SeqPath ;
                      sp:path1 [
                          a sp:SeqPath ;
                          sp:path1 ui:instanceView ;
                          sp:path2 ui:child ;
                        ] ;
                      sp:path2 ui:childIndex ;
                    ] ;
                  sp:subject [
                      sp:varName "instanceViewClass" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/uiconfig> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:instanceViewClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class that holds the instance view in uiconfig" ;
    ] ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getProjectOrTagEditableState
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "noEditorApp" ;
                  ] ;
                sp:arg2 [
                    sp:varName "readOnlyType" ;
                  ] ;
                sp:arg3 [
                    sp:varName "frozenTag" ;
                  ] ;
                sp:arg4 [
                    sp:varName "editableProjectOrTag" ;
                  ] ;
                sp:arg5 [
                    sp:varName "readOnlyProjectOrTag" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a teamwork:hasEditorApplication ;
                        arg:projectType [
                            sp:varName "projectType" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:NoEditorApplicationStatus ;
                sp:arg3 [
                    sp:varName "null" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "noEditorApp" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a teamwork:editorContentsEditableByProjectType ;
                        arg:projectGraph [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:IsReadOnlyTypeStatus ;
                sp:arg3 [
                    sp:varName "null" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "readOnlyType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a teamwork:isFrozenTag ;
                        arg:tag [
                            sp:varName "tag" ;
                          ] ;
                        arg:teamGraph [
                            sp:varName "teamGraph" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:IsFrozenTagStatus ;
                sp:arg3 [
                    sp:varName "null" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "frozenTag" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentUserHasPrivilege ;
                arg:governedResource [
                    a sp:coalesce ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "teamGraph" ;
                      ] ;
                  ] ;
                arg:role teamwork:editor ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "canEdit" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    sp:varName "canEdit" ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:IsEditableTagStatus ;
                    sp:arg3 teamwork:IsEditableProjectStatus ;
                  ] ;
                sp:arg3 [
                    sp:varName "null" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "editableProjectOrTag" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        sp:varName "canEdit" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:if ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tag" ;
                          ] ;
                      ] ;
                    sp:arg2 teamwork:IsReadOnlyTagStatus ;
                    sp:arg3 teamwork:IsReadOnlyProjectStatus ;
                  ] ;
                sp:arg3 [
                    sp:varName "null" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "readOnlyProjectOrTag" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the editable state of a project or tag." ;
  rdfs:label "get project or tag editable state" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getProjectTabLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "plugin" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "url" ;
                  ] ;
                sp:arg3 [
                    a ui:concat ;
                    sp:arg1 [
                        a sp:if ;
                        sp:arg1 [
                            a sp:strstarts ;
                            sp:arg1 [
                                sp:varName "link" ;
                              ] ;
                            sp:arg2 "#" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "url" ;
                          ] ;
                        sp:arg3 "" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "link" ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:concat ;
                      sp:arg1 "#tabs-" ;
                      sp:arg2 [
                          a afn:localname ;
                          sp:arg1 [
                              sp:varName "plugin" ;
                            ] ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "localLink" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spl:object ;
                      sp:arg1 [
                          sp:varName "plugin" ;
                        ] ;
                      sp:arg2 teamwork:linkExpression ;
                    ] ;
                  sp:variable [
                      sp:varName "linkExpression" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "linkExpression" ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a spin:eval ;
                          sp:arg1 [
                              sp:varName "linkExpression" ;
                            ] ;
                          sp:arg2 arg:projectGraph ;
                          sp:arg3 [
                              sp:varName "projectGraph" ;
                            ] ;
                          sp:arg4 arg:tag ;
                          sp:arg5 [
                              sp:varName "tag" ;
                            ] ;
                        ] ;
                      sp:arg3 [
                          sp:varName "localLink" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "link" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "Generate a link for this working copy (or the production copy if not specified)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:url ;
      spl:valueType xsd:string ;
      rdfs:comment "If specified, turn local #fragment results into absolute URLs using this base. (Should be called arg:base, but SPIN function arguments need to be alphabetically ordered.)" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:plugin ;
      spl:valueType teamwork:ProjectTab ;
      rdfs:comment "The project tab class whose link to return" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Generate a link for this project graph." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the link for a project tab. It is generated by the tab's teamwork:linkExpression if it has one. Otherwise, it will be a link to teamwork:ProjectPage with the tab id as a #fragment, or just the #fragment if no base is specified." ;
  rdfs:label "get project tab link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getSearchGraphsModal
  a ui:NodeClass ;
  ui:prototype """
<ui:group>
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(&lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt;), ui:graphWithImports(&lt;http://teamwork.topbraidlive.org/system/configconstraints&gt;)) }\">
        <ui:call ui:template=\"{= safconfig:IsSearchConfigured }\" ui:varName=\"results\">
            <ui:if ui:condition=\"{= spr:rowCount(?results) = 0 }\">
                <div>
                    <p>No collections have been added to search.</p>
                </div>
            </ui:if>
            <ui:else>
                <ui:forEach ui:resultSet=\"{= ?results }\">
                    <ui:if ui:condition=\"{= STRSTARTS(str(?graph), &quot;urn:x-tb-governance:&quot;) }\">
                        <a href=\"swp?_viewClass=governance:SubjectAreasPage&amp;resource={= ?graph }\" target=\"_blank\" title=\"{= teamwork:projectOrSubjectAreaLabel(?graph) }\">
                            <p>{= teamwork:projectOrSubjectAreaLabel(?graph) }</p>
                        </a>
                    </ui:if>
                    <ui:else>
                        <ui:if ui:condition=\"{= teamwork:currentUserHasPrivilege(teamwork:teamGraph(?graph), teamwork:viewer, teamwork:teamGraph(?graph)) }\">
                            <ui:group let:editorLink=\"{= teamwork:editorLink(?graph) }\">
                                <a href=\"{= ?editorLink }\" target=\"_blank\" title=\"{= teamwork:projectOrSubjectAreaLabel(?graph) }\">
                                    <p>{= teamwork:projectOrSubjectAreaLabel(?graph) }</p>
                                </a>
                            </ui:group>
                        </ui:if>
                    </ui:else>
                </ui:forEach>
            </ui:else>
        </ui:call>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:subClassOf ui:Element ;
.
teamwork:getTagIfUncommitted
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "tag" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "tag" ;
                    ] ;
                  sp:predicate teamwork:tag ;
                  sp:subject [
                      sp:varName "change" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:notExists ;
                      sp:elements (
                          [
                            sp:object teamwork:Committed ;
                            sp:predicate teamwork:status ;
                            sp:subject [
                                sp:varName "change" ;
                              ] ;
                          ]
                        ) ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:change ;
      spl:valueType teamwork:Change ;
      rdfs:comment "The teamwork:Change to get the tag of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The TCH graph." ;
    ] ;
  spin:returnType teamwork:Tag ;
  rdfs:comment "Gets the working copy tag for a given change id." ;
  rdfs:label "get tag if uncommitted" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getUIMaxTableRows
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "maxTableRows" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "maxTableRows" ;
                    ] ;
                  sp:predicate cfg:uiMaxTableRows ;
                  sp:subject [
                      sp:varName "any" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:integer ;
  rdfs:comment "Retrieves the currently configured ui max table rows count." ;
  rdfs:label "get ui max table rows" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:getUserBookmarks
  a ui:Function ;
  spin:private true ;
  spin:returnType teamwork:Bookmarks ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:group let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
        <ui:group let:bookmarks=\"{#
                SELECT ?bookmarks
                WHERE {
                    ?user teamwork:bookmarks ?bookmarks .
                    ?bookmarks a teamwork:Bookmarks .
                } }\">
            <ui:return ui:result=\"{= ?bookmarks }\"/>
        </ui:group>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "get user bookmarks" ;
  rdfs:subClassOf ui:Functions ;
.
teamwork:getUserLinkFunction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    a teamwork:product ;
                  ] ;
                sp:arg2 teamwork:userLinkFunction ;
                sp:arg3 ui:graph ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:cachable true ;
  spin:private true ;
  rdfs:comment "Returns the value of teamwork:userLinkFunction for the current product. Made cacheable for performance." ;
  rdfs:label "get user link function" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:graphIsInIndex
  a spin:AskTemplate ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Exists ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          a sp:NamedGraph ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "o" ;
                                  ] ;
                                sp:predicate edg:subjectArea ;
                                sp:subject [
                                    sp:varName "projectGraph" ;
                                  ] ;
                              ]
                            ) ;
                          sp:graphNameNode [
                              sp:varName "projectGraph" ;
                            ] ;
                        ]
                        [
                          a sp:NamedGraph ;
                          sp:elements (
                              [
                                sp:object true ;
                                sp:predicate safm:graphSearchable ;
                                sp:subject [
                                    sp:varName "o" ;
                                  ] ;
                              ]
                            ) ;
                          sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                        ]
                      )
                      (
                        [
                          a sp:NamedGraph ;
                          sp:elements (
                              [
                                sp:object true ;
                                sp:predicate safm:graphSearchable ;
                                sp:subject [
                                    sp:varName "projectGraph" ;
                                  ] ;
                              ]
                            ) ;
                          sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                        ]
                      )
                    ) ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
    ] ;
  rdfs:subClassOf spin:AskTemplates ;
.
teamwork:graphIsInIndexBySubjectArea
  a spin:AskTemplate ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Exists ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "o" ;
                            ] ;
                          sp:predicate edg:subjectArea ;
                          sp:subject [
                              sp:varName "projectGraph" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object true ;
                          sp:predicate safm:graphSearchable ;
                          sp:subject [
                              sp:varName "o" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
    ] ;
  rdfs:subClassOf spin:AskTemplates ;
.
teamwork:graphLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 [
                          sp:varName "graph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "result" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to get the label of." ;
    ] ;
  rdfs:comment "Gets a display label for a given graph. First tries the rdfs:label of the graph, in the GRAPH itself. If that fails, it falls back to the URI." ;
  rdfs:label "graph label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasAutoClassifierLicense
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a tbl:hasLicense ;
                sp:arg1 60 ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a uix:isTBC ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a tbl:isDevMode ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has AutoClassifier license" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasEVNViewerLicense
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a tbl:hasLicense ;
                sp:arg1 69 ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has EVN Viewer license" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasEditorApplication
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          sp:object [
                              sp:varName "any" ;
                            ] ;
                          sp:predicate teamwork:projectEditorClass ;
                          sp:subject [
                              sp:varName "projectType" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          sp:object [
                              sp:varName "any" ;
                            ] ;
                          sp:predicate teamwork:defaultLayout ;
                          sp:subject [
                              sp:varName "projectType" ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The projectType." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Tests if a given teamwork:ProjectType has a declared editor application." ;
  rdfs:label "has editor application" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hasFormLayout
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a swa:configGraph ;
              ] ;
            sp:variable [
                sp:varName "configGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "view" ;
                    ] ;
                  sp:predicate ui:instanceView ;
                  sp:subject [
                      sp:varName "class" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "configGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class the instance view will be defined on." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "has form layout" ;
  rdfs:subClassOf spl:BooleanFunctions ;
.
teamwork:hasNoLabelPropertyShape
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      a sp:TriplePath ;
                      sp:object [
                          sp:varName "cls" ;
                        ] ;
                      sp:path [
                          a sp:ModPath ;
                          sp:modMax -2 ;
                          sp:modMin 0 ;
                          sp:subPath rdfs:subClassOf ;
                        ] ;
                      sp:subject [
                          sp:varName "nodeShape" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ps" ;
                        ] ;
                      sp:predicate sh:property ;
                      sp:subject [
                          sp:varName "cls" ;
                        ] ;
                    ]
                    [
                      sp:object rdfs:label ;
                      sp:predicate sh:path ;
                      sp:subject [
                          sp:varName "ps" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:nodeShape ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has no label property shape" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:hideMainMenuForProject
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a teamwork:getProjectType ;
                      arg:projectGraph [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "type" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "editor" ;
                    ] ;
                  sp:predicate teamwork:projectEditorClass ;
                  sp:subject [
                      sp:varName "type" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:eq ;
                          sp:arg1 [
                              sp:varName "editor" ;
                            ] ;
                          sp:arg2 edg:TabularModelsEditor ;
                        ] ;
                      sp:arg2 [
                          a sp:exists ;
                          sp:elements (
                              [
                                a sp:TriplePath ;
                                sp:object teamwork:EditorApplications ;
                                sp:path [
                                    a sp:ModPath ;
                                    sp:modMax -2 ;
                                    sp:modMin 1 ;
                                    sp:subPath rdfs:subClassOf ;
                                  ] ;
                                sp:subject [
                                    sp:varName "editor" ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The asset collection to check." ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns true for asset collections whose ProjectType uses one of the \"classic\" EVN/RDM editor applications. Specifically, an editor application that doesn't use teamwork:Chrome." ;
  rdfs:label "show main menu for project" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:home
  a teamwork:HomePage ;
  arg:expanded [
      sp:varName "expanded" ;
    ] ;
  ui:name "home" ;
  rdfs:label "Teamwork home" ;
.
teamwork:homeLink
  a spin:Function ;
  a teamwork:MainMenuLink ;
  edg.v:icon "fa-home" ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "../" ;
                sp:arg2 [
                    a spif:lowerCase ;
                    sp:arg1 [
                        a teamwork:getProductAbbreviation ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  swa:tabIndex -1000 ;
  rdfs:label "Home" ;
  rdfs:subClassOf spin:Functions ;
  rdfs:subClassOf teamwork:MainMenuLinks ;
.
teamwork:homePageTab
  a rdf:Property ;
  rdfs:comment "Enumerates the tabs that are available for this Product." ;
  rdfs:domain teamwork:Product ;
  rdfs:label "home page tab" ;
  rdfs:range teamwork:HomePageTab ;
.
teamwork:importableSystemGraph
  a rdf:Property ;
  rdfs:comment "Can be used to mark certain system graphs (in particular from the TopBraid project) as available to the Edit Includes dialog. The values of this property need to be the graph URIs. The subject has no significance right now, and we recommend using the owl:Ontology instance of the teamwork namespace for now." ;
  rdfs:label "importable system graph" ;
  rdfs:range rdfs:Resource ;
.
teamwork:importableSystemShapesGraph
  a rdf:Property ;
  rdfs:comment "Can be used to mark certain system shapes graphs (in particular from the TopBraid and EDG projects) as available to the Edit Includes dialog for ontology/shapes graph collections. The values of this property need to be the graph URIs. The subject has no significance right now, and we recommend using the owl:Ontology instance of the teamwork namespace for now." ;
  rdfs:label "importable system shapes graph" ;
  rdfs:range rdfs:Resource ;
.
teamwork:initEastTogglerSimpleFormEditor
  a ui:Script ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:targetElement ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<script>function initEastToggler() {
		return {
			initClosed: swa.getStorageValue('org.topbraidlive.teamwork.SimpleFormEditor-east-open') != 'true',
			onclose_end: function(){ swa.setStorageValue('org.topbraidlive.teamwork.SimpleFormEditor-east-open', false)},
			onopen_end:  function(){ swa.setStorageValue('org.topbraidlive.teamwork.SimpleFormEditor-east-open', true)},
			onresize_end: function(paneDirection, paneElement, paneState) {  swa.setStorageValue('org.topbraidlive.teamwork.SimpleFormEditor-east', paneState.size);swa.resizeGrid(paneDirection, paneElement); },
			size: swa.getStorageNumber('org.topbraidlive.teamwork.SimpleFormEditor-east', 300),
			spacing_closed: 25,
			togglerLength_closed: 108,
			togglerHeight: 108
		}
	}</script>
"""^^ui:Literal ;
  rdfs:label "Init East Toggler Simple Form Editor" ;
  rdfs:subClassOf ui:Scripts ;
.
teamwork:invalidForMaster
  a rdf:Property ;
  rdfs:comment "Indicates that this plugin shall not be used if we are on the master copy." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "invalid for master" ;
  rdfs:range xsd:boolean ;
.
teamwork:isACResult
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a fn:starts-with ;
                sp:arg1 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 "urn:x-tags:auto-classifier" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Working copy" ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Returns true if the working copy is the result of running the AutoClassifier." ;
  rdfs:label "is AC result" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isAlwaysLocalSearch
  a spin:Function ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "is always local search" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isCurrentGraphFrozen
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentGraphId ;
              ] ;
            sp:variable [
                sp:varName "graphId" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTagId ;
              ] ;
            sp:variable [
                sp:varName "tagId" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isFrozenProjectOrTag ;
                arg:graphId [
                    sp:varName "graphId" ;
                  ] ;
                arg:tagId [
                    sp:varName "tagId" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Returns true if the current graph is frozen for edits by the current user." ;
  rdfs:label "is current graph frozen" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isFrozen
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:tagById ;
                arg:tagId [
                    sp:varName "tagId" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tag" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:currentTeamGraph ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:isFrozenTag ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
                arg:teamGraph [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The tag id." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given tag is still editable, i.e. uncommitted and not frozen for review or committed." ;
  rdfs:label "is frozen" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isFrozenProjectOrTag
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a teamwork:isFrozen ;
                        arg:tagId [
                            sp:varName "tagId" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:not ;
                        sp:arg1 [
                            a teamwork:currentUserHasPrivilege ;
                            arg:governedResource [
                                a sp:if ;
                                sp:arg1 [
                                    a sp:bound ;
                                    sp:arg1 [
                                        sp:varName "tagId" ;
                                      ] ;
                                  ] ;
                                sp:arg2 [
                                    a teamwork:tagById ;
                                    arg:tagId [
                                        sp:varName "tagId" ;
                                      ] ;
                                  ] ;
                                sp:arg3 [
                                    a teamwork:teamGraph ;
                                    sp:arg1 [
                                        a teamwork:masterGraph ;
                                        arg:graphId [
                                            sp:varName "graphId" ;
                                          ] ;
                                      ] ;
                                  ] ;
                              ] ;
                            arg:role teamwork:editor ;
                            arg:teamGraph [
                                a teamwork:teamGraph ;
                                sp:arg1 [
                                    a teamwork:masterGraph ;
                                    arg:graphId [
                                        sp:varName "graphId" ;
                                      ] ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:not ;
                        sp:arg1 [
                            a teamwork:editorContentsEditableByProjectType ;
                            arg:projectGraph [
                                a teamwork:masterGraph ;
                                arg:graphId [
                                    sp:varName "graphId" ;
                                  ] ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the tag to check" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the project graph." ;
    ] ;
  rdfs:comment "Returns true if working copy tag or project is frozen for the current user." ;
  rdfs:label "is frozen" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isGraphStoreConfigured
  a spin:Function ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether the current TBL server is configured to allow creating new teamwork projects. This includes checking that a graph store connection has been set up." ;
  rdfs:label "is graph store configured" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isHiddenPropertyAtClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:in ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
                sp:arg2 sh:hasValue ;
                sp:arg3 sh:languageIn ;
                sp:arg4 sh:xone ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Used as value for arg:hidePropertiesFunction for class forms to suppress certain properties that make no sense for classes." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isHiddenPropertyGroupAtClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:in ;
                sp:arg1 [
                    sp:varName "group" ;
                  ] ;
                sp:arg2 tosh:ValueTypeConstraintPropertyGroup ;
                sp:arg3 tosh:ValueRangeConstraintPropertyGroup ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:group ;
      spl:valueType sh:PropertyGroup ;
      rdfs:comment "The property group to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Used as value for arg:hidePropertyGroupsFunction for class forms to suppress certain property groups that make no sense for classes." ;
  rdfs:label "is hidden property group at class" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isHiddenRole
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:in ;
                sp:arg1 [
                    sp:varName "role" ;
                  ] ;
                sp:arg2 <urn:x-tb-role:UpdateAllowRole> ;
                sp:arg3 <urn:x-tb-role:UpdateDenyRole> ;
                sp:arg4 <urn:x-tb-role:TBAdmin> ;
                sp:arg5 <urn:x-tb-role:ANY_ROLE> ;
                sp:arg6 <urn:x-tb-users:SPARQLUpdateAllowedUser> ;
                sp:arg7 <urn:x-tb-users:SPARQLUpdateBlockedUser> ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:role ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The role to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given user or user group is among those built into TB that should not selectable for EVN/EDG users." ;
  rdfs:label "is hidden role" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:isMandatoryImport
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:in ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 <http://spinrdf.org/spl> ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "owlImports" ;
                            ] ;
                          sp:predicate teamwork:owlImports ;
                          sp:subject [
                              sp:varName "projectType" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate spif:split ;
                    sp:subject [
                        sp:varName "str" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "owlImports" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object " " ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:eq ;
                        sp:arg1 [
                            a sp:iri ;
                            sp:arg1 [
                                sp:varName "str" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 <http://topbraid.org/teamworkconstraints> ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks whether a given imported graph is among the default owl:imports for a given project type." ;
  rdfs:label "is mandatory import" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:labelInTeamworkGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a ui:label ;
                      sp:arg1 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "label" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://topbraid.org/teamwork> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to get the label of." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets the label of a resource, in the teamwork graph. Especially useful for things like statuses." ;
  rdfs:label "label in teamwork graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:landingPage
  a rdf:Property ;
  rdfs:comment "Defines the content of the \"landing page\" for the product, i.e. the HTML that appears on the main screen when you press Home." ;
  rdfs:domain teamwork:Product ;
  rdfs:label "landing page" ;
  rdfs:range ui:NodeClass ;
.
teamwork:linkExpression
  a rdf:Property ;
  rdfs:comment "May point to a SPARQL expression that produces a URL (as xsd:string) to link to. The expression may use the bound variables ?projectGraph and ?tag." ;
  rdfs:domain teamwork:ProjectTab ;
  rdfs:label "link expression" ;
.
teamwork:mainMenuCategory
  a rdf:Property ;
  rdfs:comment "Assigns a resource to a main menu category for the purpose of highlighting the active main menu item." ;
  rdfs:label "main menu category" ;
.
teamwork:mainMenuLink
  a rdf:Property ;
  rdfs:comment "Enumerates links in the main navigation menu for this Product." ;
  rdfs:domain teamwork:Product ;
  rdfs:label "main menu link" ;
  rdfs:range teamwork:MainMenuLink ;
.
teamwork:makeEditorLink
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "the type of project for the given project graph" ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  ui:prototype """
<ui:group let:projectId=\"{= teamwork:graphIdFromMasterGraph(?projectGraph) }\" let:selectResourceType=\"{= spl:objectInGraph(?projectType, edg:selectResourceType, ui:graph) }\" let:tagPart=\"{= IF(bound(?tag), CONCAT(&quot;.&quot;, teamwork:tagId(?tag)), &quot;&quot;) }\" let:viewpointClass=\"{= spl:objectInGraph(?projectType, teamwork:mainClass, ui:graph) }\">
    <ui:if let:viewpointPart=\"{= IF(bound(?viewpointClass), CONCAT(&quot;viewPointClass=&quot;, ENCODE_FOR_URI(str(?viewpointClass))), &quot;&quot;) }\" ui:condition=\"{= bound(?viewpointClass) }\">
        <ui:if let:selectResourcePart=\"{= IF(bound(?selectResourceType), CONCAT(&quot;&amp;resourceType=&quot;, ENCODE_FOR_URI(str(?selectResourceType))), &quot;&quot;) }\" ui:condition=\"{= bound(?viewpointClass) }\">
            <ui:return ui:result=\"{= ?projectId }{= ?tagPart }.editor?{= ?viewpointPart }{= ?selectResourcePart }\"/>
        </ui:if>
        <ui:else>
            <ui:return ui:result=\"{= ?projectId }{= ?tagPart }.editor?{= ?viewpointPart }\"/>
        </ui:else>
    </ui:if>
    <ui:else>
        <ui:return ui:result=\"{= ?projectId }{= ?tagPart }.editor\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a hyperlink to open an editor for a given resource in a given project/tag combination with optional selection of menu item." ;
  rdfs:label "make editor link" ;
  rdfs:subClassOf ui:Functions ;
.
teamwork:maxCount1Restriction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "r" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdfs:domain ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "r" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "r" ;
              ] ;
          ]
          [
            sp:object 1 ;
            sp:predicate owl:maxCardinality ;
            sp:subject [
                sp:varName "r" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the restriction of." ;
    ] ;
  spin:returnType owl:Restriction ;
  rdfs:comment "For a given property, this function gets the owl:Restriction with owl:maxCardinality 1 at the domain class." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:metadataGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:unionOfGraphs ;
                sp:arg1 [
                    a teamwork:unionGraphForCurrentUser ;
                  ] ;
                sp:arg2 <http://topbraid.org/metadata> ;
                sp:arg3 <http://topbraid.org/teamwork> ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the graph that shall be used to search across metadata of all teamwork graphs accessible by the current user." ;
  rdfs:label "metadata graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:minCount1Restriction
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "r" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "class" ;
              ] ;
            sp:predicate rdfs:domain ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "r" ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "r" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "any" ;
              ] ;
            sp:predicate owl:minCardinality ;
            sp:subject [
                sp:varName "r" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
      rdfs:comment "The property to get the restriction of." ;
    ] ;
  spin:returnType owl:Restriction ;
  rdfs:comment "For a given property, this function gets the owl:Restriction with owl:minCardinality at the domain class." ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:navMenuLabel
  a rdf:Property ;
  rdfs:comment "The label that shows up for project types on the Navgation Menu" ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "Navigation Menu Label" ;
  rdfs:range xsd:string ;
.
teamwork:navMenuProjectTypeLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate teamwork:navMenuLabel ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The project type (URI resource)." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Gets a label in plural form describing a given project type, such as\"Taxonomies\" or \"Ontologies\" for the navigation menu" ;
  rdfs:label "navigation menu project type label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:onOpenResource
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "teamwork.onOpenResource('swa:ViewFormGadgetWindow', { fixedResource: true, resourceSelectedEvent: '" ;
                sp:arg2 [
                    sp:varName "resourceSelectedEvent" ;
                  ] ;
                sp:arg3 "', resource: resource, showType: true, showURI: true }, 'east')" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceSelectedEvent ;
      spl:valueType xsd:string ;
      rdfs:comment "The event to fire on resource selection." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "A convenience method that produces a JavaScript snippet to be used as context value of swaOnOpenResource." ;
  rdfs:subClassOf swa:Functions ;
.
teamwork:openEditorLink
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:deepLink ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The deep-linked resource." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  ui:prototype """
<ui:group let:projectId=\"{= teamwork:graphIdFromMasterGraph(?projectGraph) }\">
    <ui:if ui:condition=\"{= bound(?tag) }\">
        <ui:return ui:result=\"{= ?projectId }.{= teamwork:tagId(?tag) }.editor#{= ui:encodeURL(?deepLink) }\"/>
    </ui:if>
    <ui:else>
        <ui:return ui:result=\"{= ?projectId }.editor#{= ui:encodeURL(?deepLink) }\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Creates a hyperlink to open an editor for a given resource in a given project/tag combination." ;
  rdfs:label "open editor link" ;
  rdfs:subClassOf ui:Functions ;
.
teamwork:owlImports
  a rdf:Property ;
  rdfs:comment "A space-separated list of URIs that shall be added as owl:import to new projects of this type. Examples include the SKOS core namespace. This property may have multiple values, and each of them may be a space-separated list." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "owl imports" ;
  rdfs:range xsd:string ;
.
teamwork:pluginCannotBeDisabled
  a rdf:Property ;
  rdfs:comment "True to make sure that this plugin cannot be disabled (on the Configure Features page)." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "plugin cannot be disabled" ;
  rdfs:range xsd:boolean ;
.
teamwork:pluginIndex
  a rdf:Property ;
  rdfs:comment "Index used for sorting within the list of plugins on the screen. Default is 0. Larger numbers make it appear further right." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "plugin index" ;
  rdfs:range xsd:integer ;
.
teamwork:pluginMayNotScale
  a rdf:Property ;
  rdfs:comment "Can be attached to a teamwork:ProjectPlugin to indicate that it may cause performance problems for large graphs. Managers may decide to switch such feature off." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "plugin may not scale" ;
  rdfs:range xsd:boolean ;
.
teamwork:pluginRequiresRole
  a rdf:Property ;
  rdfs:comment "A permission role such as teamwork:manager that the current user needs to have for the plugin to be activated." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "plugin requires role" ;
  rdfs:range teamwork:PermissionRoleProperty ;
.
teamwork:pluginValidExpression
  a rdf:Property ;
  rdfs:comment "May point to a SPARQL expression producing an xsd:boolean (possibly just \"true\") to check whether the associated ProjectPlugin is valid for a given ProjectType (which is accessible using the variable ?projectType), project graph (?projectGraph), and tag (?tag). If set to true then this plugin is valid for all teamwork:ProjectTypes and it no longer needs to be referenced by each project type via teamwork:projectPlugin." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "plugin valid expression" ;
.
teamwork:populateProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph, e.g. <urn:x-evn-master:test>." ;
    ] ;
  rdfs:comment """Replaces the content of the currently active graph with the results of a script that is assumed to be associated with the master graph's owl:Ontology using prov:wasGeneratedBy. The currently active graph should either be a master graph, a master graph with user name component or a working copy graph - all without imports. The script is expected to be a known SWP element that uses ui:return to produce a result graph. The triples of that result graph will be used to overwrite all triples from the active (target) graph. However, any triples that have the script itself as subject will be ignored, and furthermore the triples that have the owl:Ontology as subject will not be overwritten. The latter policy makes sure that the system relevant triples such as the pointer to the update script itself or the project type are not overwritten. Finally, the property prov:endedAtTime of the SWP script resource will be set to the current time stamp.

Note this throws an exception if the script is not found or does not return a valid graph, so this should only be called if this has been verified beforehand.""" ;
  rdfs:label "populate project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:projectConstructor
  a rdf:Property ;
  rdfs:comment "Can link a ProjectType with one or more SWP elements that will be executed during the creation of the new database. These SWP elements may add extra triples into the new graph. The default query graph will be the newly created database, and ui:currentQueryGraph() can be used to retrieve the current ?projectGraph. Note that constructors must not produce any output, i.e. they can only perform side effects such as ui:updates." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project constructor" ;
  rdfs:range ui:Element ;
.
teamwork:projectEditableContentsFunction
  a rdf:Property ;
  rdfs:comment "Optionally allows custom logic for determining whether the contents of the project are considered editable, for example to prevent the user from editing content that is synced from a remote source. If present, the property must point to a SPIN function taking a single argument ?projectGraph and returning an xsd:boolean. If the function returns false, the contents of the project cannot be modified in the editor app, even if the user otherwise has the necessary permissions. Project settings and project metadata are not affected by this." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project editable contents function" ;
  rdfs:range spin:Function ;
.
teamwork:projectEditorClass
  a rdf:Property ;
  rdfs:comment """DEPRECATED: this is for \"old\" 6.2 editors only. Migrate to the new editors, e.g. via teamwork:defaultLayout.

Points to the SWP element that shall be used to edit projects of this type as default. Use teamwork:projectEditorClassOption for alternative editors that users can navigate to.""" ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project editor class" ;
  rdfs:range ui:NodeClass ;
.
teamwork:projectEditorClassOption
  a rdf:Property ;
  rdfs:comment """DEPRECATED: this is for \"old\" 6.2 editors only. Migrate to the new editors, e.g. via teamwork:defaultLayout.

Points to the SWP element that can be used to edit projects of this type. Use teamwork:projectEditorClass for the default editor. Note that once multiple such editors have been defined then each of them requires a value for teamwork:faIcon with the name of an FA icon for the tool bar buttons.""" ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project editor class option" ;
  rdfs:range ui:NodeClass ;
.
teamwork:projectLink
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "A working copy, or unbound for production copy" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType teamwork:Page ;
      rdfs:comment "The view class to use, or teamwork:ProjectPage if unbound" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "A project graph" ;
    ] ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?arg1 }\" arg:tag=\"{= ?arg2 }\" ui:viewClass=\"{= COALESCE(?arg3, teamwork:ProjectPage) }\">
    <ui:return ui:result=\"{= ?link }\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Returns a link to the project page (or some other page, ?arg3) for a given project graph and tag (?arg1 and ?arg2). WARNING: This is comparatively slow and should be avoided for frequently called code." ;
  rdfs:label "project link" ;
  rdfs:subClassOf ui:Functions ;
.
teamwork:projectOrTagGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "tag" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:iri ;
                    sp:arg1 [
                        a sp:concat ;
                        sp:arg1 "urn:x-evn-tag:" ;
                        sp:arg2 [
                            a teamwork:graphIdFromGraph ;
                            arg:graph [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        sp:arg3 ":" ;
                        sp:arg4 [
                            a teamwork:tagId ;
                            arg:tag [
                                sp:varName "tag" ;
                              ] ;
                          ] ;
                        sp:arg5 ":" ;
                        sp:arg6 [
                            a smf:currentUserName ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag if any." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base graph." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Takes a project graph URI resource (e.g. urn:x-evn-master:geo) and a tag URI resource and either returns the project graph (if tag is unbound) or the corresponding urn:x-evn-tag:geo:userName graph if ?tag is bound." ;
  rdfs:label "project or tag graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:projectPlugin
  a rdf:Property ;
  rdfs:comment "Points to the plugins that are valid for this project type." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project plugin" ;
  rdfs:range teamwork:ProjectPlugin ;
.
teamwork:projectPluginForAdminsOnly
  a rdf:Property ;
  rdfs:comment "Can be attached to the ontology in a TCH graph to mark plugins as only available to administrators. This can be used to prevent accidental usage by average users." ;
  rdfs:label "project plugin for admins only" ;
  rdfs:range teamwork:ProjectPlugin ;
.
teamwork:projectSummaryClass
  a rdf:Property ;
  rdfs:comment "Can point to a subclass of teamwork:ProjectSummaries that has a compact rendering of a given project from the EVN home page." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "project summary class" ;
  rdfs:range teamwork:ProjectSummary ;
.
teamwork:projectTypeByPluralName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "projectType" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "label" ;
                    ] ;
                  sp:predicate teamwork:pluralLabel ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  spin:returnType teamwork:ProjectType ;
  rdfs:label "project type by plural name" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:projectTypeLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a ui:concat ;
                sp:arg1 "swp?_viewClass=teamwork:AssetsPage&type=" ;
                sp:arg2 [
                    a sp:encode_for_uri ;
                    sp:arg1 [
                        a teamwork:pluralProjectTypeLabel ;
                        arg:projectType [
                            sp:varName "projectType" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType teamwork:ProjectType ;
      rdfs:comment "The teamwork:ProjectType to link to." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Creates a link to the page that lists all readable asset collections for a given project type." ;
  rdfs:label "project type link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:publishProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withImports ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Publish imports flag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project to publish." ;
    ] ;
  rdfs:comment "A control element used during the server handler that publishes a project to Explorer." ;
  rdfs:label "publish project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:publisher
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "creator" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "creator" ;
                          ] ;
                        sp:predicate dcterms:creator ;
                        sp:subject [
                            sp:varName "projectGraph" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Gets the dcterms:creator of a given published vocabulary." ;
  rdfs:label "publisher" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:refreshRecordDetailsFlags
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The ID of the master graph to reset." ;
    ] ;
  ui:private true ;
  rdfs:comment "An internal control element that has such a secret purpose that we don't even document it." ;
  rdfs:label "refresh record details flags" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:replaceURIInImportingGraphs
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:new ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The new URI resource." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:old ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The old URI resource." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:sourceGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The source graph that had the old resource." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:silentTransactions=\"{= true }\">
    <uix:asAdmin>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?graph
                WHERE {
                    {
                        rdf:nil teamwork:graphsUnderTeamControl ( ?graph ?tch ) .
                        FILTER (?graph != ?sourceGraph) .
                    } .
                    FILTER EXISTS {
                        {
                            BIND (ui:graphWithImports(?graph) AS ?gwi) .
                        } .
                        GRAPH ?gwi {
                            {
                                ?graph (owl:imports)* ?sourceGraph .
                            }
                            UNION
                            {
                                ?graph (tagger:objectGraph|tagger:subjectGraph)/(owl:imports)* ?sourceGraph .
                            } .
                        } .
                    } .
                } }\">
            <swa:replaceURIInGraph ui:args=\"*\"/>
        </ui:forEach>
    </uix:asAdmin>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment """Replaces all occurrances of a given URI resource in all graphs that directly or indirectly owl:import a given source graph.

This operation can be performed after the original renaming in the source graph has taken place. Note that this should not be used if the source graph is a working copy.""" ;
  rdfs:subClassOf ui:Methods ;
.
teamwork:requiresPropertyAxiomSection
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "predicate" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:exists ;
                            sp:elements (
                                [
                                  a sp:TriplePath ;
                                  sp:object [
                                      sp:varName "any" ;
                                    ] ;
                                  sp:path [
                                      a sp:AltPath ;
                                      sp:path1 [
                                          a sp:AltPath ;
                                          sp:path1 [
                                              a sp:AltPath ;
                                              sp:path1 rdfs:subPropertyOf ;
                                              sp:path2 rdfs:range ;
                                            ] ;
                                          sp:path2 rdfs:domain ;
                                        ] ;
                                      sp:path2 owl:inverseOf ;
                                    ] ;
                                  sp:subject [
                                      sp:varName "predicate" ;
                                    ] ;
                                ]
                              ) ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object owl:FunctionalProperty ;
                              sp:predicate rdf:type ;
                              sp:subject [
                                  sp:varName "predicate" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "domain" ;
                            ] ;
                          sp:predicate rdfs:domain ;
                          sp:subject [
                              sp:varName "predicate" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "restriction" ;
                            ] ;
                          sp:predicate rdfs:subClassOf ;
                          sp:subject [
                              sp:varName "domain" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "predicate" ;
                            ] ;
                          sp:predicate owl:onProperty ;
                          sp:subject [
                              sp:varName "restriction" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "anyCard" ;
                            ] ;
                          sp:predicate owl:maxCardinality ;
                          sp:subject [
                              sp:varName "restriction" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "requires property axiom section" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:resetPrefixMaps
  a ui:NodeClass ;
  ui:private true ;
  rdfs:label "reset prefix maps" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:searchLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "../" ;
                sp:arg2 [
                    a spif:lowerCase ;
                    sp:arg1 [
                        a teamwork:getProductAbbreviation ;
                      ] ;
                  ] ;
                sp:arg3 "/search" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "home link" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:serverAdminLink
  a spin:Function ;
  a teamwork:MainMenuLink ;
  edg.v:icon "fa-wrench" ;
  arg:visibility [
      a uix:isAdmin ;
    ] ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression "admin" ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where () ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  swa:tabIndex -950 ;
  rdfs:label "Server Administration" ;
  rdfs:subClassOf teamwork:MainMenuLinks ;
.
teamwork:setDomain
  a ui:Method ;
  ui:overrides swa:setDomain ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= teamwork:isSHACLPreferred() }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?domain a sh:NodeShape .
                    ?domain sh:property ?ps .
                    ?ps sh:path ?this .
                    ?ps a sh:PropertyShape .
                }
                WHERE {
                    BIND (swa:createPropertyShapeURI(false, ?this, ?domain) AS ?ps) .
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?this rdfs:domain ?domain .
                }
                WHERE {
                } }\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:setDomain ;
.
teamwork:setPrimaryMenuSessionState
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:state ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<swon:Object let:newState=\"{= IF((?state = &quot;isClosed&quot;), ?state, &quot;isOpen&quot;) }\">
    <swon:Value arg:name=\"primary-nav-state\" arg:value=\"{= ?newState }\"/>
    <ui:group let:dummy=\"{= ui:setSessionAttribute(&quot;primary-nav-state&quot;, ?newState) }\"/>
</swon:Object>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "set primary menu session state" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:setTagStatusService
  a teamwork:SetTagStatusService ;
  arg:projectGraph [
      sp:varName "projectGraph" ;
    ] ;
  arg:status [
      sp:varName "status" ;
    ] ;
  arg:tag [
      sp:varName "tag" ;
    ] ;
  ui:name "setTagStatusService" ;
  rdfs:label "set tag status service" ;
.
teamwork:spinImports
  a rdf:Property ;
  rdfs:comment "A space-separated list of URIs that shall be added as spin:import to new projects of this type." ;
  rdfs:domain teamwork:ProjectType ;
  rdfs:label "SPIN imports" ;
  rdfs:range xsd:string ;
.
teamwork:tagStatus
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "status" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "teamGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tag ;
      spl:valueType teamwork:Tag ;
      rdfs:comment "The tag." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType owl:Ontology ;
      rdfs:comment "The team graph to query." ;
    ] ;
  spin:returnType teamwork:TagStatus ;
  rdfs:comment "Gets the current status of a given tag within a given team graph." ;
  rdfs:label "tag status" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:tasksActivated
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate cfg:teamworkTasksActivated ;
                  sp:subject [
                      sp:varName "any" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current installation has Tasks activated, using the configuration page." ;
  rdfs:label "tasks activated" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:teamProject
  a teamwork:ProjectPage ;
  arg:projectGraph [
      sp:varName "projectGraph" ;
    ] ;
  ui:name "teamProject" ;
  rdfs:label "teamProject" ;
.
teamwork:templateQuery
  a rdf:Property ;
  dcterms:title "Links a teamwork project type with the query templates that shall be made available under the \"Execute Template Query\" button. Currently this is only supported by the Ontology editor and for SPIN SELECT queries but it can be added to most other event-based editors too. The templates need to be defined in the UI graph (.ui.ttlx file)." ;
  rdfs:label "template query" ;
  rdfs:range spin:SelectTemplate ;
.
teamwork:uncommittedTagCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "status" ;
                    ] ;
                  sp:predicate teamwork:status ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  sp:object teamwork:Tag ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "tag" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:ne ;
                      sp:arg1 [
                          sp:varName "status" ;
                        ] ;
                      sp:arg2 teamwork:Committed ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph." ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:label "uncommitted tag count " ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:unpublishProject
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project to unpublish." ;
    ] ;
  rdfs:comment "A control element used during the server handler that unpublishes a project from Explorer." ;
  rdfs:label "unpublish project" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:userLabel
  a spin:Function ;
  a owl:DeprecatedClass ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:userName ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType sioc:UserAccount ;
      rdfs:comment "The user to get the label of." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment """DEPRECATED: use teamwork:userName instead.

Gets the display label of a given user (?arg1).""" ;
  rdfs:label "user label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:userLinkFunction
  a rdf:Property ;
  rdfs:comment "Points to a function that returns a URL for a user page within the app. The function takes a single argument, a <urn:x-tb-users:...> resource." ;
  rdfs:domain teamwork:Product ;
  rdfs:label "user link function" ;
  rdfs:range spin:Function ;
  rdfs:subPropertyOf sp:arg ;
.
teamwork:userOrRoleLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a smf:isRole ;
                    arg:resource [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 "Security Role " ;
                    sp:arg2 [
                        a smf:roleName ;
                        arg:resource [
                            sp:varName "resource" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a smf:userDisplayName ;
                    arg:user [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The user or role to get the label of." ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns \"Security Role \" and the name of the role or user, depending on the type of user role passed as an argument." ;
  rdfs:label "user or role label" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:validForACResults
  a rdf:Property ;
  rdfs:comment "True if this plugin can be used when the user is in a tag (working copy) generated by the AutoClassifier." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "valid for AutoClassifier results" ;
  rdfs:range xsd:boolean ;
.
teamwork:validForTags
  a rdf:Property ;
  rdfs:comment "True if this plugin can also be used when the user is in a tag (working copy)." ;
  rdfs:domain teamwork:ProjectPlugin ;
  rdfs:label "valid for tags" ;
  rdfs:range xsd:boolean ;
.
teamwork:workflowsInProgressCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "tag" ;
                  ] ;
              ] ;
            sp:varName "tagCount" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate teamwork:tags ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tag" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tagLabel" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:hasTagTransitions ;
                arg:projectGraph [
                    sp:varName "projectGraph" ;
                  ] ;
                arg:tag [
                    sp:varName "tag" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:teamGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:comment "Returns the number of in-progress workflows (a.k.a. uncommitted working copies) for a given project. Project graph and team graph must be provided." ;
  rdfs:label "workflows in progress count" ;
  rdfs:subClassOf spin:Functions ;
.
<http://topbraid.org/teamwork.ui>
  a owl:Ontology ;
  teamwork:importableSystemGraph <http://datashapes.org/schema> ;
  teamwork:importableSystemGraph <http://qudt.org/vocab/unit> ;
  teamwork:importableSystemGraph <http://topbraid.org/corpus> ;
  teamwork:importableSystemGraph <http://topbraid.org/fibo-all> ;
  teamwork:importableSystemGraph <http://www.linkedmodel.org/schema/vaem> ;
  teamwork:importableSystemShapesGraph <http://datashapes.org/graphql> ;
  teamwork:importableSystemShapesGraph <http://datashapes.org/sparql> ;
  teamwork:importableSystemShapesGraph <http://spinrdf.org/spl> ;
  teamwork:importableSystemShapesGraph <http://topbraid.org/skos-xl.shapes> ;
  teamwork:importableSystemShapesGraph <http://topbraid.org/skos.shapes> ;
  teamwork:importableSystemShapesGraph <http://topbraid.org/strkind> ;
  teamwork:importableSystemShapesGraph <http://www.w3.org/2004/02/skos/core> ;
  rdfs:comment "A collection of APIs for programmatically creating and cloning asset collections and for finding resources within asset collections based on their full or partial URIs." ;
  rdfs:label "Teamwork UI Elements and Modules" ;
  owl:imports <http://teamwork.topbraidlive.org/ui/savedQueries> ;
  owl:imports <http://teamwork.topbraidlive.org/ui/tracker> ;
  owl:imports <http://teamwork.topbraidlive.org/ui/userdata.ui> ;
  owl:imports <http://topbraid.org/crosswalk.spin> ;
  owl:imports <http://topbraid.org/metadata> ;
  owl:imports <http://topbraid.org/metadata.ui> ;
  owl:imports safconfig: ;
  owl:imports <http://topbraid.org/safindex> ;
  owl:imports <http://topbraid.org/shacl/ui> ;
  owl:imports <http://topbraid.org/solr> ;
  owl:imports <http://topbraid.org/sparqlmotionlib-swp> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/swaclasses> ;
  owl:imports <http://topbraid.org/teamwork.spin> ;
  owl:imports <http://topbraid.org/teamworkcomments> ;
  owl:imports <http://topbraid.org/teamworkdashboard> ;
  owl:imports <http://topbraid.org/teamworkflows> ;
  owl:imports <http://topbraid.org/teamworkgovernance.ui> ;
  owl:imports <http://topbraid.org/teamworkimporters.ui> ;
  owl:imports <http://topbraid.org/teamworknotifications> ;
  owl:imports <http://topbraid.org/teamworkreports> ;
  owl:imports <http://topbraid.org/teamworktransforms> ;
  owl:imports <http://topbraid.org/textindex> ;
  owl:imports <http://topbraid.org/tosh.ui> ;
.
uix:asAdmin
  a ui:NodeClass ;
  ui:private true ;
  rdfs:label "as admin" ;
  rdfs:subClassOf ui:ControlElement ;
.
uix:getTBVersion
  a spin:Function ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the cureent TopBraid Version" ;
  rdfs:label "Get TB Version" ;
  rdfs:subClassOf spin:Functions ;
.
uix:hasPrincipal
  a spin:Function ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Returns true if servlet container security has been activated for the current UISPIN request." ;
  rdfs:label "has principal" ;
  rdfs:subClassOf spin:Functions ;
.
rdf:Property
  ui:instanceView """
<teamwork:SimplePropertyFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= 0 }\"/>
"""^^ui:Literal ;
.
rdfs:Class
  ui:instanceView """
<teamwork:SimpleClassFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= 0 }\"/>
"""^^ui:Literal ;
.
rdfs:Resource
  ui:instanceView """
<teamwork:SimpleResourceFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= 0 }\"/>
"""^^ui:Literal ;
.
owl:DatatypeProperty
  ui:instanceView """
<teamwork:SimpleDatatypePropertyFormBody arg:resource=\"{= ?this }\" ui:id=\"form\" ui:priority=\"{= 0 }\"/>
"""^^ui:Literal ;
.
owl:Ontology
  ui:instanceView """
<teamwork:PermissionsAssignmentFormBody arg:resource=\"{= ?this }\" ui:id=\"roles\"/>
"""^^ui:Literal ;
  ui:instanceView """
<teamwork:ProjectSummaryView arg:projectGraph=\"{= ?this }\" arg:withProjectType=\"{= true }\" ui:id=\"summary\"/>
"""^^ui:Literal ;
.
[
  sp:varName "tabName" ;
].
