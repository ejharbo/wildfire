# baseURI: http://topbraid.org/teamworkcomments
# imports: http://topbraid.org/teamwork.ui

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:vote
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:votedToStatus
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
teamwork:AddCommentHandler
  rdf:type swa:EditHandlerClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The comment to add." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:vote ;
      spl:valueType teamwork:Vote ;
      rdfs:comment "An (optional) vote." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:votedToStatus ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The \"to\" status of a vote." ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:tag=\"{= teamwork:currentTag() }\" let:teamGraph=\"{= teamwork:currentTeamGraph() }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction ui:logMessage=\"Added comment\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?post a sioc:Post .
                        ?post sioc:about ?resource .
                        ?post rdfs:comment ?htmlComment .
                        ?post dcterms:created ?date .
                        ?post sioc:has_creator ?creator .
                        ?post teamwork:commentTag ?tag .
                        ?post teamwork:postStatus teamwork:PostStatusOpen .
                        ?post teamwork:votedToStatus ?votedToStatus .
                        ?post teamwork:vote ?vote .
                    }
                    WHERE {
                        BIND (spif:cast(?comment, rdf:HTML) AS ?htmlComment) .
                        BIND (IRI(CONCAT(&quot;urn:x-evn-comment:&quot;, spif:generateUUID())) AS ?post) .
                        BIND (now() AS ?date) .
                        BIND (smf:userWithName(smf:currentUserName()) AS ?creator) .
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:ResourceEditHandlers ;
.
teamwork:AddFeedbackHandler
  rdf:type swa:EditHandlerClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:emailAddress ;
      spl:valueType xsd:string ;
      rdfs:comment "The entered email address." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:feedback ;
      spl:valueType xsd:string ;
      rdfs:comment "The comment to add." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The original project graph." ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:edgServer=\"{= spl:objectInGraph(config:configuration, cfg:editorServer, &lt;http://server.topbraidlive.org/dynamic/config&gt;) }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), &quot;Anonymous&quot;) }\">
    <ui:if ui:condition=\"{= bound(?edgServer) }\">
        <ui:group let:edgUserName=\"{= spl:objectInGraph(config:configuration, cfg:editorServerUserName, &lt;http://server.topbraidlive.org/dynamic/config&gt;) }\">
            <sml:PostRequest arg:_viewClass=\"teamwork:AddFeedbackLocallyHandler\" arg:emailAddress=\"{= teamwork:userEmail(smf:userWithName(smf:currentUserName())) }\" arg:feedback=\"{= ?feedback }\" arg:projectGraph=\"{= ?projectGraph }\" arg:resource=\"{= ?resource }\" arg:userName=\"{= ?userName }\" sm:outputVariable=\"response\" sml:url=\"{= str(?edgServer) }\" sml:userName=\"{= ?edgUserName }\">{= ?response }</sml:PostRequest>
        </ui:group>
    </ui:if>
    <ui:else>
        <teamwork:AddFeedbackLocallyHandler arg:userName=\"{= ?userName }\" ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add feedback handler" ;
  rdfs:subClassOf swa:ResourceEditHandlers ;
.
teamwork:AddFeedbackLocallyHandler
  rdf:type swa:EditHandlerClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:emailAddress ;
      spl:valueType xsd:string ;
      rdfs:comment "The entered email address." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The user name." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:feedback ;
      spl:valueType xsd:string ;
      rdfs:comment "The feedback string." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The EVN project graph." ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction ui:logMessage=\"Added feedback from Explorer\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?post a sioc:Post .
                        ?post sioc:about ?resource .
                        ?post rdfs:comment ?htmlfeedback .
                        ?post dcterms:created ?date .
                        ?post sioc:has_creator ?creator .
                        ?post teamwork:external true .
                        ?post teamwork:emailAddress ?emailAddressOrNull .
                        ?post teamwork:postStatus teamwork:PostStatusOpen .
                    }
                    WHERE {
                        BIND (spif:cast(?feedback, rdf:HTML) AS ?htmlfeedback) .
                        BIND (IRI(CONCAT(&quot;urn:x-evn-comment:&quot;, spif:generateUUID())) AS ?post) .
                        BIND (now() AS ?date) .
                        BIND (smf:userWithName(?userName) AS ?creator) .
                        BIND (IF((bound(?emailAddress) &amp;&amp; (?emailAddress != &quot;&quot;)), ?emailAddress, ?none) AS ?emailAddressOrNull) .
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Add feedback locally handler" ;
  rdfs:subClassOf swa:ResourceEditHandlers ;
.
teamwork:CommentView
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:external ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource commented on." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:status ;
      spl:valueType teamwork:PostStatus ;
      rdfs:comment "The current status of the post." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:tag ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The current working copy or unbound for master." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:vote ;
      spl:valueType teamwork:Vote ;
      rdfs:comment "The vote attached to this comment." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:votedToStatus ;
      spl:valueType teamwork:TagStatus ;
      rdfs:comment "The target status voted on." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:comment ;
      spl:valueType rdf:HTML ;
      rdfs:comment "The sioc:Post to display." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:post ;
      spl:valueType sioc:Post ;
      rdfs:comment "The sioc:Post." ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:teamGraph=\"{= COALESCE(IF(bound(?resource), teamwork:teamGraph(IRI(smf:definedIn(?resource))), ?none), teamwork:currentTeamGraph()) }\">
    <br/>
    <br/>
    <div class=\"teamwork-comment-view-comment-info\">
        <div class=\"swa-float-left\">
            <ui:if ui:condition=\"{= bound(?vote) }\">
                <i class=\"governance-icon icon-block fa fa-user swa-margin-right-ten\"/>
                <span>
                    <teamwork:UserLink arg:user=\"{= smf:userWithName(?userName) }\"/> voted&nbsp;<em>{= swa:labelInGraph(?vote, teamwork:workflowsGraph()) }</em>&nbsp;on moving to {= swa:labelInGraph(?votedToStatus, teamwork:workflowsGraph()) }</span>
            </ui:if>
            <ui:else>
                <span>
                    <i class=\"governance-icon icon-block fa fa-user swa-margin-right-ten\"/>
                    <teamwork:UserLink arg:user=\"{= smf:userWithName(?userName) }\"/>
                </span>
            </ui:else>
            <ui:if ui:condition=\"{= bound(?resource) }\">
                <div class=\"teamwork-comment-text\">
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IF(bound(?tag), teamwork:queryGraph(true, teamwork:currentGraphId(), teamwork:tagId(?tag), smf:currentUserName()), ?projectGraph)) }\">
                        <span>commented on </span>
                        <a href=\"{= teamwork:editorLink(?projectGraph, ?resource, ?tag) }\" title=\"{= ui:currentQueryGraph() }\">{= ui:label(?resource) }</a>
                    </ui:setContext>
                </div>
            </ui:if>
            <div>
                <span class=\"teamwork-comment-text\">{= ui:label(?date) } :</span>
            </div>
        </div>
        <div class=\"swa-float-right\" let:id=\"{= ui:uniqueId() }\">
            <span>Status:&nbsp;</span>
            <select autocomplete=\"off\" class=\"form-control\" disabled=\"{= IF(((smf:currentUserName() = ?userName) || teamwork:currentUserHasPrivilege(COALESCE(?tag, ?teamGraph), teamwork:editor, ?teamGraph)), ?none, &quot;disabled&quot;) }\" id=\"{= ?id }\">
                <ui:call ui:template=\"{= teamwork:AvailablePostStatuses }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <option selected=\"{= IF((?s = ?status), &quot;selected&quot;, ?none) }\" value=\"{= ?s }\">{= ?label }</option>
                    </ui:forEach>
                </ui:call>
                <ui:handle arg:newStatus=\"$('#{= ?id }').val() ? '&lt;' + $('#{= ?id }').val() + '&gt;' : null\" ui:event=\"onchange\">
                    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
                        <ui:setPropertyValue arg:property=\"{= teamwork:postStatus }\" arg:value=\"{= ?newStatus }\" ui:this=\"{= ?post }\"/>
                    </ui:setContext>
                </ui:handle>
            </select>
        </div>
        <div class=\"teamwork-comment-view-comment-spacing\"/>
        <ui:if ui:condition=\"{= bound(?comment) }\">
            <br/>
            <div class=\"teamwork-comment-text\">
                <teamwork:Spaces/>
                <teamwork:Spaces/>
                <ui:parse ui:str=\"{= ?comment }\"/>
            </div>
        </ui:if>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Comment view" ;
  rdfs:subClassOf teamwork:HistoryObjectView ;
.
teamwork:CommentsButtonBar
  rdf:type ui:NodeClass ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\">
    <ui:if ui:condition=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) }\">
        <ui:if ui:condition=\"{= teamwork:commentsActivated() }\">
            <button class=\"test-feedback-button btn btn-default btn-xs feedback-button\" data-graph=\"{= teamwork:currentMasterGraph() }\" data-origin=\"{= ?origin }\" data-resource=\"{= ?resource }\" onclick=\"teamwork.sendFeedback('{= ?resource }', '{= teamwork:currentMasterGraph() }', '{= ?origin }')\">
                <span aria-hidden=\"true\"/>Send Comment</button>
        </ui:if>
    </ui:if>
    <ui:else>
        <!--<teamwork:InlinePropertyWidget arg:resourceType=\"{= swa:resourceType(?resource) }\"
           arg:viewClass=\"edg:AvailableFiltersJSON\"/>-->
        <teamwork:StartTagWorkflowForResourceButton arg:resource=\"{= ?resource }\"/>
        <ui:if ui:condition=\"{= teamwork:tasksActivated() }\">
            <button class=\" btn btn-default btn-xs tasks-button\" data-resource=\"{= ?resource }\" onclick=\"{= ui:functionCall(&quot;tasks.viewTasks&quot;, ?resource) }\" title=\"View/Edit Tasks\">
                <span aria-hidden=\"true\"/>&nbsp;({= tasks:taskCount(?resource, teamwork:currentTeamGraph()) }) Tasks</button>
        </ui:if>
        <ui:if ui:condition=\"{= teamwork:commentsActivated() }\">
            <ui:if ui:condition=\"{= teamwork:tasksActivated() }\">
                <swa:Space/>
            </ui:if>
            <button class=\"btn btn-default btn-xs comments-button\" data-resource=\"{= ?resource }\" id=\"comments-button-{= ?id }\" onclick=\"{= ui:functionCall(&quot;teamwork.editComments&quot;, ?resource, ?null, ?id) }\" title=\"View/Edit Comments\">
                <span aria-hidden=\"true\"/>&nbsp;({= teamwork:commentsCount(?resource, teamwork:currentTeamGraph()) }) Comments</button>
        </ui:if>
    </ui:else>
    <teamwork:CrosswalksFormFooterPlugin arg:resource=\"{= ?resource }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Comments button bar" ;
  rdfs:subClassOf swa:SwitchableFormFooterPlugins ;
.
teamwork:CommentsDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display comments about." ;
    ] ;
  ui:prototype """
<ui:setContext ui:varName=\"isDialog\" ui:varValue=\"{= true }\">
    <div id=\"div-comments-dialog\" title=\"Comments for {= ui:label(?resource) }\">
        <ui:call arg:matchTag=\"{= teamwork:currentTag() }\" arg:resource=\"{= ?resource }\" ui:template=\"{= teamwork:CommentsOnResource }\">
            <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                <h3>Comments ({= spr:rowCount(?rs) })</h3>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <teamwork:CommentView arg:comment=\"{= ?comment }\" arg:date=\"{= ?date }\" arg:external=\"{= ?external }\" arg:post=\"{= ?post }\" arg:resource=\"{= ?resource }\" arg:status=\"{= ?status }\" arg:userName=\"{= ?userName }\"/>
                </ui:forEach>
            </ui:if>
        </ui:call>
        <div>
            <h3>Add Comment</h3>
            <ui:group let:id=\"new-comment_{= ui:uniqueId() }\">
                <table class=\"rich-text-editor swa-width-one-hundred-percent\">
                    <tr>
                        <td>
                            <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= xsd:string }\" arg:uid=\"{= ?id }\"/>
                            <textarea class=\"form-control\" id=\"{= ?id }\" name=\"new-{= ?id }\" rows=\"4\"/>
                            <script>(function(){ setTimeout(function(){teamwork.initRichTextEditor('{= ?id }');},0); })()</script>
                        </td>
                        <td class=\"swa-align-top\">
                            <swa:LangSelector arg:uid=\"{= ?id }\"/>
                        </td>
                    </tr>
                </table>
            </ui:group>
        </div>
    </div>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Comments dialog" ;
  rdfs:subClassOf swa:DialogElements ;
.
teamwork:CommentsProjectTab
  rdf:type teamwork:ProjectTab ;
  teamwork:pluginIndex 45 ;
  teamwork:pluginValidExpression [
      rdf:type teamwork:commentsActivated ;
    ] ;
  teamwork:validForACResults "true"^^xsd:boolean ;
  teamwork:validForTags "true"^^xsd:boolean ;
  ui:prototype """
<div class=\"teamwork-comments-container\">
    <button class=\"btn btn-primary btn-sm create-comment-button\" onclick=\"teamwork.displayNewCommentForm()\">Create new comment</button>
    <div class=\"teamwork-new-comment\">
        <ui:group let:tagId=\"{= IF(bound(?tag), teamwork:tagId(?tag), ?nil) }\">
            <ui:group let:id=\"new-comment-{= ui:uniqueId() }\" let:queryGraph=\"{= teamwork:queryGraph(true, teamwork:graphIdFromMasterGraph(?projectGraph), ?tagId, smf:currentUserName()) }\">
                <h2>New Comment: </h2>
                <textarea class=\"form-control swa-width-one-hundred-percent\" id=\"{= ?id }\" rows=\"4\"/>
                <script>teamwork.initRichTextEditor('{= ?id }');</script>
                <br/>
                <button class=\"btn btn-default btn-xs\" onclick=\"{= ui:functionCall(&quot;teamwork.addComment&quot;, ?id, ?queryGraph, &quot;comments&quot;) }\">Add Comment</button>
                <button class=\"btn btn-default btn-xs\" onclick=\"{= ui:functionCall(&quot;teamwork.cancelNewComment&quot;, ?id) }\">Cancel</button>
            </ui:group>
        </ui:group>
    </div>
    <hr/>
    <h2>
        <ui:if ui:condition=\"{= bound(?tag) }\">
            <span>Comments on workflow <em>{= teamwork:tagLabel(?projectGraph, ?tag) }</em>
            </span>
        </ui:if>
        <ui:else>
            <span>Recent Comments</span>
        </ui:else>
        <div class=\"swa-float-right\" let:id=\"{= ui:uniqueId() }\">
            <span>Filter by Status:&nbsp;</span>
            <select autocomplete=\"off\" class=\"form-control\" id=\"{= ?id }\">
                <option value=\"all\">all</option>
                <ui:call ui:template=\"{= teamwork:AvailablePostStatuses }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <option value=\"{= ?s }\">{= ?label }</option>
                    </ui:forEach>
                </ui:call>
            </select>
            <script>$(\"#{= ?id }\").change(function() {
			var status = $('#{= ?id }').val();
			if(status != \"all\") {
				swa.loadWithResource('comments', 'matchStatus', status);
			}
			else {
				swa.loadWithResource('comments');
			}
		});</script>
        </div>
    </h2>
    <ui:if ui:condition=\"{= (!bound(?tag)) &amp;&amp; teamwork:currentUserIsProjectManager(?projectGraph) }\">
        <div>
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
                <ui:call arg:teamGraph=\"{= teamwork:currentTeamGraph() }\" ui:template=\"{= teamwork:OrphanComments }\">
                    <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
                        <teamwork:Spaces/>
                        <teamwork:Spaces/>
                        <teamwork:Spaces/>
                        <a class=\"swa-float-left\" href=\"javascript:void(0)\" onclick=\"teamwork.deleteOrphanComments('{= ?projectGraph }')\">Delete the {= spr:rowCount(?rs) } orphan comments about entities that no longer exist.</a>
                    </ui:if>
                </ui:call>
            </ui:setContext>
        </div>
    </ui:if>
    <br/>
    <ui:loadable ui:loadId=\"comments\">
        <ui:setContext ui:queryGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
            <ui:call arg:matchStatus=\"{= ?matchStatus }\" arg:matchTag=\"{= ?tag }\" ui:template=\"{= IF(bound(?tag), teamwork:TagComments, teamwork:RecentComments) }\">
                <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <teamwork:CommentView ui:args=\"*\"/>
                    </ui:forEach>
                </ui:setContext>
            </ui:call>
        </ui:setContext>
    </ui:loadable>
</div>
"""^^ui:Literal ;
  rdfs:label "Comments" ;
  rdfs:subClassOf teamwork:ProjectTabs ;
  rdfs:subClassOf teamwork:TagElements ;
.
teamwork:CommentsView
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sioc:about ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject of the comments." ;
    ] ;
  ui:prototype """
<div letrs:rs=\"{#
        SELECT ?post
        WHERE {
            ?post sioc:about ?about .
            ?post a sioc:Post .
            ?post dcterms:created ?created .
        }
        ORDER BY (?created) }\">
    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
        <h4>Comments</h4>
        <table class=\"teamwork-comments-view\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <tr>
                    <td class=\"teamworkComment\">
                        <teamwork:PostView arg:subject=\"{= ?post }\"/>
                    </td>
                </tr>
            </ui:forEach>
        </table>
    </ui:if>
    <p>
        <b>Add a comment</b>
        <ui:group let:datatype=\"{= xsd:string }\" let:id=\"new-comment\">
            <table class=\"rich-text-editor\">
                <tr>
                    <td>
                        <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= ?datatype }\" arg:uid=\"{= ?uid }\"/>
                        <textarea class=\"form-control teamwork-comment-add-text-area\" id=\"new-comment\" rows=\"4\"/>
                        <script>teamwork.initRichTextEditor('{= ?id }');</script>
                    </td>
                    <ui:if ui:condition=\"{= ?datatype = xsd:string }\">
                        <td class=\"swa-align-top\">
                            <swa:LangSelector arg:initialValue=\"{= lang(?object) }\" arg:uid=\"{= ?uid }\"/>
                        </td>
                    </ui:if>
                </tr>
            </table>
        </ui:group>
    </p>
</div>
"""^^ui:Literal ;
  rdfs:comment "A list of comments on a given subject (sioc:about), with a form at the bottom to add new comments." ;
  rdfs:label "Comments view" ;
  rdfs:subClassOf teamwork:ChangeElements ;
.
teamwork:HistoryObjectView
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:date ;
      spl:valueType xsd:dateTime ;
      rdfs:comment "The date." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the user who has committed the comment." ;
    ] ;
  rdfs:label "History object view" ;
  rdfs:subClassOf teamwork:Elements ;
.
teamwork:StatusChangeView
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:newStatus ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The new status of the change." ;
    ] ;
  ui:prototype """
<ui:group>
    <hr/>
    <div class=\"teamwork-comment-view-comment-info\">
        <span>
            <teamwork:UserLink arg:user=\"{= smf:userWithName(?userName) }\"/>
            <swa:Space/>changed status on {= ui:label(?date) } to</span>
        <swa:Space/>
        <em>{= swa:labelInGraph(?newStatus, teamwork:workflowsGraph()) }</em>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Status change view" ;
  rdfs:subClassOf teamwork:HistoryObjectView ;
.
teamwork:commentsActivated
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Ask ;
      sp:where (
          [
            rdf:type sp:NamedGraph ;
            sp:elements (
                [
                  sp:object "true"^^xsd:boolean ;
                  sp:predicate cfg:teamworkCommentsActivated ;
                  sp:subject [
                      sp:varName "any" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current installation has Comments activated, using the configuration page." ;
  rdfs:label "comments activated" ;
  rdfs:subClassOf spin:Functions ;
.
<http://topbraid.org/teamworkcomments>
  rdf:type owl:Ontology ;
  rdfs:comment "Components related to Comments in teamwork products - if only to reduce the size of the evergrowing teamwork.ui.ttlx file." ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
.
