# baseURI: http://teamwork.topbraidlive.org/ui/userdata.ui
# imports: http://topbraid.org/teamwork.ui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparql: <http://datashapes.org/sparql#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:project
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
<http://teamwork.topbraidlive.org/ui/userdata.ui>
  a owl:Ontology ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
teamwork:AddDefaultLayoutsService
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?layout ?oldP ?oldO .
                }
                INSERT {
                    ?layout ?p ?o .
                }
                WHERE {
                    GRAPH &lt;http://topbraid.org/defaultlayouts&gt; {
                        ?layout a teamwork:Layout .
                        ?layout ?p ?o .
                    } .
                    OPTIONAL {
                        ?layout ?oldP ?oldO .
                    } .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A service for administrators that will reinstall the default layouts." ;
  rdfs:label "Add default layouts service" ;
  rdfs:subClassOf tbladmin:AdminServices ;
.
teamwork:AddResourcesToAssetList
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceURIs ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of URIs to add." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext let:user=\"{= smf:userWithName(smf:currentUserName()) }\" ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?list teamwork:item ?item .
                    ?item a teamwork:AssetListItem .
                    ?item teamwork:asset ?resource .
                    ?item teamwork:itemCreator ?user .
                    ?item dcterms:created ?now .
                }
                WHERE {
                    ?uri spif:split ( ?resourceURIs &quot; &quot; ) .
                    BIND (IRI(?uri) AS ?resource) .
                    BIND (BNODE() AS ?item) .
                    BIND (now() AS ?now) .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Add resources to asset list" ;
  rdfs:subClassOf teamwork:AssetListServices ;
.
teamwork:AssetListServices
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The teamwork:AssetList to operate on." ;
    ] ;
  ui:errorPrototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <ui:if ui:condition=\"{= NOT EXISTS {
        ?list a teamwork:AssetList .
    } }\">
        <swon:Object>
            <swon:Value arg:name=\"error\" arg:value=\"Cannot perform server request: Asset list has been deleted.\"/>
        </swon:Object>
    </ui:if>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Asset list services" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:DeleteAllLayoutsService
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?layout a teamwork:Layout .
                    ?layout ?p ?o .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A service for administrators that will delete all teamwork:Layouts from the user data graph." ;
  rdfs:label "Delete all layouts service" ;
  rdfs:subClassOf tbladmin:AdminServices ;
.
teamwork:DeleteAssetList
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?list teamwork:item ?item .
                    ?item ?p ?o .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?list ?p ?o .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Delete asset list" ;
  rdfs:subClassOf teamwork:AssetListServices ;
.
teamwork:DeleteLayout
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:layout ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The teamwork:Layout to delete." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?layout ?p ?o .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "Deletes a given layout from the user data graph." ;
  rdfs:label "Delete layout" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GetAssetList
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<swon:Object let:userGraph=\"{= teamwork:userDataGraph() }\">
    <swon:Value arg:name=\"label\" arg:value=\"{= swa:labelInGraph(?list, ?userGraph) }\"/>
    <swon:Value arg:name=\"items\">
        <swon:RSObjectArray arg:resultSet=\"{#
                SELECT ?resource ?label ?user ?userLabel ?created
                WHERE {
                    GRAPH ?userGraph {
                        ?list teamwork:item ?item .
                        ?item teamwork:asset ?resource .
                        ?item dcterms:created ?created .
                        ?item teamwork:itemCreator ?user .
                        BIND (smf:userDisplayName(?user) AS ?userLabel) .
                    } .
                    BIND (ui:label(?resource) AS ?label) .
                } }\"/>
    </swon:Value>
</swon:Object>
"""^^ui:Literal ;
  rdfs:label "Get asset list" ;
  rdfs:subClassOf teamwork:AssetListServices ;
.
teamwork:GetAssetLists
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
    <swon:Object>
        <swon:Value arg:name=\"lists\">
            <swon:RSObjectArray arg:resultSet=\"{#
                    SELECT ?list ?label ?creator ?creatorName ?created ?projectGraph ?projectGraphLabel ?tag ?tagLabel
                    WHERE {
                        ?list a teamwork:AssetList .
                        ?list rdfs:label ?label .
                        ?list dcterms:created ?created .
                        ?list teamwork:listCreator ?creator .
                        BIND (smf:userDisplayName(?creator) AS ?creatorName) .
                        ?list teamwork:listProjectGraph ?projectGraph .
                        BIND (teamwork:graphLabel(?projectGraph) AS ?projectGraphLabel) .
                        BIND (spl:object(?list, teamwork:listTag) AS ?tag) .
                        BIND (IF(bound(?tag), teamwork:tagLabel(?projectGraph, ?tag), ?none) AS ?tagLabel) .
                    } }\"/>
        </swon:Value>
    </swon:Object>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Get asset lists" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GetLayouts
  a ui:JSONService ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<swon:Object let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
        <ui:group let:userName=\"{= smf:currentUserName() }\">
            <ui:group letrs:items=\"{#
                    SELECT ?layout ?label ?private ?projectType ?default ?json ?creator
                    WHERE {
                        ?layout a teamwork:Layout .
                        ?layout teamwork:creator ?creator .
                        ?layout teamwork:saveTimeStamp ?timeStamp .
                        ?layout rdfs:label ?label .
                        ?layout teamwork:json ?json .
                        BIND (EXISTS {
                            ?layout teamwork:defaultForProjectType ?projectType .
                        } AS ?default) .
                        BIND (spl:hasValue(?layout, teamwork:private, true) AS ?private) .
                        BIND (spl:object(?layout, teamwork:applicableToProjectType) AS ?pt) .
                        FILTER ((!bound(?pt)) || (?pt = ?projectType)) .
                        FILTER ((!?private) || (?creator = ?userName)) .
                    } }\">
                <swon:Value arg:name=\"data\">
                    <swon:Array>
                        <ui:forEach ui:resultSet=\"{= ?items }\">
                            <swon:Object>
                                <swon:Value arg:name=\"uri\" arg:value=\"{= ?layout }\"/>
                                <swon:Value arg:name=\"label\" arg:value=\"{= ?label }\"/>
                                <swon:Value arg:name=\"creator\" arg:value=\"{= ?creator }\"/>
                                <swon:Value arg:name=\"default\" arg:value=\"{= str(?default) }\"/>
                                <swon:Value arg:name=\"visibility\" arg:value=\"{= IF(?private, &quot;private&quot;, &quot;shared&quot;) }\"/>
                                <swon:Value arg:name=\"json\" arg:value=\"{= ?json }\"/>
                                <swon:Value arg:name=\"timeStamp\" arg:value=\"{= ?timeStamp }\"/>
                            </swon:Object>
                        </ui:forEach>
                    </swon:Array>
                </swon:Value>
            </ui:group>
        </ui:group>
    </ui:setContext>
</swon:Object>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:GetRecentCollections
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "pos" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a smf:userWithName ;
                sp:arg1 [
                    a smf:currentUserName ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "user" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:recentCollections ;
            sp:subject [
                sp:varName "user" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "pos" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "item" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns an ordered result set of the current users most recently used collections." ;
  rdfs:label "Get Recent Collections" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
teamwork:LayoutsUserDataPage
  a ui:NodeClass ;
  ui:prototype """
<tblui:PageContainer arg:title=\"Layouts\">
    <tblui:Section arg:label=\"Layouts stored in user data graph\">
        <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\">
            <p>The following Layouts have been either installed by default or have been saved by users.</p>
            <ui:loadable ui:loadId=\"layouts-table-loadable\">
                <table class=\"table table-compact table-nonfluid\">
                    <thead>
                        <th>Layout</th>
                        <th>Created By</th>
                        <th>Time Stamp</th>
                        <th>Private</th>
                        <th>Actions</th>
                    </thead>
                    <tbody>
                        <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
                                SELECT ?layout ?label ?creator ?timeStamp ?private
                                WHERE {
                                    ?layout a teamwork:Layout .
                                    BIND (spl:object(?layout, teamwork:creator) AS ?creator) .
                                    BIND (spl:object(?layout, teamwork:saveTimeStamp) AS ?timeStamp) .
                                    BIND (spl:object(?layout, teamwork:private) AS ?private) .
                                    BIND (ui:label(?layout) AS ?label) .
                                }
                                ORDER BY (?label) }\">
                            <tr>
                                <td title=\"{= ?layout }\">{= ?label }</td>
                                <td>{= ?creator }</td>
                                <td>{= ?timeStamp }</td>
                                <td>{= ?private }</td>
                                <td>
                                    <button class=\"btn btn-default btn-xs\">
                                        <span>Delete</span>
                                        <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"layouts-table-loadable\">
                                            <teamwork:DeleteLayout arg:layout=\"{= ?layout }\"/>
                                        </ui:handle>
                                    </button>
                                </td>
                            </tr>
                        </ui:forEach>
                    </tbody>
                </table>
            </ui:loadable>
            <button class=\"btn btn-default btn-xs\" title=\"Deletes all saved layouts including the default layouts\">
                <span>Delete All</span>
                <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"layouts-table-loadable\">
                    <teamwork:DeleteAllLayoutsService/>
                </ui:handle>
            </button>
            <swa:Spaces/>
            <button class=\"btn btn-default btn-xs\" title=\"Adds/replaces the default layouts bundled with the current version of TopBraid\">
                <span>Refresh System Layouts</span>
                <ui:handle ui:event=\"onclick\" ui:thenLoadId=\"layouts-table-loadable\">
                    <teamwork:AddDefaultLayoutsService/>
                </ui:handle>
            </button>
        </ui:setContext>
    </tblui:Section>
</tblui:PageContainer>
"""^^ui:Literal ;
  rdfs:label "Layouts user data page" ;
  rdfs:subClassOf tbladmin:AdminPages ;
.
teamwork:RemoveResourcesFromAssetList
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceURIs ;
      spl:valueType xsd:string ;
      rdfs:comment "A space-separated list of URIs of the resources to delete." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?list teamwork:item ?item .
                    ?item ?p ?o .
                }
                WHERE {
                    ?resourceURI spif:split ( ?resourceURIs &quot; &quot; ) .
                    BIND (IRI(?resourceURI) AS ?resource) .
                    ?item teamwork:asset ?resource .
                    ?list teamwork:item ?item .
                    ?item ?p ?o .
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Remove resources from asset list" ;
  rdfs:subClassOf teamwork:AssetListServices ;
.
teamwork:RenameAssetList
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The new label." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
    <ui:transaction>
        <ui:setPropertyValue arg:property=\"{= rdfs:label }\" arg:value=\"{= ?label }\" ui:this=\"{= ?list }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Rename asset list" ;
  rdfs:subClassOf teamwork:AssetListServices ;
.
teamwork:SaveLayout
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultForProjectType ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to make this the default for the given project type." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:private ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True if private" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The teamwork:ProjectType to associated this with." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:json ;
      spl:valueType xsd:string ;
      rdfs:comment "The JSON encoded layout." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:dfp=\"{= IF(?defaultForProjectType, ?projectType, ?none) }\" let:new=\"{= UUID() }\" let:now=\"{= now() }\" let:userName=\"{= smf:currentUserName() }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
        <ui:transaction>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?new a teamwork:Layout .
                        ?new rdfs:label ?label .
                        ?new teamwork:applicableToProjectType ?projectType .
                        ?new teamwork:defaultForProjectType ?dfp .
                        ?new teamwork:creator ?userName .
                        ?new teamwork:json ?json .
                        ?new teamwork:private ?private .
                        ?new teamwork:saveTimeStamp ?now .
                    }
                    WHERE {
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Used in the editor to save the users last used layout." ;
  rdfs:label "Save layout" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:ShareAssetList
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemsJSON ;
      spl:valueType xsd:string ;
      rdfs:comment "The (JSON encoded) items to add." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label of the list." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:list=\"{= IRI(CONCAT(&quot;urn:x-list:&quot;, STRUUID())) }\" let:now=\"{= now() }\" let:projectGraph=\"{= teamwork:currentMasterGraph() }\" let:tag=\"{= teamwork:currentTag() }\" let:user=\"{= smf:userWithName(smf:currentUserName()) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:userDataGraph() }\" ui:silentTransactions=\"{= true }\">
        <ui:transaction>
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?list a teamwork:AssetList .
                        ?list rdfs:label ?label .
                        ?list teamwork:listCreator ?user .
                        ?list teamwork:listProjectGraph ?projectGraph .
                        ?list teamwork:listTag ?tag .
                        ?list dcterms:created ?now .
                    }
                    WHERE {
                    } }\"/>
            <ui:json ui:str=\"{= ?itemsJSON }\" ui:varName=\"array\">
                <ui:forEach ui:resultSet='{#
                        SELECT ?resource ?timeStamp
                        WHERE {
                            ?array ui:jsonArrayMembers ?object .
                            BIND (ui:jsonString(ui:jsonValue(?object, \"resource\")) AS ?resourceURI) .
                            BIND (ui:jsonString(ui:jsonValue(?object, \"timeStamp\")) AS ?timeStampLex) .
                            BIND (IRI(?resourceURI) AS ?resource) .
                            BIND (xsd:dateTime(?timeStampLex) AS ?timeStamp) .
                        } }'>
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?item a teamwork:AssetListItem .
                                ?item teamwork:asset ?resource .
                                ?item dcterms:created ?timeStamp .
                                ?item teamwork:itemCreator ?user .
                                ?list teamwork:item ?item .
                            }
                            WHERE {
                                BIND (BNODE() AS ?item) .
                            } }\"/>
                </ui:forEach>
            </ui:json>
        </ui:transaction>
    </ui:setContext>
    <swon:Object>
        <swon:Value arg:name=\"uri\" arg:value=\"{= str(?list) }\"/>
    </swon:Object>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Shares a given asset list to the users graph." ;
  rdfs:label "Asset list set" ;
  rdfs:subClassOf ui:JSONServices ;
.
teamwork:prependRecentProjects
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:project ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "prepend recent projects" ;
  rdfs:subClassOf ui:ControlElement ;
.
teamwork:userDataGraph
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression <urn:x-evn-user-data> ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Resource ;
  rdfs:comment "Returns the URI of a special named graph that contains user data information. " ;
  rdfs:label "user data graph" ;
  rdfs:subClassOf spin:Functions ;
.
teamwork:userEmail
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:userDataGraph ;
              ] ;
            sp:variable [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a smf:userEmail ;
                      arg:user [
                          sp:varName "user" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "result" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional false ;
      spl:predicate arg:user ;
      spl:valueType sioc:UserAccount ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "Returns the email address (without \"mailto:\") of a user (<urn:x-tb-users:xyz>). Searches in a configured LDAP directory and in the user data graph (for property edg:email)." ;
  rdfs:label "user email" ;
  rdfs:subClassOf spin:Functions ;
.
