# baseURI: http://topbraid.org/safconfig/
# imports: http://saf.topbraidlive.org/metaschema/
# imports: http://server.topbraidlive.org/system-applications/tbladmin
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# prefix: safconfig

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:chainSelectable
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:classObject
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:configType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:containerId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:editorId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isIndeterminate
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:isLeaf
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:item
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:itemClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:itemType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:leaf
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:loadAll
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:loadOnDemand
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldOrder
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:oldStyle
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:order
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:parentNode
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:popoverClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:reload
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:state
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:viewType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
safconfig:
  a owl:Ontology ;
  owl:imports safm: ;
  owl:imports <http://server.topbraidlive.org/system-applications/tbladmin> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
safconfig:AddFacetSearchConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdf:Property ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER (?itemType != safm:facetable) .
                BIND (\"Invalid data type.\" AS ?result) .
            } }'>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?item ?itemType true .
                    ?item safm:facetOrder &quot;0&quot;^^xsd:int .
                }
                WHERE {
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddGraphService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= ?value }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?graph safm:graphSearchable true .
                }
                WHERE {
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?graph safm:graphSearchable true .
                }
                WHERE {
                } }\"/>
    </ui:else>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddResource
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:checked ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?graph safm:graphSearchable true .
            }
            WHERE {
            } }\"/>
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(?graph)) }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT DISTINCT ?class
                WHERE {
                    ?class (rdfs:subClassOf)* ?resource .
                } }\">
            <ui:if ui:condition=\"{= ?checked }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                                ?class safm:searchable true .
                                ?class safm:selectedBy ?graph .
                                ?class safm:treeState 1 .
                            } .
                        }
                        WHERE {
                            BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                            BIND (safconfig:GetMainClass(?thisType) AS ?rootClass) .
                            ?class (rdfs:subClassOf)+ ?rootClass .
                            FILTER ((isIRI(?class) &amp;&amp; (?class != owl:Nothing)) &amp;&amp; (?class != owl:NamedIndividual)) .
                        } }\"/>
            </ui:if>
            <ui:else>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                                ?class safm:treeState ?anyState .
                            } .
                        }
                        WHERE {
                            BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                            BIND (safconfig:GetMainClass(?thisType) AS ?rootClass) .
                            ?class (rdfs:subClassOf)+ ?rootClass .
                            ?class safm:treeState ?anyState .
                            FILTER ((isIRI(?class) &amp;&amp; (?class != owl:Nothing)) &amp;&amp; (?class != owl:NamedIndividual)) .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                                ?class safm:selectedBy ?graph .
                            } .
                        }
                        WHERE {
                            BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                            BIND (safconfig:GetMainClass(?thisType) AS ?rootClass) .
                            ?class (rdfs:subClassOf)+ ?rootClass .
                            FILTER ((isIRI(?class) &amp;&amp; (?class != owl:Nothing)) &amp;&amp; (?class != owl:NamedIndividual)) .
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                                ?class safm:searchable true .
                            } .
                        }
                        WHERE {
                            BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                            BIND (safconfig:GetMainClass(?thisType) AS ?rootClass) .
                            ?class (rdfs:subClassOf)+ ?rootClass .
                            FILTER ((isIRI(?class) &amp;&amp; (?class != owl:Nothing)) &amp;&amp; (?class != owl:NamedIndividual)) .
                            FILTER NOT EXISTS {
                                ?class safm:selectedBy ?anyGraph .
                            } .
                        } }\"/>
            </ui:else>
        </ui:forEach>
    </ui:setContext>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Bulk add project type" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddSearchConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdf:Property ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER ((((?itemType != safm:searchable) &amp;&amp; (?itemType != safm:facetable)) &amp;&amp; (?itemType != safm:textSearchable)) &amp;&amp; (?itemType != safm:semanticSearchable)) .
                BIND (\"Invalid data type.\" AS ?result) .
            } }'>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?item ?itemType true .
                }
                WHERE {
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddViewConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemClass ;
      spl:valueType owl:Class ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER NOT EXISTS {
                    ?itemClass rdfs:subClassOf safm:View .
                } .
                BIND (\"Invalid class.\" AS ?result) .
            } }'>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?item safm:onView ?itemClass .
                    ?item safm:viewOrder ?defaultOrder .
                    ?item safm:style ?defaultStyle .
                }
                WHERE {
                    OPTIONAL {
                        ?item safm:viewOrder ?sharedOrder .
                        ?item safm:style ?sharedStyle .
                    } .
                    BIND (COALESCE(?sharedOrder, xsd:int(0)) AS ?defaultOrder) .
                    BIND (COALESCE(?sharedStyle, safm:LabelLikeStyle) AS ?defaultStyle) .
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddViewOrderConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:oldOrder ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:order ;
      spl:valueType xsd:integer ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER ((?itemType != safm:viewOrder) &amp;&amp; (?itemType != safm:facetOrder)) .
                BIND (\"Invalid data type.\" AS ?result) .
            } }'>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?item ?itemType ?properOldOrder .
                }
                WHERE {
                    BIND (xsd:int(?oldOrder) AS ?properOldOrder) .
                    ?item ?itemType ?properOldOrder .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?item ?itemType ?properOrder .
                }
                WHERE {
                    BIND (xsd:int(?order) AS ?properOrder) .
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AddViewStyleConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:oldStyle ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:style ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER NOT EXISTS {
                    ?style rdfs:subClassOf safm:Style .
                } .
                BIND (\"Invalid data type.\" AS ?result) .
            } }'>
        <ui:if ui:condition=\"{= bound(?oldStyle) }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?item safm:style ?oldStyle .
                    }
                    WHERE {
                        ?item safm:style ?oldStyle .
                    } }\"/>
        </ui:if>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?item safm:style ?style .
                }
                WHERE {
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:AutoComplete
  a ui:NodeClass ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, users are allowed to enter arbitrary (external) URIs as long as they start with http and are well-formed URIs. Note that this bypasses any testing for type-conformance and should therefore be used with care." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:callback ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional CSS class that is used for the resulting text field." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional SPARQL function that takes one resource as its argument and returns true if the resource shall be included." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "An optional second argument to the filter function. This is only used if arg:filterFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initialValue ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The initial resource to place into the text field." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:menuFilterNode ;
      rdfs:comment "An optional argument that will be forwarded into the context menu, to filter some conditions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onSelect ;
      spl:valueType xsd:string ;
      rdfs:comment "A JavaScript snippet that shall be executed when the user selects a resource. The variable 'resource' will contain the URI of the selected value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:placeholder ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional placeholder text to appear in empty fields until the user enters something, e.g. \"Enter first name\"." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The rdf:type of the matching resources. Will also include subclasses of that type." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withSelectMenu ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a drop down menu at the right hand side, allowing users to open selection dialogs (e.g., faceted search) as an alternative way of populating the auto-complete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the HTML input element." ;
    ] ;
  ui:prototype """
<ui:createLink arg:allowURIs=\"{= ?allowURIs }\" arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:filterFunction=\"{= ?filterFunction }\" arg:filterFunctionArgument=\"{= ?filterFunctionArgument }\" arg:filterFunctionArgument2=\"{= ?filterFunctionArgument2 }\" arg:type=\"{= ?type }\" ui:sendQueryGraph=\"{= true }\" ui:snippet=\"true\" ui:viewClass=\"{= IF(bound(?callback), ?callback, swa:AutoCompleteCallback) }\">
    <input id=\"{= ?id }\" name=\"{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?initialValue, true, true) }\"/>
    <ui:group let:appName=\"{= swa:appName() }\" let:displayId=\"{= ?id }-field\">
        <input class=\"swa-auto-complete {= ?class } form-control\" id=\"{= ?displayId }\" placeholder=\"{= COALESCE(?placeholder, &quot;Start typing&quot;) }\" type=\"text\" value=\"{= ui:label(?initialValue) }\"/>
        <!-- <img alt=\"autocomplete drop-down\" class=\"swa-auto-complete-drop-down-img\" id=\"{= ?displayId }-drop-down\" src=\"{= ui:lib() }/swa/css/images/ContextMenu.gif\"/> -->
        <ui:if ui:condition=\"{= ?withSelectMenu &amp;&amp; bound(?appName) }\">
            <a class=\"swa-auto-complete-select-menu swa-icon\" href=\"javascript:void(0)\" id=\"{= ?id }-menu\" onclick=\"{= ui:functionCall(&quot;swa.openAutoCompleteSelectMenu&quot;, ?id, ?type, ?appName, ?menuFilterNode) }\"/>
        </ui:if>
        <swa:WidgetInitializer arg:script=\"swa.initAutoComplete('{= ?displayId }', '{= ?id }', '{= ?link }', &quot;{= ui:escapeJSON(?onSelect) }&quot;)\"/>
    </ui:group>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:comment "Inserts a text field that automatically suggests matching resources as the user starts typing. Matching resources must be instances of the provided type class." ;
  rdfs:label "Auto complete" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:AutoCompleteCallback
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See comment at swa:AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "The filter function (if specified) from the AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional node that will be passed as second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "The optional second argument of the filter function. This is only used if arg:filteFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
      rdfs:comment "The start of the name as entered by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resource to get matching instances of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (?allowURIs &amp;&amp; bound(?term)) &amp;&amp; spif:isValidURI(?term) }\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"resource\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"isURI\" arg:value=\"{= true }\"/>
                <ui:if ui:condition=\"{= spl:hasValue(IRI(?term), rdf:type) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (untyped resource)\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (untyped resource)\"/>
                </ui:else>
            </swon:Object>
        </swon:Array>
    </ui:if>
    <ui:else>
        <swon:RSObjectArray arg:resultSet='{#
                SELECT ?resource ?label (?label AS ?value) ?editLabel
                WHERE {
                    ( ?type ?term ?anyLang 20 0 ?filterFunction ?filterFunctionArgument ?filterFunctionArgument2 ) ui:autoComplete ( ?resource ?labelRaw ?editLabel ) .
                    BIND (IF(bound(?extraLabelFunction), CONCAT(ui:label(?resource), COALESCE(spif:invoke(?extraLabelFunction, ?resource), \"\")), ?labelRaw) AS ?label) .
                }
                ORDER BY (LCASE(?label)) }'/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Internally used by the AutoComplete widget to fetch the matching resources." ;
  rdfs:label "Auto complete callback" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:AutoCompleteSearchAheadCallback
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See comment at swa:AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "The filter function (if specified) from the AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional node that will be passed as second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "The optional second argument of the filter function. This is only used if arg:filteFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
      rdfs:comment "The start of the name as entered by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resource to get matching instances of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (?allowURIs &amp;&amp; bound(?term)) &amp;&amp; spif:isValidURI(?term) }\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"resource\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"isURI\" arg:value=\"{= true }\"/>
                <ui:if ui:condition=\"{= spl:hasValue(IRI(?term), rdf:type) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (untyped resource)\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (untyped resource)\"/>
                </ui:else>
            </swon:Object>
        </swon:Array>
    </ui:if>
    <ui:else>
        <ui:call arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:term=\"{= ?term }\" arg:type=\"{= ?type }\" ui:template=\"{= safconfig:SelectMatches }\">
            <swon:RSObjectArray arg:resultSet=\"{= ?rs }\"/>
        </ui:call>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Internally used by the AutoComplete widget to fetch the matching resources." ;
  rdfs:label "Auto complete callback" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:AutoCompleteSemanticSearch
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See comment at swa:AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "The filter function (if specified) from the AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional node that will be passed as second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "The optional second argument of the filter function. This is only used if arg:filteFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
      rdfs:comment "The start of the name as entered by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resource to get matching instances of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (?allowURIs &amp;&amp; bound(?term)) &amp;&amp; spif:isValidURI(?term) }\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"resource\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"isURI\" arg:value=\"{= true }\"/>
                <ui:if ui:condition=\"{= spl:hasValue(IRI(?term), rdf:type) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (untyped resource)\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (untyped resource)\"/>
                </ui:else>
            </swon:Object>
        </swon:Array>
    </ui:if>
    <ui:else>
        <ui:call arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:term=\"{= ?term }\" ui:template=\"{= safconfig:SelectSuggestions }\">
            <swon:RSObjectArray arg:resultSet=\"{= ?rs }\"/>
        </ui:call>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Internally used by the AutoComplete widget to fetch the matching resources." ;
  rdfs:label "Auto complete callback" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:BulkAddGraph
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:checked ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; }\">
    <ui:transaction>
        <ui:if ui:condition=\"{= ?checked }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?graph safm:graphSearchable true .
                    }
                    WHERE {
                    } }\"/>
        </ui:if>
        <ui:else>
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?graph safm:graphSearchable true .
                    }
                    WHERE {
                    } }\"/>
        </ui:else>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Bulk add project type" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:ClassSearchAheadCallback
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See comment at swa:AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "The filter function (if specified) from the AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional node that will be passed as second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "The optional second argument of the filter function. This is only used if arg:filteFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
      rdfs:comment "The start of the name as entered by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resource to get matching instances of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (?allowURIs &amp;&amp; bound(?term)) &amp;&amp; spif:isValidURI(?term) }\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"resource\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"isURI\" arg:value=\"{= true }\"/>
                <ui:if ui:condition=\"{= spl:hasValue(IRI(?term), rdf:type) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (untyped resource)\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (untyped resource)\"/>
                </ui:else>
            </swon:Object>
        </swon:Array>
    </ui:if>
    <ui:else>
        <ui:call arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:term=\"{= ?term }\" arg:type=\"{= ?type }\" ui:template=\"{= safconfig:SelectPotentialClasses }\">
            <swon:RSObjectArray arg:resultSet=\"{= ?rs }\"/>
        </ui:call>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Internally used by the AutoComplete widget to fetch the matching resources." ;
  rdfs:label "Auto complete callback" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:ConfigEditorOld
  a ui:NodeClass ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tabId ;
      spl:valueType xsd:string ;
    ] ;
  ui:headIncludes """
<title>Search Configuration</title>
"""^^ui:Literal ;
  ui:headIncludes """
<ui:group>
    <link href=\"{= ui:lib() }/assets/lib/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<tblui:PageContainer arg:title=\"TopBraid {= teamwork:getProductAbbreviation() } Search the EDG Configuration \">
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(&lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt;), ui:graphWithImports(&lt;http://teamwork.topbraidlive.org/system/configconstraints&gt;)) }\">
        <script>swa.queryGraphURI = '{= ui:currentQueryGraph() }';</script>
        <div class=\"container\">
            <ui:group let:containerId=\"{= ui:uniqueId() }\">
                <safconfig:GraphsPanel arg:label=\"Target Graphs\" arg:reload=\"{= ?containerId }\" arg:template=\"{= safconfig:SelectPotentialGraphs }\"/>
                <ui:loadable ui:loadId=\"{= ?containerId }\">
                    <ul class=\"nav nav-tabs\" role=\"tablist\">
                        <li class=\"tab {= IF(((!bound(?tabId)) || (?tabId = &quot;#classes&quot;)), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"classes\" data-toggle=\"tab\" href=\"#classes\" role=\"tab\">Classes</a>
                        </li>
                        <li class=\"tab {= IF((?tabId = &quot;#facetable&quot;), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"facets\" data-toggle=\"tab\" href=\"#facetable\" role=\"tab\">Facets</a>
                        </li>
                        <li class=\"tab {= IF((?tabId = &quot;#semantic-search&quot;), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"semantic-search\" data-toggle=\"tab\" href=\"#semantic-search\" role=\"tab\">Semantic Search</a>
                        </li>
                        <li class=\"tab {= IF((?tabId = &quot;#text&quot;), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"text\" data-toggle=\"tab\" href=\"#text\" role=\"tab\">Text</a>
                        </li>
                        <li class=\"tab {= IF((?tabId = &quot;#summary-view&quot;), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"summary-view\" data-toggle=\"tab\" href=\"#summary-view\" role=\"tab\">Summary View</a>
                        </li>
                        <li class=\"tab {= IF((?tabId = &quot;#detail-view&quot;), &quot;active&quot;, &quot;&quot;) }\" role=\"presentation\">
                            <a aria-controls=\"detail-view\" data-toggle=\"tab\" href=\"#detail-view\" role=\"tab\">Details View</a>
                        </li>
                    </ul>
                    <div class=\"tab-content\">
                        <ui:call ui:template=\"{= safconfig:SelectedGraphs }\" ui:varName=\"graphs\">
                            <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?graphs) }\">
                                <div class=\"tab-pane {= IF(((!bound(?tabId)) || (?tabId = &quot;#classes&quot;)), &quot;active&quot;, &quot;&quot;) }\" id=\"classes\" role=\"tabpanel\">
                                    <safconfig:SearchItemPanel arg:callback=\"{= safconfig:ClassSearchAheadCallback }\" arg:configType=\"{= safm:searchable }\" arg:filterFunction=\"{= safconfig:RelevantClassFilter }\" arg:label=\"Target Classes\" arg:template=\"{= safconfig:SelectedClasses }\" arg:type=\"{= owl:Class }\"/>
                                </div>
                                <div class=\"tab-pane {= IF((?tabId = &quot;#facetable&quot;), &quot;active&quot;, &quot;&quot;) }\" id=\"facetable\" role=\"tabpanel\">
                                    <safconfig:OrderedFacetSearchItemPanel arg:configType=\"{= safm:facetable }\" arg:label=\"Target Facets (Object Properties)\" arg:template=\"{= safconfig:SelectedFacets }\" arg:type=\"{= owl:ObjectProperty }\">
                                        <ui:insert ui:into=\"options\">
                                            <safconfig:FacetOptions/>
                                        </ui:insert>
                                    </safconfig:OrderedFacetSearchItemPanel>
                                </div>
                                <div class=\"tab-pane {= IF((?tabId = &quot;#semantic-search&quot;), &quot;active&quot;, &quot;&quot;) }\" id=\"semantic-search\" role=\"tabpanel\">
                                    <section>
                                        <label>Note:</label>
                                        <p>The Semantic Search is driven by the selected facets.  The selected properites are used while attempting to match on a facet object not necessarily a resource.</p>
                                    </section>
                                    <safconfig:SearchItemPanel arg:configType=\"{= safm:semanticSearchable }\" arg:filterFunction=\"{= safconfig:TextFilter }\" arg:label=\"Target Facet Properties\" arg:template=\"{= safconfig:SelectedSemanticSearchable }\" arg:type=\"{= rdf:Property }\">
                                        <ui:insert ui:into=\"tryIt\">
                                            <ui:group let:selectId=\"{= ui:uniqueId() }\">
                                                <safconfig:AutoComplete arg:allowURIs=\"{= true }\" arg:callback=\"{= safconfig:AutoCompleteSemanticSearch }\" arg:extraLabelFunction=\"{= safconfig:PropertyLabel }\" arg:id=\"{= ?selectId }-selector\" arg:placeholder=\"Try It Out\" arg:withSelectMenu=\"{= false }\"/>
                                            </ui:group>
                                        </ui:insert>
                                    </safconfig:SearchItemPanel>
                                </div>
                                <div class=\"tab-pane {= IF((?tabId = &quot;#text&quot;), &quot;active&quot;, &quot;&quot;) }\" id=\"text\" role=\"tabpanel\">
                                    <safconfig:SearchItemPanel arg:configType=\"{= safm:textSearchable }\" arg:filterFunction=\"{= safconfig:TextFilter }\" arg:label=\"Target Resource Properties (Text/String)\" arg:template=\"{= safconfig:SelectedSearchProperties }\" arg:type=\"{= rdf:Property }\"/>
                                </div>
                                <ui:group let:detailId=\"{= ui:uniqueId() }\" let:summaryId=\"{= ui:uniqueId() }\">
                                    <div class=\"tab-pane {= IF((?tabId = &quot;#summary-view&quot;), &quot;active&quot;, &quot;&quot;) }\" id=\"summary-view\" role=\"tabpanel\">
                                        <safconfig:ViewItemPanel arg:configType=\"{= safm:onView }\" arg:filterFunction=\"{= safconfig:RelevantPropertyFilter }\" arg:label=\"Target Summary Properties\" arg:loadId=\"{= ?detailId }\" arg:template=\"{= safconfig:SelectedViewProperties }\" arg:type=\"{= rdf:Property }\" arg:uid=\"{= ?summaryId }\" arg:viewType=\"{= safm:SummaryView }\"/>
                                    </div>
                                    <div class=\"tab-pane {= IF((?tabId = &quot;#detail-view&quot;), &quot;active&quot;, &quot;&quot;) }\" id=\"detail-view\" role=\"tabpanel\">
                                        <safconfig:ViewItemPanel arg:configType=\"{= safm:onView }\" arg:filterFunction=\"{= safconfig:RelevantPropertyFilter }\" arg:label=\"Target Detail Properties\" arg:loadId=\"{= ?summaryId }\" arg:template=\"{= safconfig:SelectedViewProperties }\" arg:type=\"{= rdf:Property }\" arg:uid=\"{= ?detailId }\" arg:viewType=\"{= safm:DetailView }\"/>
                                    </div>
                                </ui:group>
                            </ui:setContext>
                        </ui:call>
                    </div>
                </ui:loadable>
            </ui:group>
        </div>
    </ui:setContext>
</tblui:PageContainer>
"""^^ui:Literal ;
  rdfs:subClassOf safconfig:EDGAdminPageElements ;
.
safconfig:ConfigExplorer
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editorId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"hierarchy-explorer resource-tree\">
    <ui:group let:containerId=\"{= ui:uniqueId() }\" let:treeId=\"{= ui:uniqueId() }\">
        <section>
            <h4>Hierarchy</h4>
            <safconfig:HierarchyInfoPopover arg:placement=\"bottom\"/>
            <hr/>
        </section>
        <ui:loadable ui:loadId=\"{= ?treeId }\">
            <ui:forEach ui:resultSet=\"{#
                    SELECT DISTINCT ?projectType ?projectLabel ?comment
                    WHERE {
                        GRAPH ui:graph {
                            BIND (teamwork:product() AS ?product) .
                            ?product teamwork:defaultProjectType ?projectType .
                            FILTER (teamwork:hasProjectTypeLicense(?projectType) &amp;&amp; (!teamwork:isProjectTypeDisabled(?projectType))) .
                            OPTIONAL {
                                ?projectType rdfs:comment ?comment .
                            } .
                            BIND (teamwork:pluralProjectTypeLabel(?projectType) AS ?projectLabel) .
                            BIND (COALESCE(spl:object(?projectType, teamwork:projectTypeWeight), 0) AS ?pti) .
                            BIND ((?pti + 30) AS ?index) .
                            rdf:nil teamwork:graphsUnderTeamControl ( ?graph ?teamGraph ) .
                            BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                            FILTER (?thisType = ?projectType) .
                        } .
                    }
                    ORDER BY (?index) }\">
                <ui:group let:loadId=\"{= ui:uniqueId() }\">
                    <div class=\"tree-item-container\" let:baseId=\"{= ui:encodeNode(?projectType, true, true) }\">
                        <safconfig:TreeItem arg:chainSelectable=\"{= true }\" arg:checked=\"{= IF((COALESCE(spl:object(?projectType, safm:treeState), 0) = 1), true, false) }\" arg:comment=\"{= ?comment }\" arg:id=\"{= ?baseId }\" arg:isIndeterminate=\"{= IF((COALESCE(safconfig:getConfig(?projectType, safm:treeState), -1) = 0), true, false) }\" arg:label=\"{= ?projectLabel }\" arg:loadId=\"{= ?loadId }\" arg:onChange=\"bulkAddProjectType\" arg:resource=\"{= ?projectType }\">
                            <ui:loadable ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= COALESCE(?loadOnDemand, true) }\">
                                <div>
                                    <ui:forEach ui:resultSet=\"{#
                                            SELECT DISTINCT ?graph ?graphLabel
                                            WHERE {
                                                rdf:nil teamwork:graphsUnderTeamControl ( ?graph ?teamGraph ) .
                                                BIND (teamwork:projectLabel(?graph) AS ?graphLabel) .
                                                BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                                                FILTER (?thisType = ?projectType) .
                                            }
                                            ORDER BY (?projectLabel) (?graphLabel) }\">
                                        <ui:group let:loadId=\"{= ui:uniqueId() }\">
                                            <div class=\"safconfig-config-explorer-tree-item-container\" let:parentId=\"{= ui:encodeNode(?graph, true, true) }::{= ?baseId }\">
                                                <safconfig:TreeItem arg:chainSelectable=\"{= true }\" arg:checked=\"{= COALESCE(safconfig:isConfigSet(?graph, safm:graphSearchable), false) }\" arg:id=\"{= ?parentId }\" arg:isIndeterminate=\"{= IF((COALESCE(safconfig:getConfig(?graph, safm:treeState), -1) = 0), true, false) }\" arg:label=\"{= ?graphLabel }\" arg:loadId=\"{= ?loadId }\" arg:onChange=\"bulkAddGraph\" arg:resource=\"{= ?graph }\">
                                                    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(IRI(?graph))) }\">
                                                        <ui:loadable ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= COALESCE(?loadOnDemand, true) }\">
                                                            <div class=\"tree-level\">
                                                                <ui:group let:rootClass=\"{#
                                                                        SELECT ?rootClass
                                                                        WHERE {
                                                                            GRAPH ui:graph {
                                                                                BIND (COALESCE(spl:object(?projectType, teamwork:mainClass), owl:Thing) AS ?rootClass) .
                                                                            } .
                                                                        } }\">
                                                                    <safconfig:ResourceTreeElement arg:editorId=\"{= ?editorId }\" arg:graph=\"{= ?graph }\" arg:isLeaf=\"{= false }\" arg:loadOnDemand=\"{= IF(bound(?loadOnDemand), ?loadOnDemand, ?none) }\" arg:parent=\"{= ?parentId }\" arg:parentNode=\"{= ?rootClass }\"/>
                                                                </ui:group>
                                                            </div>
                                                        </ui:loadable>
                                                    </ui:setContext>
                                                </safconfig:TreeItem>
                                            </div>
                                        </ui:group>
                                    </ui:forEach>
                                </div>
                            </ui:loadable>
                        </safconfig:TreeItem>
                    </div>
                </ui:group>
            </ui:forEach>
        </ui:loadable>
        <swa:Subscribe arg:code=\"SafConfigTree.refreshTree(&quot;{= ?treeId }&quot;, data)\" arg:event=\"org.topbraid.safconfig.resourcetree.change\" arg:ownerId=\"{= ?treeId }\"/>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:label "Config explorer" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:DetailViewOptions
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:configState=\"{= COALESCE(safconfig:isConfigSet(safm:DetailView, safm:skippable), false) }\" let:inputId=\"{= ui:uniqueId() }\">
    <div class=\"checkbox\">
        <safconfig:SkipDetailsPopover arg:id=\"{= ui:uniqueId() }\"/>
        <label>
            <input checked=\"{= IF(?configState, &quot;checked&quot;, ?none) }\" id=\"{= ?inputId }\" onchange=\"SafConfig.toggleByPass('{= ?inputId }')\" title=\"Skip Detail View\" type=\"checkbox\"/>&nbsp;Skip Detail View Configuration?</label>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Detail View options" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:EDGAdminPageElements
  a ui:NodeClass ;
  a owl:DeprecatedClass ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !teamwork:isCurrentApplication(&quot;EDG&quot;) }\">Resource is unavailable.</ui:if>
"""^^ui:Literal ;
  rdfs:label "EDGAdmin page elements" ;
  rdfs:subClassOf tbladmin:AdminPages ;
.
safconfig:Elements
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  rdfs:label "View elements" ;
  rdfs:subClassOf ui:ViewElements ;
.
safconfig:FacetOptions
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:configState=\"{= COALESCE(safconfig:isConfigSet(rdf:type, safm:facetable), false) }\" let:inputId=\"{= ui:uniqueId() }\">
    <div class=\"checkbox\">
        <safconfig:IncludeTypeFacetPopover arg:id=\"{= ui:uniqueId() }\"/>
        <label>
            <input checked=\"{= IF(?configState, &quot;checked&quot;, ?none) }\" id=\"{= ?inputId }\" onchange=\"SafConfig.toggleConfigState('{= ?inputId }')\" type=\"checkbox\"/> Include rdf:type
</label>
        <span class=\"text-muted\"> (This option may slow search.)</span>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Facet options" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:FacetSuggestableElement
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:configState=\"{= COALESCE(safconfig:isConfigSet(?resource, safm:suggestable), false) }\" let:inputId=\"{= ui:uniqueId() }\">
    <div class=\"checkbox\">
        <label>
            <input checked=\"{= IF(?configState, &quot;checked&quot;, ?none) }\" id=\"{= ?inputId }\" onchange=\"SafConfig.toggleSuggestableConfigState('{= ?inputId }','{= ui:encodeNode(?resource, true, true) }')\" type=\"checkbox\"/> Use as suggestion
</label>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf safconfig:InlineElements ;
.
safconfig:FacetsInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>This configuration tab contains the selected facet properties.</p>
    <p>Administrators can use the quick search box to find and select the facets that will be included within the facet tree.  Additionally administrators have the ability to determine the facet order (alphabetical by default) and determine if the facet should be used to fuel the suggestions for semantic search.</p>
    <p>
        <strong>Tip:</strong> When updating the order, make sure to click the save button next to the input box with each change.</p>
    <p>
        <strong>Note:</strong> The available properties are limited to those exposed via the selected graphs and classes.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Properties info popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:Functions
  a spin:Function ;
  rdfs:label "Functions" ;
  rdfs:subClassOf spin:Functions ;
.
safconfig:GetMainClass
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "rootClass" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:coalesce ;
                      sp:arg1 [
                          a spl:object ;
                          sp:arg1 [
                              sp:varName "projectType" ;
                            ] ;
                          sp:arg2 teamwork:mainClass ;
                        ] ;
                      sp:arg2 owl:Thing ;
                    ] ;
                  sp:variable [
                      sp:varName "rootClass" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Get main class" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:GlobalProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "selected" ;
              ] ;
          ]
          [
            sp:varName "prop" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "prop" ;
          ]
          [
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "prop" ;
                  ] ;
              ] ;
            sp:varName "label" ;
          ]
          [
            sp:varName "selected" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object owl:AnnotationProperty ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object owl:DatatypeProperty ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                  [
                    sp:object xsd:string ;
                    sp:predicate rdfs:range ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "selected" ;
                    ] ;
                  sp:predicate safm:textSearchable ;
                  sp:subject [
                      sp:varName "prop" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Global properties" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:GlobalPropertiesCallback
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "See comment at swa:AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "The filter function (if specified) from the AutoComplete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional node that will be passed as second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "The optional second argument of the filter function. This is only used if arg:filteFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
      rdfs:comment "The start of the name as entered by the user." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The type of resource to get matching instances of." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (?allowURIs &amp;&amp; bound(?term)) &amp;&amp; spif:isValidURI(?term) }\">
        <swon:Array>
            <swon:Object>
                <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"resource\" arg:value=\"{= ?term }\"/>
                <swon:Value arg:name=\"isURI\" arg:value=\"{= true }\"/>
                <ui:if ui:condition=\"{= spl:hasValue(IRI(?term), rdf:type) }\">
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (typed resource: {= ui:label(IRI(?term)) })\"/>
                </ui:if>
                <ui:else>
                    <swon:Value arg:name=\"label\" arg:value=\"{= ?term } (untyped resource)\"/>
                    <swon:Value arg:name=\"value\" arg:value=\"{= ?term } (untyped resource)\"/>
                </ui:else>
            </swon:Object>
        </swon:Array>
    </ui:if>
    <ui:else>
        <ui:call arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:term=\"{= ?term }\" arg:type=\"{= ?type }\" ui:template=\"{= safconfig:GlobalPropertiesMatch }\">
            <swon:Array>
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\",\">
                    <swon:Object>
                        <swon:Value arg:name=\"editLabel\" arg:value=\"{= ?editLabel }\"/>
                        <swon:Value arg:name=\"resource\" arg:value=\"{= ?resource }\"/>
                        <swon:Value arg:name=\"label\" arg:value=\"{= IF(bound(?extraLabelFunction), CONCAT(?label, COALESCE(spif:invoke(?extraLabelFunction, ?resource), &quot;&quot;)), ?label) }\"/>
                        <swon:Value arg:name=\"value\" arg:value=\"{= ?value }\"/>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </ui:call>
    </ui:else>
    <!--<swon:RSObjectArray arg:resultSet=\"{= ?rs }\"/>-->
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:comment "Internally used by the AutoComplete widget to fetch the matching resources." ;
  rdfs:label "Auto complete callback" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
safconfig:GlobalPropertiesMatch
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:limit "30"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Asc ;
            sp:expression [
                sp:varName "displayLabel" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:expression [
                sp:varName "prop" ;
              ] ;
            sp:varName "resource" ;
          ]
          [
            sp:expression [
                sp:varName "displayLabel" ;
              ] ;
            sp:varName "label" ;
          ]
          [
            sp:expression [
                sp:varName "label" ;
              ] ;
            sp:varName "value" ;
          ]
          [
            sp:varName "editLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object owl:AnnotationProperty ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object owl:DatatypeProperty ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                  [
                    sp:object xsd:string ;
                    sp:predicate rdfs:range ;
                    sp:subject [
                        sp:varName "prop" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:lcase ;
                sp:arg1 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "prop" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "displayLabel" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "term" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a fn:contains ;
                    sp:arg1 [
                        a spif:trim ;
                        sp:arg1 [
                            sp:varName "displayLabel" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:lcase ;
                        sp:arg1 [
                            a spif:trim ;
                            sp:arg1 [
                                sp:varName "term" ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg3 true ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Global properties" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:GlobalPropertiesOld
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "selected" ;
              ] ;
          ]
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "node" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "selected" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:searchable ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "node" ;
              ] ;
            sp:predicate swa:relevantClassOfProperty ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "range" ;
              ] ;
            sp:predicate rdfs:range ;
            sp:subject [
                sp:varName "node" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:ne ;
                                sp:arg1 [
                                    sp:varName "range" ;
                                  ] ;
                                sp:arg2 xsd:boolean ;
                              ] ;
                            sp:arg2 [
                                a sp:ne ;
                                sp:arg1 [
                                    sp:varName "range" ;
                                  ] ;
                                sp:arg2 xsd:date ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "range" ;
                              ] ;
                            sp:arg2 xsd:dateTime ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "range" ;
                          ] ;
                        sp:arg2 owl:Ontology ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "range" ;
                      ] ;
                    sp:arg2 ui:Element ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:and ;
                        sp:arg1 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:and ;
                                    sp:arg1 [
                                        a sp:isIRI ;
                                        sp:arg1 [
                                            sp:varName "node" ;
                                          ] ;
                                      ] ;
                                    sp:arg2 [
                                        a sp:ne ;
                                        sp:arg1 [
                                            sp:varName "node" ;
                                          ] ;
                                        sp:arg2 owl:bottomDataProperty ;
                                      ] ;
                                  ] ;
                                sp:arg2 [
                                    a sp:ne ;
                                    sp:arg1 [
                                        sp:varName "node" ;
                                      ] ;
                                    sp:arg2 owl:bottomObjectProperty ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:ne ;
                                sp:arg1 [
                                    sp:varName "node" ;
                                  ] ;
                                sp:arg2 owl:differentFrom ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "node" ;
                              ] ;
                            sp:arg2 owl:sameAs ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "node" ;
                          ] ;
                        sp:arg2 owl:topDataProperty ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:ne ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                    sp:arg2 owl:topObjectProperty ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object owl:ObjectProperty ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "node" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a spl:object ;
                    sp:arg1 [
                        sp:varName "node" ;
                      ] ;
                    sp:arg2 safm:textSearchable ;
                  ] ;
                sp:arg2 false ;
              ] ;
            sp:variable [
                sp:varName "selected" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "node" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Global properties" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:GraphsPanel
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:reload ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"panel panel-default\">
    <div class=\"panel-heading\">
        <label>{= ?label }</label>
    </div>
    <div class=\"panel-body\">
        <ui:call ui:template=\"{= ?template }\">
            <div class=\"container-fluid\">
                <ui:setGlobalVar ui:name=\"currentLabel\" ui:value=\"start\"/>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <ui:if ui:condition=\"{= ui:globalVarValue(&quot;currentLabel&quot;) != ?projectLabel }\">
                        <ui:setGlobalVar ui:name=\"currentLabel\" ui:value=\"{= ?projectLabel }\"/>
                        <h4>{= ?projectLabel }</h4>
                    </ui:if>
                    <ul class=\"list-unstyled\">
                        <li>
                            <div class=\"checkbox\">
                                <input checked=\"{= IF(EXISTS {
                                    ?graph safm:graphSearchable true .
                                }, &quot;checked&quot;, ?none) }\" onclick=\"SafConfig.addGraph('{= ?graph }', $(this).is(':checked'),'{= ?reload }')\" type=\"checkbox\"/>
                                <span class=\"safconfig-graph-label\">{= ?graphLabel }</span>
                            </div>
                            <a href=\"{= teamwork:editorLink(?graph) }\">
                                <i class=\"fas fa-external-link-square-alt\"/>
                            </a>
                            <span class=\"safconfig-graph text-muted\">({= ?graph })</span>
                        </li>
                    </ul>
                </ui:forEach>
            </div>
        </ui:call>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Config panel" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:HierarchyInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>Use the hierarchy tree to explore the available project types, graphs, and classes.  As is the nature of a hierarchy tree, selecting a parent will automatically select the children (i.e., selecting a project type selects all the graphs of that type and in turn selects all of the classes).</p>
    <p>
        <strong>Note:</strong> When selecting at the top level, the service may take some time to process the request.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Hierarchy info popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:IncludeTypeFacetPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>Selecting this option indicates the desire to include 'rdf:type' as a facet.  This feature is useful when there is a need to show a count for all classes included in the search configuration.</p>
    <p>
        <strong>Note: </strong> Please note that by selecting this option the counting process may slow down the users search experience.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Skip details popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:InfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:placement ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <a class=\"info-popover\" data-contentwrapper=\"#{= ?id }-info\" data-placement=\"{= COALESCE(?placement, &quot;bottom&quot;) }\" tabindex=\"0\" title=\"{= COALESCE(?title, ?none) }\">
        <i class=\"fa fa-info-circle\"/>
    </a>
    <div class=\"ui-helper-hidden-accessible\" id=\"{= ?id }-info\">
        <ui:insertionPoint ui:pointId=\"main\"/>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Info popover" ;
  rdfs:subClassOf safconfig:InlineElements ;
.
safconfig:InlineElements
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:abstract true ;
  ui:private true ;
  rdfs:label "Inline editors" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:IsSearchConfigured
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate safm:graphSearchable ;
                  sp:subject [
                      sp:varName "graph" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:OrderInput
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:order ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:inputId=\"{= ui:uniqueId() }\" let:reloadId=\"{= ui:uniqueId() }\">
    <input id=\"{= ?inputId }-hidden\" type=\"hidden\" value=\"{= ?order }\"/>
    <div class=\"input-group\">
        <input class=\"form-control view-config-order\" id=\"{= ?inputId }\" min=\"0\" pattern=\"\\d*\" placeholder=\"Order\" step=\"1\" type=\"number\" value=\"{= ?order }\"/>
        <span class=\"input-group-btn\">
            <button class=\"btn btn-default\" data-loading-text=\"Loading...\" id=\"{= ?inputId }-button\" onclick=\"SafConfig.saveOrderConfig('{= ?resource }','{= ui:encodeNode(?type, true, true) }','{= ?inputId }','{= ?containerId }')\" type=\"button\">
                <i class=\"fa fa-save\"/>
            </button>
        </span>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Order editor" ;
  rdfs:subClassOf safconfig:InlineElements ;
.
safconfig:OrderedFacetSearchItemPanel
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:popoverClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:configType ;
      spl:valueType rdfs:Datatype ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType owl:Class ;
    ] ;
  ui:prototype """
<ui:group let:containerId=\"{= ui:uniqueId() }\">
    <div class=\"panel panel-default\">
        <div class=\"panel-heading\">
            <label>{= ?label }</label>
            <ui:if ui:condition=\"{= bound(?popoverClass) }\">
                <ui:dynamicView ui:class=\"{= ?popoverClass }\"/>
            </ui:if>
        </div>
        <div class=\"panel-body\">
            <div class=\"row\">
                <div class=\"col-xs-4\">
                    <ui:group let:selectId=\"{= ui:uniqueId() }\">
                        <safconfig:AutoComplete arg:allowURIs=\"{= true }\" arg:callback=\"{= safconfig:AutoCompleteSearchAheadCallback }\" arg:extraLabelFunction=\"{= safconfig:ResourceLabel }\" arg:filterFunction=\"{= IF(bound(?filterFunction), ?filterFunction, ?none) }\" arg:id=\"{= ?selectId }-selector\" arg:onSelect=\"SafConfig.addFacetSearchConfig('{= ui:encodeNode(?configType, true, true) }','{= ?selectId }-selector',resource,'{= ?containerId }')\" arg:placeholder=\"Start Typing\" arg:type=\"{= ?type }\" arg:withSelectMenu=\"{= false }\"/>
                    </ui:group>
                </div>
                <div class=\"col-xs-4\">
                    <ui:insertionPoint ui:pointId=\"options\"/>
                </div>
            </div>
            <ui:loadable ui:loadId=\"{= ?containerId }\">
                <ui:call ui:template=\"{= ?template }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <li class=\"list-group-item\">
                                <div class=\"row\">
                                    <div class=\"col-xs-5\">
                                        <span>{= ui:label(?item) }&nbsp;<span class=\"text-muted\">({= ?item })</span>
                                        </span>
                                    </div>
                                    <div class=\"col-xs-2\">
                                        <safconfig:FacetSuggestableElement arg:resource=\"{= ?item }\"/>
                                    </div>
                                    <div class=\"col-xs-3\">
                                        <safconfig:OrderInput arg:containerId=\"{= ?containerId }\" arg:order=\"{= ?order }\" arg:resource=\"{= ?item }\" arg:type=\"{= safm:facetOrder }\"/>
                                    </div>
                                    <div class=\"col-xs-2\">
                                        <span class=\"pull-right\">
                                            <a href=\"javascript:void(0)\" onclick=\"SafConfig.removeFacetSearchConfig('{= ui:encodeNode(?configType, true, true) }','{= ui:encodeNode(?item, true, true) }','{= ?containerId }')\">(remove)</a>
                                        </span>
                                    </div>
                                </div>
                            </li>
                        </ui:forEach>
                    </ui:if>
                    <ui:else>
                        <div>
                            <span>Empty</span>
                        </div>
                    </ui:else>
                </ui:call>
            </ui:loadable>
            <swa:Subscribe arg:code=\"SafConfig.loadChange(data,'{= ?containerId }')\" arg:event=\"org.topbraid.safconfig.order.change\" arg:ownerId=\"{= ?containerId }\"/>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Config panel" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:PropertiesInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>This configuration tab contains the potential searchable properties based on the selected classes.</p>
    <p>During a free text search selected properties will be used to match against the entered term or phrase.</p>
    <p>
        <strong>Tip: </strong>Depending on your graph and classes selection, you may see a very large number of properties. To narrow them down and quickly find a property you want to use, take advantage of the quick search box at the top of the tab.</p>
    <p>
        <strong>Note:</strong> Selected properties are applied globally across all selected graphs and classes.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Properties info popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:PropertiesPanel
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\">
    <div class=\"panel panel-default\">
        <div class=\"panel-heading\">
            <label>Target Search Properties</label>
            <safconfig:PropertiesInfoPopover/>
        </div>
        <div class=\"panel-body\">
            <div class=\"row\">
                <div class=\"col-xs-4\">
                    <ui:group let:selectId=\"{= ui:uniqueId() }\">
                        <safconfig:AutoComplete arg:allowURIs=\"{= true }\" arg:callback=\"{= safconfig:GlobalPropertiesCallback }\" arg:extraLabelFunction=\"{= safconfig:ResourceLabel }\" arg:filterFunction=\"{= safconfig:TextFilter }\" arg:id=\"{= ?selectId }-selector\" arg:onSelect=\"SafConfig.addSearchConfig('{= ui:encodeNode(safm:textSearchable, true, true) }','{= ?selectId }-selector',resource,'{= ?id }')\" arg:placeholder=\"Start Typing\" arg:type=\"{= rdf:Property }\" arg:withSelectMenu=\"{= false }\"/>
                    </ui:group>
                </div>
            </div>
            <div>
                <div class=\"swa-facets-results-bar\" id=\"{= ?id }-resultsBar\">
                    <div class=\"swa-facets-results-bar-pages\">
                        <a id=\"{= ?id }-previousPage\">&laquo; Previous</a>
                        <span> | </span>
                        <strong id=\"{= ?id }-startIndex\">0</strong>
                        <span> - </span>
                        <strong id=\"{= ?id }-endIndex\">0</strong>
                        <span> of </span>
                        <strong id=\"{= ?id }-count\">0</strong>
                        <span> | </span>
                        <a id=\"{= ?id }-nextPage\">Next &raquo;</a>
                    </div>
                    <div class=\"swa-float-right safconfig-properties-panel-autocomplete\">
                        <select autocomplete=\"false\" class=\"form-control swa-facets-search-field safconfig-properties-panel-autocomplete-select\" id=\"{= ?id }-pageSize\" title=\"Sorting options\">
                            <option value=\"10\">10 per page</option>
                            <option selected=\"selected\" value=\"20\">20 per page</option>
                            <option value=\"50\">50 per page</option>
                        </select>
                    </div>
                    <div class=\"swa-clear-both\"/>
                </div>
                <div id=\"{= ?id }-owner\">
                    <ui:loadable ui:loadId=\"{= ?id }\">
                        <ui:group let:pageSize=\"{= COALESCE(?pageSize, 20) }\" let:startIndex=\"{= COALESCE(?startIndex, 0) }\">
                            <ui:call ui:template=\"{= safconfig:GlobalProperties }\" ui:varName=\"results\">
                                <ui:if ui:condition=\"{= spr:rowCount(?results) &gt; 0 }\">
                                    <div class=\"property-list\">
                                        <ui:forEach ui:limit=\"{= ?pageSize }\" ui:offset=\"{= ?startIndex }\" ui:resultSet=\"{= ?results }\">
                                            <div class=\"property-item\" data-load-id=\"{= ?id }\" id=\"{= ui:encodeNode(?prop, true, true) }\">
                                                <div class=\"property-item-action\" let:inputId=\"{= ui:uniqueId() }\">
                                                    <input id=\"{= ?inputId }-hidden\" type=\"hidden\" value=\"{= ui:encodeNode(?prop, true, true) }\"/>
                                                    <input checked=\"{= IF((bound(?selected) &amp;&amp; (?selected = true)), &quot;checked&quot;, ?none) }\" class=\"property-item-checkbox\" data-type=\"{= ui:encodeNode(safm:textSearchable, true, true) }\" id=\"{= ?inputId }\" type=\"checkbox\"/>
                                                </div>
                                                <div class=\"property-item-info\">
                                                    <label>{= ?label }</label>
                                                    <span class=\"item-iri text-muted\">({= ?prop })</span>
                                                    <ui:group let:range=\"{= spl:object(?prop, rdfs:range) }\">
                                                        <ui:if ui:condition=\"{= ?range }\">
                                                            <div>Range: {= ?range }</div>
                                                        </ui:if>
                                                    </ui:group>
                                                    <ui:group let:definedIn=\"{= smf:definedIn(?prop) }\">
                                                        <ui:if ui:condition=\"{= bound(?definedIn) }\">
                                                            <div>Defined In: {= ?definedIn }</div>
                                                        </ui:if>
                                                    </ui:group>
                                                </div>
                                            </div>
                                        </ui:forEach>
                                    </div>
                                </ui:if>
                                <ui:else>
                                    <div class=\"saf-empty-result\">
                                        <label>No matching results</label>
                                    </div>
                                </ui:else>
                                <ui:group let:rowCount=\"{= spr:rowCount(?results) }\">
                                    <script>$(\"#{= ?id }-count\").text(\"{= ?rowCount }\");</script>
                                    <script>$(\"#{= ?id }-startIndex\").text(\"{= IF((?rowCount = 0), 0, (?startIndex + 1)) }\");</script>
                                    <script>$(\"#{= ?id }-endIndex\").text(\"{= IF((?rowCount &lt; (?startIndex + ?pageSize)), ?rowCount, (?startIndex + ?pageSize)) }\");</script>
                                    <ui:if ui:condition=\"{= ?startIndex &gt; 0 }\">
                                        <script>$(\"#{= ?id }-previousPage\").attr(\"onclick\", \"SafConfig.reloadResultList('{= ?id }', Math.max(0, {= ?startIndex } - swa.getSummarySearchPageSize('{= ?id }')))\");$(\"#{= ?id }-previousPage\").attr(\"href\", \"javascript:void(0)\");</script>
                                    </ui:if>
                                    <ui:else>
                                        <script>$(\"#{= ?id }-previousPage\").attr(\"onclick\", null);$(\"#{= ?id }-previousPage\").attr(\"href\", null);</script>
                                    </ui:else>
                                    <ui:if ui:condition=\"{= (?startIndex + ?pageSize) &lt; ?rowCount }\">
                                        <script>$(\"#{= ?id }-nextPage\").attr(\"onclick\", \"SafConfig.reloadResultList('{= ?id }', {= ?startIndex } + swa.getSummarySearchPageSize('{= ?id }'))\");$(\"#{= ?id }-nextPage\").attr(\"href\", \"javascript:void(0)\");</script>
                                    </ui:if>
                                    <ui:else>
                                        <script>$(\"#{= ?id }-nextPage\").attr(\"onclick\", null);$(\"#{= ?id }-nextPage\").attr(\"href\", null);</script>
                                    </ui:else>
                                </ui:group>
                                <script>$(\"#{= ?id }-pageSize\").attr(\"onchange\", \"SafConfig.reloadResultList('{= ?id }', {= ?startIndex })\");</script>
                                <script>$(\"#{= ?id }-sortField\").attr(\"onchange\", \"SafConfig.reloadResultList('{= ?id }', {= ?startIndex })\");</script>
                            </ui:call>
                        </ui:group>
                    </ui:loadable>
                </div>
            </div>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Properties panel" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:PropertyLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 " (" ;
                sp:arg2 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 ") " ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:forEach ui:resultSet=\"{#
            SELECT DISTINCT ?graph ?graphLabel
            WHERE {
                rdf:nil teamwork:graphsUnderTeamControl ( ?graph ?teamGraph ) .
                BIND (teamwork:projectLabel(?graph) AS ?graphLabel) .
                BIND (teamwork:getProjectType(?graph) AS ?thisType) .
                FILTER (?thisType = ?projectType) .
            }
            ORDER BY (?projectLabel) (?graphLabel) }\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(IRI(?graph))) }\">
            <safconfig:BulkAddGraph arg:checked=\"{= ?checked }\" arg:graph=\"{= ?graph }\"/>
            <ui:if ui:condition=\"{= ?checked }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?graph safm:graphSearchable true .
                            ?projectType safm:treeState 1 .
                        }
                        WHERE {
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?projectType safm:treeState ?anyState .
                        }
                        INSERT {
                            ?projectType safm:treeState 1 .
                        }
                        WHERE {
                            ?projectType safm:treeState ?anyState .
                        } }\"/>
            </ui:if>
            <ui:else>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?graph safm:graphSearchable true .
                        }
                        WHERE {
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        DELETE {
                            ?projectType safm:treeState ?anyState .
                        }
                        WHERE {
                            ?projectType safm:treeState ?anyState .
                        } }\"/>
            </ui:else>
        </ui:setContext>
    </ui:forEach>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Property label" ;
  rdfs:subClassOf safconfig:Functions ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:RelevantClassFilter
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "thing" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "anyUnion" ;
                        ] ;
                      sp:predicate owl:unionOf ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "Text filter" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:RelevantPropertyFilter
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "thing" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:or ;
                        sp:arg1 [
                            a sp:or ;
                            sp:arg1 [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "thing" ;
                                  ] ;
                                sp:arg2 owl:DatatypeProperty ;
                              ] ;
                            sp:arg2 [
                                a sp:eq ;
                                sp:arg1 [
                                    sp:varName "thing" ;
                                  ] ;
                                sp:arg2 owl:AnnotationProperty ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:and ;
                            sp:arg1 [
                                a sp:and ;
                                sp:arg1 [
                                    a sp:eq ;
                                    sp:arg1 [
                                        sp:varName "thing" ;
                                      ] ;
                                    sp:arg2 spin:MagicProperty ;
                                  ] ;
                                sp:arg2 [
                                    a sp:eq ;
                                    sp:arg1 [
                                        a spl:objectCount ;
                                        sp:arg1 [
                                            sp:varName "resource" ;
                                          ] ;
                                        sp:arg2 spin:constraint ;
                                      ] ;
                                    sp:arg2 1 ;
                                  ] ;
                              ] ;
                            sp:arg2 [
                                a sp:eq ;
                                sp:arg1 [
                                    a spl:object ;
                                    sp:arg1 [
                                        sp:varName "resource" ;
                                      ] ;
                                    sp:arg2 spin:constraint ;
                                  ] ;
                                sp:arg2 rdfs:Resource ;
                              ] ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "thing" ;
                          ] ;
                        sp:arg2 owl:ObjectProperty ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object rdf: ;
                          sp:predicate rdfs:isDefinedBy ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "Text filter" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:RemoveFacetSearchConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?item ?itemType true .
                ?item safm:facetOrder ?anyOrder .
            }
            WHERE {
                ?item ?itemType true .
                ?item safm:facetOrder ?anyOrder .
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "remove facet config service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:RemoveSearchConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?item ?itemType true .
            }
            WHERE {
                ?item ?itemType true .
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:RemoveViewConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:item ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:itemType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:preCondition ui:errorMessage='{#
            SELECT ?result
            WHERE {
                FILTER NOT EXISTS {
                    ?itemType rdfs:subClassOf safm:View .
                } .
                BIND (\"Invalid data type.\" AS ?result) .
            } }'>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?item safm:onView ?itemType .
                }
                WHERE {
                    ?item safm:onView ?itemType .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?item safm:style ?anyStyle .
                    ?item safm:viewOrder ?anyOrder .
                }
                WHERE {
                    FILTER NOT EXISTS {
                        ?item safm:onView ?anyView .
                    } .
                    ?item safm:style ?anyStyle .
                    ?item safm:viewOrder ?anyOrder .
                } }\"/>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add graph service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:ResourceLabel
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 " (" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 ") " ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:label "Resource label" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:ResourceTreeElement
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:isLeaf ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:loadOnDemand ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:typeLabel ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parent ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:parentNode ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:loadId=\"{= ui:uniqueId() }\">
    <div class=\"safconfig-resource-tree-element\" let:parentId=\"{= ui:encodeNode(?parentNode, true, true) }::{= ?parent }\">
        <safconfig:TreeItem arg:chainSelectable=\"{= IF((bound(?typeLabel) &amp;&amp; (?typeLabel = &quot;class&quot;)), true, false) }\" arg:checked=\"{= COALESCE(safconfig:isConfigSet(?parentNode, safm:searchable), false) }\" arg:disabled=\"{= COALESCE(safconfig:hasConfigMatch(?parentNode, safm:selectedBy, ?graph), false) }\" arg:id=\"{= ?parentId }\" arg:isIndeterminate=\"{= IF((COALESCE(safconfig:getConfig(?parentNode, safm:treeState), -1) = 0), true, false) }\" arg:isLeaf=\"{= ?isLeaf }\" arg:loadId=\"{= ?loadId }\" arg:onChange=\"addResource\" arg:resource=\"{= ?parentNode }\" arg:typeLabel=\"{= ?typeLabel }\">
            <ui:loadable ui:loadId=\"{= ?loadId }\" ui:loadOnDemand=\"{= COALESCE(?loadOnDemand, true) }\">
                <div class=\"tree-level\">
                    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?graph) }\">
                        <ui:forEach ui:resultSet='{#
                                SELECT ?node ?nodeType ?leaf
                                WHERE {
                                    {
                                        ?parentNode swa:superClassOfLimited ?node .
                                        FILTER (((isIRI(?node) &amp;&amp; (?node != owl:ObjectProperty)) &amp;&amp; (?node != owl:Nothing)) &amp;&amp; (?node != owl:NamedIndividual)) .
                                        FILTER NOT EXISTS {
                                            ?parentNode a owl:ObjectProperty .
                                        } .
                                        BIND ((!swa:classHasSubClassOrDirectRelevantProperty(?node)) AS ?leaf) .
                                        BIND (ui:label(?node) AS ?label) .
                                        BIND (\"class\" AS ?nodeType) .
                                    } .
                                }
                                ORDER BY (?nodeType) (?label) }'>
                            <safconfig:ResourceTreeElement arg:graph=\"{= ?graph }\" arg:isLeaf=\"{= ?leaf }\" arg:loadOnDemand=\"{= IF(bound(?loadOnDemand), ?loadOnDemand, ?none) }\" arg:parent=\"{= ?parentId }\" arg:parentNode=\"{= ?node }\" arg:typeLabel=\"{= ?nodeType }\"/>
                        </ui:forEach>
                    </ui:setContext>
                </div>
            </ui:loadable>
        </safconfig:TreeItem>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Resource tree element" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:SearchHelp
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"help-page\">
    <h3>Current Search Configuration</h3>
    <p>Search is currently configured, by administrator, to find items in the asset collections:</p>
    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(&lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt;), ui:graphWithImports(&lt;http://teamwork.topbraidlive.org/system/configconstraints&gt;)) }\">
        <div class=\"row\">
            <div class=\"col-xs-3\">
                <div class=\"help-container\">
                    <h4>Selected Collections</h4>
                    <ui:call ui:template=\"{= safconfig:SelectSearchGraphs }\" ui:varName=\"results\">
                        <ul>
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <li>
                                    <span>{= ?projectLabel }:&nbsp;&nbsp;</span>
                                    <span>{= ?graphLabel }</span>
                                    <div class=\"text-muted\">&nbsp;({= ?graph })</div>
                                </li>
                            </ui:forEach>
                        </ul>
                    </ui:call>
                </div>
            </div>
            <div class=\"col-xs-3\">
                <div class=\"help-container\">
                    <h4>Selected Classes</h4>
                    <ui:call ui:template=\"{= safconfig:SelectedClasses }\" ui:varName=\"results\">
                        <ul>
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <li>
                                    <span>{= ui:label(?item) }</span>
                                    <div class=\"text-muted\">&nbsp;({= ?item })</div>
                                </li>
                            </ui:forEach>
                        </ul>
                    </ui:call>
                </div>
            </div>
            <div class=\"col-xs-3\">
                <div class=\"help-container\">
                    <h4>Selected Search Properties</h4>
                    <ui:call ui:template=\"{= safconfig:SelectedSearchProperties }\" ui:varName=\"results\">
                        <ul>
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <li>
                                    <span>{= ui:label(?item) }</span>
                                    <div class=\"text-muted\">&nbsp;({= ?item })</div>
                                </li>
                            </ui:forEach>
                        </ul>
                    </ui:call>
                </div>
            </div>
            <div class=\"col-xs-3\">
                <div class=\"help-container\">
                    <h4>Selected Search Facets</h4>
                    <ui:call ui:template=\"{= safconfig:SelectedFacets }\" ui:varName=\"results\">
                        <ul>
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <li>
                                    <span>{= ui:label(?item) }</span>
                                    <div class=\"text-muted\">&nbsp;({= ?item })</div>
                                </li>
                            </ui:forEach>
                        </ul>
                    </ui:call>
                </div>
            </div>
        </div>
    </ui:setContext>
</teamwork:Chrome>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Search help" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:SearchItemPanel
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:callback ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:popoverClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:configType ;
      spl:valueType rdfs:Datatype ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType owl:Class ;
    ] ;
  ui:prototype """
<ui:group let:containerId=\"{= ui:uniqueId() }\">
    <div class=\"panel panel-default\">
        <div class=\"panel-heading\">
            <label>{= ?label }</label>
            <ui:if ui:condition=\"{= bound(?popoverClass) }\">
                <ui:dynamicView ui:class=\"{= ?popoverClass }\"/>
            </ui:if>
        </div>
        <div class=\"panel-body\">
            <div class=\"row\">
                <div class=\"col-xs-4\">
                    <ui:group let:selectId=\"{= ui:uniqueId() }\">
                        <safconfig:AutoComplete arg:allowURIs=\"{= true }\" arg:callback=\"{= IF(bound(?callback), ?callback, safconfig:AutoCompleteSearchAheadCallback) }\" arg:extraLabelFunction=\"{= safconfig:ResourceLabel }\" arg:filterFunction=\"{= IF(bound(?filterFunction), ?filterFunction, ?none) }\" arg:id=\"{= ?selectId }-selector\" arg:onSelect=\"SafConfig.addSearchConfig('{= ui:encodeNode(?configType, true, true) }','{= ?selectId }-selector',resource,'{= ?containerId }')\" arg:placeholder=\"Start Typing\" arg:type=\"{= ?type }\" arg:withSelectMenu=\"{= false }\"/>
                    </ui:group>
                </div>
                <div class=\"col-xs-4\">
                    <ui:insertionPoint ui:pointId=\"tryIt\"/>
                </div>
            </div>
            <ui:loadable ui:loadId=\"{= ?containerId }\">
                <ui:call ui:template=\"{= ?template }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <li class=\"list-group-item\">
                                <div>
                                    <span>{= ui:label(?item) }&nbsp;<span class=\"text-muted\">({= ?item })</span>
                                    </span>
                                    <span class=\"pull-right\">
                                        <a href=\"javascript:void(0)\" onclick=\"SafConfig.removeSearchConfig('{= ui:encodeNode(?configType, true, true) }','{= ui:encodeNode(?item, true, true) }','{= ?containerId }')\">(remove)</a>
                                    </span>
                                </div>
                            </li>
                        </ui:forEach>
                    </ui:if>
                    <ui:else>
                        <div>
                            <span>Empty</span>
                        </div>
                    </ui:else>
                </ui:call>
            </ui:loadable>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Config panel" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:SelectMatches
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:limit "30"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Asc ;
            sp:expression [
                sp:varName "rank" ;
              ] ;
          ]
          [
            a sp:lcase ;
            sp:arg1 [
                sp:varName "resourceLabel" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:expression [
                sp:varName "label" ;
              ] ;
            sp:varName "value" ;
          ]
          [
            sp:varName "editLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        (
                          [
                            a sp:TriplePath ;
                            sp:object [
                                sp:varName "type" ;
                              ] ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "types" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "types" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                        )
                        [
                          sp:object [
                              sp:varName "resourceLabel" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:or ;
                              sp:arg1 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "filterFunction" ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a spif:invoke ;
                                  sp:arg1 [
                                      sp:varName "filterFunction" ;
                                    ] ;
                                  sp:arg2 [
                                      sp:varName "resource" ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:if ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "term" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a fn:starts-with ;
                                  sp:arg1 [
                                      a sp:lcase ;
                                      sp:arg1 [
                                          sp:varName "resourceLabel" ;
                                        ] ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:lcase ;
                                      sp:arg1 [
                                          a spif:trim ;
                                          sp:arg1 [
                                              sp:varName "term" ;
                                            ] ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg3 true ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:if ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "extraLabelFunction" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:concat ;
                                  sp:arg1 [
                                      sp:varName "resourceLabel" ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:coalesce ;
                                      sp:arg1 [
                                          a spif:invoke ;
                                          sp:arg1 [
                                              sp:varName "extraLabelFunction" ;
                                            ] ;
                                          sp:arg2 [
                                              sp:varName "resource" ;
                                            ] ;
                                        ] ;
                                      sp:arg2 "" ;
                                    ] ;
                                ] ;
                              sp:arg3 [
                                  sp:varName "resourceLabel" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "label" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression 0 ;
                          sp:variable [
                              sp:varName "rank" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:unionGraph ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        (
                          [
                            a sp:TriplePath ;
                            sp:object [
                                sp:varName "type" ;
                              ] ;
                            sp:path [
                                a sp:ModPath ;
                                sp:modMax -2 ;
                                sp:modMin 0 ;
                                sp:subPath rdfs:subClassOf ;
                              ] ;
                            sp:subject [
                                sp:varName "types" ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "types" ;
                              ] ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "resource" ;
                              ] ;
                          ]
                        )
                        [
                          sp:object [
                              sp:varName "resourceLabel" ;
                            ] ;
                          sp:predicate rdfs:label ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:or ;
                              sp:arg1 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a sp:bound ;
                                      sp:arg1 [
                                          sp:varName "filterFunction" ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a spif:invoke ;
                                  sp:arg1 [
                                      sp:varName "filterFunction" ;
                                    ] ;
                                  sp:arg2 [
                                      sp:varName "resource" ;
                                    ] ;
                                ] ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:if ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "term" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a fn:contains ;
                                  sp:arg1 [
                                      a sp:lcase ;
                                      sp:arg1 [
                                          sp:varName "resourceLabel" ;
                                        ] ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:lcase ;
                                      sp:arg1 [
                                          a spif:trim ;
                                          sp:arg1 [
                                              sp:varName "term" ;
                                            ] ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg3 true ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a sp:if ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "extraLabelFunction" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:concat ;
                                  sp:arg1 [
                                      sp:varName "resourceLabel" ;
                                    ] ;
                                  sp:arg2 [
                                      a sp:coalesce ;
                                      sp:arg1 [
                                          a spif:invoke ;
                                          sp:arg1 [
                                              sp:varName "extraLabelFunction" ;
                                            ] ;
                                          sp:arg2 [
                                              sp:varName "resource" ;
                                            ] ;
                                        ] ;
                                      sp:arg2 "" ;
                                    ] ;
                                ] ;
                              sp:arg3 [
                                  sp:varName "resourceLabel" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "label" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression 1 ;
                          sp:variable [
                              sp:varName "rank" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:unionGraph ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Select matches" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectPotentialClasses
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:limit "30"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Asc ;
            sp:expression [
                a sp:lcase ;
                sp:arg1 [
                    sp:varName "resourceLabel" ;
                  ] ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:expression [
                sp:varName "label" ;
              ] ;
            sp:varName "value" ;
          ]
          [
            sp:varName "editLabel" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object owl:Class ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "types" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "types" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "resourceLabel" ;
              ] ;
            sp:predicate [
                sp:varName "pred" ;
              ] ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "pred" ;
                          ] ;
                        sp:arg2 rdfs:label ;
                      ] ;
                    sp:arg2 [
                        a sp:eq ;
                        sp:arg1 [
                            sp:varName "pred" ;
                          ] ;
                        sp:arg2 skos:prefLabel ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "pred" ;
                      ] ;
                    sp:arg2 skos:altLabel ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "displayLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "extraLabelFunction" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        sp:varName "displayLabel" ;
                      ] ;
                    sp:arg2 [
                        a sp:coalesce ;
                        sp:arg1 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "extraLabelFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "resource" ;
                              ] ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    sp:varName "displayLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a fn:contains ;
                sp:arg1 [
                    a sp:lcase ;
                    sp:arg1 [
                        a spif:trim ;
                        sp:arg1 [
                            sp:varName "resourceLabel" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:lcase ;
                    sp:arg1 [
                        a spif:trim ;
                        sp:arg1 [
                            sp:varName "term" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Select classes" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectPotentialFacets
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object owl:ObjectProperty ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "facet" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "facet" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectPotentialGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "projectLabel" ;
          ]
          [
            sp:varName "graphLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "graphLabel" ;
          ]
          [
            sp:varName "projectLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:graphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "graph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:projectLabel ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:pluralProjectTypeLabel ;
                arg:projectType [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectSearchGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "projectType" ;
          ]
          [
            sp:varName "projectLabel" ;
          ]
          [
            sp:varName "graphLabel" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "graphLabel" ;
          ]
          [
            sp:varName "projectLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "graph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate safm:graphSearchable ;
            sp:subject [
                sp:varName "graph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:projectLabel ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "graphLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:getProjectType ;
                arg:projectGraph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectType" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:pluralProjectTypeLabel ;
                arg:projectType [
                    sp:varName "projectType" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "projectLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectSuggestions
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:limit "30"^^xsd:long ;
      sp:orderBy (
          [
            a sp:Asc ;
            sp:expression [
                sp:varName "anyValue" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:expression [
                sp:varName "anyObject" ;
              ] ;
            sp:varName "resource" ;
          ]
          [
            sp:expression [
                sp:varName "displayLabel" ;
              ] ;
            sp:varName "label" ;
          ]
          [
            sp:expression [
                sp:varName "displayLabel" ;
              ] ;
            sp:varName "value" ;
          ]
          [
            sp:expression [
                sp:varName "facetType" ;
              ] ;
            sp:varName "editLabel" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:semanticSearchable ;
            sp:subject [
                sp:varName "semanticSearchable" ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate safm:facetable ;
            sp:subject [
                sp:varName "facetType" ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate safm:suggestable ;
            sp:subject [
                sp:varName "facetType" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "anyObject" ;
              ] ;
            sp:predicate [
                sp:varName "facetType" ;
              ] ;
            sp:subject [
                sp:varName "result" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "anyValue" ;
              ] ;
            sp:predicate [
                sp:varName "semanticSearchable" ;
              ] ;
            sp:subject [
                sp:varName "anyObject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "extraLabelFunction" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "anyObject" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:coalesce ;
                        sp:arg1 [
                            a spif:invoke ;
                            sp:arg1 [
                                sp:varName "extraLabelFunction" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "facetType" ;
                              ] ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a ui:label ;
                    sp:arg1 [
                        sp:varName "anyObject" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "displayLabel" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a fn:contains ;
                sp:arg1 [
                    a sp:lcase ;
                    sp:arg1 [
                        sp:varName "anyValue" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:lcase ;
                    sp:arg1 [
                        a smf:trim ;
                        sp:arg1 [
                            sp:varName "term" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "Select suggestions" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectTemplates
  a spin:SelectTemplate ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
safconfig:SelectedClasses
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "item" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:searchable ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedClassesByGraph
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:searchable ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedFacets
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
          [
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "facetOrder" ;
                  ] ;
                sp:arg2 0 ;
              ] ;
            sp:varName "order" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:facetable ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "facetOrder" ;
                    ] ;
                  sp:predicate safm:facetOrder ;
                  sp:subject [
                      sp:varName "item" ;
                    ] ;
                ]
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
                sp:arg2 rdf:type ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "order" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:varName "igraph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "order" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object true ;
                    sp:predicate safm:graphSearchable ;
                    sp:subject [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedSearchProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "item" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:textSearchable ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedSemanticSearchable
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:semanticSearchable ;
            sp:subject [
                sp:varName "item" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "item" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SelectedViewProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "item" ;
          ]
          [
            sp:varName "order" ;
          ]
          [
            sp:varName "style" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "view" ;
                    ] ;
                  sp:predicate safm:onView ;
                  sp:subject [
                      sp:varName "item" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "order" ;
                    ] ;
                  sp:predicate safm:viewOrder ;
                  sp:subject [
                      sp:varName "item" ;
                    ] ;
                ]
                [
                  a sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "style" ;
                          ] ;
                        sp:predicate safm:style ;
                        sp:subject [
                            sp:varName "item" ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:view ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:private true ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SemanticSearchInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>Semantic search will match the search string against values of the semantic search properties to find resources that have these values. It will then suggest to return as search results resources that are connected to the matched resources via a property selected as a facet - provided that the facet is configured to be \"used for suggestions\".</p>
    <p>For example, semantic search property = 'first name'. Facet property used as a suggestion = 'parent of'. Search for \"John\" finds every one with the first name = John. It will then offer to return all people who are parents of anyone with the first name John.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Properties info popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:Services
  a ui:Service ;
  rdfs:label "Services" ;
  rdfs:subClassOf ui:Services ;
.
safconfig:SkipDetailsPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>Selecting this option indicates the desire to use EDG editors in favor of the configurable details view.  The generated details link will route back to EDG editors and fall back to the configurable details view if the home graph cannot be determined.</p>
    <p>
        <strong>Note:</strong> The configuration tool is still available while this option is selected, but the configuration will only be used as a fall back.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Skip details popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:StyleInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<div class=\"styleInfoPopover ui-helper-hidden-accessible\">
    <ul>
        <li>
            <label>{= ui:label(safm:Style) }</label>
            <p>{= spl:object(safm:Style, rdfs:comment) }</p>
        </li>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?style ?label ?info
                WHERE {
                    ?style (rdfs:subClassOf)+ safm:Style .
                    BIND (ui:label(?style) AS ?label) .
                    OPTIONAL {
                        ?style rdfs:comment ?info .
                    } .
                } }\">
            <li>
                <label>{= ?label }</label>
                <p>{= COALESCE(?info, \"Missing definition.\") }</p>
            </li>
        </ui:forEach>
    </ul>
</div>
"""^^ui:Literal ;
  rdfs:label "Info popover" ;
  rdfs:subClassOf safconfig:InlineElements ;
.
safconfig:StyleSelector
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:changeHandler ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:initialValue ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:uid ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?initialValue) }\">
        <input id=\"{= ?uid }-old-style\" type=\"hidden\" value=\"{= ui:encodeNode(?initialValue, true, true) }\"/>
    </ui:if>
    <select class=\"form-control safconfig-select\" id=\"{= ?uid }-style\" name=\"style-{= ?uid }\" onchange=\"{= ?changeHandler }\" title=\"Element View Style\">
        <option disabled=\"disabled\" selected=\"selected\">Select One</option>
        <ui:forEach ui:resultSet=\"{#
                SELECT ?style ?label
                WHERE {
                    ?style (rdfs:subClassOf)+ safm:Style .
                    BIND (ui:label(?style) AS ?label) .
                } }\">
            <option selected=\"{= IF((?initialValue = ?style), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(?style, true, true) }\">{= ?label }</option>
        </ui:forEach>
    </select>
    <a class=\"info-popover\" data-contentwrapper=\".styleInfoPopover\" data-placement=\"left\" tabindex=\"0\">
        <i class=\"fa fa-info-circle\"/>
    </a>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Style editor" ;
  rdfs:subClassOf safconfig:InlineElements ;
.
safconfig:SuitableSubjectPredicates
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "predicate" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:expression [
                sp:varName "predicate" ;
              ] ;
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:expression [
                sp:varName "label" ;
              ] ;
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  (
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:bound ;
                          sp:arg1 [
                              sp:varName "object" ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    sp:object [
                        sp:varName "object" ;
                      ] ;
                    sp:predicate [
                        sp:varName "predicate" ;
                      ] ;
                    sp:subject [
                        sp:varName "subject" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:isIRI ;
                        sp:arg1 [
                            sp:varName "subject" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a swa:resourceType ;
                        arg:resource [
                            sp:varName "object" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "objectType" ;
                      ] ;
                  ]
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "objectType" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "type" ;
                              ] ;
                            sp:arg2 owl:Thing ;
                          ] ;
                        sp:arg2 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "type" ;
                              ] ;
                            sp:arg2 rdfs:Resource ;
                          ] ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "type" ;
                      ] ;
                    sp:predicate rdfs:range ;
                    sp:subject [
                        sp:varName "predicate" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a ui:label ;
                        sp:arg1 [
                            sp:varName "predicate" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a fn:contains ;
                        sp:arg1 [
                            a sp:lcase ;
                            sp:arg1 [
                                sp:varName "label" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:lcase ;
                            sp:arg1 [
                                sp:varName "term" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:comment "Finds all \"suitable\" predicates for a given object type, looking at ranges." ;
  rdfs:label "Suitable subject predicates" ;
  rdfs:subClassOf safconfig:SelectTemplates ;
.
safconfig:SummaryView
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div>
    <ui:call arg:subject=\"{= ?resource }\" arg:view=\"{= safm:SummaryView }\" ui:template=\"{= safm:contentForView }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <div>{= ?order } | {= ?label } | {= ?style } {= ?objList }</div>
        </ui:forEach>
    </ui:call>
</div>
"""^^ui:Literal ;
  rdfs:label "Summary view" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:TextFilter
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "thing" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 owl:DatatypeProperty ;
                  ] ;
                sp:arg2 [
                    a sp:eq ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                    sp:arg2 owl:AnnotationProperty ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "Text filter" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:ToggleByPassConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= ?value }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                        safm:DetailView safm:skippable true .
                    } .
                }
                WHERE {
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                        safm:DetailView safm:skippable true .
                    } .
                }
                WHERE {
                    GRAPH &lt;http://server.topbraidlive.org/dynamic/searchconfig/&gt; {
                        safm:DetailView safm:skippable true .
                    } .
                } }\"/>
    </ui:else>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Toggles the state of the Detail View ByPass configuration value" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:ToggleConfigService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= ?value }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    rdf:type safm:facetable true .
                    rdf:type safm:facetOrder -1000 .
                }
                WHERE {
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    rdf:type safm:facetable true .
                    rdf:type safm:facetOrder ?anyOrder .
                }
                WHERE {
                    rdf:type safm:facetable true .
                    rdf:type safm:facetOrder ?anyOrder .
                } }\"/>
    </ui:else>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Toggle config service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:ToggleSuggestionStateService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= ?value }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?property safm:suggestable true .
                }
                WHERE {
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?property safm:suggestable true .
                }
                WHERE {
                    ?property safm:suggestable true .
                } }\"/>
    </ui:else>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Toggle config service" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:TreeItem
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:disabled ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:isIndeterminate ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:isLeaf ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:typeLabel ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:chainSelectable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:checked ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:onChange ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"tree-item\" id=\"{= COALESCE(?id, ?resource) }\">
    <ui:if ui:condition=\"{= swa:falseOrUnbound(?isLeaf) }\">
        <button class=\"btn btn-xs\" id=\"{= ?loadId }-toggle\" onclick=\"SafConfigTree.toggleLevel('{= ?loadId }-toggle','{= ?loadId }')\">
            <i class=\"fa fa-icon fa-plus\"/>
        </button>
    </ui:if>
    <ui:else>
        <div class=\"tree-spacer\"/>
    </ui:else>
    <ui:if ui:condition=\"{= !COALESCE(spl:object(IRI(?resource), dash:abstract), safconfig:isViewPoint(?resource), false) }\">
        <input checked=\"{= IF((bound(?checked) &amp;&amp; (?checked = true)), &quot;checked&quot;, ?none) }\" class=\"tree-item-checkbox {= IF((bound(?chainSelectable) &amp;&amp; (?chainSelectable = true)), &quot;tree-item-selectable&quot;, &quot;&quot;) } \" data-change=\"{= ?onChange }\" data-uri=\"{= ?resource }\" disabled=\"{= IF((bound(?disabled) &amp;&amp; (?disabled = true)), &quot;disabled&quot;, ?none) }\" title=\"{= IF((bound(?disabled) &amp;&amp; (?disabled = true)), CONCAT(&quot;Selected by &quot;, ui:label(safconfig:getConfig(?resource, safm:selectedBy))), COALESCE(?label, ui:label(?resource))) }\" type=\"checkbox\"/>
        <ui:if ui:condition=\"{= IF((bound(?isIndeterminate) &amp;&amp; ?isIndeterminate), true, false) }\">
            <script>$(document).ready(function(){SafConfigTree.setIndeterminate('{= ?id }')})</script>
        </ui:if>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?typeLabel) }\">
        <span>{= CONCAT(\"[ \", ?typeLabel, \" ]\") }</span>
    </ui:if>
    <ui:group let:resourceLabel=\"{= COALESCE(?label, ui:label(?resource)) }\">
        <span title=\"{= COALESCE(?comment, spl:object(?resource, rdfs:comment), ?resourceLabel) }\">{= ?resourceLabel }</span>
    </ui:group>
    <div class=\"item-iri\">
        <span class=\"text-muted\">({= ?resource })</span>
    </div>
    <ui:insertionPoint ui:pointId=\"tree-item-children\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Tree button" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:TreeState
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:state ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction>
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)) }\">
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?resource safm:treeState ?anyState .
                }
                WHERE {
                    ?resource safm:treeState ?anyState .
                } }\"/>
        <ui:if ui:condition=\"{= bound(?state) }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?resource safm:treeState ?state .
                    }
                    WHERE {
                    } }\"/>
        </ui:if>
    </ui:setContext>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Tree state" ;
  rdfs:subClassOf safconfig:Services ;
.
safconfig:ViewInfoPopover
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  ui:prototype """
<safconfig:InfoPopover arg:id=\"{= ui:uniqueId() }\">
    <p>This configuration tab contains the selected properties that will be used for display to the user.</p>
    <p>Administrators can use the quick search box to find any available property.  Administrators can also specify the order and the view style of the property (LabelLikeStyle is the default). </p>
    <p>
        <strong>Tip:</strong> When updating the order, make sure to click the save button next to the input box with each change.</p>
    <p>
        <strong>Note:</strong> The available properties are limited to those exposed via the selected graphs and classes.</p>
    <p>
        <strong>Note:</strong> The view styles and the order are shared between the summary and details view.  This is done to ensure a common experience between the two views.</p>
</safconfig:InfoPopover>
"""^^ui:Literal ;
  rdfs:label "Properties info popover" ;
  rdfs:subClassOf safconfig:InfoPopover ;
.
safconfig:ViewItemPanel
  a ui:ViewElement ;
  a owl:DeprecatedClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:popoverClass ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:configType ;
      spl:valueType rdfs:Datatype ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:filterFunction ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType owl:Class ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:uid ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:containerId=\"{= ui:uniqueId() }\">
    <div class=\"panel panel-default\">
        <div class=\"panel-heading\">
            <label>{= ?label }</label>
            <ui:if ui:condition=\"{= bound(?popoverClass) }\">
                <ui:dynamicView ui:class=\"{= ?popoverClass }\"/>
            </ui:if>
        </div>
        <div class=\"panel-body\">
            <div class=\"row\">
                <div class=\"col-xs-4\">
                    <ui:group let:selectId=\"{= ui:uniqueId() }\">
                        <safconfig:AutoComplete arg:allowURIs=\"{= true }\" arg:callback=\"{= safconfig:AutoCompleteSearchAheadCallback }\" arg:extraLabelFunction=\"{= safconfig:ResourceLabel }\" arg:filterFunction=\"{= IF(bound(?filterFunction), ?filterFunction, ?none) }\" arg:id=\"{= ?selectId }-selector\" arg:onSelect=\"SafConfig.addViewConfig('{= ui:encodeNode(?configType, true, true) }','{= ui:encodeNode(?viewType, true, true) }','{= ?selectId }-selector',resource,'{= ?uid }')\" arg:placeholder=\"Start Typing\" arg:type=\"{= ?type }\" arg:withSelectMenu=\"{= false }\"/>
                    </ui:group>
                </div>
                <div class=\"col-xs-4\">
                    <ui:insertionPoint ui:pointId=\"options\"/>
                </div>
            </div>
            <ui:loadable ui:loadId=\"{= ?uid }\">
                <ui:call arg:view=\"{= ?viewType }\" ui:template=\"{= ?template }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <li class=\"list-group-item\">
                                <div class=\"row\">
                                    <div class=\"col-xs-6\">
                                        <span>{= ui:label(?item) }&nbsp;<span class=\"text-muted\">({= ?item })</span>
                                        </span>
                                    </div>
                                    <div class=\"col-xs-3\" let:styleId=\"{= ui:uniqueId() }\">
                                        <safconfig:OrderInput arg:containerId=\"{= ?uid }\" arg:order=\"{= ?order }\" arg:resource=\"{= ?item }\" arg:type=\"{= safm:viewOrder }\"/>
                                        <safconfig:StyleSelector arg:changeHandler=\"SafConfig.addSearchStyle('{= ?item }','{= ?styleId }','{= ?uid }')\" arg:initialValue=\"{= ?style }\" arg:uid=\"{= ?styleId }\"/>
                                    </div>
                                    <div class=\"col-xs-2\">
                                        <span class=\"pull-right\">
                                            <a href=\"javascript:void(0)\" onclick=\"SafConfig.removeViewConfig('{= ui:encodeNode(?viewType, true, true) }','{= ui:encodeNode(?item, true, true) }','{= ?uid }')\">(remove)</a>
                                        </span>
                                    </div>
                                </div>
                            </li>
                        </ui:forEach>
                    </ui:if>
                    <ui:else>
                        <div>
                            <span>Empty</span>
                        </div>
                    </ui:else>
                </ui:call>
            </ui:loadable>
            <swa:Subscribe arg:code=\"SafConfig.loadChange(data,'{= ?loadId }')\" arg:event=\"org.topbraid.safconfig.order.change\" arg:ownerId=\"{= ?uid }\"/>
            <swa:Subscribe arg:code=\"SafConfig.loadChange(data,'{= ?loadId }')\" arg:event=\"org.topbraid.safconfig.style.change\" arg:ownerId=\"{= ?uid }\"/>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Config panel" ;
  rdfs:subClassOf safconfig:Elements ;
.
safconfig:getConfig
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "anyValue" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "anyValue" ;
                    ] ;
                  sp:predicate spin:_arg2 ;
                  sp:subject spin:_arg1 ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:hasConfigMatch
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "anyGraph" ;
                    ] ;
                  sp:predicate spin:_arg2 ;
                  sp:subject spin:_arg1 ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:ne ;
                      sp:arg1 [
                          sp:varName "anyGraph" ;
                        ] ;
                      sp:arg2 spin:_arg3 ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "get facetable state" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:isConfigSet
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate spin:_arg2 ;
                  sp:subject spin:_arg1 ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/searchconfig/> ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:label "get facetable state" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:isViewPoint
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object edg:Viewpoint ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_arg1 ;
          ]
        ) ;
    ] ;
  rdfs:label "is view point" ;
  rdfs:subClassOf safconfig:Functions ;
.
safconfig:matchingResources
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spif:invoke ;
                    sp:arg1 spin:_arg2 ;
                    sp:arg2 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object spin:_arg1 ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "types" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "types" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject to get the objects of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate" ;
    ] ;
  spin:private true ;
  rdfs:subClassOf spin:MagicProperties ;
.
safconfig:projectTypeComment
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate rdfs:comment ;
                  sp:subject [
                      sp:varName "projectType" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  rdfs:label "project type comment" ;
  rdfs:subClassOf safconfig:Functions ;
.
