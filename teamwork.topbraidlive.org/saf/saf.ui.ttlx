# baseURI: http://topbraid.org/saf/
# imports: http://saf.topbraidlive.org/metaschema/
# imports: http://topbraid.org/safconfig/
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/teamwork.ui
# prefix: saf

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

safm:ClickableSearchStyle
  ui:viewElement saf:ClickableSearchSection ;
.
safm:CommentLikeStyle
  ui:viewElement saf:ExpandableSection ;
.
safm:DetailView
  ui:viewElement saf:DetailView ;
.
safm:FollowYourNoseStyle
  ui:viewElement saf:NavigableNestedSection ;
.
safm:HyperlinkStyle
  ui:viewElement saf:HyperlinkSection ;
.
safm:ImageLikeStyle
  ui:viewElement saf:ImageSection ;
.
safm:LabelLikeStyle
  ui:viewElement saf:DelimitedDataSection ;
.
safm:MailToStyle
  ui:viewElement saf:MailToSection ;
.
safm:SummaryView
  ui:viewElement saf:SummaryView ;
.
arg:bestViewFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:containingTypes
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:criteriaId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:ct
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:data-uri
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataAttr
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:dataAttrValue
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:editWidet
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:editWidgetOverride
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:emptyId
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:exit
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:facetFilters
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:filterPair
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:filters
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:freeText
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:initString
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:q
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:removable
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:rid
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:showLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:showPanel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:showPanelHeader
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:suprressLanguage
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:targetProperty
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:viewClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:viewClassFunction
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:viewType
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
saf:
  a owl:Ontology ;
  owl:imports safm: ;
  owl:imports safconfig: ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
saf:AbstractContainerLayout
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showPanelHeader ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:private true ;
  ui:prototype """
<div class=\"container-fluid\">
    <div class=\"row\">
        <div class=\"col-md-12 col-sm-12 col-xs-12\">
            <div class=\"panel panel-default saf-panel\">
                <ui:if ui:condition=\"{= COALESCE(?showPanelHeader, true) }\">
                    <div class=\"panel-heading\">
                        <div class=\"row\">
                            <div class=\"col-md-9 col-sm-9\">
                                <ui:insertionPoint ui:pointId=\"panelHeader\"/>
                            </div>
                            <div class=\"col-md-3 col-sm-3 saf-panel-buttons\">
                                <ui:insertionPoint ui:pointId=\"panelHeaderButtons\"/>
                            </div>
                        </div>
                    </div>
                </ui:if>
                <div class=\"panel-body\">
                    <div class=\"col-xs-12\">
                        <div class=\"row no-gutter\">
                            <div class=\"col-md-12 col-sm-12 col-xs-12\">
                                <ui:insertionPoint ui:pointId=\"panelBody\"/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Abstract container layout" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:AbstractDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "details-section" ;
      spl:predicate arg:style ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:containingTypes ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showLabel ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:abstract true ;
  ui:private true ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <section class=\"{= ?style } {= IF(bound(?parent), &quot;{= ?style}-child&quot;, &quot;&quot;) }\" id=\"{= IF(bound(?parent), CONCAT(?parent, &quot;_&quot;, ?label), ?label) }\" title=\"{= ?label }\">
        <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
            <h5 class=\"details-label\">{= ?label }</h5>
        </ui:if>
    </section>
    <div class=\"details-content\">
        <ui:insertionPoint ui:pointId=\"detail-body\"/>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Abstract Details section" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:AbstractObjectAddWidget
  a ui:NodeClass ;
  ui:abstract true ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
        <ui:group let:displayLabel=\"{= IF(bound(?label), ?label, smf:titleCase(ui:label(?predicate))) }\">
            <label class=\"control-label saf-property-label\" id=\"property-label-{= ?predicate }\" title=\"{= spl:object(?predicate, rdfs:comment) }\">{= ?displayLabel }</label>
        </ui:group>
    </ui:if>
    <ui:insertionPoint ui:pointId=\"add-widget\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Abstract object add widget" ;
  rdfs:subClassOf saf:ObjectAddWidget ;
.
saf:AbstractSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showLabel ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:toolTip ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<section class=\"saf-section {= IF(bound(?class), ?class, &quot;&quot;) }\" id=\"{= IF(bound(?parent), CONCAT(ui:label(?parent), &quot;_&quot;, ?label), ?label) }\" title=\"{= smf:titleCase(?label) }\">
    <ui:if ui:condition=\"{= bound(?label) &amp;&amp; IF(bound(?showLabel), ?showLabel, true) }\">
        <label class=\"saf-label\" title=\"{= COALESCE(?toolTip, ?label) }\">{= smf:titleCase(?label) }</label>
    </ui:if>
    <ui:insertionPoint ui:pointId=\"section-body\"/>
</section>
"""^^ui:Literal ;
  rdfs:label "Abstract section" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:AbstractTextFieldEditor
  a swa:ObjectEditorClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:datatype ;
      spl:valueType rdfs:Datatype ;
      rdfs:comment "An optional rdfs:Datatype that may be set to prefer a certain datatype." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onChange ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JavaScript function to execute upon a change to the input field." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressLanguage ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disallow editing the language." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:inputType ;
      spl:valueType xsd:string ;
      rdfs:comment "Either \"text\" or \"password\"." ;
    ] ;
  ui:abstract true ;
  ui:prototype """
<ui:group let:datatype=\"{= COALESCE(?datatype, IF(bound(?object), datatype(?object), swa:localRange(?predicate, ?subject))) }\">
    <ui:group let:removable=\"{= COALESCE(ui:contextValue(&quot;removable&quot;), false) }\">
        <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= ?datatype }\" arg:uid=\"{= ?uid }\"/>
        <div class=\"form-group\">
            <div class=\"col-xs-10\">
                <div class=\"input-group\">
                    <input class=\"swa-text-field form-control {= swa:testClass(?predicate) }\" id=\"new-{= ?uid }\" name=\"new-{= ?uid }\" onchange=\"{= ?onChange }\" type=\"{= ?inputType }\" value=\"{= ?object }\"/>
                    <ui:if ui:condition=\"{= ?removable }\">
                        <span class=\"input-group-btn\">
                            <button class=\"btn btn-danger swa-delete-row-button saf-delete-row-button\" onclick=\"searchPortal.deleteRow(&quot;{= ?rid }&quot;)\" type=\"button\">
                                <i class=\"fas fa-times\"/>
                            </button>
                        </span>
                    </ui:if>
                </div>
            </div>
            <div class=\"col-xs-2\">
                <ui:if ui:condition=\"{= (((?datatype = xsd:string) || (?datatype = rdfs:Literal)) || (?datatype = rdf:langString)) || (bound(?object) &amp;&amp; (lang(?object) != &quot;&quot;)) }\">
                    <ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressLanguage) }\">
                        <swa:LangSelector arg:initialValue=\"{= lang(?object) }\" arg:uid=\"{= ?uid }\"/>
                    </ui:if>
                </ui:if>
            </div>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Base class to share common functionality of TextFieldEditor and PasswordEditor." ;
  rdfs:label "Abstract text field editor" ;
  rdfs:subClassOf saf:ObjectEditor ;
.
saf:AbstractView
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:parent ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:viewClassFunction ;
      spl:valueType spin:Function ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:abstract true ;
  ui:prototype """
<ui:call arg:subj=\"{= ?resource }\" arg:view=\"{= ?viewType }\" ui:template=\"{= safm:contentForView }\">
    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
        <ui:forEach ui:resultSet=\"{= ?rs }\">
            <ui:group let:matchedView=\"{= IF(bound(?viewClassFunction), spif:invoke(?viewClassFunction, ?style), saf:bestViewStyle(?style)) }\">
                <ui:if ui:condition=\"{= !swa:falseOrUnbound(?objList) }\">
                    <ui:if ui:condition=\"{= IF(bound(?parent), (?parent != ?pred), true) }\">
                        <ui:dynamicView arg:class=\"{= ?class }\" arg:label=\"{= ?label }\" arg:parent=\"{= ?parent }\" arg:predicate=\"{= ?pred }\" arg:resultSet='{#
                                SELECT ?obj
                                WHERE {
                                    ?result spif:split ( ?objList \"\\\\^\\\\|\" ) .
                                    BIND (ui:decodeNode(?result) AS ?obj) .
                                } }' arg:toolTip=\"{= spl:object(?pred, rdfs:comment) }\" arg:viewType=\"{= ?viewType }\" ui:args=\"*\" ui:class=\"{= ?matchedView }\" ui:resource=\"{= ?resource }\"/>
                    </ui:if>
                </ui:if>
            </ui:group>
        </ui:forEach>
    </ui:if>
    <ui:else>
        <ui:resourceView ui:matchIds=\"resource-description\" ui:resource=\"{= ?resource }\"/>
    </ui:else>
</ui:call>
"""^^ui:Literal ;
  rdfs:label "Base view" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:Application
  a ui:NodeClass ;
  ui:headIncludes """
<ui:group>
    <script src=\"{= ui:lib() }/teamwork/build/saf.bundle.js\"/>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:graphWithImports(IRI(&quot;urn:x-evn-master:platform_governance_singleton&quot;)), ui:graphWithoutImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)), ui:graphWithImports(IRI(&quot;urn:x-saf:union&quot;))) }\">
    <ui:setContext ui:varName=\"hasConfiguredGraph\" ui:varValue=\"{= EXISTS {
        ?graph safm:graphSearchable true .
    } }\">
        <ui:group let:selectedNode=\"{= ui:param(&quot;node&quot;, rdfs:Resource) }\" let:viewName=\"{= ui:param(&quot;viewName&quot;, xsd:string) }\">
            <saf:Initializer/>
            <ui:if ui:condition=\"{= bound(?selectedNode) }\">
                <saf:ResourceDetails arg:node=\"{= ?selectedNode }\"/>
            </ui:if>
            <ui:else>
                <saf:CriteriaSearch arg:rootClass=\"{= COALESCE(?rootClass, owl:Thing) }\" ui:args=\"*\"/>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Application" ;
  rdfs:subClassOf swa:Applications ;
  rdfs:subClassOf teamwork:Elements ;
.
saf:ApplicationHeader
  a ui:NodeClass ;
  rdfs:label "Application header" ;
  rdfs:subClassOf swa:Elements ;
.
saf:AppliedFacet
  a rdfs:Class ;
  a sh:NodeShape ;
  saf:facetValue "<http://schema.org/Person>" ;
  saf:facetValueType rdf:type ;
  rdfs:label "Applied facet" ;
  rdfs:subClassOf rdfs:Resource ;
.
saf:AppliedFacetList
  a rdfs:Class ;
  a sh:NodeShape ;
  rdfs:label "Applied facet list" ;
  rdfs:subClassOf rdfs:Resource ;
.
saf:AutoComplete
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:allowURIs ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If set to true, users are allowed to enter arbitrary (external) URIs as long as they start with http and are well-formed URIs. Note that this bypasses any testing for type-conformance and should therefore be used with care." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional CSS class that is used for the resulting text field." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraLabelFunction ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "An optional function that takes a resource and produces the part in parantheses." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunction ;
      spl:valueType spin:Function ;
      rdfs:comment "An optional SPARQL function that takes one resource as its argument and returns true if the resource shall be included." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument ;
      rdfs:comment "An optional second argument to the filter function." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filterFunctionArgument2 ;
      rdfs:comment "An optional second argument to the filter function. This is only used if arg:filterFunctionArgument also has a value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initialValue ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The initial resource to place into the text field." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:menuFilterNode ;
      rdfs:comment "An optional argument that will be forwarded into the context menu, to filter some conditions." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:onSelect ;
      spl:valueType xsd:string ;
      rdfs:comment "A JavaScript snippet that shall be executed when the user selects a resource. The variable 'resource' will contain the URI of the selected value." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:placeholder ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional placeholder text to appear in empty fields until the user enters something, e.g. \"Enter first name\"." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rid ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withSelectMenu ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a drop down menu at the right hand side, allowing users to open selection dialogs (e.g., faceted search) as an alternative way of populating the auto-complete." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:id ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the HTML input element." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The rdf:type of the matching resources. Will also include subclasses of that type." ;
    ] ;
  ui:prototype """
<ui:group let:removable=\"{= COALESCE(ui:contextValue(&quot;removable&quot;), false) }\">
    <ui:createLink arg:allowURIs=\"{= ?allowURIs }\" arg:extraLabelFunction=\"{= ?extraLabelFunction }\" arg:filterFunction=\"{= ?filterFunction }\" arg:filterFunctionArgument=\"{= ?filterFunctionArgument }\" arg:filterFunctionArgument2=\"{= ?filterFunctionArgument2 }\" arg:type=\"{= ?type }\" ui:sendQueryGraph=\"{= true }\" ui:snippet=\"true\" ui:viewClass=\"{= swa:AutoCompleteCallback }\">
        <input id=\"{= ?id }\" name=\"{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?initialValue, true, true) }\"/>
        <ui:group let:appName=\"{= swa:appName() }\" let:displayId=\"{= ?id }-field\">
            <div class=\"{= IF(?removable, &quot;input-group&quot;, &quot;&quot;) }\">
                <input class=\"form-control swa-auto-complete {= ?class }\" id=\"{= ?displayId }\" placeholder=\"{= ?placeholder }\" value=\"{= ui:label(?initialValue) }\"/>
                <ui:if ui:condition=\"{= ?removable }\">
                    <span class=\"input-group-btn\">
                        <button class=\"btn btn-danger swa-delete-row-button saf-delete-row-button\" onclick=\"searchPortal.deleteRow(&quot;{= ?rid }&quot;)\" type=\"button\">
                            <i class=\"fas fa-times\"/>
                        </button>
                    </span>
                </ui:if>
            </div>
            <!--            <ui:if ui:condition=\"{= ?withSelectMenu &amp;&amp; bound(?appName) }\">
<a class=\"swa-auto-complete-select-menu swa-icon\" href=\"javascript:void(0)\" id=\"{= ?id }-menu\" onclick=\"{= ui:functionCall(&quot;swa.openAutoCompleteSelectMenu&quot;, ?id, ?type, ?appName, ?menuFilterNode) }\"/>
</ui:if>-->
            <swa:WidgetInitializer arg:script=\"swa.initAutoComplete(&quot;{= ?displayId }&quot;, &quot;{= ?id }&quot;, &quot;{= ?link }&quot;, &quot;{= ui:escapeJSON(?onSelect) }&quot;)\"/>
        </ui:group>
    </ui:createLink>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Inserts a text field that automatically suggests matching resources as the user starts typing. Matching resources must be instances of the provided type class." ;
  rdfs:label "Auto complete" ;
  rdfs:subClassOf swa:AutoCompleteElements ;
.
saf:ClassChildrenSelector
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initialValue ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  ui:prototype """
<div>
    <select class=\"form-control\" name=\"{= COALESCE(?name, ?none) }\">
        <option disabled=\"disabled\" selected=\"{= IF(bound(?initialValue), ?none, &quot;selected&quot;) }\" value=\"\">Select Type</option>
        <ui:forEach ui:resultSet=\"{#
                SELECT DISTINCT ?type
                WHERE {
                    ?predicate rdfs:range ?object .
                    ?type (rdfs:subClassOf)+ ?object .
                }
                ORDER BY (?type) }\">
            <option selected=\"{= IF((?initialValue = ?type), &quot;selected&quot;, ?none) }\" value=\"{= ui:encodeNode(?type, true, true) }\">{= ui:label(?type) }</option>
        </ui:forEach>
    </select>
</div>
"""^^ui:Literal ;
  rdfs:label "Class children selector" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:ClickableSearchSection
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:AbstractSection ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">
                        <ui:group let:object=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                            <span title=\"{= ui:label(?object) }\">
                                <a href=\"javascript:void(0)\" onclick=\"SafSearch.clickableHandler(&quot;search&quot;,&quot;{= ui:encodeNode(?object, true, true) }&quot;,&quot;{= ui:encodeNode(?predicate, true, true) }&quot;)\">{= ui:label(?object) }</a>
                            </span>
                        </ui:group>
                    </ui:forEach>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  ui:viewElement saf:ClickableSearchSection ;
  rdfs:label "Clickable search section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:CreateConceptSimpleHandler
  a ui:NodeClass ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:logMessage=\"Create {= ui:label(?resourceType) } with URI {= ?uri }\" ui:metadata=\"{= ?metadata }\">
    <ui:preCondition ui:errorMessage=\"{= COALESCE(swa:labelExistsPreCondition(?label), swa:validURIPreCondition(?uri), swa:unusedURIPreCondition(IRI(str(?uri)))) }\">
        <ui:preCondition ui:errorMessage=\"{= IF(spl:hasValue(?resourceType, owl:oneOf), &quot;Cannot create new instances of a class with an owl:oneOf&quot;, ?none) }\">
            <!--   put this back ?resource skos:broader tags:Tag . -->
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?resource a ?resourceType .
                        ?resource skos:prefLabel ?label .
                    }
                    WHERE {
                        BIND (IRI(str(?uri)) AS ?resource) .
                    } }\"/>
            <swa:createPrimaryKeyTriple ui:args=\"*\"/>
        </ui:preCondition>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Create concept handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
saf:CreateResourceSimpleHandler
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:transaction ui:checkConstraints=\"{= true }\" ui:logMessage=\"Create {= ui:label(?resourceType) } with URI {= ?uri }\" ui:metadata=\"{= ?metadata }\">
    <ui:preCondition ui:errorMessage=\"{= COALESCE(swa:validURIPreCondition(?uri), swa:unusedURIPreCondition(IRI(str(?uri)))) }\">
        <ui:preCondition ui:errorMessage=\"{= IF(spl:hasValue(?resourceType, owl:oneOf), &quot;Cannot create new instances of a class with an owl:oneOf&quot;, ?none) }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?resource a ?resourceType .
                    }
                    WHERE {
                        BIND (IRI(str(?uri)) AS ?resource) .
                    } }\"/>
            <swa:createPrimaryKeyTriple ui:args=\"*\"/>
            <swa:addDefaultValues arg:resource=\"{= IRI(str(?uri)) }\"/>
        </ui:preCondition>
    </ui:preCondition>
</ui:transaction>
"""^^ui:Literal ;
  rdfs:label "Create simple concept handler" ;
  rdfs:subClassOf swa:CreateHandlers ;
.
saf:CriteriaBox
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:criteriaId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"row\">
        <ui:loadable ui:loadId=\"{= ?criteriaId }\">
            <ui:group let:filters=\"{= IF((bound(?facetFilters) &amp;&amp; (smf:trim(?facetFilters) != &quot;&quot;)), ?facetFilters, ?none) }\" let:text=\"{= IF((bound(?freeText) &amp;&amp; (smf:trim(?freeText) != &quot;&quot;)), ?freeText, ?none) }\">
                <div class=\"criteriaBox well\" id=\"criteria-container\">
                    <div class=\"container-fluid\">
                        <div class=\"row no-gutter\">
                            <div class=\"col-xs-12\">
                                <ui:if ui:condition=\"{= bound(?text) &amp;&amp; (smf:trim(?text) != &quot;&quot;) }\">
                                    <span class=\"criteria-item\">
                                        <span class=\"criteria-item-free-text\">{= ?text }</span>
                                        <a class=\"criteria-remove-item\" href=\"javascript:void(0)\" onclick=\"searchPortal.Facets.destroyFreeText(&quot;{= ?loadId }&quot;)\">x</a>
                                    </span>
                                </ui:if>
                                <ui:if ui:condition=\"{= bound(?filters) &amp;&amp; (smf:trim(?filters) != &quot;&quot;) }\">
                                    <ui:forEach ui:resultSet='{#
                                            SELECT ?facet ?type
                                            WHERE {
                                                ?lines spif:split ( ?filters \"\\\\^\\\\|\" ) .
                                                BIND (smf:lastIndexOf(?lines, \" \") AS ?space) .
                                                BIND (smf:trim(smf:subString(?lines, ?space, fn:string-length(?lines))) AS ?facet) .
                                                BIND (smf:trim(smf:subString(?lines, 0, ?space)) AS ?type) .
                                            } }'>
                                        <span class=\"criteria-item\">
                                            <span class=\"criteria-item-facet\">
                                                <span class=\"criteria-item-facet-type\">{= ui:label(ui:decodeNode(?type)) }</span>
                                                <span>{= ui:label(ui:decodeNode(?facet)) }</span>
                                            </span>
                                            <a class=\"criteria-remove-item\" href=\"javascript:void(0)\" onclick=\"searchPortal.Facets.remove(&quot;{= ?type }&quot;,&quot;{= ?facet }&quot;,&quot;{= ?loadId }&quot;)\">x</a>
                                        </span>
                                    </ui:forEach>
                                </ui:if>
                            </div>
                        </div>
                    </div>
                    <div class=\"criteria-box-actions\">
                        <button class=\"btn btn-xs btn-default\" onclick=\"searchPortal.Facets.destroyAll(&quot;{= ?loadId }&quot;)\" type=\"button\">Reset</button>
                    </div>
                </div>
            </ui:group>
        </ui:loadable>
        <swa:Subscribe arg:code=\"SafCriteria.rebuild(&quot;{= ?criteriaId }&quot;)\" arg:event=\"org.topbraid.saf.search\" arg:ownerId=\"{= ?criteriaId }\"/>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Criteria box" ;
  rdfs:subClassOf swa:Elements ;
.
saf:CriteriaSearch
  a ui:NodeClass ;
  ui:headIncludes """
<ui:group>
    <title>Search</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<saf:ViewPage arg:pageType=\"search-portal-page\" arg:title=\"Search\">
    <ui:group let:instanceSelectedEvent=\"org.sp.instanceSelected\">
        <ui:group let:criteriaId=\"{= ui:uniqueId() }\" let:isLuceneAvailable=\"{= swa:falseOrUnbound(saf:isLuceneDisabled()) }\" let:mainId=\"{= ui:uniqueId() }\" let:searchId=\"{= ui:uniqueId() }\">
            <saf:AbstractContainerLayout arg:showPanelHeader=\"{= false }\">
                <ui:group let:ct=\"{= ui:param(&quot;ct&quot;, xsd:string) }\" let:q=\"{= ui:param(&quot;q&quot;, xsd:string) }\">
                    <ui:group let:q=\"{= IF(swa:falseOrUnbound(?isLuceneAvailable), CONCAT(&quot;\\&quot;&quot;, ?q, &quot;\\&quot;&quot;), ?q) }\">
                        <ui:group let:freeText=\"{= COALESCE(IF(bound(?freeText), ?freeText, ?none), ?q) }\">
                            <ui:group let:facetFilters=\"{= COALESCE(IF(bound(?facetFilters), ?facetFilters, ?none), ?ct) }\">
                                <ui:insert ui:into=\"panelBody\">
                                    <ui:loadable ui:loadId=\"{= ?mainId }-saf-search\">
                                        <ui:group let:isSearchEmpty=\"{= (swa:falseOrUnbound(?facetFilters) &amp;&amp; swa:falseOrUnbound(?freeText)) &amp;&amp; swa:falseOrUnbound(?ct) }\">
                                            <saf:CriteriaTextSearch arg:loadId=\"{= ?mainId }-saf-search\" arg:withLucene=\"{= ?isLuceneAvailable }\"/>
                                            <ui:if ui:condition=\"{= ?isSearchEmpty }\">
                                                <ui:group>
                                                    <saf:DefaultSplashView/>
                                                </ui:group>
                                            </ui:if>
                                            <ui:else>
                                                <ui:group>
                                                    <saf:CriteriaBox arg:criteriaId=\"{= ?criteriaId }\" arg:loadId=\"{= ?searchId }\" ui:args=\"*\"/>
                                                    <div class=\"row no-gutter\">
                                                        <div class=\"col-md-3 col-sm12\">
                                                            <saf:FacetedSearchCriteria arg:loadId=\"{= ?searchId }\" arg:resourceType=\"{= COALESCE(?rootClass, owl:Thing) }\" ui:args=\"*\"/>
                                                        </div>
                                                        <div class=\"col-md-9 col-sm-12\">
                                                            <ui:if ui:condition=\"{= ?isLuceneAvailable }\">
                                                                <saf:SearchResultsLucene ui:args=\"*\"/>
                                                            </ui:if>
                                                            <ui:else>
                                                                <saf:SearchResults ui:args=\"*\"/>
                                                            </ui:else>
                                                        </div>
                                                    </div>
                                                </ui:group>
                                            </ui:else>
                                        </ui:group>
                                    </ui:loadable>
                                    <ui:if ui:condition=\"{= bound(?q) }\">
                                        <script>SafSearch.loadText('{= ENCODE_FOR_URI(?q) }',{= ?isLuceneAvailable })</script>
                                    </ui:if>
                                    <ui:if ui:condition=\"{= bound(?ct) }\">
                                        <script>SafSearch.load(\"{= ui:encodeNode(saf:getPropertyFromFilter(?ct), true, true) }\",\"{= ui:encodeNode(saf:getResourceFromFilter(?ct), true, true) }\")</script>
                                    </ui:if>
                                    <swa:Subscribe arg:code=\"swa.load('{= ?mainId }-saf-search')\" arg:event=\"org.topbraid.saf.search.empty\" arg:ownerId=\"{= ?mainId }\"/>
                                </ui:insert>
                            </ui:group>
                        </ui:group>
                    </ui:group>
                </ui:group>
            </saf:AbstractContainerLayout>
        </ui:group>
    </ui:group>
</saf:ViewPage>
"""^^ui:Literal ;
  rdfs:label "Search app" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:CriteriaTextSearch
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:withLucene ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<div class=\"criteriaSearch\" let:id=\"{= ui:uniqueId() }\" let:withLucene=\"{= IF(bound(?withLucene), ?withLucene, false) }\">
    <ui:createLink arg:extraLabelFunction=\"{= safconfig:PropertyLabel }\" ui:sendQueryGraph=\"{= true }\" ui:snippet=\"true\" ui:viewClass=\"{= safconfig:AutoCompleteSemanticSearch }\">
        <input id=\"{= ?id }\" name=\"{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?initialValue, true, true) }\"/>
        <ui:group let:appName=\"{= swa:appName() }\" let:displayId=\"{= ?id }-field\" let:onSelect=\"SafSearch.selectSuggestion\">
            <div class=\"input-group\">
                <input class=\"form-control\" id=\"{= ?displayId }\" placeholder=\"{= COALESCE(?placeholder, &quot;Start Typing&quot;) }\" type=\"text\" value=\"{= ui:label(?initialValue) }\"/>
                <span class=\"input-group-btn\">
                    <button class=\"btn btn-primary\" id=\"{= ?displayId }-button\" onclick=\"searchPortal.Facets.freeTextSearch(&quot;{= ?displayId }&quot;,&quot;{= ?loadId }&quot;,{= ?withLucene })\" type=\"button\">
                        <i class=\"fa fa-search\"/>
                    </button>
                </span>
            </div>
            <swa:WidgetInitializer arg:script=\"SafSearch.searchAhead(&quot;{= ?displayId }&quot;, &quot;{= ?id }&quot;,&quot;{= ?loadId }&quot;, &quot;{= ?link }&quot;,{= ?onSelect })\"/>
        </ui:group>
    </ui:createLink>
</div>
"""^^ui:Literal ;
  rdfs:label "criteria text search" ;
  rdfs:subClassOf swa:Elements ;
.
saf:DefaultAppliedFacets
  a saf:AppliedFacetList ;
  saf:appliedfacet [
      a saf:AppliedFacet ;
      saf:facetValue kennedys:EdwinSchlossberg ;
      saf:facetValueType <http://schema.org/spouse> ;
    ] ;
  rdfs:label "" ;
.
saf:DefaultObjectsBody
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:offset ;
      spl:valueType xsd:integer ;
      rdfs:comment "The offset for the \"next 50\" recursive calls." ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?subject) }\">
        <ui:call arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" let:special=\"{= swa:specialAddButtonFunction(?predicate, ?subject) }\" ui:template=\"{= swa:SortedObjects }\">
            <ui:if ui:condition=\"{= ((spr:isEmpty(?rs) &amp;&amp; (!swa:isViewMode())) &amp;&amp; (!bound(?special))) &amp;&amp; (!swa:isBlankNodeProperty(?predicate)) }\">
                <ui:if ui:condition=\"{= swa:isAutoAddRowProperty(?predicate) }\">
                    <div class=\"swa-object-row\">
                        <swa:ObjectWidgetRow arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\"/>
                    </div>
                </ui:if>
            </ui:if>
            <ui:else>
                <ui:group let:limit=\"{= 50 }\" let:offset=\"{= COALESCE(?offset, 0) }\">
                    <ui:forEach ui:limit=\"{= ?limit }\" ui:offset=\"{= ?offset }\" ui:resultSet=\"{= ?rs }\">
                        <div class=\"swa-object-row\">
                            <swa:ObjectWidgetRow arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\"/>
                        </div>
                    </ui:forEach>
                    <ui:group let:id=\"{= ui:uniqueId() }\" let:rowCount=\"{= spr:rowCount(?rs) }\">
                        <ui:loadable ui:loadId=\"{= ?id }\">
                            <ui:if ui:condition=\"{= ?rowCount &gt; (?offset + ?limit) }\">
                                <ui:if ui:condition=\"{= bound(?newOffset) }\">
                                    <swa:DefaultObjectsBody arg:offset=\"{= ?newOffset }\" ui:args=\"*\"/>
                                </ui:if>
                                <ui:else>
                                    <div class=\"swa-objects-show-more\">
                                        <a href=\"javascript:void(0)\" onclick=\"swa.load('{= ?id }', { newOffset: {= ?offset + ?limit } })\">Show entries {= (?offset + ?limit) + 1 } to {= spl:min(?rowCount, ((?offset + ?limit) + ?limit)) } of {= ?rowCount }</a>
                                    </div>
                                </ui:else>
                            </ui:if>
                        </ui:loadable>
                    </ui:group>
                </ui:group>
            </ui:else>
        </ui:call>
    </ui:if>
    <ui:else>
        <div class=\"swa-object-row\">
            <swa:ObjectWidgetRow arg:predicate=\"{= ?predicate }\"/>
        </div>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The default implementation of swa:ObjectsBody, containing one row for each value." ;
  rdfs:label "Default objects body" ;
  rdfs:subClassOf saf:ObjectsBody ;
.
saf:DefaultSplashView
  a ui:ViewElement ;
  ui:prototype """
<div class=\"saf-splash\" let:currentUser=\"{= smf:currentUserName() }\">
    <h3>Welcome, {= teamwork:userOrRoleLabel(smf:userWithName(?currentUser)) }</h3>
    <p>To get started, start typing a search term.</p>
</div>
"""^^ui:Literal ;
  rdfs:label "Default landing page" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:DefaultSummaryRowItem
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group>
    <div class=\"saf-search-result-summary\">
        <div class=\"row\">
            <div class=\"col-xs-11 col-xs-offset-1 item-left\">
                <h4 class=\"saf-result-title\" let:resourceLabel=\"{= ui:label(?resource) }\">
                    <saf:DetailsLink arg:resource=\"{= ?resource }\"/>
                </h4>
                <ui:resourceView ui:matchIds=\"saf-summary\" ui:resource=\"{= ?resource }\"/>
            </div>
            <div class=\"saf-flex-row\">
   &nbsp; <saf:SummaryRowItemCommentButton arg:resource=\"{= ?resource }\"/>
   &nbsp; <saf:SummaryRowItemNeighborGramButton arg:resource=\"{= ?resource }\"/>
  &nbsp;  <saf:LineageGramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
  &nbsp;  <saf:ImpactDiagramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
  &nbsp;  <saf:UsageDiagramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
            </div>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Summary row item" ;
  rdfs:subClassOf saf:SummaryRowItem ;
.
saf:DefaultView
  a ui:ViewElement ;
  ui:prototype """
<ui:group ui:id=\"saf-summary\" ui:priority=\"{= -10 }\">
    <saf:AbstractView arg:resource=\"{= ?resource }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "View" ;
  rdfs:subClassOf saf:AbstractView ;
.
saf:DelimitedDataSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:AbstractSection ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">
                        <ui:group let:object=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                            <span title=\"{= ui:label(?object) }\">
                                <ui:parse ui:str=\"{= ui:label(?object) }\"/>
                                <span>
                                    <swa:LangDisplay arg:lang=\"{= lang(?object) }\"/>
                                </span>
                            </span>
                        </ui:group>
                    </ui:forEach>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Summary delimited objects" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:DelimitedExternalLinks
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:DetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"detail-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">
                    <a href=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\" target=\"_blank\">{= spr:cell(?result, ?rowIndex, 0) }</a>
                </ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:DetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Delimited external link details section" ;
  rdfs:subClassOf saf:DelimitedResultSet ;
.
saf:DelimitedLiterals
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:DetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"detail-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\",\">
                    <ui:parse ui:str=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\"/>
                </ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:DetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Delimited object details section" ;
  rdfs:subClassOf saf:DelimitedResultSet ;
.
saf:DelimitedObjects
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:DetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"details-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">{= spr:cell(?resultSet, ?rowIndex, 0) }</ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:DetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Delimited objects" ;
  rdfs:subClassOf saf:DelimitedResultSet ;
.
saf:DelimitedResultSet
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:abstract true ;
  ui:private true ;
  rdfs:label "Result set details section" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:DetailView
  a ui:ViewElement ;
  ui:prototype """
<ui:group ui:id=\"saf-detail\" ui:priority=\"{= 10 }\">
    <saf:AbstractView arg:class=\"{= ?class } detail-section\" arg:resource=\"{= ?resource }\" arg:viewType=\"{= safm:DetailView }\" ui:args=\"*\"/>
    <saf:GraphInfo arg:resource=\"{= ?resource }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Detail view" ;
  rdfs:subClassOf saf:AbstractView ;
.
saf:DetailsLink
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:skippable=\"{= COALESCE(safconfig:isConfigSet(safm:DetailView, safm:skippable), false) }\">
    <ui:if ui:condition=\"{= ?skippable }\">
        <saf:EDGDetailsLinkElement ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <saf:DetailsLinkElement ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Details link" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:DetailsLinkElement
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:resourceLabel=\"{= COALESCE(?label, ui:label(?resource)) }\">
    <ui:if ui:condition=\"{= teamwork:hasEditorApplication(teamwork:getProjectType(URI(smf:definedIn(?resource)))) }\">
        <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
            <ui:group let:editorLink=\"{= teamwork:editorLink(?homeGraph, ?resource, ?none) }\">
                <a href=\"{= ?editorLink }\" target=\"_blank\" title=\"{= ?resourceLabel }\">
                    <span>{= ?resourceLabel }</span>
                </a>
            </ui:group>
        </ui:group>
    </ui:if>
    <ui:else>
        <span>{= ?resourceLabel }</span>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Details link element" ;
  rdfs:subClassOf saf:DetailsLink ;
.
saf:DetailsSection
  a ui:ViewElement ;
  ui:prototype """
<saf:AbstractDetailsSection arg:style=\"details-section\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Details section" ;
  rdfs:subClassOf saf:AbstractDetailsSection ;
.
saf:EDGDetailsLinkElement
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:icon ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
    <ui:group let:editorLink=\"{= teamwork:editorLink(?homeGraph, ?resource) }\" let:resourceLabel=\"{= COALESCE(?label, ui:label(?resource)) }\">
        <ui:if ui:condition=\"{= teamwork:hasEditorApplication(teamwork:getProjectType(URI(smf:definedIn(?resource)))) }\">
            <ui:createLink arg:node=\"{= ?resource }\" ui:servlet=\"search\" ui:varName=\"detailsLink\">
                <a href=\"{= IF(bound(?editorLink), CONCAT(&quot;./&quot;, ?editorLink), ?detailsLink) }\" target=\"_blank\" title=\"{= ?resourceLabel }\">
                    <ui:if ui:condition=\"{= bound(?icon) }\">
                        <i class=\"fa {= ?icon }\"/>
                    </ui:if>
                    <ui:else>
                        <span>{= ?resourceLabel }</span>
                    </ui:else>
                </a>
            </ui:createLink>
        </ui:if>
        <ui:else>
            <span>{= ?resourceLabel }</span>
        </ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Details link element" ;
  rdfs:subClassOf saf:DetailsLink ;
.
saf:EDGSummaryRowItem
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"saf-search-result-summary edg-summary-row-item\">
    <div class=\"row\">
        <div class=\"col-xs-12\">
            <h4 class=\"saf-result-title\" let:resourceLabel=\"{= ui:label(?resource) }\">
                <saf:DetailsLink arg:resource=\"{= ?resource }\"/>
            </h4>
            <ui:resourceView ui:matchIds=\"saf-summary\" ui:resource=\"{= ?resource }\"/>
            <div class=\"saf-flex-row\">
&nbsp;<saf:SummaryRowItemCommentButton arg:resource=\"{= ?resource }\"/>
   &nbsp; <saf:SummaryRowItemNeighborGramButton arg:resource=\"{= ?resource }\"/>
   &nbsp; <saf:LineageGramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
   &nbsp; <saf:ImpactDiagramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
   &nbsp; <saf:UsageDiagramButtonPlaceholder arg:resource=\"{= ?resource }\"/>
            </div>
        </div>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Summary row item" ;
  rdfs:subClassOf saf:SummaryRowItem ;
.
saf:EditMode
  a swa:Mode ;
  saf:objectWidgetRowClass saf:ObjectEditorRow ;
  swa:formObjectPredicateSelectionTemplate swa:SuitableObjectPredicates ;
  swa:isSingleFunction swa:isSingle ;
  swa:modeLabel "Edit&nbsp;" ;
  swa:modeName "saf-edit" ;
  swa:objectWidgetClass saf:ObjectEditor ;
  swa:objectWidgetRowClass saf:ObjectEditorRow ;
  rdfs:label "SAF Edit mode" ;
.
saf:EditorLinkElement
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
    <ui:group let:editorLink=\"{= teamwork:SimpleFormEditorLink(?homeGraph, ?resource) }\">
        <ui:if ui:condition=\"{= bound(?editorLink) }\">
            <a class=\"saf-more-link\" href=\"./{= ?editorLink }\" target=\"_blank\" title=\"More\">
                <i class=\"fas fa-external-link-alt\"/>
            </a>
        </ui:if>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Editor link element" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:ExpandableDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subject ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:targetProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  ui:prototype """
<ui:if ui:condition=\"{= bound(?subject) }\">
    <ui:group let:bid=\"{= ui:uniqueId() }\" let:cid=\"{= ui:uniqueId() }\">
        <ui:call arg:property=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" arg:targetProperty=\"{= ?targetProperty }\" ui:template=\"{= saf:sortedObjects }\">
            <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
                <section class=\"details-section\" id=\"{= ?label }\" title=\"{= ?label }\">
                    <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
                        <h5 class=\"details-label\">{= ?label }</h5>
                    </ui:if>
                    <div class=\"details-content details-truncate\" id=\"{= ?cid }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <swa:LiteralViewer arg:object=\"{= ?object }\"/>
                        </ui:forEach>
                    </div>
                    <ui:group let:rowCount=\"{= COALESCE(spr:rowCount(?rs), 0) }\">
                        <ui:if ui:condition=\"{= IF((?rowCount = 1), (fn:string-length(spr:cell(?rs, 0, 0)) &gt; 150), true) }\">
                            <div class=\"show-more\" id=\"{= ?bid }\" onclick=\"searchPortal.expandField(&quot;{= ?cid }&quot;,&quot;{= ?bid }&quot;)\" title=\"Read More/Less\">
                                <span class=\"show-more-label show-more-expand\">Read</span>
                            </div>
                        </ui:if>
                    </ui:group>
                </section>
            </ui:if>
        </ui:call>
    </ui:group>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Expandable details section" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:ExpandableSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:AbstractSection ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:group let:bid=\"{= ui:uniqueId() }\" let:cid=\"{= ui:uniqueId() }\">
                        <div class=\"details-content details-truncate\" id=\"{= ?cid }\">
                            <div class=\"saf-expandable-content\">
                                <ui:forEach ui:resultSet=\"{= ?rs }\">
                                    <p>
                                        <ui:parse ui:str=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\"/>
                                    </p>
                                </ui:forEach>
                            </div>
                        </div>
                        <ui:group let:rowCount=\"{= COALESCE(spr:rowCount(?rs), 0) }\">
                            <!--<ui:if ui:condition=\"{= IF((?rowCount = 1), (fn:string-length(xsd:string(spr:cell(?resultSet, 0, 0))) &gt; 150), true) }\">-->
                            <div class=\"show-more\" id=\"{= ?bid }\" onclick=\"searchPortal.expandField(&quot;{= ?cid }&quot;,&quot;{= ?bid }&quot;)\" title=\"Read More/Less\">
                                <span class=\"show-more-label show-more-expand\">Read</span>
                            </div>
                            <script>searchPortal.needsMore(\"{= ?cid }\", \"{= ?bid }\")</script>
                            <!--                          </ui:if>-->
                        </ui:group>
                    </ui:group>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Expandable details section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:FacetedSearchCriteria
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:searchEvent ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?resourceType) }\">
        <ui:group let:queryGraph=\"{= ui:currentQueryGraph() }\">
            <ui:setContext ui:queryGraph=\"{= ?queryGraph }\">
                <ui:loadable class=\"ui-layout-content\" ui:loadId=\"{= ?loadId }\">
                    <ui:if ui:condition=\"{= COALESCE(ui:contextValue(&quot;hasConfiguredGraph&quot;), false) }\">
                        <script>{= swa:publishEvent(swa:searchEvent(?searchEvent), CONCAT(\"'\", xsd:string(?loadId), \"'\")) }</script>
                        <ui:group let:filters=\"{= IF((bound(?facetFilters) &amp;&amp; (smf:trim(?facetFilters) != &quot;&quot;)), ?facetFilters, ?none) }\" let:text=\"{= IF((bound(?freeText) &amp;&amp; (smf:trim(?freeText) != &quot;&quot;)), ?freeText, ?none) }\">
                            <div class=\"sp-facet-wrapper\">
                                <saf:FacetsListJS arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?text }\" arg:loadId=\"{= ?loadId }\"/>
                            </div>
                        </ui:group>
                    </ui:if>
                    <ui:else>
                        <div class=\"saf-empty-result\">
                            <label> No matching facets.</label>
                        </div>
                    </ui:else>
                </ui:loadable>
            </ui:setContext>
            <swa:WidgetInitializer arg:script=\"searchPortal.Facets.init(&quot;{= ?loadId }&quot;)\"/>
        </ui:group>
    </ui:if>
    <swa:SubscribeArgument arg:argumentName=\"resourceType\" arg:event=\"{= ?classSelectedEvent }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Faceted search criteria" ;
  rdfs:subClassOf swa:Elements ;
.
saf:FacetedTextSearchViewCriteria
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"criteriaSearch\" let:id=\"{= ui:uniqueId() }\">
    <div class=\"input-group\">
        <input autocomplete=\"off\" autofocus=\"autofucus\" class=\"form-control\" id=\"{= ?id }\" placeholder=\"Start Typing...\" type=\"text\" value=\"\"/>
        <span class=\"input-group-btn\">
            <button class=\"btn btn-primary\" id=\"{= ?id }-button\" onclick=\"searchPortal.Facets.freeTextSearch(&quot;{= ?id }&quot;,&quot;{= ?loadId }&quot;,SafCriteria.rebuild)\" type=\"button\">
                <i class=\"fa fa-search\"/>
            </button>
            <script>$('#{= ?id }').keydown(function(e){ if(e.keyCode === 13) { $('#{= ?id }-button').click(); } })</script>
        </span>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Faceted text search view JS" ;
  rdfs:subClassOf swa:Elements ;
.
saf:FacetedTextSearchViewJS
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initString ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div let:id=\"{= ui:uniqueId() }\">
    <div class=\"input-group\">
        <input autocomplete=\"off\" class=\"form-control\" id=\"{= ?id }\" placeholder=\"Search...\" type=\"text\" value=\"{= IF((?initString = &quot;&quot;), &quot;&quot;, ?initString) }\"/>
        <span class=\"input-group-btn\">
            <button class=\"btn btn-primary\" id=\"{= ?id }-button\" onclick=\"searchPortal.Facets.freeTextSearch(&quot;{= ?id }&quot;,&quot;{= ?loadId }&quot;)\" type=\"button\">
                <i class=\"fa fa-search\"/>
            </button>
            <script>$(\"#{= ?id }\").keydown(function(e){ if(e.keyCode === 13) { $(\"#{= ?id }-button\").click(); } })</script>
        </span>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Faceted text search view JS" ;
  rdfs:subClassOf swa:Elements ;
.
saf:FacetsListJS
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"swa-facets-facets-div\">
    <div class=\"swa-facets-facets-sidenav\">
        <div class=\"swa-facets-collapse\" style=\"visibility:hidden;\">
            <ui:call arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?freeText }\" ui:template=\"{= saf:getTopFacets }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <saf:PropertyFacetViewJS ui:args=\"*\" ui:this=\"{= ?facet }\"/>
                </ui:forEach>
            </ui:call>
        </div>
        <div class=\"saf-empty-result ui-helper-hidden-accessible\">
            <label>No matching facets.</label>
        </div>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Facets list JS" ;
  rdfs:subClassOf swa:Elements ;
.
saf:Functions
  a spin:Function ;
  rdfs:label "Functions" ;
  rdfs:subClassOf swa:Functions ;
.
saf:GraphInfo
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\" letrs:types=\"{#
        SELECT ?type
        WHERE {
            ?resource swa:resourceTypes ?type .
        } }\">
    <ui:if ui:condition=\"{= bound(?homeGraph) }\">
        <section class=\"saf-section graph_info\">
            <ui:if ui:condition=\"{= spr:rowCount(?types) &gt; 1 }\">
                <span class=\"text-muted\"> An </span>
            </ui:if>
            <ui:else>
                <span class=\"text-muted\"> A </span>
            </ui:else>
            <ui:forEach ui:resultSet=\"{= ?types }\" ui:separator=\", \">
                <span class=\"text-muted\" title=\"{= ?type }\">[{= ui:label(?type) }]</span>
            </ui:forEach>
            <span class=\"text-muted\"> from <span class=\"text-muted\" title=\"{= ?homeGraph }\">
                    <i>{= teamwork:projectLabel(IRI(?homeGraph)) }</i>
                </span>
            </span>
        </section>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Graph info" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:HyperlinkSection
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:AbstractSection ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <div class=\"saf-hyperlink-list\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <ui:group let:object=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                                <div let:href=\"{= IF(saf:hasProtocol(?object), ?object, CONCAT(&quot;http://&quot;, ?object)) }\">
                                    <a class=\"saf-external-link\" href=\"{= ?href }\" target=\"_blank\" title=\"{= ui:label(?object) }\">{= ui:label(?object) }</a>
                                </div>
                            </ui:group>
                        </ui:forEach>
                    </div>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Hyperlink section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:HyperlinkTextFieldEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<saf:AbstractTextFieldEditor arg:inputType=\"url\" arg:suppressLanguage=\"{= true }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Hyperlink text field editor" ;
  rdfs:subClassOf saf:AbstractTextFieldEditor ;
.
saf:ImageSection
  a ui:ViewElement ;
  ui:prototype """
<ui:group>
    <saf:AbstractSection arg:showLabel=\"{= false }\" ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <ui:group let:source=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                            <img alt=\"Image of {= ui:label(?resource) }\" class=\"saf-image\" src=\"{= ?source }\" title=\"Image of {= ui:label(?resource) }\"/>
                        </ui:group>
                    </ui:forEach>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Image view" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:ImpactDiagramButtonPlaceholder
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:Initializer
  a ui:NodeClass ;
  ui:prototype """
<script let:tabKey=\"{= ui:contextValue(&quot;swaTabKey&quot;) }\" let:tabStorageKey=\"{= ui:contextValue(&quot;swaTabStorageKey&quot;) }\">$(document).ready(function() {
searchPortal.setServlet('search');
	swa.queryGraphURI='{= ui:currentQueryGraph() }';<ui:if ui:condition=\"{= bound(?tabKey) &amp;&amp; bound(?tabStorageKey) }\">var key = '{= ?tabStorageKey }tabs-{= ?tabKey }';
		swa.tabQueryGraphURIs[key] = '{= ui:currentQueryGraph() }';</ui:if>
});</script>
"""^^ui:Literal ;
  rdfs:comment "Should be placed into the beginning of an SAF application's main element, i.e. the start of the body. Will set some variables required by some SAF features." ;
  rdfs:label "Initializer" ;
  rdfs:subClassOf swa:ScriptElements ;
.
saf:JSONServices
  a ui:Service ;
  rdfs:label "JSONServices" ;
  rdfs:subClassOf ui:JSONServices ;
.
saf:LabeledObjects
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:single ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to only allow at most one object for this component." ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?predicate) }\">
    <div>ERROR: Missing arg:predicate for object</div>
</ui:if>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:if ui:condition=\"{= (((!bound(?hideIfEmpty)) || (?hideIfEmpty != true)) || (swa:mode() != swa:ViewMode)) || (bound(?subject) &amp;&amp; (EXISTS {
    ?subject ?predicate ?anyObject .
} || spl:instanceOf(?predicate, spin:MagicProperty))) }\">
    <ui:if ui:condition=\"{= (!bound(?hideInModes)) || (!swa:containsCurrentModeName(?hideInModes)) }\">
        <ui:if ui:condition=\"{= ((rdf:type != ?predicate) || (swa:mode() != swa:SearchMode)) || COALESCE(ui:contextValue(&quot;suppressRDFType&quot;), true) }\">
            <div class=\"saf-labeled-objects\" id=\"{= ?elementId }\" let:pid=\"{= ui:uniqueId() }\">
                <ui:if ui:condition=\"{= swa:mode != swa:ViewMode }\">
                    <div class=\"form-group saf-add-label\" let:addWidget=\"{= saf:bestAddWidget(?predicate) }\">
                        <div class=\"col-lg-6 col-md-6 col-sm-6\">
                            <ui:dynamicView arg:editWidget=\"{= ?editWidget }\" arg:label=\"{= IF(bound(?label), ?label, ?none) }\" arg:predicate=\"{= ?predicate }\" arg:showLabel=\"{= IF(bound(?showLabel), ?showLabel, ?none) }\" arg:single=\"{= ?single }\" arg:subject=\"{= ?subject }\" arg:viewWidget=\"{= ?viewWidget }\" ui:class=\"{= COALESCE(?addWidget, saf:ObjectAddWidgetDefault) }\"/>
                        </div>
                    </div>
                </ui:if>
                <div class=\"form-group\">
                    <ui:if let:parentViewClass=\"{= saf:bestParentView(?predicate) }\" ui:condition=\"{= bound(?predicate) &amp;&amp; (swa:mode() != swa:ViewMode) }\">
                        <div class=\"col-lg-12 col-md-12 col-sm-12 saf-source\" let:parentPredicate=\"{= saf:getParentProperty(?predicate) }\">
                            <ui:dynamicView arg:predicate=\"{= ?parentPredicate }\" arg:showLabel=\"{= false }\" arg:subject=\"{= ?subject }\" arg:targetProperty=\"{= ?parentPredicate }\" ui:class=\"{= COALESCE(?parentViewClass, ?none) }\"/>
                        </div>
                    </ui:if>
                    <div class=\"col-lg-12 col-md-12 col-sm-12 row_to_remove\" id=\"{= ?pid }\">
                        <ui:setContext ui:varName=\"parentClass\" ui:varValue=\"{= swa:localRange(?predicate, ?subject) }\">
                            <ui:setContext ui:varName=\"viewWidget\" ui:varValue=\"{= ?viewWidget }\">
                                <ui:setContext ui:varName=\"editWidget\" ui:varValue=\"{= ?editWidget }\">
                                    <saf:ObjectsBody ui:args=\"*\"/>
                                </ui:setContext>
                            </ui:setContext>
                        </ui:setContext>
                    </div>
                </div>
            </div>
        </ui:if>
    </ui:if>
</ui:if>
"""^^ui:Literal ;
  rdfs:comment "The default implementation of swa:Object and swa:Objects. Displays a label on the left and the value widget(s) on the right." ;
  rdfs:label "Labeled objects" ;
  rdfs:subClassOf saf:Objects ;
.
saf:LangSelector
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:changeHandler ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional JS snippet that shall be called on changes of the selection." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:initialValue ;
      spl:valueType xsd:string ;
      rdfs:comment "The initial language to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:uid ;
      spl:valueType xsd:string ;
      rdfs:comment "The uid of the surrounding widget. Will become the XY half of the lang-XY field name." ;
    ] ;
  swa:defaultLanguages "ar de en es fr it pt ru zh" ;
  ui:private true ;
  ui:prototype """
<div>
    <select class=\"swa-lang-selector form-control\" id=\"{= ?uid }-lang\" name=\"lang-{= ?uid }\" onchange=\"{= ?onChange }\" title=\"Language (e.g. 'en' for English)\">
        <option selected=\"{= IF(swa:falseOrUnbound(?initialValue), &quot;selected&quot;, ?none) }\" value=\"\">Select Language</option>
        <ui:forEach ui:resultSet='{#
                SELECT DISTINCT ?lang
                WHERE {
                    {
                        GRAPH ui:graph {
                            BIND (COALESCE(spl:object(saf:LangSelector, swa:customLanguages), spl:object(saf:LangSelector, swa:defaultLanguages)) AS ?langs) .
                        } .
                        ?lang spif:split ( ?langs \" \" ) .
                    }
                    UNION
                    {
                        BIND (xsd:string(?initialValue) AS ?lang) .
                    } .
                    FILTER (?lang != \"\") .
                } }'>
            <option selected=\"{= IF((?initialValue = ?lang), &quot;selected&quot;, ?none) }\">{= ?lang }</option>
        </ui:forEach>
    </select>
</div>
"""^^ui:Literal ;
  ui:view """
<ui:group ui:id=\"form\">
    <div>The custom languages setting must contain a space-separated list of ISO country
		codes such as \"de en fr\", overloading the default languages: \"{= spl:object(?this, swa:defaultLanguages) }\".</div>
    <swa:Object arg:editWidget=\"{= swa:PlainTextFieldEditor }\" arg:predicate=\"{= swa:customLanguages }\" arg:subject=\"{= ?this }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A select box that allows users to select a language code. The result is a form field such as lang-uniqueId42 that is sent to the edit servlet. The list of languages is specified by the property swa:defaultLanguages. These can be overloaded by adding a triple swa:LangSelector swa:customLanguages \"space-separated string\" to a UI graph." ;
  rdfs:label "Lang selector" ;
  rdfs:subClassOf swa:FormElements ;
.
saf:LineageGramButtonPlaceholder
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:LinkTypeEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:class=\"{= swa:localRange(?predicate, ?subject) }\" let:id=\"{= ui:uniqueId() }\">
    <div class=\"col-xs-6\">
        <input name=\"resource-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?subject, true, true) }\"/>
        <input name=\"path-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(rdf:type, true, true) }\"/>
        <ui:group let:initialValue=\"{#
                SELECT DISTINCT ?type
                WHERE {
                    ?subect a ?type .
                    FILTER (?type != ?class) .
                } }\">
            <ui:if ui:condition=\"{ bound(?initialValue)\">
                <input name=\"old={= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?initialValue, true, true) }\"/>
            </ui:if>
            <saf:ClassChildrenSelector arg:initialValue=\"{= COALESCE(?initialValue, ?none) }\" arg:name=\"new-{= ?id }\" arg:predicate=\"{= ?predicate }\"/>
        </ui:group>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Link type editor" ;
  rdfs:subClassOf saf:ObjectEditor ;
.
saf:ListResultSet
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:DetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"detail-body\">
            <ul class=\"small-inset\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <li>
                            <swa:HTMLLiteralViewer arg:object=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\"/>
                        </li>
                    </ui:forEach>
                </ui:call>
            </ul>
        </ui:insert>
    </saf:DetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "List result set" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:MailToSection
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:AbstractSection ui:args=\"*\">
        <ui:insert ui:into=\"section-body\">
            <ui:if ui:condition=\"{= bound(?resultSet) }\">
                <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <ui:group let:object=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                            <div>
                                <a href=\"mailto:{= ?object }\" title=\"Contact {= ui:label(?object) }\">{= ui:label(?object) }</a>
                            </div>
                        </ui:group>
                    </ui:forEach>
                </ui:call>
            </ui:if>
        </ui:insert>
    </saf:AbstractSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Mail to section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:NavigableNestedSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <ui:if ui:condition=\"{= bound(?resultSet) }\">
        <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <ui:group let:nestedResource=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                    <saf:AbstractSection arg:class=\"detail-section nested-section\" ui:args=\"*\">
                        <ui:insert ui:into=\"section-body\">
                            <span title=\"{= ui:label(?nestedResource) }\">{= ui:label(?nestedResource) }</span>
                            <span>
                                <saf:DetailsLinkElement arg:icon=\"fa-external-link-square\" arg:resource=\"{= ?nestedResource }\"/>
                            </span>
                            <ui:group let:view=\"{= ui:contextValue(&quot;view&quot;) }\">
                                <ui:dynamicView arg:parent=\"{= ?predicate }\" arg:viewClassFunction=\"{= saf:defaultBestViewStyle }\" ui:class=\"{= COALESCE(saf:bestViewStyle(?viewType), saf:DetailView) }\" ui:resource=\"{= ?nestedResource }\"/>
                            </ui:group>
                        </ui:insert>
                    </saf:AbstractSection>
                </ui:group>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Nested section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:NestedEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:class=\"{= ui:contextValue(&quot;parentClass&quot;) }\" let:fid=\"{= ui:uniqueId() }\">
    <ui:group let:range=\"{= swa:localRange(?predicate, ?subject) }\">
        <div class=\"form-group saf-nested\" id=\"{= ?fid }\">
            <div class=\"col-xs-11\">
                <ui:setContext ui:varName=\"mode\" ui:varValue=\"saf-edit\">
                    <ui:setContext ui:varName=\"resourceType\" ui:varValue=\"{= ?range }\">
                        <ui:classView arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?object }\" ui:class=\"{= ?range }\" ui:matchIds=\"saf-edit-nested,saf-edit,saf-form\" ui:resource=\"{= ?object }\"/>
                    </ui:setContext>
                </ui:setContext>
            </div>
            <div class=\"col-xs-1\">
                <button class=\"btn btn-danger\" onclick=\"searchPortal.deleteNestedRow(&quot;{= ?fid }&quot;,&quot;new-{= ?uid }&quot;)\" type=\"button\">
                    <i class=\"fas fa-times\"/>
                </button>
                <ui:if ui:condition=\"{= !bound(?newObject) }\">
                    <input id=\"{= ?id }\" name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ui:encodeNode(?object, true, true) }\"/>
                </ui:if>
            </div>
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "deprecated, to be removed do not use" ;
  rdfs:label "Nested editor" ;
  rdfs:subClassOf saf:ObjectEditor ;
.
saf:NestedSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <ui:if ui:condition=\"{= bound(?resultSet) }\">
        <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <ui:group let:nestedResource=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\">
                    <saf:AbstractSection arg:class=\"detail-section nested-section\" ui:args=\"*\">
                        <ui:insert ui:into=\"section-body\">
                            <span title=\"{= ui:label(?nestedResource) }\">{= ui:label(?nestedResource) }</span>
                            <ui:group let:view=\"{= ui:contextValue(&quot;view&quot;) }\">
                                <ui:dynamicView arg:parent=\"{= ?predicate }\" arg:viewClassFunction=\"{= saf:defaultBestViewStyle }\" ui:class=\"{= COALESCE(saf:bestViewStyle(?viewType), saf:DefaultView) }\" ui:resource=\"{= ?nestedResource }\"/>
                            </ui:group>
                        </ui:insert>
                    </saf:AbstractSection>
                </ui:group>
            </ui:forEach>
        </ui:call>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Nested section" ;
  rdfs:subClassOf saf:AbstractSection ;
.
saf:Object
  a ui:NodeClass ;
  ui:prototype """
<saf:LabeledObjects arg:single=\"{= true }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:comment "Inserts a widget for a single value of a given predicate at the given subject. This element should only be used if the property doesn't have a max cardinality of 1 anyway, to overload the default behavior." ;
  rdfs:label "Object" ;
  rdfs:subClassOf swa:AbstractObject ;
.
saf:ObjectAddWidget
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editWidget ;
      spl:valueType swa:ObjectEditorClass ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:searchWidget ;
      spl:valueType swa:ObjectFacetClass ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:showLabel ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:single ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:uid ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:viewWidget ;
      spl:valueType swa:ObjectViewerClass ;
    ] ;
  ui:abstract true ;
  ui:private true ;
  rdfs:label "Object add widget" ;
  rdfs:subClassOf swa:ObjectElements ;
.
saf:ObjectAddWidgetBlank
  a ui:NodeClass ;
  ui:prototype """
<saf:AbstractObjectAddWidget ui:args=\"*\">
    <ui:insert ui:into=\"add-widget\">
        <div class=\"input-group\" let:inputId=\"{= ui:uniqueId() }\"/>
    </ui:insert>
</saf:AbstractObjectAddWidget>
"""^^ui:Literal ;
  rdfs:subClassOf saf:AbstractObjectAddWidget ;
.
saf:ObjectAddWidgetDefault
  a ui:NodeClass ;
  ui:prototype """
<saf:AbstractObjectAddWidget ui:args=\"*\">
    <ui:insert ui:into=\"add-widget\">
        <ui:group let:buttonId=\"error-{= ?predicate }\">
            <button class=\"btn btn-default btn-sm saf-add-button {= IF(((?single || swa:isSingle(?predicate, ?subject)) &amp;&amp; (!swa:isBlankNodeProperty(?predicate))), &quot;swa-display-none&quot;, &quot; swa-icon&quot;) }\" id=\"{= ?buttonId }\" onclick=\"searchPortal.addObjectEditorRow(&quot;{= ui:currentQueryGraph() }&quot;,&quot;{= ?uid }&quot;,{= ?single = true },&quot;{= ?subject }&quot;,&quot;{= ?predicate }&quot;,&quot;{= COALESCE(swa:appName(), &quot;&quot;) }&quot;,&quot;{= ?editWidget }&quot;)\" type=\"button\">
                <i class=\"fa fa-plus\"/>
            </button>
        </ui:group>
    </ui:insert>
</saf:AbstractObjectAddWidget>
"""^^ui:Literal ;
  rdfs:label "Object add widget default" ;
  rdfs:subClassOf saf:AbstractObjectAddWidget ;
.
saf:ObjectAddWidgetNested
  a ui:NodeClass ;
  ui:prototype """
<saf:AbstractObjectAddWidget ui:args=\"*\">
    <ui:insert ui:into=\"add-widget\">
        <ui:group let:buttonId=\"error-{= ?predicate }\">
            <button class=\"btn btn-default btn-sm\" id=\"{= ?buttonId }\" onclick=\"searchPortal.addNestedEditorRow(&quot;{= ui:currentQueryGraph() }&quot;,&quot;{= ?uid }&quot;,{= ?single = true },&quot;{= ?subject }&quot;,&quot;{= ?predicate }&quot;,&quot;{= COALESCE(swa:appName(), &quot;&quot;) }&quot;,&quot;{= ?editWidget }&quot;)\" type=\"button\">
                <i class=\"fa fa-plus\"/>
            </button>
        </ui:group>
    </ui:insert>
</saf:AbstractObjectAddWidget>
"""^^ui:Literal ;
  rdfs:label "Object add widget nested resources" ;
  rdfs:subClassOf saf:AbstractObjectAddWidget ;
.
saf:ObjectAddWidgetTag
  a ui:NodeClass ;
  ui:prototype """
<saf:AbstractObjectAddWidget ui:args=\"*\">
    <ui:insert ui:into=\"add-widget\">
        <ui:setContext ui:varName=\"removable\" ui:varValue=\"{= false }\"/>
        <span class=\"input-group-btn\" let:buttonId=\"{= ui:uniqueId() }\">
            <button class=\"btn btn-default\" id=\"{= ?buttonId }\" onclick=\"searchPortal.addTagEditorRow('{= ui:currentQueryGraph() }','{= ?uid }',{= ?single = true },'{= ?subject }','{= ?predicate }','{= COALESCE(swa:appName(), &quot;&quot;) }','{= ?editWidget }')\" type=\"button\">
                <i class=\"fa fa-plus\"/>
            </button>
            <script>$('#{= ?inputId }-field').keydown(function(e){ if(e.keyCode === 13){ $('#{= ?buttonId }').click();  }})</script>
        </span>
    </ui:insert>
</saf:AbstractObjectAddWidget>
"""^^ui:Literal ;
  rdfs:label "Object add tag" ;
  rdfs:subClassOf saf:AbstractObjectAddWidget ;
.
saf:ObjectEditor
  a swa:ObjectEditorClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:removable ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rid ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:class=\"{= COALESCE(ui:contextValue(&quot;editWidget&quot;), swa:bestObjectEditorClass(?object, ?predicate, ?subject)) }\">
    <ui:if ui:condition=\"{= bound(?class) }\">
        <div id=\"{= ?rid }\">
            <ui:dynamicView arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:removable=\"{= ?removable }\" arg:rid=\"{= ?rid }\" arg:subject=\"{= ?subject }\" arg:uid=\"{= ?uid }\" ui:class=\"{= ?class }\"/>
        </div>
    </ui:if>
    <ui:else>
        <b>ERROR: No ObjectEditor found for {= ui:label(?predicate) } at {= ui:label(swa:resourceType(?subject)) } and range {= swa:localRange(?predicate, ?subject) }</b>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Inserts an editor for a given object, with different behavior depending on the type of object or the context." ;
  rdfs:label "Object editor" ;
  rdfs:subClassOf swa:ObjectWidget ;
.
saf:ObjectEditorRow
  a saf:ObjectWidgetRowClass ;
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:editWidgetOverride ;
      spl:valueType swa:ObjectEditor ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:rid=\"{= ui:uniqueId() }\" let:uid=\"{= ui:uniqueId() }\">
    <ui:if ui:condition=\"{= ((bound(?subject) &amp;&amp; bound(?object)) &amp;&amp; bound(?predicate)) &amp;&amp; (swa:isReadOnlyTriple(?subject, ?predicate, ?object) || swa:isPrimaryKeyProperty(?predicate, ?subject)) }\">
        <ui:setContext ui:varName=\"mode\" ui:varValue=\"view\">
            <div class=\"swa-object-row-read-only\">
                <swa:ObjectViewer ui:args=\"*\"/>
            </div>
        </ui:setContext>
    </ui:if>
    <ui:else>
        <div class=\"outer-editor-row\" id=\"{= ?uid }\">
            <ui:loadable ui:loadId=\"swa-object-row-{= ?uid }\">
                <swa:ObjectEditorHiddenFields ui:args=\"*\"/>
                <ui:setContext ui:varName=\"removable\" ui:varValue=\"{= true }\">
                    <ui:setContext ui:varName=\"{= IF(bound(?editWidgetOverride), &quot;editWidget&quot;, ?none) }\" ui:varValue=\"{= ?editWidgetOverride }\">
                        <saf:ObjectEditor ui:args=\"*\"/>
                    </ui:setContext>
                </ui:setContext>
            </ui:loadable>
        </div>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Object editor row" ;
  rdfs:subClassOf saf:ObjectWidgetRow ;
.
saf:ObjectViewer
  a swa:ObjectViewerClass ;
  ui:private true ;
  ui:prototype """
<div class=\"swa-object-widget\" let:class=\"{= COALESCE(ui:contextValue(&quot;viewWidget&quot;), swa:bestObjectViewerClass(?object, ?predicate, ?subject)) }\">
    <ui:if ui:condition=\"{= bound(?class) }\">
        <ui:dynamicView arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" ui:class=\"{= ?class }\"/>
    </ui:if>
    <ui:else>
        <ui:if ui:condition=\"{= bound(?object) }\">[Error: no ObjectViewer found for {= ui:label(?subject) }, {= ui:label(?predicate) }, {= ui:label(?object) }]</ui:if>
    </ui:else>
</div>
"""^^ui:Literal ;
  rdfs:label "Object viewer" ;
  rdfs:subClassOf swa:ObjectWidget ;
.
saf:ObjectViewerClass
  a rdfs:Class ;
  rdfs:comment "The metaclass of object viewer elements." ;
  rdfs:label "Object viewer class" ;
  rdfs:subClassOf saf:ObjectWidgetClass ;
.
saf:ObjectViewerRow
  a swa:ObjectWidgetRowClass ;
  ui:private true ;
  ui:prototype """
<ui:group let:datatype=\"{= IF(isLiteral(?object), datatype(?object), ?no) }\" let:uid=\"{= ui:uniqueId() }\">
    <div about=\"{= IF(isIRI(?subject), ?subject, ?noBNodes) }\" class=\"swa-widget-row\" content=\"{= IF(isLiteral(?object), ?object, ?no) }\" datatype=\"{= ?datatype }\" href=\"{= IF(isIRI(?object), ?object, ?no) }\" id=\"{= ?uid }\" property=\"{= IF(isLiteral(?object), ui:encodeNode(?predicate), ?no) }\" rel=\"{= IF(isIRI(?object), ui:encodeNode(?predicate), ?no) }\" ui:addNamespace=\"{= IF(swa:hasPrefix(?predicate), ?predicate, ?none) }\">
        <swa:ObjectViewer arg:uid=\"{= ?uid }\" ui:args=\"*\"/>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A row in an ObjectViewer." ;
  rdfs:label "Object viewer row" ;
  rdfs:subClassOf saf:ObjectWidgetRow ;
.
saf:ObjectWidgetClass
  a rdfs:Class ;
  rdfs:comment "Metaclass of the various object widget types." ;
  rdfs:label "Object widget class" ;
  rdfs:subClassOf ui:NodeClass ;
.
saf:ObjectWidgetRow
  a swa:ObjectWidgetRowClass ;
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:object ;
      rdfs:comment "The object node." ;
    ] ;
  ui:prototype """
<ui:dynamicView arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" ui:class=\"{= swa:modeProperty(saf:objectWidgetRowClass) }\"/>
"""^^ui:Literal ;
  rdfs:comment "Superclass for the widget row types." ;
  rdfs:label "Object widget row" ;
  rdfs:subClassOf swa:ObjectElements ;
.
saf:ObjectWidgetRowClass
  a rdfs:Class ;
  rdfs:comment "Metaclass for ObjectWidgetRows." ;
  rdfs:label "Object widget row class" ;
  rdfs:subClassOf ui:NodeClass ;
.
saf:Objects
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:open ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If arg:openable=\"true\" then this can be set to true to have the content visible by default." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:openable ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to have an open/close icon appear next to the label. Requires a predicate to be present. The content will appear hidden in search mode, but arg:open=\"true\" can be used to control the state." ;
    ] ;
  ui:prototype """
<ui:group let:function=\"{= swa:modeProperty(swa:isSingleFunction) }\">
    <swa:LabeledObjects arg:single=\"{= IF(bound(?function), spif:invoke(?function, ?predicate, ?subject), swa:modeProperty(swa:isSingleConstant)) }\" ui:args=\"*\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A two-columned structure with a label on the left and zero or more objects on the right." ;
  rdfs:label "Objects" ;
  rdfs:subClassOf swa:AbstractObject ;
.
saf:ObjectsBody
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:single ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to allow at most one value." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:dynamicView arg:predicate=\"{= ?predicate }\" arg:single=\"{= ?single }\" arg:subject=\"{= ?subject }\" ui:class=\"{= COALESCE(swa:modeProperty(swa:objectsBodyClass), swa:DefaultObjectsBody) }\"/>
"""^^ui:Literal ;
  rdfs:comment "The body of an Object(s) widget, typically containing one row for each value. This can be \"overloaded\" via a mode property." ;
  rdfs:label "Objects body" ;
  rdfs:subClassOf swa:ObjectElements ;
.
saf:ObjectsDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <ui:if ui:condition=\"{= EXISTS {
        ?subject ?predicate ?anyObject .
    } }\">
        <saf:DetailsSection ui:args=\"*\">
            <ui:insert ui:into=\"detail-body\">
                <swa:ObjectsBody arg:predicate=\"{= ?predicate }\" arg:single=\"{= true }\"/>
            </ui:insert>
        </saf:DetailsSection>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Objects details section" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:ParamDebug
  a ui:NodeClass ;
  ui:prototype """
<div class=\"container\">
    <div class=\"well\">
        <ul>
            <ui:forEach ui:resultSet=\"{#
                    SELECT ?key ?value
                    WHERE {
                        rdf:nil ui:params ?key .
                        BIND (ui:param(?key) AS ?value) .
                    } }\">
                <li>
                    <span class=\"swa-word-wrap-break-word\">{= ?key } | {= ?value }</span>
                </li>
            </ui:forEach>
            <li>
                <span class=\"swa-word-wrap-break-word\">_scope | {= ui:currentQueryGraph() }</span>
            </li>
            <li>
                <span class=\"swa-word-wrap-break-word\">_globalVar | {= ui:globalVarValue(\"hasConfiguredGraph\") }</span>
            </li>
        </ul>
    </div>
</div>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Param debug" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:PropertyFacetViewJS
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:containerId=\"{= ui:uniqueId() }\" let:groupId=\"{= ui:uniqueId() }\" let:isLuceneAvailable=\"{= swa:falseOrUnbound(saf:isLuceneDisabled()) }\">
    <div class=\"facet-container\" id=\"{= ?containerId }\" let:id=\"{= ui:uniqueId() }\">
        <div onclick=\"searchPortal.Facets.toggleTwiddle('{= ?id }','{= ?this }','{= ui:currentQueryGraph() }')\" tabindex=\"0\">
            <h5 class=\"swa-facets-facet-header\" id=\"{= ?id }\" let:displayLabel=\"{= smf:titleCase(ui:label(IRI(?this))) }\">
                <span title=\"{= ?displayLabel }\">{= ?displayLabel }</span>
                <i class=\"swa-facets-icon-chevron-up swa-facets-icon-chevron\" id=\"{= ?id }-twiddle-icon\"/>
            </h5>
        </div>
        <div class=\"swa-facets-ul ui-helper-hidden-accessible\" id=\"{= ?id }-body\" name=\"{= ?this }\">
            <ui:if ui:condition=\"{= ?isLuceneAvailable }\">
                <ui:loadable ui:loadLater=\"{= true }\">
                    <saf:PropertyFacetViewPartLucene arg:containerId=\"{= ?containerId }\" arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?freeText }\" arg:loadId=\"{= ?loadId }\" arg:offset=\"{= 0 }\" arg:property=\"{= ?this }\"/>
                </ui:loadable>
            </ui:if>
            <ui:else>
                <ui:loadable ui:loadLater=\"{= true }\">
                    <saf:PropertyFacetViewPartJS arg:containerId=\"{= ?containerId }\" arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?freeText }\" arg:loadId=\"{= ?loadId }\" arg:offset=\"{= 0 }\" arg:property=\"{= ?this }\"/>
                </ui:loadable>
            </ui:else>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Property facet view JS" ;
  rdfs:subClassOf swa:Elements ;
.
saf:PropertyFacetViewPartJS
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:limit=\"{= 10 }\" let:queryGraph=\"{= ui:currentQueryGraph() }\">
    <ui:group let:queryString=\"{= saf:facetSearchQuery(?property, ?filters, ?freeText) }\">
        <ui:call ui:queryString=\"{= ?queryString }\" ui:varName=\"values\">
            <ui:if ui:condition=\"{= spr:rowCount(?values) = 0 }\">
                <script>searchPortal.Facets.hideParent('{= ?containerId }')</script>
            </ui:if>
            <ui:else>
                <ui:forEach ui:limit=\"{= ?limit }\" ui:offset=\"{= ?offset }\" ui:resultSet=\"{= ?values }\">
                    <div class=\"swa-facets-item\" let:label=\"{= ui:label(?facet) }\">
                        <ui:if ui:condition=\"{= CONTAINS(?filters, ui:encodeNode(?facet, true, true)) }\">
                            <span class=\"swa-facets-selected fas-facet\">
                                <span title=\"{= ?label }\">{= ?label }</span>
                                <a class=\"swa-facets-remove\" onclick=\"searchPortal.Facets.remove(&quot;{= ui:encodeNode(?property, true, true) }&quot;,&quot;{= IF(isLiteral(?facet), ?facet, ui:encodeNode(?facet, true, true)) }&quot;,&quot;{= ?loadId }&quot;)\">
                                    <i class=\"swa-facets-icon-remove swa-facets-icon-black\"/>
                                </a>
                                <span class=\"swa-facets-count\" title=\"{= ?count }\">{= ?count }</span>
                            </span>
                        </ui:if>
                        <ui:else>
                            <a class=\"swa-facets-selectable fas-facet\" href=\"javascript:void(0)\" onclick=\"searchPortal.Facets.select(&quot;{= ui:encodeNode(?property, true, true) }&quot;,&quot;{= IF(isLiteral(?facet), ui:escapeJSON(?facet), ui:encodeNode(?facet, true, true)) }&quot;,&quot;{= ?loadId }&quot;)\">
                                <span title=\"{= ?label }\">{= ?label }</span>
                            </a>
                            <span class=\"swa-facets-count\" title=\"{= ?count }\">{= ?count }</span>
                        </ui:else>
                    </div>
                </ui:forEach>
                <ui:group let:id=\"{= ui:uniqueId() }\" let:rowCount=\"{= spr:rowCount(?values) }\">
                    <ui:loadable ui:loadId=\"{= ?id }\">
                        <ui:if ui:condition=\"{= ?rowCount &gt; (?offset + ?limit) }\">
                            <ui:if ui:condition=\"{= bound(?newOffset) }\">
                                <saf:PropertyFacetViewPartJS arg:containerId=\"{= ?containerId }\" arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?freeText }\" arg:loadId=\"{= ?loadId }\" arg:offset=\"{= ?newOffset }\" arg:property=\"{= ?this }\"/>
                            </ui:if>
                            <ui:else>
                                <div class=\"swa-facets-show-more\" let:displayLabel=\"Show entries {= (?offset + ?limit) + 1 } to {= spl:min(?rowCount, ((?offset + ?limit) + ?limit)) } of {= ?rowCount }\">
                                    <a href=\"javascript:void(0)\" onclick=\"swa.load(&quot;{= ?id }&quot;,{newOffset: {= ?offset + ?limit }})\" title=\"{= ?displayLabel }\">{= ?displayLabel }</a>
                                </div>
                            </ui:else>
                        </ui:if>
                    </ui:loadable>
                </ui:group>
            </ui:else>
        </ui:call>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Property facet view part JS" ;
  rdfs:subClassOf swa:Elements ;
.
saf:PropertyFacetViewPartLucene
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:containerId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:baseQueryGraph=\"{= ui:currentQueryGraph() }\" let:limit=\"{= 10 }\" let:listGraph=\"{= ui:tempGraph1 }\" let:text=\"{= IF(bound(?freeText), ?freeText, ?none) }\">
    <ui:setContext ui:queryGraph=\"{= ?listGraph }\">
        <saf:buildAppliedFacetList arg:filters=\"{= ?filters }\"/>
        <ui:group let:list=\"{#
                SELECT ?list
                WHERE {
                    ?list a saf:AppliedFacetList .
                } }\">
            <ui:call arg:facetFilters=\"{= ?list }\" arg:limit=\"{= ?offset + ?limit }\" arg:property=\"{= ?property }\" arg:term=\"{= ?text }\" ui:template=\"{= saf:getFacetsForProperty }\" ui:varName=\"values\">
                <ui:if ui:condition=\"{= spr:rowCount(?values) = 0 }\">
                    <script>searchPortal.Facets.hideParent('{= ?containerId }')</script>
                </ui:if>
                <ui:else>
                    <ui:setContext ui:queryGraph=\"{= ?baseQueryGraph }\">
                        <ui:forEach ui:limit=\"{= ?limit }\" ui:offset=\"{= ?offset }\" ui:resultSet=\"{= ?values }\">
                            <div class=\"swa-facets-item\" let:label=\"{= ui:label(?facet) }\">
                                <ui:if ui:condition=\"{= CONTAINS(?filters, ui:encodeNode(?facet, true, true)) }\">
                                    <span class=\"swa-facets-selected fas-facet\">
                                        <span title=\"{= ?label }\">{= ?label }</span>
                                        <a class=\"swa-facets-remove\" onclick=\"searchPortal.Facets.remove(&quot;{= ui:encodeNode(?property, true, true) }&quot;,&quot;{= IF(isLiteral(?facet), ?facet, ui:encodeNode(?facet, true, true)) }&quot;,&quot;{= ?loadId }&quot;)\">
                                            <i class=\"swa-facets-icon-remove swa-facets-icon-black\"/>
                                        </a>
                                        <span class=\"swa-facets-count\" title=\"{= ?count }\">{= ?count }</span>
                                    </span>
                                </ui:if>
                                <ui:else>
                                    <a class=\"swa-facets-selectable fas-facet\" href=\"javascript:void(0)\" onclick=\"searchPortal.Facets.select(&quot;{= ui:encodeNode(?property, true, true) }&quot;,&quot;{= IF(isLiteral(?facet), ui:escapeJSON(?facet), ui:encodeNode(?facet, true, true)) }&quot;,&quot;{= ?loadId }&quot;)\">
                                        <span title=\"{= ?label }\">{= ?label }</span>
                                    </a>
                                    <span class=\"swa-facets-count\" title=\"{= ?count }\">{= ?count }</span>
                                </ui:else>
                            </div>
                        </ui:forEach>
                        <ui:if ui:condition=\"{= spr:rowCount(?values) &gt; 0 }\">
                            <ui:group let:id=\"{= ui:uniqueId() }\" let:rowCount=\"{= spr:cell(?values, 0, 2) }\">
                                <ui:loadable ui:loadId=\"{= ?id }\">
                                    <ui:if ui:condition=\"{= ?rowCount &gt; (?offset + ?limit) }\">
                                        <ui:if ui:condition=\"{= bound(?newOffset) }\">
                                            <saf:PropertyFacetViewPartLucene arg:containerId=\"{= ?containerId }\" arg:filters=\"{= ?filters }\" arg:freeText=\"{= ?freeText }\" arg:loadId=\"{= ?loadId }\" arg:offset=\"{= ?newOffset }\" arg:property=\"{= ?this }\"/>
                                        </ui:if>
                                        <ui:else>
                                            <div class=\"swa-facets-show-more\" let:displayLabel=\"Show entries {= (?offset + ?limit) + 1 } to {= spl:min(?rowCount, ((?offset + ?limit) + ?limit)) } of {= ?rowCount }\">
                                                <a href=\"javascript:void(0)\" onclick=\"swa.load(&quot;{= ?id }&quot;,{newOffset: {= ?offset + ?limit }})\" title=\"{= ?displayLabel }\">{= ?displayLabel }</a>
                                            </div>
                                        </ui:else>
                                    </ui:if>
                                </ui:loadable>
                            </ui:group>
                        </ui:if>
                    </ui:setContext>
                </ui:else>
            </ui:call>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Property facet view part lucene" ;
  rdfs:subClassOf swa:Elements ;
.
saf:QuickInfoPanel
  a ui:ViewElement ;
  ui:prototype """
<div class=\"quick-info-panel\">
    <div class=\"quick-info-header\">{= spif:titleCase(ui:label(spl:object(?resource, rdf:type))) }</div>
    <div class=\"quick-info-body\">
        <ui:resourceView ui:matchIds=\"quick-info-summary\" ui:resource=\"{= ?resource }\"/>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Quick info panel" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:ResourceDetails
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:node ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:headIncludes """
<ui:group>
    <title>Details</title>
</ui:group>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"Editor\">
    <saf:ViewPage arg:pageType=\"search-portal-result-page\" arg:title=\"Details\">
        <ui:group let:baseSearchURL=\"search\" let:cqg=\"{= ui:currentQueryGraph() }\">
            <ui:group let:rootClass=\"{= COALESCE(spl:object(teamwork:currentMasterGraph(), teamwork:rootClass()), owl:Thing) }\">
                <ui:loadable class=\"main-content\" ui:loadId=\"searchPortalDetails\">
                    <saf:AbstractContainerLayout>
                        <ui:insert ui:into=\"panelHeader\">
                            <h2>{= ui:label(?node) }</h2>
                        </ui:insert>
                        <ui:insert ui:into=\"panelHeaderButtons\">
                            <saf:EditorLinkElement arg:resource=\"{= ?node }\"/>
                            <saf:SummaryRowItemCommentButton arg:resource=\"{= ?node }\"/>
                        </ui:insert>
                        <ui:insert ui:into=\"panelBody\">
                            <div class=\"col-xs-12\">
                                <ui:if ui:condition=\"{= bound(?node) }\">
                                    <ui:resourceView ui:matchIds=\"saf-detail\" ui:resource=\"{= ?node }\"/>
                                </ui:if>
                            </div>
                        </ui:insert>
                    </saf:AbstractContainerLayout>
                </ui:loadable>
            </ui:group>
        </ui:group>
    </saf:ViewPage>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Details" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:ResourceDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:matchIds ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  ui:prototype """
<saf:WalledGroup ui:args=\"*\">
    <ui:insert ui:into=\"detail-body\">
        <ui:resourceView ui:matchIds=\"{= ?matchIds }\" ui:resource=\"{= spl:object(?this, ?predicate) }\"/>
    </ui:insert>
</saf:WalledGroup>
"""^^ui:Literal ;
  rdfs:label "Resource details section" ;
  rdfs:subClassOf saf:WalledGroup ;
.
saf:SearchResults
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:setContext let:id=\"{= ui:uniqueId() }\" ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createEventLink }\">
    <ui:setContext ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
        <div class=\"swa-facets-results-bar {= IF(((!bound(?freeText)) &amp;&amp; (!bound(?facetFilters))), &quot;hidden&quot;, &quot;&quot;) }\" id=\"{= ?id }-resultsBar\">
            <div class=\"swa-facets-results-bar-pages\">
                <a id=\"{= ?id }-previousPage\">&lt; Previous</a>
                <span> | </span>
                <strong id=\"{= ?id }-startIndex\">0</strong>
                <span> - </span>
                <strong id=\"{= ?id }-endIndex\">0</strong>
                <span> of </span>
                <strong id=\"{= ?id }-count\">0</strong>
                <span> | </span>
                <a id=\"{= ?id }-nextPage\">Next &gt;</a>
            </div>
            <div class=\"swa-float-right saf-search-results-select-container\">
                <select autocomplete=\"false\" class=\"form-control swa-facets-search-field saf-search-results-select\" id=\"{= ?id }-pageSize\" title=\"Sorting options\">
                    <option selected=\"selected\" value=\"10\">10 per page</option>
                    <option value=\"20\">20 per page</option>
                    <option value=\"50\">50 per page</option>
                </select>
            </div>
            <div class=\"swa-clear-both\"/>
        </div>
        <div id=\"{= ?id }-owner\">
            <ui:loadable class=\"swa-facets-results-gadget\" ui:loadId=\"{= ?id }\">
                <ui:group let:filters=\"{= IF((bound(?facetFilters) &amp;&amp; (smf:trim(?facetFilters) != &quot;&quot;)), ?facetFilters, ?none) }\" let:text=\"{= IF((bound(?freeText) &amp;&amp; (smf:trim(?freeText) != &quot;&quot;)), ?freeText, ?none) }\">
                    <ui:if ui:condition=\"{= bound(?filters) || bound(?text) }\">
                        <ui:group let:queryString=\"{= saf:searchQuery(?filters, ?text) }\">
                            <ui:setContext let:startIndex=\"{= COALESCE(?startIndex, 0) }\" ui:queryGraph=\"{= ui:currentQueryGraph() }\">
                                <ui:group let:pageSize=\"{= COALESCE(?pageSize, 10) }\">
                                    <ui:call ui:queryString=\"{= ?queryString }\" ui:varName=\"results\">
                                        <div class=\"swa-facets-results-list\">
                                            <ui:if ui:condition=\"{= spr:rowCount(?results) &gt; 0 }\">
                                                <ui:forEach ui:limit=\"{= ?pageSize }\" ui:offset=\"{= ?startIndex }\" ui:resultSet=\"{= ?results }\">
                                                    <saf:SummaryRowItem arg:resource=\"{= ?result }\"/>
                                                </ui:forEach>
                                            </ui:if>
                                            <ui:else>
                                                <div class=\"saf-empty-result\">
                                                    <label>No matching results</label>
                                                </div>
                                            </ui:else>
                                        </div>
                                        <ui:group let:rowCount=\"{= spr:rowCount(?results) }\">
                                            <script>searchPortal.enableResultsBar('{= ?id }');</script>
                                            <script>$(\"#{= ?id }-resultsBar\").removeClass(\"hidden\");</script>
                                            <script>$(\"#{= ?id }-count\").text(\"{= ?rowCount }\");</script>
                                            <script>$(\"#{= ?id }-startIndex\").text(\"{= IF((?rowCount = 0), 0, (?startIndex + 1)) }\");</script>
                                            <script>$(\"#{= ?id }-endIndex\").text(\"{= IF((?rowCount &lt; (?startIndex + ?pageSize)), ?rowCount, (?startIndex + ?pageSize)) }\");</script>
                                            <ui:if ui:condition=\"{= ?startIndex &gt; 0 }\">
                                                <script>$(\"#{= ?id }-previousPage\").removeClass('page-disabled'); $(\"#{= ?id }-previousPage\").attr(\"onclick\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', Math.max(0, {= ?startIndex } - swa.getSummarySearchPageSize('{= ?id }')))\");$('#{= ?id }-previousPage').attr('href', 'javascript:void(0)');</script>
                                            </ui:if>
                                            <ui:else>
                                                <script>$(\"#{= ?id }-previousPage\").addClass('page-disabled');$(\"#{= ?id }-previousPage\").attr(\"onclick\", null);$(\"#{= ?id }-previousPage\").attr(\"href\", null);</script>
                                            </ui:else>
                                            <ui:if ui:condition=\"{= (?startIndex + ?pageSize) &lt; ?rowCount }\">
                                                <script>$(\"#{= ?id }-nextPage\").removeClass('page-disabled'); $(\"#{= ?id }-nextPage\").attr(\"onclick\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex } + swa.getSummarySearchPageSize('{= ?id }'))\");$('#{= ?id }-nextPage').attr('href', 'javascript:void(0)');</script>
                                            </ui:if>
                                            <ui:else>
                                                <script>$(\"#{= ?id }-nextPage\").addClass('page-disabled');$(\"#{= ?id }-nextPage\").attr(\"onclick\", null);$(\"#{= ?id }-nextPage\").attr(\"href\", null);</script>
                                            </ui:else>
                                        </ui:group>
                                        <script>$(\"#{= ?id }-pageSize\").attr(\"onchange\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex })\");</script>
                                        <script>$(\"#{= ?id }-sortField\").attr(\"onchange\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex })\");</script>
                                    </ui:call>
                                </ui:group>
                            </ui:setContext>
                        </ui:group>
                    </ui:if>
                    <ui:else>
                        <script>searchPortal.disableResultsBar('{= ?id }');</script>
                    </ui:else>
                </ui:group>
            </ui:loadable>
            <swa:Subscribe arg:code=\"searchPortal.Facets.reloadSearchResults('{= ?id }', 0)\" arg:event=\"{= swa:searchEvent(?searchEvent) }\" arg:ownerId=\"{= ?id }-owner\"/>
        </div>
    </ui:setContext>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Summary search results JS" ;
  rdfs:subClassOf swa:SearchResultsGadgets ;
.
saf:SearchResultsLucene
  a swa:Gadget ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:setContext let:id=\"{= ui:uniqueId() }\" ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createEventLink }\">
    <ui:setContext ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
        <div class=\"swa-facets-results-bar {= IF(((!bound(?freeText)) &amp;&amp; (!bound(?facetFilters))), &quot;hidden&quot;, &quot;&quot;) }\" id=\"{= ?id }-resultsBar\">
            <div class=\"swa-facets-results-bar-pages\">
                <a id=\"{= ?id }-previousPage\">&lt; Previous</a>
                <span> | </span>
                <strong id=\"{= ?id }-startIndex\">0</strong>
                <span> - </span>
                <strong id=\"{= ?id }-endIndex\">0</strong>
                <span> of </span>
                <strong id=\"{= ?id }-count\">0</strong>
                <span> | </span>
                <a id=\"{= ?id }-nextPage\">Next &gt;</a>
            </div>
            <div class=\"swa-float-right saf-search-results-select-container\">
                <select autocomplete=\"false\" class=\"form-control swa-facets-search-field saf-search-results-select\" id=\"{= ?id }-pageSize\" title=\"Sorting options\">
                    <option selected=\"selected\" value=\"10\">10 per page</option>
                    <option value=\"20\">20 per page</option>
                    <option value=\"50\">50 per page</option>
                </select>
            </div>
            <div class=\"swa-clear-both\"/>
        </div>
        <div id=\"{= ?id }-owner\">
            <ui:loadable class=\"swa-facets-results-gadget\" ui:loadId=\"{= ?id }\">
                <ui:group let:filters=\"{= IF((bound(?facetFilters) &amp;&amp; (smf:trim(?facetFilters) != &quot;&quot;)), ?facetFilters, ?none) }\" let:listGraph=\"{= ui:tempGraph1 }\" let:text=\"{= IF((bound(?freeText) &amp;&amp; (smf:trim(?freeText) != &quot;&quot;)), ?freeText, ?none) }\">
                    <ui:if ui:condition=\"{= bound(?filters) || bound(?text) }\">
                        <ui:group let:baseQueryGraph=\"{= ui:currentQueryGraph() }\" let:startIndex=\"{= COALESCE(?startIndex, 0) }\">
                            <ui:setContext ui:queryGraph=\"{= ?listGraph }\">
                                <saf:buildAppliedFacetList arg:filters=\"{= ?filters }\"/>
                                <ui:group let:pageSize=\"{= COALESCE(?pageSize, 10) }\">
                                    <ui:group let:list=\"{#
                                            SELECT ?list
                                            WHERE {
                                                ?list a saf:AppliedFacetList .
                                            } }\">
                                        <ui:call arg:facetFilters=\"{= ?list }\" arg:limit=\"{= ?pageSize }\" arg:offset=\"{= ?startIndex }\" arg:term=\"{= ?text }\" ui:template=\"{= saf:getResultsFromLucene }\" ui:varName=\"results\">
                                            <ui:setContext ui:queryGraph=\"{= ?baseQueryGraph }\">
                                                <div class=\"swa-facets-results-list\">
                                                    <ui:if ui:condition=\"{= spr:rowCount(?results) &gt; 0 }\">
                                                        <ui:forEach ui:resultSet=\"{= ?results }\">
                                                            <saf:SummaryRowItem arg:resource=\"{= ?result }\"/>
                                                        </ui:forEach>
                                                    </ui:if>
                                                    <ui:else>
                                                        <div class=\"saf-empty-result\">
                                                            <label>No matching results</label>
                                                        </div>
                                                    </ui:else>
                                                </div>
                                                <ui:if ui:condition=\"{= spr:rowCount(?results) &gt; 0 }\">
                                                    <ui:group let:rowCount=\"{= spr:cell(?results, 0, 2) }\">
                                                        <script>searchPortal.enableResultsBar('{= ?id }');</script>
                                                        <script>$(\"#{= ?id }-resultsBar\").removeClass(\"hidden\");</script>
                                                        <script>$(\"#{= ?id }-count\").text(\"{= ?rowCount }\");</script>
                                                        <script>$(\"#{= ?id }-startIndex\").text(\"{= IF((?rowCount = 0), 0, (?startIndex + 1)) }\");</script>
                                                        <script>$(\"#{= ?id }-endIndex\").text(\"{= IF((?rowCount &lt; (?startIndex + ?pageSize)), ?rowCount, (?startIndex + ?pageSize)) }\");</script>
                                                        <ui:if ui:condition=\"{= ?startIndex &gt; 0 }\">
                                                            <script>$(\"#{= ?id }-previousPage\").removeClass('page-disabled'); $(\"#{= ?id }-previousPage\").attr(\"onclick\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', Math.max(0, {= ?startIndex } - swa.getSummarySearchPageSize('{= ?id }')))\");$('#{= ?id }-previousPage').attr('href', 'javascript:void(0)');</script>
                                                        </ui:if>
                                                        <ui:else>
                                                            <script>$(\"#{= ?id }-previousPage\").addClass('page-disabled');$(\"#{= ?id }-previousPage\").attr(\"onclick\", null);$(\"#{= ?id }-previousPage\").attr(\"href\", null);</script>
                                                        </ui:else>
                                                        <ui:if ui:condition=\"{= (?startIndex + ?pageSize) &lt; ?rowCount }\">
                                                            <script>$(\"#{= ?id }-nextPage\").removeClass('page-disabled'); $(\"#{= ?id }-nextPage\").attr(\"onclick\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex } + swa.getSummarySearchPageSize('{= ?id }'))\");$('#{= ?id }-nextPage').attr('href', 'javascript:void(0)');</script>
                                                        </ui:if>
                                                        <ui:else>
                                                            <script>$(\"#{= ?id }-nextPage\").addClass('page-disabled');$(\"#{= ?id }-nextPage\").attr(\"onclick\", null);$(\"#{= ?id }-nextPage\").attr(\"href\", null);</script>
                                                        </ui:else>
                                                    </ui:group>
                                                </ui:if>
                                                <script>$(\"#{= ?id }-pageSize\").attr(\"onchange\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex })\");</script>
                                                <script>$(\"#{= ?id }-sortField\").attr(\"onchange\", \"searchPortal.Facets.reloadSearchResults('{= ?id }', {= ?startIndex })\");</script>
                                            </ui:setContext>
                                        </ui:call>
                                    </ui:group>
                                </ui:group>
                            </ui:setContext>
                        </ui:group>
                    </ui:if>
                    <ui:else>
                        <script>searchPortal.disableResultsBar('{= ?id }');</script>
                    </ui:else>
                </ui:group>
            </ui:loadable>
            <swa:Subscribe arg:code=\"searchPortal.Facets.reloadSearchResults('{= ?id }', 0)\" arg:event=\"{= swa:searchEvent(?searchEvent) }\" arg:ownerId=\"{= ?id }-owner\"/>
        </div>
    </ui:setContext>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Summary search results JS" ;
  rdfs:subClassOf swa:SearchResultsGadgets ;
.
saf:SelectTemplates
  a spin:SelectTemplate ;
  spin:abstract true ;
  rdfs:comment "Suggested abstract base class for all SelectTemplates." ;
  rdfs:label "Select templates" ;
  rdfs:subClassOf spin:Templates ;
.
saf:StackedDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  ui:prototype """
<section class=\"details-section {= IF(bound(?parent), &quot;details-section-child&quot;, &quot;&quot;) }\" id=\"{= IF(bound(?parent), CONCAT(?parent, &quot;_&quot;, ?label), ?label) }\" title=\"{= ?label }\">
    <div class=\"inline\">
        <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
            <div class=\"left\">
                <h5 class=\"details-label\">{= ?label }</h5>
            </div>
        </ui:if>
        <div class=\"right\">
            <ui:insertionPoint ui:pointId=\"detail-body\"/>
        </div>
    </div>
</section>
"""^^ui:Literal ;
  rdfs:label "Stacked Details section" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:StackedLiterals
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:StackedDetailsSection ui:args=\"*\">
        <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <div>
                    <ui:parse ui:str=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\"/>
                </div>
            </ui:forEach>
        </ui:call>
    </saf:StackedDetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Stacked literals" ;
  rdfs:subClassOf saf:StackedDetailsSection ;
.
saf:SubBlockObjects
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:SubDetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"detail-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <div>
                        <ui:parse ui:str=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\"/>
                    </div>
                </ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:SubDetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Block objects" ;
  rdfs:subClassOf saf:SubResultSet ;
.
saf:SubDelimitedObjects
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:SubDetailsSection ui:args=\"*\">
        <ui:insert ui:into=\"detail-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">{= spr:cell(?resultSet, ?rowIndex, 0) }</ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:SubDetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Sub delimited objects" ;
  rdfs:subClassOf saf:SubResultSet ;
.
saf:SubDetailsSection
  a ui:ViewElement ;
  ui:prototype """
<saf:AbstractDetailsSection arg:style=\"sub-details-section\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Sub Details section" ;
  rdfs:subClassOf saf:AbstractDetailsSection ;
.
saf:SubExpandableDetailsSection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subject ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:targetProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  ui:prototype """
<ui:if ui:condition=\"{= bound(?subject) }\">
    <ui:group let:bid=\"{= ui:uniqueId() }\" let:cid=\"{= ui:uniqueId() }\">
        <ui:call arg:property=\"{= ?predicate }\" arg:subject=\"{= ?subject }\" arg:targetProperty=\"{= ?targetProperty }\" ui:template=\"{= saf:sortedObjects }\">
            <ui:if ui:condition=\"{= !spr:isEmpty(?rs) }\">
                <section class=\"sub-details-section\" id=\"{= ?label }\" title=\"{= ?label }\">
                    <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
                        <h5 class=\"details-label\">{= ?label }</h5>
                    </ui:if>
                    <div class=\"details-content details-truncate\" id=\"{= ?cid }\">
                        <ui:forEach ui:resultSet=\"{= ?rs }\">
                            <swa:LiteralViewer arg:object=\"{= ?object }\"/>
                        </ui:forEach>
                        <ui:group let:rowCount=\"{= COALESCE(spr:rowCount(?rs), 0) }\">
                            <ui:if ui:condition=\"{= IF((?rowCount = 1), (fn:string-length(spr:cell(?rs, 0, 0)) &gt; 150), true) }\">
                                <div class=\"show-more\" id=\"{= ?bid }\" onclick=\"searchPortal.expandField(&quot;{= ?cid }&quot;,&quot;{= ?bid }&quot;)\" title=\"Read More/Less\">
                                    <span class=\"show-more-label show-more-expand\">Read</span>
                                </div>
                            </ui:if>
                        </ui:group>
                    </div>
                </section>
            </ui:if>
        </ui:call>
    </ui:group>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Sub Expandable details section" ;
  rdfs:subClassOf saf:SubDetailsSection ;
.
saf:SubHyperlinkDetailsSection
  a ui:ViewElement ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:SubDetailsSection ui:args=\"*\">
        <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <a href=\"{= spr:cell(?resultSet, ?rowIndex, 0) }\" target=\"_blank\">{= spr:cell(?resultSet, ?rowIndex, 0) }</a>
            </ui:forEach>
        </ui:call>
    </saf:SubDetailsSection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Sub Hyperlink details section" ;
  rdfs:subClassOf saf:SubResultSet ;
.
saf:SubResultSet
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:abstract true ;
  ui:private true ;
  rdfs:label "Sub result set" ;
  rdfs:subClassOf saf:SubDetailsSection ;
.
saf:SummaryDelimitedObjects
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType sp:Variable ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
    ] ;
  ui:prototype """
<ui:group default:subject=\"{= ?this }\">
    <saf:SummarySection ui:args=\"*\">
        <ui:insert ui:into=\"summary-body\">
            <ui:call arg:resultSet=\"{= ?resultSet }\" ui:template=\"{= swon:ForEachResultSetRowIndex }\">
                <ui:forEach ui:resultSet=\"{= ?rs }\" ui:separator=\", \">{= spr:cell(?resultSet, ?rowIndex, 0) }</ui:forEach>
            </ui:call>
        </ui:insert>
    </saf:SummarySection>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Summary delimited objects" ;
  rdfs:subClassOf saf:SummarySection ;
.
saf:SummaryRowItem
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:group let:skippable=\"{= COALESCE(safconfig:isConfigSet(safm:DetailView, safm:skippable), false) }\">
    <ui:if ui:condition=\"{= ?skippable }\">
        <saf:EDGSummaryRowItem ui:args=\"*\"/>
    </ui:if>
    <ui:else>
        <saf:DefaultSummaryRowItem ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Summary row item" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:SummaryRowItemCommentButton
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div>
    <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
        <ui:group let:graphURI=\"{= URI(?homeGraph) }\" let:id=\"{= ui:uniqueId() }\">
            <ui:if ui:condition=\"{= teamwork:commentsActivated() &amp;&amp; teamwork:hasTeamGraph(?graphURI) }\">
                <button class=\"btn btn-default btn-sm comments-button details-section\" data-resource=\"{= ?resource }\" id=\"comments-button-{= ?id }\" onclick=\"{= ui:functionCall(&quot;teamwork.editCommentsForBaseGraph&quot;, ?resource, ?graphURI, ?id) }\" title=\"View/Edit Comments\">
                    <span aria-hidden=\"true\"/>&nbsp;({= teamwork:commentsCount(?resource, teamwork:teamGraph(?graphURI)) }) Comments</button>
            </ui:if>
        </ui:group>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:SummaryRowItemNeighborGramButton
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div>
    <ui:group let:homeGraph=\"{= smf:definedIn(?resource) }\">
        <ui:group let:graphId=\"{= teamwork:graphIdFromGraph(?homeGraph) }\" let:graphURI=\"{= URI(?homeGraph) }\">
            <ui:group let:uri=\"{= teamwork:unionGraphForCurrentUser() }\">
                <button class=\" btn btn-default btn-sm neighborgram-icon-saf\" data-graph-uri=\"{= ?uri }\" data-resource=\"{= ?resource }\" id=\"neighborgram-{= ui:label(?resource) }\" title=\"NeighborGram&trade; Diagram\"/>
            </ui:group>
        </ui:group>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:SummarySection
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<section class=\"summary-section\" title=\"{= ?label }\">
    <ui:if ui:condition=\"{= bound(?label) }\">
        <label class=\"details-label\">{= ?label }</label>
    </ui:if>
    <ui:insertionPoint ui:pointId=\"summary-body\"/>
</section>
"""^^ui:Literal ;
  rdfs:label "Summary section" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:SummaryView
  a ui:ViewElement ;
  ui:prototype """
<ui:group ui:id=\"saf-summary\" ui:priority=\"{= 10 }\">
    <saf:AbstractView arg:class=\"summary-section\" arg:resource=\"{= ?resource }\" arg:viewType=\"{= safm:SummaryView }\" ui:args=\"*\"/>
    <saf:GraphInfo arg:resource=\"{= ?resource }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Summary view" ;
  rdfs:subClassOf saf:AbstractView ;
.
saf:SwitchableForm
  a swa:FormClass ;
  ui:prototype """
<ui:group let:extraMatchIds=\"{= IF(bound(?matchIds), CONCAT(?matchIds, &quot;,&quot;), ?none) }\" let:fid=\"{= COALESCE(?formId, ui:uniqueId()) }\" let:headerLabelFunction=\"{= COALESCE(ui:contextValue(&quot;headerLabelFunction&quot;), swa:DefaultHeaderLabelFunction) }\">
    <!-- TOC -->
    <saf:TableOfContents>
        <ui:insert let:qg=\"{= ui:currentQueryGraph() }\" ui:into=\"toc-toolbar\">
            <ui:group let:restoreGraph=\"{= ui:getSessionAttribute(&quot;searchGraph&quot;) }\">
                <button class=\"btn btn-default\" onclick=\"SafDetails.goBack()\" title=\"Back To Search\">
                    <i class=\"fa fa-search\"/>
                </button>
            </ui:group>
            <ui:if let:ei=\"{= COALESCE(?editing, false) }\" ui:condition=\"{= ?editable }\">
                <button class=\"btn btn-default sticky-save {= IF((!?ei), &quot;ui-helper-hidden-accessible&quot;, ?none) }\" disabled=\"{= IF((!?editable), &quot;disabled&quot;, ?none) }\" onclick=\"searchPortal.submitForm(&quot;{= ?fid }&quot;,null,swa.checkRestartWarning())\">
                    <i class=\"far fa-save\"/>
                </button>
            </ui:if>
        </ui:insert>
    </saf:TableOfContents>
    <saf:AbstractContainerLayout>
        <ui:insert ui:into=\"panelHeader\">
            <h2 class=\"panel-title\">{= ui:label(?resource) }</h2>
        </ui:insert>
        <ui:insert ui:into=\"panelHeaderInfo\">
            <ui:loadable ui:loadId=\"update_info_loadable\">
                <!--<saf:ResourceUpdateInfo arg:subject=\"{= ?resource}\"/>-->
            </ui:loadable>
        </ui:insert>
        <ui:insert ui:into=\"panelHeaderButtons\">
            <ui:if let:ei=\"{= COALESCE(?editing, false) }\" ui:condition=\"{= ?editable || ?showResourceActions }\">
                <button class=\"btn btn-default\" disabled=\"{= IF(?editable, &quot;disabled&quot;, ?none) }\" id=\"{= ?fid }-editButton\" onclick=\"searchPortal.switchToEditForm('{= ?fid }')\">
                    <i class=\"fas fa-pencil-alt\"> Edit</i>
                </button>
                <div class=\"btn-group {= IF(?ei, ?none, &quot;ui-helper-hidden-accessible&quot;) }\" id=\"{= ?fid }-editModeButtonBar\">
                    <button class=\"btn btn-default\" disabled=\"{= IF(?editable, &quot;disabled&quot;, ?none) }\" id=\"{= ?fid }-saveButton\" onclick=\"searchPortal.submitForm('{= ?fid }',null,swa.checkRestartWarning())\">
                        <i class=\"far fa-save\"> Save</i>
                    </button>
                    <button class=\"btn btn-default\" disabled=\"{= IF(?editable, &quot;disabled&quot;, ?none) }\" id=\"{= ?fid }-cancelButton\" onclick=\"searchPortal.switchToViewForm('{= ?fid }')\">
                        <i class=\"fa fa-ban\"> Save</i>
                    </button>
                </div>
            </ui:if>
            <ui:else>
                <saf:EditorLinkElement arg:resource=\"{= ?resource }\"/>
            </ui:else>
        </ui:insert>
        <ui:insert ui:into=\"panelBody\">
            <div class=\"col-xs-12\">
                <ui:loadable class=\"ui-layout-content\" ui:loadId=\"{= ?fid }-loadable\">
                    <ui:if ui:condition=\"{= isIRI(?resource) }\">
                        <div class=\"saf-swa-uri\">{= ?resource }</div>
                    </ui:if>
                    <ui:if ui:condition=\"{= ?editing }\">
                        <ui:setContext ui:varName=\"mode\" ui:varValue=\"{= COALESCE(?viewModeName, &quot;view&quot;) }\">
                            <form autocomplete=\"off\" class=\"swa-form form-horizontal\" id=\"{= ?fid }\" resource=\"{= swa:resourceURIOrBNodeId(?resource) }\">
                                <ui:group let:mGraph=\"{= ui:graphWithoutImports(ui:baseGraph(ui:currentQueryGraph())) }\">
                                    <ui:group let:mGraphId=\"{= IF(bound(?mGraph), teamwork:graphIdFromGraph(?mGraph), ?none) }\">
                                        <ui:if let:bgraph=\"{= COALESCE(smf:definedIn(?resource), ?none) }\" ui:condition=\"{= ?editable }\">
                                            <ui:if ui:condition=\"{= bound(?mGraph) &amp;&amp; bound(?mGraphId) }\">
                                                <input name=\"_base\" type=\"hidden\" value=\"{= teamwork:queryGraph(true, ?mGraphId, ?none, smf:currentUserName()) }\"/>
                                            </ui:if>
                                            <ui:else>
                                                <input name=\"_base\" type=\"hidden\" value=\"{= ui:currentQueryGraph() }\"/>
                                            </ui:else>
                                            <input id=\"editable\" type=\"hidden\" value=\"{= ?editable }\"/>
                                        </ui:if>
                                    </ui:group>
                                </ui:group>
                                <!-- last edit by -->
                                <!-- last edit date -->
                                <ui:if ui:condition=\"{= !bound(?resource) }\">
                                    <input name=\"resourceType\" type=\"hidden\" value=\"{= swa:resourceType() }\"/>
                                </ui:if>
                                <div class=\"swa-form-body saf-form-body\">
                                    <ui:if ui:condition=\"{= bound(?resource) }\">
                                        <ui:resourceView ui:matchIds=\"{= ?extraMatchIds }saf-detail,saf-edit\" ui:resource=\"{= ?resource }\"/>
                                    </ui:if>
                                    <ui:else>
                                        <ui:classView ui:class=\"{= swa:resourceType() }\" ui:matchIds=\"{= ?extraMatchIds }saf-detail,saf-edit\"/>
                                    </ui:else>
                                </div>
                            </form>
                        </ui:setContext>
                    </ui:if>
                    <ui:else>
                        <ui:resourceView ui:matchIds=\"saf-detail\" ui:resource=\"{= ?resource }\"/>
                    </ui:else>
                </ui:loadable>
            </div>
        </ui:insert>
    </saf:AbstractContainerLayout>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Switchable form" ;
  rdfs:subClassOf swa:SwitchableForm ;
.
saf:TableOfContents
  a ui:ViewElement ;
  ui:prototype """
<ui:group let:containerId=\"{= ui:uniqueId() }\" let:userName=\"{= IF(smf:hasCurrentUser(), smf:currentUserName(), ?none) }\">
    <div class=\"toc-container toc-collapsed\" id=\"{= ?containerId }\">
        <div class=\"toc-user-header\">
            <!--<saf:PersonHeader arg:userName=\"{= ?userName}\" ui:arg=\"*\"/>-->
        </div>
        <div class=\"toc-buttons btn-group-vertical\">
            <button class=\"btn btn-primary toc-toggle\" rel=\"{= ?containerId }\" title=\"Expand/Collapse\">
                <i class=\"fa fa-plus\"/>
            </button>
            <a class=\"btn btn-default\" href=\"#\" title=\"Back to Top\">
                <i class=\"fa fa-chevron-up\"/>
            </a>
            <ui:insertionPoint ui:pointId=\"toc-toolbar\"/>
        </div>
        <div class=\"toc-content\" let:tabId=\"{= ui:uniqueId() }\">
            <ul class=\"nav nav-tabs\" id=\"{= ?tabId }\">
                <li class=\"active\">
                    <a href=\"#toc\">ToC</a>
                </li>
                <!--<ui:if ui:condition=\"{= smf:currentUserName()}\">
   <li>
 <a href=\"#steward\">Steward</a>
  </li>
</ui:if>-->
            </ul>
            <div class=\"tab-content\">
                <div class=\"tab-pane active\" id=\"toc\">
                    <nav class=\"toc-menu-body\" id=\"toc-nav\">
                        <div id=\"toc-menu\"/>
                    </nav>
                </div>
                <!--<ui:if ui:condition=\"\">
 <div class=\"tab-pane\" id=\"steward\">
  <saf:AssetList ui:args=\"*\"/>
</div>
</ui:if>-->
            </div>
            <swa:WidgetInitializer arg:script=\"searchPortal.initTabs(&quot;{= ?tabId }&quot;)\"/>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Table of contents" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:TagEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<ui:group default:object=\"{= ?object }\" let:class=\"{= ui:contextValue(&quot;parentClass&quot;) }\" let:fid=\"{= ui:uniqueId() }\" let:labelOverride=\"labelOverride\">
    <div class=\"form-group\" id=\"{= ?fid }\">
        <div class=\"col-xs-6\">
            <div class=\"input-group\">
                <div class=\"input-group-btn\">
                    <button class=\"btn btn-danger\" onclick=\"searchPortal.deleteRow(&quot;{= ?fid }&quot;)\" type=\"button\">
                        <i class=\"fas fa-times\"/>
                    </button>
                </div>
                <ui:group let:labelPrefix=\"{= IF(bound(?predicate), COALESCE(ui:label(?predicate), ?none), ?none) }\">
                    <ui:if ui:condition=\"{= bound(?labelPrefix) }\">
                        <span class=\"input-group-addon tag-label-prefix\">{= ?labelPrefix }</span>
                    </ui:if>
                    <input class=\"tag-input-hidden\" id=\"{= ?id }\" name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ui:encodeNode(?object, true, true) }\"/>
                    <input class=\"form-control tag-input\" placeholder=\"{= ?object }\" readonly=\"readonly\" type=\"text\" value=\"{= IF(bound(?labelOverride), ?labelOverride, IF(isIRI(?object), ui:label(?object), ?object)) }\"/>
                </ui:group>
            </div>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Tag editor" ;
  rdfs:subClassOf saf:ObjectEditor ;
.
saf:TextAreaEditor
  a swa:ObjectEditorClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suprressLanguage ;
      spl:valueType xsd:boolean ;
    ] ;
  swa:objectWidgetWeight [
      a swa:WeightedExpression ;
      swa:expression [
          a sp:and ;
          sp:arg1 [
              a sp:and ;
              sp:arg1 [
                  a sp:bound ;
                  sp:arg1 [
                      sp:varName "object" ;
                    ] ;
                ] ;
              sp:arg2 [
                  a sp:isLiteral ;
                  sp:arg1 [
                      sp:varName "object" ;
                    ] ;
                ] ;
            ] ;
          sp:arg2 [
              a sp:gt ;
              sp:arg1 [
                  a spif:indexOf ;
                  sp:arg1 [
                      sp:varName "object" ;
                    ] ;
                  sp:arg2 """
""" ;
                ] ;
              sp:arg2 0 ;
            ] ;
        ] ;
      swa:weight 2 ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:datatype=\"{= COALESCE(?datatype, IF(bound(?object), datatype(?object), swa:localRange(?predicate, ?subject))) }\">
    <ui:group let:removable=\"{= COALESCE(ui:contextValue(&quot;removable&quot;), false) }\">
        <div class=\"swa-white-space-no-wrap\">
            <div class=\"form-group\">
                <div class=\"col-xs-10\">
                    <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= xsd:string }\" arg:uid=\"{= ?uid }\"/>
                    <div class=\"input-group\">
                        <textarea class=\"form-control swa-text-area {= swa:testClass(?predicate) }\" name=\"new-{= ?uid }\" rows=\"4\">{= ?object }</textarea>
                        <ui:if ui:condition=\"{= ?removable }\">
                            <span class=\"form-control input-group-btn saf-textarea-input-group\">
                                <button class=\"btn btn-danger swa-delete-row-button saf-delete-row-button\" onclick=\"searchPortal.deleteRow(&quot;{= ?rid }&quot;)\" type=\"button\">
                                    <i class=\"fas fa-times\"/>
                                </button>
                            </span>
                        </ui:if>
                    </div>
                </div>
            </div>
            <!--<ui:if ui:condition=\"{= (((?datatype = xsd:string) || (?datatype = rdfs:Literal)) || (?datatype = rdf:langString)) || (bound(?object) &amp;&amp; (lang(?object) != &quot;&quot;)) }\">
<ui:if ui:condition=\"{= swa:falseOrUnbound(?suppressLanguage) }\">
<saf:LangSelector arg:initialValue=\"{= lang(?object) }\" arg:uid=\"{= ?uid }\"/>
</ui:if>
</ui:if>-->
        </div>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "A multi-line text area to enter string literals." ;
  rdfs:label "Text area editor" ;
  rdfs:subClassOf saf:ObjectEditor ;
.
saf:TextFieldEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<saf:AbstractTextFieldEditor arg:inputType=\"text\" arg:suppressLanguage=\"{= true }\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:label "Text field editor" ;
  rdfs:subClassOf saf:AbstractTextFieldEditor ;
.
saf:UsageDiagramButtonPlaceholder
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:ViewElements
  a ui:ViewElement ;
  ui:headIncludes """
<ui:group>
    <script>teamwork.initRichTextEditors()</script>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "View elements" ;
  rdfs:subClassOf ui:ViewElements ;
.
saf:ViewPage
  a ui:ViewElement ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:title ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:pageType ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <teamwork:Header arg:pageType=\"{= ?pageType }\" arg:suppressSearch=\"{= true }\">{= ?title }</teamwork:Header>
    <main id=\"main\">
        <ui:insertionPoint ui:pointId=\"main\"/>
    </main>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "View page" ;
  rdfs:subClassOf saf:ViewElements ;
.
saf:WalledGroup
  a ui:ViewElement ;
  ui:prototype """
<section class=\"details-section details-group {= IF(bound(?parent), &quot;details-section-child&quot;, &quot;&quot;) }\" id=\"{= IF(bound(?parent), CONCAT(?parent, &quot;_&quot;, ?label), ?label) }\" title=\"{= ?label }\">
    <ui:if ui:condition=\"{= IF(bound(?showLabel), ?showLabel, true) }\">
        <h5 class=\"details-label\">{= ?label }</h5>
    </ui:if>
    <div class=\"details-content wall\">
        <ui:insertionPoint ui:pointId=\"detail-body\"/>
    </div>
    <div class=\"corner bottom-left-corner\"/>
</section>
"""^^ui:Literal ;
  rdfs:label "Walled group" ;
  rdfs:subClassOf saf:DetailsSection ;
.
saf:addWidget
  a rdf:Property ;
  rdfs:domain saf:ObjectAddWidget ;
  rdfs:label "add widget" ;
  rdfs:range rdf:Property ;
.
saf:appliedfacet
  a owl:ObjectProperty ;
  rdfs:domain saf:AppliedFacetList ;
  rdfs:label "appliedfacet" ;
  rdfs:range saf:AppliedFacet ;
.
saf:bestAddWidget
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "widgetName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "widgetName" ;
                    ] ;
                  sp:predicate saf:addWidget ;
                  sp:subject [
                      sp:varName "predicate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:label "best add widget" ;
  rdfs:subClassOf saf:Functions ;
.
saf:bestParentView
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "widgetName" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "widgetName" ;
                    ] ;
                  sp:predicate saf:parentWidgetProperty ;
                  sp:subject [
                      sp:varName "predicate" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  rdfs:label "best parent view" ;
  rdfs:subClassOf saf:Functions ;
.
saf:bestTerm
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "term" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "label" ;
              ] ;
            sp:predicate skos:prefLabel ;
            sp:subject [
                sp:varName "term" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    a sp:lcase ;
                    sp:arg1 [
                        sp:varName "label" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:lcase ;
                    sp:arg1 [
                        sp:varName "input" ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:input ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "best term" ;
  rdfs:subClassOf saf:Functions ;
.
saf:bestViewStyle
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "view" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "view" ;
                    ] ;
                  sp:predicate ui:viewElement ;
                  sp:subject spin:_arg1 ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The selected view style." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "best view style" ;
  rdfs:subClassOf saf:Functions ;
.
saf:buildAppliedFacetList
  a ui:Method ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= bound(?filters) }\">
        <ui:group let:list=\"{= BNODE() }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?list a saf:AppliedFacetList .
                    }
                    WHERE {
                    } }\"/>
            <ui:group letrs:facets=\"{#
                    SELECT ?type ?match
                    WHERE {
                        ?filters saf:splitSearchFilters ( ?type ?match ) .
                    } }\">
                <ui:forEach ui:resultSet=\"{= ?facets }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?filter a saf:AppliedFacet .
                                ?filter saf:facetValue ?match .
                                ?filter saf:facetValueType ?type .
                                ?list saf:appliedfacet ?filter .
                            }
                            WHERE {
                                BIND (BNODE() AS ?filter) .
                            } }\"/>
                </ui:forEach>
            </ui:group>
        </ui:group>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Graph scope/context must be set by caller" ;
  rdfs:label "build facet list" ;
  rdfs:subClassOf ui:Methods ;
.
saf:buildFilter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fullFilter" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "filters" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 " ?result " ;
                    sp:arg2 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            sp:varName "filters" ;
                          ] ;
                        sp:arg2 "\\^\\|" ;
                        sp:arg3 ". ?result " ;
                      ] ;
                    sp:arg3 " . " ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "filterLine" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "freeText" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 " {{ ?result rdfs:comment ?desc .} UNION { ?result rdfs:label ?desc. }} FILTER(fn:contains(LCASE(?desc), " ;
                    sp:arg2 [
                        a sp:lcase ;
                        sp:arg1 [
                            sp:varName "freeText" ;
                          ] ;
                      ] ;
                    sp:arg3 ")). " ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "freeTextLine" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "filterLine" ;
                  ] ;
                sp:arg2 " " ;
                sp:arg3 [
                    sp:varName "freeTextLine" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fullFilter" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:comment "deprecated" ;
  rdfs:label "build filter" ;
  rdfs:subClassOf saf:Functions ;
.
saf:buildSearchFilter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "fullFilter" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "filters" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 [
                            a smf:trim ;
                            sp:arg1 [
                                sp:varName "filters" ;
                              ] ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 " ?result " ;
                    sp:arg2 [
                        a spif:replaceAll ;
                        sp:arg1 [
                            sp:varName "filters" ;
                          ] ;
                        sp:arg2 "\\^\\|" ;
                        sp:arg3 ". ?result " ;
                      ] ;
                    sp:arg3 " . " ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "filterLine" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:and ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "freeText" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 [
                            a smf:trim ;
                            sp:arg1 [
                                sp:varName "freeText" ;
                              ] ;
                          ] ;
                        sp:arg2 "" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:concat ;
                    sp:arg1 " ?textSearchable safm:textSearchable true . ?result ?textSearchable ?value . FILTER(fn:contains(LCASE(xsd:string(?value)), " ;
                    sp:arg2 [
                        a sp:lcase ;
                        sp:arg1 [
                            sp:varName "freeText" ;
                          ] ;
                      ] ;
                    sp:arg3 ")). " ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "freeTextLine" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "filterLine" ;
                  ] ;
                sp:arg2 " " ;
                sp:arg3 [
                    sp:varName "freeTextLine" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fullFilter" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "build filter" ;
  rdfs:subClassOf saf:Functions ;
.
saf:createDetailLink
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "link" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:currentQueryGraph ;
              ] ;
            sp:variable [
                sp:varName "baseURI" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "searchPortal.navigateTo('" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 "', '" ;
                sp:arg4 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "baseURI" ;
                      ] ;
                  ] ;
                sp:arg5 "')" ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "create detail link" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
saf:defaultBestViewStyle
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "view" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:if ;
                      sp:arg1 [
                          a sp:eq ;
                          sp:arg1 spin:_arg1 ;
                          sp:arg2 safm:FollowYourNoseStyle ;
                        ] ;
                      sp:arg2 safm:LabelLikeStyle ;
                      sp:arg3 spin:_arg1 ;
                    ] ;
                  sp:variable [
                      sp:varName "element" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "view" ;
                    ] ;
                  sp:predicate ui:viewElement ;
                  sp:subject [
                      sp:varName "element" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:graph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The selected view style." ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "best view style" ;
  rdfs:subClassOf saf:Functions ;
.
saf:experimentalSearch
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object true ;
            sp:predicate safm:searchable ;
            sp:subject [
                sp:varName "searchable" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "searchable" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "result" ;
              ] ;
          ]
          [
            a sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "result" ;
                    ] ;
                  sp:predicate saf:searchFilters ;
                  sp:subject [
                      sp:varName "filters" ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "experimental search" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:facetSearchQuery
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a saf:facetSearchQueryStart ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg2 [
                    sp:varName "filter_line" ;
                  ] ;
                sp:arg3 [
                    a saf:facetSearchQueryEnd ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg3 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a saf:buildSearchFilter ;
                    arg:filters spin:_arg2 ;
                    arg:freeText spin:_arg3 ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "filter_line" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "Filter Value" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg3 ;
      spl:valueType xsd:string ;
      rdfs:comment "FreeText Value" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Property Value" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query" ;
  rdfs:subClassOf saf:Functions ;
.
saf:facetSearchQueryEnd
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression " } GROUP BY ?facets HAVING (?count > 0) ORDER BY DESC(?count) (?label)" ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query end" ;
  rdfs:subClassOf saf:Functions ;
.
saf:facetSearchQueryStart
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "SELECT DISTINCT ( COUNT( DISTINCT ?result) as ?count) (SAMPLE(?facets) as ?facet) (ui:label(?facet) AS ?label) WHERE { ?searchable safm:searchable true . ?result a ?searchable.  ?result <" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
                sp:arg3 "> ?facets .  " ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Property Value" ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query start" ;
  rdfs:subClassOf saf:Functions ;
.
saf:facetValue
  a rdf:Property ;
  rdfs:domain saf:AppliedFacet ;
  rdfs:label "facet value" ;
  rdfs:range rdfs:Resource ;
.
saf:facetValueType
  a owl:ObjectProperty ;
  rdfs:domain saf:AppliedFacet ;
  rdfs:label "value type" ;
  rdfs:range rdfs:Class ;
.
saf:getColumns
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "order" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "prop" ;
          ]
          [
            sp:varName "qname" ;
          ]
          [
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "prop" ;
                  ] ;
              ] ;
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            sp:object safm:SummaryView ;
            sp:predicate safm:onView ;
            sp:subject [
                sp:varName "prop" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "order" ;
              ] ;
            sp:predicate safm:viewOrder ;
            sp:subject [
                sp:varName "prop" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a saf:getJSONQName ;
                arg:resource [
                    sp:varName "prop" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "qname" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "get columns" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:getColumnsNames
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:GroupConcat ;
            sp:expression [
                a sp:concat ;
                sp:arg1 " ?" ;
                sp:arg2 [
                    sp:varName "name" ;
                  ] ;
                sp:arg3 " " ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object safm:SummaryView ;
            sp:predicate safm:onView ;
            sp:subject [
                sp:varName "pred" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a saf:getJSONQName ;
                arg:resource [
                    sp:varName "pred" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "name" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get columns names" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getDefaultSearchPrefix
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "uiPrefix" ;
                  ] ;
                sp:arg2 " " ;
                sp:arg3 [
                    sp:varName "safmPrefix" ;
                  ] ;
                sp:arg4 " " ;
                sp:arg5 [
                    sp:varName "safPrefix" ;
                  ] ;
              ] ;
            sp:varName "prefixGroup" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "PREFIX ui: <http://uispin.org/ui#> " ;
            sp:variable [
                sp:varName "uiPrefix" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "PREFIX safm: <http://saf.topbraidlive.org/metaschema/> " ;
            sp:variable [
                sp:varName "safmPrefix" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "PREFIX saf: <http://topbraid.org/saf/> " ;
            sp:variable [
                sp:varName "safPrefix" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getFacetsForProperty
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "facet" ;
          ]
          [
            sp:varName "count" ;
          ]
          [
            sp:varName "total" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "limit" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "term" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "facetFilters" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?4" ;
              ] ;
            sp:predicate smf:luceneFacetQuery ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "facet" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?5" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "count" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?5" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?6" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?5" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "total" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?6" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?6" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:private true ;
  rdfs:label "get facets for property" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:getJSONQName
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "qname" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Bind ;
                  sp:expression [
                      a afn:namespace ;
                      sp:arg1 [
                          sp:varName "resource" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a afn:localname ;
                      sp:arg1 [
                          sp:varName "resource" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "ln" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "prefix" ;
                    ] ;
                  sp:predicate spif:prefix ;
                  sp:subject [
                      sp:varName "ns" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a sp:concat ;
                      sp:arg1 [
                          sp:varName "prefix" ;
                        ] ;
                      sp:arg2 "_" ;
                      sp:arg3 [
                          sp:varName "ln" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "baseName" ;
                    ] ;
                ]
                [
                  a sp:Bind ;
                  sp:expression [
                      a spif:replaceAll ;
                      sp:arg1 [
                          sp:varName "baseName" ;
                        ] ;
                      sp:arg2 "-" ;
                      sp:arg3 "_" ;
                    ] ;
                  sp:variable [
                      sp:varName "qname" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:unionGraph ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "get JSONQName" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getOptionalColumns
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            a sp:GroupConcat ;
            sp:expression [
                a sp:concat ;
                sp:arg1 "OPTIONAL { ?result <" ;
                sp:arg10 "?" ;
                sp:arg11 [
                    sp:varName "name" ;
                  ] ;
                sp:arg12 "). }" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "pred" ;
                      ] ;
                  ] ;
                sp:arg3 "> " ;
                sp:arg4 "?pred_" ;
                sp:arg5 [
                    sp:varName "name" ;
                  ] ;
                sp:arg6 " . " ;
                sp:arg7 "BIND(ui:label(?pred_" ;
                sp:arg8 [
                    sp:varName "name" ;
                  ] ;
                sp:arg9 ") AS " ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object safm:SummaryView ;
            sp:predicate safm:onView ;
            sp:subject [
                sp:varName "pred" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a saf:getJSONQName ;
                arg:resource [
                    sp:varName "pred" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "name" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "get optional columns" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getParentProperty
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:predicate rdfs:subPropertyOf ;
            sp:subject spin:_arg1 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:label "get parent property" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getPropertyFromFilter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "prop" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
                sp:arg2 ">" ;
              ] ;
            sp:variable [
                sp:varName "findex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:subString ;
                arg:fromIndex 0 ;
                arg:toIndex [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "findex" ;
                      ] ;
                    sp:arg2 1 ;
                  ] ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sprop" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "sprop" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prop" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      sp:object rdf:Property ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "anyType" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "anyType" ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "prop" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:ct ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "validate filter" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getResourceFromFilter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "resource" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:lastIndexOf ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
                sp:arg2 "<" ;
              ] ;
            sp:variable [
                sp:varName "lindex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:subString ;
                arg:fromIndex [
                    sp:varName "lindex" ;
                  ] ;
                arg:toIndex [
                    a fn:string-length ;
                    sp:arg1 [
                        sp:varName "ct" ;
                      ] ;
                  ] ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sresource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "sresource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "anyObj" ;
                        ] ;
                      sp:predicate [
                          sp:varName "anyProp" ;
                        ] ;
                      sp:subject [
                          sp:varName "resource" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:ct ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType rdfs:Resource ;
  rdfs:label "validate filter" ;
  rdfs:subClassOf saf:Functions ;
.
saf:getResultsFromLucene
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
          [
            sp:varName "score" ;
          ]
          [
            sp:varName "total" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "term" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "facetFilters" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "offset" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "limit" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?4" ;
              ] ;
            sp:predicate smf:luceneQuery ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "result" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?5" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?4" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "score" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?5" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?6" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?5" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "total" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?6" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?6" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:facetFilters ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:limit ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:offset ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:term ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "get results from lucene" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:getSearchColumnsService
  a ui:Service ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)) }\">
    <ui:setContext ui:varName=\"hasConfiguredGraph\" ui:varValue=\"{= EXISTS {
        ?graph safm:graphSearchable true .
    } }\">
        <ui:call arg:view=\"{= safm:SummaryView }\" ui:template=\"{= safconfig:SelectedViewProperties }\" ui:varName=\"columns\">
            <ui:call ui:template=\"{= saf:selectSearchGraphs }\" ui:varName=\"graphs\">
                <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?graphs) }\">
                    <ui:group>
                        <ui:call ui:template=\"{= saf:getColumns }\">
                            <swon:Array>
                                <swon:Object>
                                    <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
                                    <swon:Value arg:name=\"title\" arg:value=\"URI\"/>
                                    <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
                                    <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
                                </swon:Object>
                                <ui:forEach ui:resultSet=\"{= ?rs }\">
                                    <swon:Object>
                                        <swon:Value arg:name=\"data\" arg:value=\"{= ?qname }\"/>
                                        <swon:Value arg:name=\"title\" arg:value=\"{= smf:titleCase(?label) }\"/>
                                    </swon:Object>
                                </ui:forEach>
                            </swon:Array>
                        </ui:call>
                    </ui:group>
                </ui:setContext>
            </ui:call>
        </ui:call>
    </ui:setContext>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "get search columns service" ;
  rdfs:subClassOf saf:JSONServices ;
.
saf:getSearchQueryService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)) }\">
    <ui:call ui:template=\"{= saf:selectSearchGraphs }\" ui:varName=\"graphs\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?graphs) }\">
            <ui:group let:text=\"{= COALESCE(ui:encodeNode(?freeText), ?none) }\">
                <ui:group let:prefixGroup=\"{= saf:getDefaultSearchPrefix() }\">
                    <ui:group let:queryString=\"{= saf:searchQueryWithColumns(?facetFilters, ?text) }\">
                        <swon:Object>
                            <swon:Value arg:name=\"queryGraph\" arg:value=\"{= ui:currentQueryGraph() }\"/>
                            <swon:Value arg:name=\"queryString\" arg:value=\"{= CONCAT(?prefixGroup, &quot;&quot;, ?queryString) }\"/>
                        </swon:Object>
                    </ui:group>
                </ui:group>
            </ui:group>
        </ui:setContext>
    </ui:call>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "get search query" ;
  rdfs:subClassOf saf:JSONServices ;
.
saf:getSearchResourceProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "prop" ;
          ]
          [
            sp:expression [
                a swa:objectsList ;
                sp:arg1 [
                    sp:varName "resource" ;
                  ] ;
                sp:arg2 [
                    sp:varName "prop" ;
                  ] ;
              ] ;
            sp:varName "value" ;
          ]
        ) ;
      sp:where (
          [
            sp:object safm:SummaryView ;
            sp:predicate safm:onView ;
            sp:subject [
                sp:varName "prop" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "get search resource properties" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:getSearchResultsService
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:facetFilters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithoutImports(IRI(&quot;http://server.topbraidlive.org/dynamic/searchconfig/&quot;)) }\">
    <ui:call ui:template=\"{= saf:selectSearchGraphs }\" ui:varName=\"graphs\">
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphsFromResultSet(?graphs) }\">
            <ui:group let:text=\"{= COALESCE(ui:encodeNode(?freeText), ?none) }\">
                <ui:group let:queryString=\"{= saf:searchQueryWithColumns(?facetFilters, ?text) }\">
                    <ui:setContext ui:queryGraph=\"{= ui:currentQueryGraph() }\">
                        <sml:SerializeSPARQLResults sm:outputVariable=\"str\" sml:selectQuery=\"{= ?queryString }\" sml:serialization=\"{= sm:SIMPLE_JSON }\">{\"data\":{= ?str }}</sml:SerializeSPARQLResults>
                    </ui:setContext>
                </ui:group>
            </ui:group>
        </ui:setContext>
    </ui:call>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "get search results" ;
  rdfs:subClassOf saf:JSONServices ;
.
saf:getTopFacets
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "facet" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "freeText" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "filters" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?2" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object 0 ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?2" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?3" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?2" ;
                ] ;
            ]
            [
              sp:object 10 ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?3" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?3" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?4" ;
                ] ;
              sp:predicate smf:luceneFacetsList ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "facet" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?4" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?4" ;
                ] ;
            ]
          )
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:filters ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:freeText ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:hasProtocol
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:lcase ;
                sp:arg1 [
                    a sp:str ;
                    sp:arg1 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "value" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:or ;
                        sp:arg1 [
                            a sp:or ;
                            sp:arg1 [
                                a sp:strstarts ;
                                sp:arg1 [
                                    sp:varName "value" ;
                                  ] ;
                                sp:arg2 "http" ;
                              ] ;
                            sp:arg2 [
                                a sp:strstarts ;
                                sp:arg1 [
                                    sp:varName "value" ;
                                  ] ;
                                sp:arg2 "https" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a sp:strstarts ;
                            sp:arg1 [
                                sp:varName "value" ;
                              ] ;
                            sp:arg2 "ftp" ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        a sp:strstarts ;
                        sp:arg1 [
                            sp:varName "value" ;
                          ] ;
                        sp:arg2 "sftp" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:strstarts ;
                    sp:arg1 [
                        sp:varName "value" ;
                      ] ;
                    sp:arg2 "file" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "Value" ;
    ] ;
  rdfs:subClassOf saf:Functions ;
.
saf:isLuceneDisabled
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object true ;
                  sp:predicate cfg:disableLuceneIndexing ;
                  sp:subject [
                      sp:varName "any" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
          ]
        ) ;
    ] ;
  rdfs:label "is lucene enabled" ;
  rdfs:subClassOf saf:Functions ;
.
saf:objectWidgetRowClass
  a rdf:Property ;
  rdfs:domain swa:Mode ;
  rdfs:label "object widget row class" ;
  rdfs:range saf:ObjectWidgetRowClass ;
  rdfs:subPropertyOf swa:systemProperty ;
.
saf:objectsBodyClass
  a rdf:Property ;
  rdfs:domain swa:Mode ;
  rdfs:label "objects body class" ;
  rdfs:range saf:ObjectWidgetClass ;
  rdfs:subPropertyOf swa:systemProperty ;
.
saf:parentWidgetProperty
  a rdf:Property ;
  rdfs:domain rdf:Property ;
  rdfs:label "parent widget property" ;
  rdfs:range ui:ViewElement ;
.
saf:searchFilters
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "" ;
              ] ;
            sp:variable [
                sp:varName "start" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "lines" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "start" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object "\\^\\|" ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:lastIndexOf ;
                sp:arg1 [
                    sp:varName "lines" ;
                  ] ;
                sp:arg2 " " ;
              ] ;
            sp:variable [
                sp:varName "space" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    a smf:trim ;
                    sp:arg1 [
                        a smf:subString ;
                        arg:fromIndex 0 ;
                        arg:toIndex [
                            sp:varName "space" ;
                          ] ;
                        sp:arg1 [
                            sp:varName "lines" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "type" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    a smf:trim ;
                    sp:arg1 [
                        a smf:subString ;
                        arg:fromIndex [
                            sp:varName "space" ;
                          ] ;
                        arg:toIndex [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "lines" ;
                              ] ;
                          ] ;
                        sp:arg1 [
                            sp:varName "lines" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "match" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "match" ;
              ] ;
            sp:predicate [
                sp:varName "type" ;
              ] ;
            sp:subject [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "search filters" ;
  rdfs:subClassOf spin:MagicProperties ;
.
saf:searchQuery
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a saf:searchQueryStart ;
                  ] ;
                sp:arg2 [
                    sp:varName "filters_line" ;
                  ] ;
                sp:arg3 [
                    a saf:searchQueryEnd ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a saf:buildSearchFilter ;
                    arg:filters spin:_arg1 ;
                    arg:freeText spin:_arg2 ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "filters_line" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "Filter Value" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "FreeText Value" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query" ;
  rdfs:subClassOf saf:Functions ;
.
saf:searchQueryEnd
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression " } ORDER BY (?label)" ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:comment "TODO: Order needs defined #ORDER BY DESC(?order)" ;
  rdfs:label " search query end" ;
  rdfs:subClassOf saf:Functions ;
.
saf:searchQueryEndWithColumns
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "columns" ;
                  ] ;
                sp:arg2 [
                    sp:varName "end" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a saf:getOptionalColumns ;
              ] ;
            sp:variable [
                sp:varName "columns" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression " } " ;
            sp:variable [
                sp:varName "end" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "search query end with columns" ;
  rdfs:subClassOf saf:Functions ;
.
saf:searchQueryStart
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression "SELECT DISTINCT ?result  (ui:label(?result) AS ?label) WHERE { ?searchable safm:searchable true . ?result a ?searchable. " ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Property Value" ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label " search query start" ;
  rdfs:subClassOf saf:Functions ;
.
saf:searchQueryStartWithColumns
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "select" ;
                  ] ;
                sp:arg2 [
                    sp:varName "columnNames" ;
                  ] ;
                sp:arg3 [
                    sp:varName "where" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a saf:getColumnsNames ;
              ] ;
            sp:variable [
                sp:varName "columnNames" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "SELECT DISTINCT (?result AS ?uri) (ui:label(?result) AS ?label) " ;
            sp:variable [
                sp:varName "select" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression "WHERE { ?searchable safm:searchable true . ?result a ?searchable. " ;
            sp:variable [
                sp:varName "where" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "Property Value" ;
    ] ;
  spin:private true ;
  spin:returnType xsd:string ;
  rdfs:label " search query start" ;
  rdfs:subClassOf saf:Functions ;
.
saf:searchQueryWithColumns
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a saf:searchQueryStartWithColumns ;
                  ] ;
                sp:arg2 [
                    sp:varName "filters_line" ;
                  ] ;
                sp:arg3 [
                    a saf:searchQueryEndWithColumns ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:or ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 spin:_arg1 ;
                      ] ;
                    sp:arg2 [
                        a sp:bound ;
                        sp:arg1 spin:_arg2 ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a saf:buildSearchFilter ;
                    arg:filters spin:_arg1 ;
                    arg:freeText spin:_arg2 ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "filters_line" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "Filter Value" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "FreeText Value" ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "facet search query" ;
  rdfs:subClassOf saf:Functions ;
.
saf:selectSearchGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a sp:Desc ;
            sp:expression [
                sp:varName "order" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:varName "igraph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression 1 ;
                    sp:variable [
                        sp:varName "order" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://server.topbraidlive.org/dynamic/searchconfig/> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object edg:DataSubjectArea ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "subjectArea" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate safm:graphSearchable ;
                    sp:subject [
                        sp:varName "subjectArea" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "teamGraph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:projectHasSubjectArea ;
                        arg:projectGraph [
                            sp:varName "graph" ;
                          ] ;
                        arg:subjectArea [
                            sp:varName "subjectArea" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object edg:BusinessArea ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "subjectArea" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate safm:graphSearchable ;
                    sp:subject [
                        sp:varName "subjectArea" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "teamGraph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:projectHasSubjectArea ;
                        arg:projectGraph [
                            sp:varName "graph" ;
                          ] ;
                        arg:subjectArea [
                            sp:varName "subjectArea" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "?4" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?5" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "teamGraph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?5" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?5" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate safm:graphSearchable ;
                    sp:subject [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:govGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "Select search graphs" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:selectUsersAvailableGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "projectGraph" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate teamwork:readableGraphsUnderTeamControl ;
            sp:subject () ;
          ]
          [
            sp:object [
                sp:varName "projectGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object true ;
            sp:predicate safm:graphSearchable ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Select search graphs" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:sortedObjects
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:bound ;
                    sp:arg1 [
                        sp:varName "targetProperty" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    sp:varName "targetProperty" ;
                  ] ;
                sp:arg3 [
                    sp:varName "type" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "type" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "property" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "type" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "object" ;
              ] ;
            sp:predicate [
                sp:varName "type" ;
              ] ;
            sp:subject [
                sp:varName "subject" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "object" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:targetProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:private true ;
  rdfs:label "sorted objects" ;
  rdfs:subClassOf saf:SelectTemplates ;
.
saf:splitSearchFilters
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "type" ;
          ]
          [
            sp:varName "match" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 spin:_arg1 ;
                sp:arg2 "" ;
              ] ;
            sp:variable [
                sp:varName "start" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0" ;
              ] ;
            sp:predicate spif:split ;
            sp:subject [
                sp:varName "lines" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "start" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object "\\^\\|" ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:lastIndexOf ;
                sp:arg1 [
                    sp:varName "lines" ;
                  ] ;
                sp:arg2 " " ;
              ] ;
            sp:variable [
                sp:varName "space" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    a smf:trim ;
                    sp:arg1 [
                        a smf:subString ;
                        arg:fromIndex 0 ;
                        arg:toIndex [
                            sp:varName "space" ;
                          ] ;
                        sp:arg1 [
                            sp:varName "lines" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "type" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    a smf:trim ;
                    sp:arg1 [
                        a smf:subString ;
                        arg:fromIndex [
                            sp:varName "space" ;
                          ] ;
                        arg:toIndex [
                            a fn:string-length ;
                            sp:arg1 [
                                sp:varName "lines" ;
                              ] ;
                          ] ;
                        sp:arg1 [
                            sp:varName "lines" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "match" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
    ] ;
  spin:private true ;
  rdfs:label "search filters" ;
  rdfs:subClassOf spin:MagicProperties ;
.
saf:validateFilter
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "filterLine" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spif:indexOf ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
                sp:arg2 ">" ;
              ] ;
            sp:variable [
                sp:varName "findex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:subString ;
                arg:fromIndex 0 ;
                arg:toIndex [
                    a sp:add ;
                    sp:arg1 [
                        sp:varName "findex" ;
                      ] ;
                    sp:arg2 1 ;
                  ] ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sprop" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "sprop" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "prop" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:lastIndexOf ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
                sp:arg2 "<" ;
              ] ;
            sp:variable [
                sp:varName "lindex" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:subString ;
                arg:fromIndex [
                    sp:varName "lindex" ;
                  ] ;
                arg:toIndex [
                    a fn:string-length ;
                    sp:arg1 [
                        sp:varName "ct" ;
                      ] ;
                  ] ;
                sp:arg1 [
                    sp:varName "ct" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "sresource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:decodeNode ;
                sp:arg1 [
                    sp:varName "sresource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "resource" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "sprop" ;
                  ] ;
                sp:arg2 " " ;
                sp:arg3 [
                    sp:varName "sresource" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "filterLine" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:exists ;
                sp:elements (
                    [
                      sp:object rdf:Property ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "anyType" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "anyType" ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "prop" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:ct ;
      spl:valueType xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "validate filter" ;
  rdfs:subClassOf saf:Functions ;
.
swa:Button
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataAttrValue ;
      spl:valueType xsd:string ;
    ] ;
.
rdfs:Resource
  ui:instanceView """
<saf:DetailView arg:resource=\"{= ?this }\" ui:id=\"saf-detail\" ui:priority=\"{= 10 }\"/>
"""^^ui:Literal ;
  ui:instanceView """
<saf:SummaryView arg:resource=\"{= ?this }\" ui:id=\"saf-summary\" ui:priority=\"{= 10 }\"/>
"""^^ui:Literal ;
  ui:instanceView """
<ui:group ui:id=\"resource-description\">
    <ui:parse ui:str=\"{= swa:getDescription(?this) }\"/>
</ui:group>
"""^^ui:Literal ;
.
