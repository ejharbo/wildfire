# baseURI: http://evn.topbraidlive.org/evnprojects
# imports: http://evn.topbraidlive.org/ui
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://teamwork.topbraidlive.org/crosswalkprojects
# imports: http://topbraid.org/sharepoint
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworknotifications
# imports: http://www.w3.org/2004/02/skos/core
# prefix: taxonomies

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://evn.topbraidlive.org/evnprojects>
  a owl:Ontology ;
  owl:imports <http://evn.topbraidlive.org/ui> ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://teamwork.topbraidlive.org/crosswalkprojects> ;
  owl:imports <http://topbraid.org/sharepoint> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworknotifications> ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
.
taxonomies:ConceptTableExportPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 7 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:format=\"text\" ui:snippet=\"true\" ui:viewClass=\"{= taxonomies:ConceptTableExporter }\">
    <teamwork:ActionLink arg:comment=\"Creates a spreadsheet with one row for each concept.\" arg:icon=\"lib/teamwork/build/images/teamwork/concept-overview-spreadsheet.svg\" arg:onClick=\"swa.loadPageWithProgress('{= ?link }', 'Building Concept Overview Spreadsheet')\" arg:title=\"Export Concept Overview Spreadsheet\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Concept table export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
taxonomies:ConceptTableExporter
  a ui:NodeClass ;
  ui:abstract true ;
  ui:prototype """
<ui:setContext let:tab=\"{= fn:concat(&quot;\\t&quot;) }\" ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\">
    <ui:group letrs:ps=\"{#
            SELECT DISTINCT ?predicate ?label
            WHERE {
                ?type (rdfs:subClassOf)* skos:Concept .
                ?concept a ?type .
                ?concept ?predicate ?object .
                FILTER (?predicate NOT IN (skos:narrower)) .
                BIND (ui:label(?predicate) AS ?label) .
            }
            ORDER BY (?label) }\">Concept Id{= ?tab }Display Label<ui:forEach ui:resultSet=\"{= ?ps }\">{= fn:concat(?tab, ?label) }</ui:forEach>{= fn:concat(\"\\n\") }<ui:group letrs:concepts=\"{#
                SELECT DISTINCT ?concept ?encoded
                WHERE {
                    ?type (rdfs:subClassOf)* skos:Concept .
                    ?concept a ?type .
                    BIND (ui:encodeNode(?concept) AS ?encoded) .
                }
                ORDER BY (?encoded) }\">
            <ui:task ui:taskName=\"Generating {= spr:rowCount(?concepts) } rows\" ui:totalWork=\"{= spr:rowCount(?concepts) }\">
                <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?concepts }\">
                    <ui:subTask ui:subTaskName=\"Row {= ?index }: {= ui:label(?concept) }\" ui:work=\"{= 1 }\">
                        <ui:group>{= ?encoded }</ui:group>{= ?tab }<ui:group>{= ui:label(?concept) }</ui:group>
                        <ui:forEach ui:resultSet=\"{= ?ps }\">{= ?tab }<ui:forEach ui:indexVar=\"index\" ui:resultSet='{#
                                    SELECT ?value
                                    WHERE {
                                        ?concept ?predicate ?object .
                                        BIND (smf:replaceAll(ui:label(?object), \"\\n\", \" \") AS ?unspaced) .
                                        BIND (smf:replaceAll(?unspaced, ?tab, \" \") AS ?value) .
                                    }
                                    ORDER BY (?value) }' ui:separator=\", \">{= ?value }</ui:forEach>
                        </ui:forEach>{= fn:concat(\"\\n\") }</ui:subTask>
                </ui:forEach>
            </ui:task>
        </ui:group>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Concept table exporter" ;
  rdfs:subClassOf taxonomies:Elements ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
taxonomies:ConfigureSharePointPage
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <teamwork:Chrome arg:projectTab=\"{= teamwork:ManageProjectTab }\" ui:args=\"*\">
            <h1>Configure SharePoint for {= teamwork:projectLabel(?projectGraph) }</h1>
            <p>This vocabulary can be connected to SharePoint server to activate cross-linkage between
			the SKOS terms from this vocabulary and the SharePoint metadata.</p>
            <form action=\"swp\" let:server=\"{= spl:object(?teamGraph, sharepoint:server) }\">
                <input name=\"_base\" type=\"hidden\" value=\"{= ?teamGraph }\"/>
                <input name=\"_viewClass\" type=\"hidden\" value=\"{= taxonomies:ConfigureSharePointService }\"/>
                <input name=\"projectGraph\" type=\"hidden\" value=\"{= ?projectGraph }\"/>
                <swa:LabeledElement arg:label=\"SharePoint Server URL:\">
                    <input class=\"form-control taxonomies-configure-share-point-page-label\" name=\"url\" type=\"text\" value=\"{= IF(bound(?server), spl:object(?server, sharepoint:url), ?none) }\"/>
                </swa:LabeledElement>
                <swa:LabeledElement arg:label=\"User Name:\">
                    <input class=\"form-control\" name=\"userName\" type=\"text\" value=\"{= IF(bound(?server), spl:object(?server, sharepoint:userName), ?none) }\"/>
                </swa:LabeledElement>
                <swa:LabeledElement arg:label=\"Password:\">
                    <input name=\"password\" type=\"password\"/>
                </swa:LabeledElement>
                <br/>
                <input type=\"submit\" value=\"Submit\"/>
            </form>
        </teamwork:Chrome>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Configure SharePoint page" ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
taxonomies:ConfigureSharePointService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:password ;
      spl:valueType xsd:string ;
      rdfs:comment "The password" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:url ;
      spl:valueType xsd:anyURI ;
      rdfs:comment "The server URL." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The user name" ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= ui:currentQueryGraph() }\">
    <ui:transaction ui:logMessage=\"Configure SharePoint\">
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?teamGraph sharepoint:server ?server .
                    ?server ?anyP ?anyO .
                } }\"/>
        <ui:if ui:condition=\"{= bound(?url) }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?teamGraph sharepoint:server ?server .
                        ?server a sharepoint:Server .
                        ?server sharepoint:url ?url .
                        ?server sharepoint:userName ?userName .
                    }
                    WHERE {
                        BIND (BNODE() AS ?server) .
                    } }\"/>
            <ui:if ui:condition=\"{= bound(?userName) }\">
                <swa:updateSecureStorage arg:key=\"{= ?url }:{= ?userName }\" arg:value=\"{= ?password }\"/>
            </ui:if>
        </ui:if>
    </ui:transaction>
    <teamwork:RedirectToProject arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= teamwork:ManageProjectTab }\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "Configure SharePoint service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
taxonomies:EditProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The root class of the Classes Hierarchy." ;
    ] ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?teamGraph }\">
        <ui:transaction ui:logMessage=\"Set root class\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?teamGraph taxonomies:rootClass ?oldRootClass .
                    }
                    INSERT {
                        ?teamGraph taxonomies:rootClass ?rootClass .
                    }
                    WHERE {
                        OPTIONAL {
                            ?teamGraph taxonomies:rootClass ?oldRootClass .
                        } .
                    } }\"/>
        </ui:transaction>
    </ui:setContext>
    <teamwork:EditProjectService ui:args=\"*\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Edit project service" ;
  rdfs:subClassOf teamwork:EditProjectService ;
.
taxonomies:EditableImports
  a teamwork:EditableImportsTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate tops:files ;
                    sp:subject [
                        sp:varName "file" ;
                      ] ;
                  ]
                  [
                    sp:object "/" ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:baseURI ;
                        sp:arg1 [
                            sp:varName "file" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "graph" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a teamwork:isImportableGraph ;
                            arg:file [
                                sp:varName "file" ;
                              ] ;
                            arg:graph [
                                sp:varName "graph" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "?3" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?4" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?3" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "graphTCH" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?4" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Values ;
                    sp:bindings (
                        (
                          <http://spinrdf.org/spl>
                        )
                        (
                          <http://topbraid.org/skos.shapes>
                        )
                        (
                          <http://topbraid.org/skos-xl.shapes>
                        )
                      ) ;
                    sp:varNames (
                        "graph"
                      ) ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "graph" ;
                            ] ;
                          sp:predicate teamwork:importableSystemGraph ;
                          sp:subject [
                              sp:varName "any" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "graph" ;
                          ] ;
                        sp:arg2 <http://www.w3.org/2004/02/skos/core> ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:projectLabel ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "editable imports for taxonomies" ;
  rdfs:subClassOf teamwork:EditableImportsTemplates ;
.
taxonomies:Elements
  a ui:NodeClass ;
  rdfs:label "Elements" ;
  rdfs:subClassOf swa:Elements ;
.
taxonomies:LabelList
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType sp:Select ;
      rdfs:comment "The result set to walk" ;
    ] ;
  ui:prototype """
<ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{#
        SELECT ?node
        WHERE {
            ( ?resultSet 0 ) spr:colCells ?node .
        } }\">
    <ui:if ui:condition=\"{= ?index &gt; 0 }\">, </ui:if>
    <swa:Label arg:node=\"{= ?node }\"/>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:label "Label list" ;
  rdfs:subClassOf taxonomies:Elements ;
.
taxonomies:MTImporterPlugin
  a teamwork:ImportPlugin ;
  teamwork:pluginIndex 2 ;
  ui:prototype """
<ui:if ui:condition=\"{= !bound(?tag) }\">
    <ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:viewClass=\"{= evnui:ImportMTFilePage }\">
        <teamwork:ActionLink arg:comment=\"Imports concepts from a MultiTes file.\" arg:icon=\"lib/teamwork/build/images/taxonomy/import-multites.svg\" arg:link=\"{= ?link }\" arg:title=\"Import MultiTes File\"/>
    </ui:createLink>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "MT importer plugin" ;
  rdfs:subClassOf teamwork:ImportPlugins ;
.
taxonomies:ProjectType
  a teamwork:ProjectType ;
  edg:selectResourceType skos:Concept ;
  edg.v:icon "tq-taxonomy-icon" ;
  teamwork:dashboardGadget tasks:TaskStatusDashboardGadget ;
  teamwork:dashboardGadget teamwork:CompletenessDashboardGadget ;
  teamwork:dashboardGadget teamwork:TagStatusDashboardGadget ;
  teamwork:dashboardGadget teamwork:ValidationDashboardGadget ;
  teamwork:defaultLayout "Taxonomy" ;
  teamwork:deletePlugin teamwork:RemoveFromLuceneIndexDeletePlugin ;
  teamwork:editableImportsTemplate taxonomies:EditableImports ;
  teamwork:editorProjectTabLabel "Taxonomy" ;
  teamwork:owlImports "http://topbraid.org/skos.shapes" ;
  teamwork:owlImports "http://topbraid.org/teamworkconstraints" ;
  teamwork:pluralLabel "Taxonomies" ;
  teamwork:projectEditorClass taxonomies:HierarchicalEditor ;
  teamwork:projectEditorClassOption taxonomies:TabularEditor ;
  teamwork:projectPlugin taxonomies:ConceptTableExportPlugin ;
  teamwork:projectPlugin taxonomies:MTImporterPlugin ;
  teamwork:projectPlugin taxonomies:SKOSStatisticsPlugin ;
  teamwork:projectPlugin taxonomies:SharePointExportPlugin ;
  teamwork:projectPlugin taxonomies:SharePointManagePlugin ;
  teamwork:projectPlugin taxonomies:TreeTableExportPlugin ;
  teamwork:projectPlugin crosswalkprojects:CrosswalksGeneralPlugin ;
  teamwork:projectPlugin savedQueries:ExportSavedSPARQLQueriesPlugin ;
  teamwork:projectPlugin savedQueries:SPARQLEndpointPlugin ;
  teamwork:projectPlugin teamwork:ComparisonReportPlugin ;
  teamwork:projectPlugin teamwork:DefaultNamespacePlugin ;
  teamwork:projectPlugin teamwork:ExportSavedSearchPlugin ;
  teamwork:projectPlugin teamwork:GraphURIPlugin ;
  teamwork:projectPlugin teamwork:ImportedByGeneralPlugin ;
  teamwork:projectPlugin teamwork:ImportsGeneralPlugin ;
  teamwork:projectPlugin teamwork:LocalSearchManagePlugin ;
  teamwork:projectPlugin teamwork:NotificationsManagePlugin ;
  teamwork:projectPlugin teamwork:ProblemsAndSuggestionsReportPlugin ;
  teamwork:projectPlugin teamwork:PublishExportPlugin ;
  teamwork:projectPlugin teamwork:RDFFileImporterPlugin ;
  teamwork:projectPlugin teamwork:ScriptBasedImportPlugin ;
  teamwork:projectPlugin teamwork:SetImportSubjectAreaGraphsPlugin ;
  teamwork:projectPlugin teamwork:SetSimpleSearchModePlugin ;
  teamwork:projectPlugin teamwork:SpellCheckingReportPlugin ;
  teamwork:projectPlugin teamwork:SpreadsheetImportPlugin ;
  teamwork:projectPlugin teamwork:SpreadsheetUsingTemplateImportPlugin ;
  teamwork:projectPlugin teamwork:StatisticsReportPlugin ;
  teamwork:projectPlugin teamwork:URIConstructionRulesManagePlugin ;
  teamwork:projectTypeSupportsUsageTab true ;
  teamwork:singularLabel "Taxonomy" ;
  teamwork:supportedNotification tasks:TaskCreatedNotification ;
  teamwork:supportedNotification tasks:TaskStatusChangedNotification ;
  teamwork:supportedNotification teamwork:FileImportedNotification ;
  teamwork:supportedNotification teamwork:SpreadsheetImportedNotification ;
  teamwork:supportedNotification teamwork:TagCreatedNotification ;
  teamwork:supportedNotification teamwork:TagStatusChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyClearedNotification ;
  teamwork:supportedNotification teamwork:VocabularyStatusChangedNotification ;
  teamwork:vocabularyType taxonomies:Taxonomy ;
  rdfs:comment "Taxonomies are controlled vocabularies that are based on SKOS or SKOS-XL, the W3C standard for managing taxonomies and thesauruses. Taxonomies contain hierarchies of concepts connected using skos:broader relationships. A taxonomy must contain at least one \"concept scheme\" and concept schemes are connected to the \"top concepts\" using skos:hasTopConcept relationships. In addition to the standard SKOS classes and properties, taxonomies can contain custom classes and properties. We recommend defining these in an ontology which is then included into your taxonomy." ;
  rdfs:label "Taxonomies project type" ;
.
taxonomies:SKOSStatisticsPage
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\">
    <teamwork:Chrome arg:projectTab=\"{= teamwork:ReportsProjectTab }\" ui:args=\"*\">
        <h1>SKOS Graph Statistics</h1>
        <teamwork:ReportSubtitle arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\"/>
        <div letrs:npl=\"{#
                SELECT ?label (COUNT(?label) AS ?value)
                WHERE {
                    ?type (rdfs:subClassOf)* skos:Concept .
                    ?concept a ?type .
                    BIND (taxonomies:depth(?concept) AS ?label) .
                }
                GROUP BY ?label
                ORDER BY (?label) }\">
            <swa:BarChart arg:resultSet=\"{= ?npl }\" arg:title=\"Number of nodes per level\" arg:width=\"{= (spr:rowCount(?npl) * 40) + 60 }\" arg:xaxisLabel=\"Depth\" arg:yaxisLabel=\"Count\"/>
        </div>
        <br/>
        <div letrs:fan=\"{#
                SELECT ?label (COUNT(?label) AS ?value)
                WHERE {
                    ?type (rdfs:subClassOf)* skos:Concept .
                    ?concept a ?type .
                    BIND (taxonomies:childCount(?concept) AS ?label) .
                    FILTER (?label != 0) .
                }
                GROUP BY ?label
                ORDER BY (?label) }\">
            <swa:BarChart arg:resultSet=\"{= ?fan }\" arg:title=\"Number of children\" arg:width=\"{= (spr:rowCount(?fan) * 40) + 60 }\" arg:xaxisLabel=\"Number of children\" arg:yaxisLabel=\"Count\"/>
        </div>
    </teamwork:Chrome>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "SKOS statistics page" ;
  rdfs:subClassOf taxonomies:Elements ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
taxonomies:SKOSStatisticsPlugin
  a teamwork:ReportPlugin ;
  teamwork:pluginIndex 5 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:sendEditGraphs=\"{= true }\" ui:sendQueryGraph=\"{= true }\" ui:viewClass=\"{= taxonomies:SKOSStatisticsPage }\">
    <teamwork:ActionLink arg:comment=\"Displays bar charts for the number of nodes per level and the distribution of the number of children.\" arg:faIcon=\"fas fa-chart-pie\" arg:link=\"{= ?link }\" arg:title=\"Taxonomy Statistics\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:ReportPlugins ;
.
taxonomies:SharePointExportPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 8 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:format=\"text\" ui:snippet=\"true\" ui:viewClass=\"{= taxonomies:SharePointExporter }\">
    <teamwork:ActionLink arg:comment=\"Exports this taxonomy into a file that can be imported into SharePoint.\" arg:icon=\"lib/teamwork/build/images/taxonomy/sharepoint-import.svg\" arg:onClick=\"swa.loadPageWithProgress('{= ?link }', 'Building SharePoint Import File')\" arg:title=\"Export SharePoint Import File\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "SharePoint export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
taxonomies:SharePointExporter
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\">
    <!-- see http://technet.microsoft.com/en-us/library/ee424396.aspx for more on format.-->
    <ui:group>\"Term Set Name\",\"Term Set Description\",\"LCID\",\"Available for Tagging\",\"Term Description\",\"Level 1 Term\",\"Level 2 Term\",\"Level 3 Term\",\"Level 4 Term\",\"Level 5 Term\",\"Level 6 Term\",\"Level 7 Term\"
</ui:group>
    <!-- first line needs name of term set -->{= teamwork:projectLabel(?projectGraph) }<!-- nested forEach to account for concept schemes and the top concepts of each --><ui:task ui:taskName=\"Preparing SharePoint file\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?conceptScheme ?conceptSchemeLabel
                WHERE {
                    ?conceptScheme a skos:ConceptScheme .
                    BIND (ui:label(?conceptScheme) AS ?conceptSchemeLabel) .
                }
                ORDER BY (?conceptSchemeLabel) }\">,,,TRUE,,\"{= ?conceptSchemeLabel }\",,,,,,{= fn:concat(\"\\n\") }<ui:forEach ui:resultSet=\"{#
                    SELECT ?topConcept
                    WHERE {
                        ?conceptScheme skos:hasTopConcept ?topConcept .
                    }
                    ORDER BY (ui:label(?topConcept)) }\">,,,TRUE,,\"{= ?conceptSchemeLabel }\",\"{= ui:label(?topConcept) }\",,,,,{= fn:concat(\"\\n\") }<taxonomies:SharePointExporterNode arg:ancestorList=\"&quot;{= ui:label(?topConcept) }&quot;\" arg:conceptSchemeLabel=\"{= ?conceptSchemeLabel }\" arg:depth=\"{= 0 }\" arg:subject=\"{= ?topConcept }\"/>
            </ui:forEach>
        </ui:forEach>
    </ui:task>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:comment """Export CSV according to the specs at http://technet.microsoft.com/en-us/library/ee424396.aspx.  One part of that is wrong, at least for Office 364 SharePoint: where it says \"6. Eight commas\", there needs to be a quoted string before the sixth comma. It should be the root of one of the main branches of hierarchy, which should not get its own line as before.

Even if the hierarchy has more than 7 levels, it only exports 7, because that's all that SharePoint can handle.""" ;
  rdfs:label "SharePoint exporter" ;
  rdfs:subClassOf taxonomies:Elements ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
taxonomies:SharePointExporterNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:ancestorList ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:conceptSchemeLabel ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:integer ;
      rdfs:comment "The current tree depth." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType skos:Concept ;
      rdfs:comment "The currently visited concept." ;
    ] ;
  ui:prototype """
<ui:subTask let:delim=\",\" letrs:children='{#
        SELECT ?child ?label ?quotedDefinition
        WHERE {
            ?child skos:broader ?subject .
            BIND (ui:label(?child) AS ?label) .
            MINUS {
                ?child ((((skos:broader/skos:broader)/skos:broader)/skos:broader)/skos:broader)/(skos:broader)+ ?root .
            } .
            OPTIONAL {
                ?child skos:definition ?definition .
                BIND (CONCAT(\"\\\"\", spif:replaceAll(?definition, \"\\\"\", \"\\\"\\\"\"), \"\\\"\") AS ?quotedDefinition) .
            } .
        }
        ORDER BY (?label) }' ui:subTaskName=\"Node {= ui:label(?subject) }\">
    <ui:if ui:condition=\"{#
            ASK 
            WHERE {
                FILTER (spr:rowCount(?children) &gt; 0) .
                GRAPH ui:tempGraph {
                    ?subject taxonomies:done true .
                } .
            } }\"/>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    GRAPH ui:tempGraph {
                        ?subject taxonomies:done true .
                    } .
                }
                WHERE {
                } }\"/>
        <ui:forEach ui:resultSet=\"{= ?children }\">,,,TRUE,{= ?quotedDefinition },\"{= ?conceptSchemeLabel }\",{= ?ancestorList },\"{= ?label }\"<ui:forEach ui:resultSet=\"{#
                    SELECT ?x
                    WHERE {
                        ?x tops:for ( ?depth 3 ) .
                    } }\">{= ?delim }</ui:forEach>{= fn:concat(\"\\n\") }<taxonomies:SharePointExporterNode arg:ancestorList=\"{= fn:concat(?ancestorList, &quot;,&quot;, &quot;\\&quot;&quot;, ?label, &quot;\\&quot;&quot;) }\" arg:conceptSchemeLabel=\"{= ?conceptSchemeLabel }\" arg:depth=\"{= ?depth + 1 }\" arg:subject=\"{= ?child }\"/>
        </ui:forEach>
    </ui:else>
</ui:subTask>
"""^^ui:Literal ;
  rdfs:comment "Recursive helper object of the SharePointExporter, based on the TreeTableExporter class." ;
  rdfs:label "SharePoint exporter node" ;
  rdfs:subClassOf taxonomies:Elements ;
.
taxonomies:SharePointManagePlugin
  a teamwork:ManagePlugin ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= taxonomies:ConfigureSharePointPage }\">
    <teamwork:ActionLink arg:comment=\"Links this Taxonomy with a SharePoint repository.\" arg:icon=\"lib/teamwork/build/images/taxonomy/configure-sharepoint.svg\" arg:link=\"{= ?link }\" arg:title=\"Configure SharePoint\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Share point manage plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
taxonomies:Taxonomy
  a rdfs:Class ;
  rdfs:label "Taxonomy" ;
  rdfs:subClassOf teamwork:Vocabulary ;
.
taxonomies:ToggleUserAndPasswordOnChangeBooleanEditor
  a swa:ObjectEditorClass ;
  ui:private true ;
  ui:prototype """
<swa:BooleanEditor arg:elementId=\"evnViewerServerIsAnonymous\" arg:onChange=\"tbladmin.toggleUserAndPassword();\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:comment "Toggle the user name and password fields upon changing the boolean value" ;
  rdfs:subClassOf swa:BooleanEditor ;
.
taxonomies:TreeTableExportPlugin
  a teamwork:ExportPlugin ;
  teamwork:pluginIndex 6 ;
  teamwork:validForTags true ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" arg:tag=\"{= ?tag }\" ui:format=\"text\" ui:snippet=\"true\" ui:viewClass=\"{= taxonomies:TreeTableExporter }\">
    <teamwork:ActionLink arg:comment=\"Creates a hierarchical spreadsheet from the concept tree.\" arg:icon=\"lib/teamwork/build/images/taxonomy/hierarchy-spreadsheet.svg\" arg:onClick=\"swa.loadPageWithProgress('{= ?link }', 'Building Hierarchy Spreadsheet')\" arg:title=\"Export Hierarchy Spreadsheet\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:label "Tree table export plugin" ;
  rdfs:subClassOf teamwork:ExportPlugins ;
.
taxonomies:TreeTableExporter
  a ui:NodeClass ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:projectOrTagGraph(?projectGraph, ?tag)) }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT DISTINCT ?root
            WHERE {
                ?type (rdfs:subClassOf)* skos:Concept .
                ?root a ?type .
                FILTER NOT EXISTS {
                    ?root skos:broader ?other .
                } .
            }
            ORDER BY (ui:label(?root)) }\">
        <taxonomies:TreeTableExporterTask arg:root=\"{= ?root }\"/>
    </ui:forEach>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Tree table exporter" ;
  rdfs:subClassOf taxonomies:Elements ;
  rdfs:subClassOf teamwork:MustHaveAccessToTagPage ;
.
taxonomies:TreeTableExporterNode
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:depth ;
      spl:valueType xsd:integer ;
      rdfs:comment "The current tree depth." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType skos:Concept ;
      rdfs:comment "The currently visited concept." ;
    ] ;
  ui:prototype """
<ui:subTask let:tab=\"{= fn:concat(&quot;\\t&quot;) }\" letrs:children=\"{#
        SELECT ?child
        WHERE {
            ?child skos:broader ?subject .
        }
        ORDER BY (ui:label(?child)) }\" ui:subTaskName=\"Node {= ui:label(?subject) } at depth {= ?depth }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?x
            WHERE {
                ?x tops:for ( 1 ?depth ) .
            } }\">{= ?tab }</ui:forEach>{= ui:label(?subject) }<ui:if ui:condition=\"{#
            ASK 
            WHERE {
                FILTER (spr:rowCount(?children) &gt; 0) .
                GRAPH ui:tempGraph {
                    ?subject taxonomies:done true .
                } .
            } }\">{= fn:concat(\"\\t\") }(Repeated, sub-concepts see above){= fn:concat(\"\\n\") }</ui:if>
    <ui:else>{= fn:concat(\"\\n\") }<ui:update ui:updateQuery=\"{!
                INSERT {
                    GRAPH ui:tempGraph {
                        ?subject taxonomies:done true .
                    } .
                }
                WHERE {
                } }\"/>
        <ui:forEach ui:resultSet=\"{= ?children }\">
            <taxonomies:TreeTableExporterNode arg:depth=\"{= ?depth + 1 }\" arg:subject=\"{= ?child }\"/>
        </ui:forEach>
    </ui:else>
</ui:subTask>
"""^^ui:Literal ;
  rdfs:comment "Recursive helper object of the TreeTableExporter." ;
  rdfs:label "Tree table exporter node" ;
  rdfs:subClassOf taxonomies:Elements ;
.
taxonomies:TreeTableExporterTask
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:root ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root resource of the tree table." ;
    ] ;
  ui:prototype """
<ui:task ui:taskName=\"Generating tree table\">
    <taxonomies:TreeTableExporterNode arg:depth=\"{= 0 }\" arg:subject=\"{= ?root }\"/>
</ui:task>
"""^^ui:Literal ;
  ui:responseType ui:TEXT ;
  rdfs:label "Tree table exporter task" ;
  rdfs:subClassOf teamwork:Elements ;
.
taxonomies:childCount
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:expression [
                    sp:varName "child" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate skos:broader ;
            sp:subject [
                sp:varName "child" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType skos:Concept ;
      rdfs:comment "The concept to get the number of children of." ;
    ] ;
  rdfs:label "child count" ;
  rdfs:subClassOf spin:Functions ;
.
taxonomies:depth
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                a sp:Count ;
                sp:distinct true ;
                sp:expression [
                    sp:varName "parent" ;
                  ] ;
              ] ;
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "parent" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 1 ;
                sp:subPath skos:broader ;
              ] ;
            sp:subject spin:_arg1 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType skos:Concept ;
      rdfs:comment "The Concept to get the depth of." ;
    ] ;
  spin:returnType xsd:integer ;
  rdfs:comment "Counts the number of (transitive) parent concepts of the given concept (?arg1)." ;
  rdfs:label "depth" ;
  rdfs:subClassOf spin:Functions ;
.
taxonomies:done
  a rdf:Property ;
  rdfs:label "done" ;
  rdfs:range xsd:boolean ;
.
taxonomies:hasChildConcept
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            sp:object spin:_arg1 ;
            sp:predicate skos:broader ;
            sp:subject [
                sp:varName "child" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType skos:Concept ;
      rdfs:comment "The (potential) parent concept to check." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Tests whether a given skos:Concept (?arg1) has at least one child concept." ;
  rdfs:label "has child concept" ;
  rdfs:subClassOf spin:Functions ;
.
taxonomies:rootClass
  a rdf:Property ;
  rdfs:comment "The root class of the Classes tree. If unset, this will default to skos:Concept. The triple must have the owl:Ontology of the TCH graph as subject." ;
  rdfs:domain owl:Ontology ;
  rdfs:label "root class" ;
  rdfs:range rdfs:Class ;
.
arg:ancestorList
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:conceptSchemeLabel
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:depth
  a rdf:Property ;
  rdfs:label "depth" ;
  rdfs:subPropertyOf sp:arg ;
.
