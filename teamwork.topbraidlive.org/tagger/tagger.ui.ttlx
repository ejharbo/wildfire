# baseURI: http://evn.topbraidlive.org/taggerui
# imports: http://evn.topbraidlive.org/autotagger
# imports: http://evn.topbraidlive.org/evnprojects
# imports: http://evn.topbraidlive.org/taggerspin
# imports: http://evn.topbraidlive.org/ui
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://topbraid.org/teamwork.ui
# prefix: taggerui

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

autotagger:ResultReviewPage
  rdfs:subClassOf taggerui:Elements ;
.
taggerprojects:CreateTaggerProjectPage2
  rdfs:subClassOf taggerui:Elements ;
.
<http://evn.topbraidlive.org/taggerui>
  a owl:Ontology ;
  owl:imports <http://evn.topbraidlive.org/autotagger> ;
  owl:imports <http://evn.topbraidlive.org/evnprojects> ;
  owl:imports <http://evn.topbraidlive.org/taggerspin> ;
  owl:imports <http://evn.topbraidlive.org/ui> ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
taggerui:AddTagButton
  a ui:NodeClass ;
  ui:prototype """
<div class=\"taggerui-add-tag-button-container\">
    <ui:group let:objectGraph=\"{= ui:currentQueryGraph() }\">
        <ui:call ui:template=\"{= tagger:TagProperties }\">
            <ui:if ui:condition=\"{= spr:isEmpty(?rs) }\">
			(No suitable tag properties found)
		</ui:if>
            <ui:else>
                <div class=\"tagger-add-tag-button swa-float-right\" onclick=\"tagger.addTag()\" title=\"Add selected concept as tag\"/>
                <select class=\"form-control taggerui-add-tag-button-select\" id=\"tagPropertySelect\" let:selected=\"{= tagger:currentDefaultTagProperty() }\">
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <option selected=\"{= IF((?property = ?selected), &quot;selected&quot;, ?none) }\" value=\"{= ?property }\">{= ui:label(?property) }</option>
                    </ui:forEach>
                </select>
            </ui:else>
        </ui:call>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:comment "A button at the bottom of the TagsPanel to add a new tag, with a drop down box of suitable properties." ;
  rdfs:label "Add tag button" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:AddTagService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object in the tag triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate in the tag triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject in the tag triple." ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= EXISTS {
    ?subject ?predicate ?object .
} }\">
    <swon:Object/>
</ui:if>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Added Tag {= ui:label(?object) } as {= ui:label(?predicate) } to {= ui:label(?subject) }\">
    <ui:update ui:updateQuery=\"{!
            INSERT {
                ?subject ?predicate ?object .
            }
            WHERE {
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Add tag service" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:Application
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the working copy." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The user name (needed if in working copy mode)" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the graph to edit." ;
    ] ;
  teamwork:faIcon "indent" ;
  ui:headIncludes """
<ui:group>
    <script src=\"{= ui:lib() }/teamwork/build/tagger.bundle.js\"/>
    <title>{= teamwork:graphLabel(teamwork:masterGraph(teamwork:currentGraphId())) } Editor</title>
</ui:group>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<teamwork:EditorChrome arg:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= teamwork:queryGraph(true, ?graphId, ?tagId, ?userName) }\" ui:varName=\"createLinkFunction\" ui:varValue=\"{= evnui:setSelectedResource }\">
        <ui:setContext let:frozen=\"{= teamwork:isFrozenProjectOrTag(?graphId, ?tagId) }\" ui:varName=\"swaAppName\" ui:varValue=\"EVN,Editor\">
            <ui:insert ui:into=\"header\">
                <taggerui:ApplicationHeader arg:frozen=\"{= ?frozen }\" arg:graphId=\"{= ?graphId }\" arg:tagId=\"{= ?tagId }\"/>
            </ui:insert>
            <ui:insert ui:into=\"main\">
                <script>$(document).ready(function() {swa.queryGraphURI='{= ui:currentQueryGraph() }';tagger.objectGraphURI='{= ui:graphWithImports(tagger:currentObjectGraph()) }';})</script>
                <taggerui:TagsPanel arg:frozen=\"{= ?frozen }\"/>
                <taggerui:DefaultSubjectsPanel/>
                <taggerui:ObjectsPanel arg:projectGraph=\"{= teamwork:masterGraph(?graphId) }\"/>
            </ui:insert>
        </ui:setContext>
    </ui:setContext>
</teamwork:EditorChrome>
"""^^ui:Literal ;
  rdfs:comment "An application for tagging RDF models with skos:Concepts from a given EVN model." ;
  rdfs:label "Tagger Application" ;
  rdfs:subClassOf teamwork:EditorApplications ;
.
taggerui:ApplicationHeader
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:frozen ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress any editing features." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the tag (working copy)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the graph." ;
    ] ;
  ui:private true ;
  ui:prototype """
<teamwork:EditorHeader arg:frozen=\"{= ?frozen }\" arg:pageType=\"tagger-app\" arg:suppressUndo=\"{= true }\">
    <ui:insert ui:into=\"buttons\">
        <taggerui:CustomHeaderInsert arg:isOnEditorTab=\"{= true }\"/>
    </ui:insert>
</teamwork:EditorHeader>
"""^^ui:Literal ;
  rdfs:comment "The header area of the Tagger application. Displays logo, navigation area for vocabulary and working copy and user name." ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:AutoTagSearchResultsAction
  a swa:SearchResultsAction ;
  arg:condition [
      a sp:if ;
      sp:arg1 [
          a swa:hasAppName ;
          sp:arg1 [
              sp:varName "appName" ;
            ] ;
          sp:arg2 "Tagger" ;
        ] ;
      sp:arg2 [
          a teamwork:hasAutoClassifierLicense ;
        ] ;
      sp:arg3 [
          sp:varName "none" ;
        ] ;
    ] ;
  arg:onSelect "tagger.autoTagSearchResults(formId)" ;
  rdfs:label "Auto-classify matching instances" ;
.
taggerui:ClassInstanceSubjectSelectionPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root class of the tree." ;
    ] ;
  ui:prototype """
<ui:setContext let:classSelectedEvent=\"org.taggerapp.classSelected\" let:searchEvent=\"org.taggerapp.search\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ?tagGraph) }\">
    <swa:BorderLayout arg:layoutPanel=\"west\" arg:northSize=\"{= 200 }\" arg:southSize=\"{= 200 }\">
        <ui:if ui:condition=\"{= EXISTS {
            ?any rdfs:subClassOf ?rootClass .
        } }\">
            <swa:Window arg:headerClass=\"tagger-header\" arg:id=\"classInstanceSubjectSelectionPanel\" arg:layoutPanel=\"north\" arg:title=\"Content Types\">
                <swa:ClassTreeGadget arg:rootClass=\"{= ?rootClass }\" arg:treeId=\"classTree\" ui:args=\"*\"/>
            </swa:Window>
        </ui:if>
        <swa:Window arg:headerClass=\"tagger-header\" arg:id=\"taggerSearchWindow\" arg:layoutPanel=\"center\" arg:title=\"Search\">
            <ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"Tagger\">
                <swa:FormSearchGadget arg:cacheId=\"tagger.classes\" arg:resourceType=\"{= COALESCE(?resourceType, ?rootClass) }\" ui:args=\"*\"/>
            </ui:setContext>
        </swa:Window>
        <swa:Window arg:headerClass=\"tagger-header\" arg:id=\"searchResultsWindow\" arg:layoutPanel=\"south\" arg:title=\"Search Results\">
            <swa:EditableDatatableGadget arg:columnsService=\"{= taggerui:DataTableSearchColumnsJSON }\" arg:pageLength=\"{= 10 }\" arg:resourceSelectedEvent=\"org.taggerapp.resourceSelected\" arg:withToolbarConfig=\"true\" ui:args=\"*\"/>
        </swa:Window>
    </swa:BorderLayout>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Class instance subject selection panel" ;
  rdfs:subClassOf taggerui:SubjectSelectionPanels ;
.
taggerui:CustomHeaderInsert
  a ui:NodeClass ;
  ui:prototype """
<table class=\"tagger-header-insert\" let:projectGraph=\"{= teamwork:currentMasterGraph() }\">
    <tr>
        <taggerui:HeaderGraphLabel arg:color=\"#88aad7\" arg:graph=\"{= tagger:currentSubjectGraph() }\"/>
        <taggerui:HeaderGraphLabel arg:color=\"#204D74\" arg:graph=\"{= tagger:currentObjectGraph() }\"/>
        <td>
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(tagger:currentObjectGraph()) }\">
                <swa:AutoComplete arg:onSelect=\"tagger.setSelectedObject(resource)\" arg:type=\"{= IF(taggerui:isClassMode(?projectGraph), rdfs:Resource, skos:Concept) }\"/>
                <ui:if ui:condition=\"{= !?isOnEditorTab }\">
                    <script>$('.tagger-header-insert input').attr('disabled', true);</script>
                </ui:if>
            </ui:setContext>
        </td>
    </tr>
</table>
"""^^ui:Literal ;
  rdfs:label "Custom header insert" ;
  rdfs:subClassOf teamwork:CustomHeaderInserts ;
.
taggerui:DataTableSearchColumnsJSON
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:searchGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph containing the search:Search to execute." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:suppressLabelColumn ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to suppress the first column." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:queryGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:if ui:condition=\"{= bound(?searchGraph) &amp;&amp; bound(?queryGraph) }\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?subjectGraph
            WHERE {
                GRAPH ?queryGraph {
                    ?s tagger:subjectGraph ?sGraph .
                    ?p tagger:objectGraph ?oGraph .
                } .
                BIND (ui:unionOfGraphs(ui:graphWithImports(?sGraph), ui:graphWithImports(?oGraph)) AS ?subjectGraph) .
            }
            LIMIT 1 }\">
        <ui:call arg:lang=\"{= ui:lang() }\" arg:queryGraph=\"{= ?subjectGraph }\" arg:searchGraph=\"{= ?searchGraph }\" arg:suppressLabelColumn=\"{= ?suppressLabelColumn }\" arg:withImports=\"true\" ui:template=\"{= swa:DataTableSearchColumns }\">
            <swon:Array>
                <swon:Object>
                    <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
                    <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
                    <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
                    <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
                    <swon:Value arg:name=\"orderable\" arg:value=\"{= false }\"/>
                </swon:Object>
                <ui:forEach ui:resultSet=\"{= ?rs }\">
                    <swon:Object>
                        <swon:Value arg:name=\"defaultContent\" arg:value=\"\"/>
                        <ui:if ui:condition=\"{= ?isCount }\">
                            <ui:if ui:condition=\"{= ?inverse }\">
                                <swon:Value arg:name=\"data\" arg:value=\"{= ui:encodeURL((&quot;# [inv] &quot; + IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?qName)), COALESCE(xsd:string(REPLACE(?qName, &quot;[.]&quot;, &quot;&quot;)), REPLACE(?colName, &quot;[.]&quot;, &quot;&quot;))))) }\"/>
                                <swon:Value arg:name=\"title\" arg:value=\"# [inv] {= IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?colName)), ?colName) }\"/>
                            </ui:if>
                            <ui:else>
                                <swon:Value arg:name=\"data\" arg:value=\"{= ui:encodeURL((&quot;# &quot; + IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?qName)), COALESCE(xsd:string(REPLACE(?qName, &quot;[.]&quot;, &quot;&quot;)), REPLACE(?colName, &quot;[.]&quot;, &quot;&quot;))))) }\"/>
                                <swon:Value arg:name=\"title\" arg:value=\"#{= IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?colName)), ?colName) }\"/>
                            </ui:else>
                        </ui:if>
                        <ui:else>
                            <ui:if ui:condition=\"{= ?inverse }\">
                                <swon:Value arg:name=\"data\" arg:value=\"{= ui:encodeURL((&quot;[inv] &quot; + IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?qName)), COALESCE(xsd:string(REPLACE(?qName, &quot;[.]&quot;, &quot;&quot;)), REPLACE(?colName, &quot;[.]&quot;, &quot;&quot;))))) }\"/>
                                <swon:Value arg:name=\"title\" arg:value=\"[inv] {= IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?colName)), ?colName) }\"/>
                            </ui:if>
                            <ui:else>
                                <swon:Value arg:name=\"data\" arg:value=\"{= ui:encodeURL(IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?qName)), COALESCE(xsd:string(REPLACE(?qName, &quot;[.]&quot;, &quot;&quot;)), REPLACE(?colName, &quot;[.]&quot;, &quot;&quot;)))) }\"/>
                                <swon:Value arg:name=\"title\" arg:value=\"{= IF((STRLEN(?propPath) &gt; 0), (REPLACE(?propPath, &quot;[.]&quot;, &quot; &quot;) + xsd:string(?colName)), ?colName) }\"/>
                            </ui:else>
                        </ui:else>
                        <ui:if ui:condition=\"{= ?numeric }\">
                            <swon:Value arg:name=\"type\" arg:value=\"num\"/>
                        </ui:if>
                        <ui:else>
                            <swon:Value arg:name=\"type\" arg:value=\"{= ?varName }\"/>
                        </ui:else>
                    </swon:Object>
                </ui:forEach>
            </swon:Array>
        </ui:call>
    </ui:forEach>
</ui:if>
"""^^ui:Literal ;
  rdfs:comment "JSON representation of the of the columns for a DataTable generated from a searchGraph." ;
  rdfs:label "Data table search columns JSON" ;
  rdfs:subClassOf ui:JSONServices ;
.
taggerui:DefaultSubjectsPanel
  a ui:NodeClass ;
  ui:private true ;
  ui:prototype """
<ui:setContext let:rootClass=\"{= COALESCE(tagger:currentContentRootClass(), rdfs:Resource) }\" let:tagGraph=\"{= ui:graphWithoutImports(ui:currentQueryGraph()) }\" ui:queryGraph=\"{= ui:graphWithImports(tagger:currentSubjectGraph()) }\">
    <ui:if ui:condition=\"{= taggerui:isTaxonomyGraph(ui:graphWithoutImports(ui:currentQueryGraph())) }\">
        <taggerui:SwitchableSubjectSelectionPanel arg:tagGraph=\"{= ?tagGraph }\"/>
    </ui:if>
    <ui:else>
        <taggerui:ClassInstanceSubjectSelectionPanel arg:rootClass=\"{= ?rootClass }\" arg:tagGraph=\"{= ?tagGraph }\"/>
    </ui:else>
    <ui:loadable class=\"ui-layout-center evn-border\" ui:loadId=\"loadable-selected-subject-panel\">
        <ui:if ui:condition=\"{= bound(?resource) }\">
            <taggerui:SubjectHeader arg:label=\"{= ui:label(?resource) }\" arg:toolTip=\"{= ?resource }\"/>
            <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= taggerui:setSelectedSubject }\">
                <swa:ViewForm arg:resource=\"{= ?resource }\"/>
            </ui:setContext>
        </ui:if>
        <ui:else>
            <taggerui:SubjectHeader arg:label=\"No Content Resource Selected\"/>
        </ui:else>
    </ui:loadable>
    <swa:Subscribe arg:code=\"tagger.setSelectedSubject(data)\" arg:event=\"org.taggerapp.resourceSelected\"/>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "A SubjectsPanel consisting of a class tree, a search form, search results grid and a main resource view panel. This is the default SubjectsPanel for structured data stored in the TopBraid workspace." ;
  rdfs:label "Default subjects panel" ;
  rdfs:subClassOf taggerui:SubjectsPanels ;
.
taggerui:DeleteTagService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object in the tag triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate in the tag triple." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject in the tag triple." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:transaction ui:logMessage=\"Deleted Tag {= ui:label(?object) } at {= ui:label(?predicate) } from {= ui:label(?subject) }\">
    <ui:update ui:updateQuery=\"{!
            DELETE {
                ?subject ?predicate ?object .
            }
            WHERE {
            } }\"/>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Delete tag service" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:Elements
  a ui:NodeClass ;
  ui:abstract true ;
  ui:headIncludes """
<script src=\"{= ui:lib() }/teamwork/build/tagger.bundle.js\"/>
"""^^ui:Literal ;
  ui:private true ;
  rdfs:label "Elements" ;
  rdfs:subClassOf swa:Elements ;
.
taggerui:Header
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:extraClass ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:toolTip ;
      spl:valueType xsd:string ;
      rdfs:comment "An optional tool tip text to put on top of the header." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The label to insert." ;
    ] ;
  ui:prototype """
<div class=\"{= ?extraClass } swa-header\">
    <div>
        <ui:insertionPoint ui:pointId=\"icon\"/>
    </div>
    <div class=\"swa-header-label swa-float-left\">{= ?label }</div>
    <div class=\"swa-clear-both\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Header" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:HeaderGraphLabel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:color ;
      spl:valueType xsd:string ;
      rdfs:comment "The CSS of the color to use for the box. Aligns with the colors of the headers on the main area of the screen." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to display." ;
    ] ;
  ui:private true ;
  ui:prototype """
<td let:baseGraph=\"{= ui:graphWithoutImports(?graph) }\">
    <div class=\"evn-border evn-header-link swa-header\" style=\"background-color: {= ?color }\" title=\"{= IF(teamwork:hasEditorApplication(teamwork:getProjectType(?graph)), ?baseGraph, &quot;Not editable&quot;) }\">
        <ui:if ui:condition=\"{= teamwork:hasTeamGraph(?baseGraph) &amp;&amp; teamwork:hasEditorApplication(teamwork:getProjectType(?graph)) }\">
            <a href=\"{= teamwork:graphIdFromGraph(?baseGraph) }.editor\" target=\"_blank\">{= teamwork:projectLabel(?baseGraph) }</a>
        </ui:if>
        <ui:elseif ui:condition=\"{= smf:isBound(smf:file(?baseGraph)) }\">
            <ui:setContext ui:queryGraph=\"{= ?baseGraph }\">{= ui:label(?baseGraph) }</ui:setContext>
        </ui:elseif>
        <ui:else>Web Data</ui:else>
    </div>
</td>
"""^^ui:Literal ;
  rdfs:comment "The name of a graph together with a color-coded box, used in the header of the Tagger app." ;
  rdfs:label "Header graph label" ;
  rdfs:subClassOf teamwork:Elements ;
.
taggerui:ObjectHeader
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:activeTab ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classMode ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:withAutoClassifier ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group>
    <taggerui:Header ui:args=\"*\">
        <ui:insert ui:into=\"icon\">
            <ui:if ui:condition=\"{= ?withAutoClassifier }\">
                <taggerui:ToggleIcon arg:active=\"{= ?activeTab = &quot;recommend&quot; }\" arg:iconClass=\"tagger-toggle-icon-recommend\" arg:iconOnClick=\"tagger.switchObjectsPanelTab(&quot;recommend&quot;)\" arg:iconToolTip=\"Recommend {= IF(?classMode, &quot;Instances&quot;, &quot;Concepts&quot;) }\"/>
            </ui:if>
            <taggerui:ToggleIcon arg:active=\"{= ?activeTab = &quot;search&quot; }\" arg:iconClass=\"tagger-toggle-icon-search\" arg:iconOnClick=\"tagger.switchObjectsPanelTab(&quot;search&quot;)\" arg:iconToolTip=\"Switch to {= IF(?classMode, &quot;Instances&quot;, &quot;Concept&quot;) } Search\"/>
            <taggerui:ToggleIcon arg:active=\"{= ?activeTab = &quot;tree&quot; }\" arg:iconClass=\"{= IF(?classMode, &quot;tagger-toggle-icon-class-tree&quot;, &quot;tagger-toggle-icon-concept-tree&quot;) }\" arg:iconOnClick=\"tagger.switchObjectsPanelTab(&quot;tree&quot;)\" arg:iconToolTip=\"Switch to {= IF(?classMode, &quot;Class&quot;, &quot;Concept&quot;) } Hierarchy\"/>
        </ui:insert>
    </taggerui:Header>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Object header" ;
  rdfs:subClassOf taggerui:Header ;
.
taggerui:ObjectsPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The original project graph, i.e. the tagger project." ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:objectGraph=\"{= spl:objectInGraph(?projectGraph, tagger:objectGraph, ?projectGraph) }\" let:queryGraph=\"{= ui:currentQueryGraph() }\" let:withAutoClassifier=\"{= (teamwork:hasAutoClassifierLicense() &amp;&amp; autotagger:isMauiServerConfigured()) &amp;&amp; autotagger:isReady(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?objectGraph) }\">
        <div class=\"ui-layout-east\" id=\"objectsPanel\" let:classMode=\"{= taggerui:isClassMode(?projectGraph) }\">
            <ui:if ui:condition=\"{= ?withAutoClassifier }\">
                <taggerui:ObjectsPanelRecommendTab arg:classMode=\"{= ?classMode }\" arg:projectGraph=\"{= ?projectGraph }\"/>
            </ui:if>
            <taggerui:ObjectsPanelTreeTab arg:classMode=\"{= ?classMode }\" arg:withAutoClassifier=\"{= ?withAutoClassifier }\"/>
            <taggerui:ObjectsPanelSearchTab arg:classMode=\"{= ?classMode }\" arg:withAutoClassifier=\"{= ?withAutoClassifier }\"/>
            <taggerui:ObjectsPanelInstanceViewer arg:projectGraph=\"{= ?projectGraph }\" arg:queryGraph=\"{= ?queryGraph }\"/>
        </div>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The main component on the right of the Tagger application. Displays concept tree and optional search form with results grid." ;
  rdfs:label "Objects panel" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:ObjectsPanelInstanceViewer
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The projectGraph, containing references to the tag properties." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:queryGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph containing the tag instances." ;
    ] ;
  ui:prototype """
<ui:loadable class=\"ui-layout-south evn-border\" ui:loadId=\"loadable-selected-object-panel\">
    <ui:if ui:condition=\"{= bound(?resource) }\">
        <swa:Header arg:label=\"{= ui:label(?resource) }\"/>
        <form class=\"ui-layout-content swa-form\">
            <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= taggerui:setSelectedObject }\">
                <div class=\"swa-form-body\">
                    <ui:resourceView ui:matchIds=\"view,form\" ui:resource=\"{= ?resource }\"/>
                    <ui:loadable ui:loadId=\"loadable-object-references\">
                        <ui:setContext ui:varName=\"createLinkFunction\" ui:varValue=\"{= taggerui:setSelectedSubject }\">
                            <ui:group letrs:properties=\"{#
                                    SELECT DISTINCT ?property
                                    WHERE {
                                        GRAPH ?queryGraph {
                                            ?subject ?property ?resource .
                                        } .
                                        FILTER EXISTS {
                                            GRAPH ?projectGraph {
                                                ?projectGraph tagger:defaultTagProperty|tagger:tagProperty ?property .
                                            } .
                                        } .
                                    }
                                    ORDER BY (ui:label(?property)) }\">
                                <ui:if ui:condition=\"{= !spr:isEmpty(?properties) }\">
                                    <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(?queryGraph, ui:graphWithImports(spl:objectInGraph(?projectGraph, tagger:objectGraph, ?projectGraph)), ui:graphWithImports(spl:objectInGraph(?projectGraph, tagger:subjectGraph, ?projectGraph))) }\">
                                        <swa:ObjectsEnum arg:label=\"Usages as a Tag\">
                                            <ui:forEach ui:resultSet=\"{= ?properties }\">
                                                <swa:Subjects arg:object=\"{= ?resource }\" arg:predicate=\"{= ?property }\"/>
                                            </ui:forEach>
                                        </swa:ObjectsEnum>
                                    </ui:setContext>
                                </ui:if>
                            </ui:group>
                        </ui:setContext>
                    </ui:loadable>
                </div>
            </ui:setContext>
        </form>
    </ui:if>
    <ui:else>
        <swa:Header arg:label=\"No Concept Selected\"/>
    </ui:else>
    <swa:Subscribe arg:code=\"tagger.setSelectedObject(data)\" arg:event=\"org.taggerapp.objectselected\"/>
</ui:loadable>
"""^^ui:Literal ;
  rdfs:comment "The bottom component of the Concept tree and search panels." ;
  rdfs:label "Objects panel instance viewer" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:ObjectsPanelRecommendTab
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classMode ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a classes tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<div class=\"ui-layout-north evn-border\" id=\"objectRecommendPanel\">
    <taggerui:ObjectHeader arg:activeTab=\"recommend\" arg:label=\"Recommended {= IF(?classMode, &quot;Instances&quot;, &quot;Concepts&quot;) }\" arg:withAutoClassifier=\"{= true }\" ui:args=\"*\"/>
    <div class=\"ui-layout-content\">
        <ui:loadable ui:loadId=\"recommendations\" ui:loadOnDemand=\"{= true }\">
            <ui:if ui:condition=\"{= bound(?subject) }\">
                <ui:try>
                    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                        <autotagger:RecommendTopics autotagger:configuration=\"{= ?projectGraph }\" autotagger:contentResource=\"{= ?subject }\">
                            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(tagger:currentObjectGraph()) }\">
                                <taggerui:RecommendedConcepts arg:iconClass=\"{= IF(?classMode, &quot;swa-icon-class&quot;, &quot;swa-icon-concept&quot;) }\" arg:resultSet=\"{= ?results }\"/>
                            </ui:setContext>
                        </autotagger:RecommendTopics>
                    </ui:setContext>
                </ui:try>
                <ui:catch>
                    <div class=\"swa-form-body\">
                        <small>
                            <em>AutoClassifier currently unavailable</em>
                        </small>
                    </div>
                </ui:catch>
            </ui:if>
        </ui:loadable>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Objects panel recommendations tab" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:ObjectsPanelSearchTab
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classMode ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a classes tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:withAutoClassifier ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:loadable class=\"ui-layout-north evn-border\" ui:loadId=\"objectSearchPanel\">
        <taggerui:ObjectHeader arg:activeTab=\"search\" arg:label=\"{= IF(?classMode, ui:label(COALESCE(?resourceType, owl:Thing)), &quot;Concept&quot;) } Search\" ui:args=\"*\"/>
        <evnui:FormSearchGadget ui:args=\"*\"/>
    </ui:loadable>
    <div class=\"ui-layout-center evn-border\" id=\"objectSearchResultsPanel\">
        <swa:Header arg:label=\"Matching {= IF(?classMode, &quot;Instances&quot;, &quot;Concepts&quot;) }\"/>
        <div class=\"ui-layout-content\" id=\"objectSearchResultsGrid\">
            <swa:DataTableSearchResultsGadget arg:columnsService=\"{= taggerui:DataTableSearchColumnsJSON }\" arg:resourceSelectedEvent=\"org.taggerapp.objectselected\" ui:args=\"*\"/>
        </div>
    </div>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Objects panel search tab" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:ObjectsPanelTreeTab
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:classMode ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to show a classes tree." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:withAutoClassifier ;
      spl:valueType xsd:boolean ;
    ] ;
  ui:prototype """
<div class=\"ui-layout-center evn-border\" id=\"objectTreePanel\" let:headerLabel=\"{= IF(?classMode, &quot;Class&quot;, &quot;Concept&quot;) } Hierarchy\">
    <taggerui:ObjectHeader arg:activeTab=\"tree\" arg:extraClass=\"fancy-header\" arg:label=\"{= ?headerLabel }\" ui:args=\"*\"/>
    <taggerui:Header arg:extraClass=\"plain-header\" arg:label=\"{= ?headerLabel }\"/>
    <div class=\"ui-layout-content\">
        <swa:Tree arg:dataProvider=\"{= IF(?classMode, swa:ClassTreeDataProvider, evnui:ConceptTreeDataProvider) }\" arg:id=\"objectTree\" arg:onSelect=\"tagger.setSelectedObjectFromTree(resource, {= ?classMode })\" arg:root=\"{= IF(?classMode, owl:Thing, ?none) }\"/>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Objects panel tree tab" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:RecommendedConcepts
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconClass ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:resultSet ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:prototype """
<ui:forEach ui:resultSet=\"{= ?resultSet }\">
    <div class=\"swa-object-widget swa-label\">
        <a href=\"javascript:void(0)\" onclick=\"tagger.setSelectedObject('{= ?concept }')\">
            <ins class=\"recommendation-icon {= ?iconClass }\">&nbsp;</ins>{= ui:label(?concept) }</a>
        <small>&nbsp;&nbsp;{= round((?probability * 100)) }%</small>
    </div>
</ui:forEach>
"""^^ui:Literal ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:SubjectHeader
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconClass ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconOnClick ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconToolTip ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <taggerui:Header arg:extraClass=\"tagger-header\" ui:args=\"*\">
        <ui:if ui:condition=\"{= bound(?iconClass) }\">
            <ui:insert ui:into=\"icon\">
                <taggerui:ToggleIcon ui:args=\"*\"/>
            </ui:insert>
        </ui:if>
    </taggerui:Header>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "The title area of a content panel on the screen. Similar to swa:Header but with a different background color." ;
  rdfs:label "Subject Header" ;
  rdfs:subClassOf taggerui:Header ;
.
taggerui:SubjectSelectionPanels
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:tagGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph containing the tags." ;
    ] ;
  rdfs:label "Subject selection panels" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:SubjectsPanels
  a ui:NodeClass ;
  ui:abstract true ;
  rdfs:comment "Base class of the main area of the screen, allowing the user to select the subject/content resource. There may be any number of subclasses in the future." ;
  rdfs:label "Subjects panel" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:SwitchableSubjectSelectionPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:rootClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root class of the tree (if any)." ;
    ] ;
  ui:prototype """
<div class=\"ui-layout-west\" id=\"switchableSubjectSelectionPanel\">
    <ui:setContext let:searchEvent=\"org.taggerapp.switchable.search\" ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ?tagGraph) }\">
        <div class=\"evn-border tagger-display-none\" id=\"subjectSearchPanel\" let:class=\"{= COALESCE(?class, ?rootClass) }\">
            <taggerui:SubjectHeader arg:iconClass=\"tagger-toggle-icon-concept-tree\" arg:iconOnClick=\"tagger.switchToSubjectTreePanel()\" arg:iconToolTip=\"Switch to Hierarchy\" arg:label=\"Search Content Concepts\"/>
            <ui:setContext ui:varName=\"swaAppName\" ui:varValue=\"Tagger\">
                <swa:FormSearchGadget arg:cacheId=\"tagger.subject\" arg:resourceType=\"{= skos:Concept }\" arg:suppressLocalSearch=\"{= true }\" arg:typeSelectable=\"{= true }\" ui:args=\"*\"/>
            </ui:setContext>
        </div>
        <div class=\"evn-border tagger-display-none\" id=\"subjectSearchResultsPanel\">
            <taggerui:SubjectHeader arg:label=\"Matching Content Concepts\"/>
            <swa:GridSearchResultsGadget arg:resourceSelectedEvent=\"org.taggerapp.resourceSelected\" ui:args=\"*\"/>
        </div>
    </ui:setContext>
    <div class=\"ui-layout-center evn-border\" id=\"subjectTreePanel\">
        <taggerui:SubjectHeader arg:iconClass=\"tagger-toggle-icon-search\" arg:iconOnClick=\"tagger.switchToSubjectSearchPanel()\" arg:iconToolTip=\"Switch to Search\" arg:label=\"Content Hierarchy\"/>
        <div class=\"ui-layout-content\" id=\"subjectsTreePanel\">
            <swa:Tree arg:dataProvider=\"{= evnui:ConceptTreeDataProvider }\" arg:id=\"subjectTree\" arg:onSelect=\"tagger.setSelectedSubject(resource)\"/>
        </div>
        <swa:TreeAutoCompletePanel arg:treeId=\"subjectTree\" arg:type=\"{= skos:Concept }\"/>
    </div>
    <script>tagger.layoutSwitchableSubjectSelectionPanel()</script>
</div>
"""^^ui:Literal ;
  rdfs:comment "Used if the subject graph is an EVN project. Allows users to switch between the concept tree and a search form." ;
  rdfs:label "Switchable subject selection panel" ;
  rdfs:subClassOf taggerui:SubjectSelectionPanels ;
.
taggerui:TabularEditor
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:tagId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the working copy." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:userName ;
      spl:valueType xsd:string ;
      rdfs:comment "The user name (needed if in working copy mode)" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graphId ;
      spl:valueType xsd:string ;
      rdfs:comment "The id of the graph to edit." ;
    ] ;
  teamwork:faIcon "list" ;
  ui:headIncludes """
<ui:group>
    <script src=\"{= ui:lib() }/teamwork/build/tagger.bundle.js\"/>
    <title>{= teamwork:graphLabel(teamwork:masterGraph(teamwork:currentGraphId())) } Editor</title>
</ui:group>
"""^^ui:Literal ;
  ui:private true ;
  ui:prototype """
<ui:setContext let:projectGraph=\"{= teamwork:masterGraph(teamwork:currentGraphId()) }\">
    <ui:group let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\">
        <ui:setContext let:frozen=\"{= teamwork:isExplorerUser(smf:userWithName(smf:currentUserName())) || teamwork:isCurrentGraphFrozen() }\" let:inUse=\"{= teamwork:IsProjectInUse(?projectGraph) }\" let:primaryKey=\"{= spl:primaryKeyProperty(?resourceType) }\" let:resourceSelectedEvent=\"org.taggerapp.resourceSelected\" ui:varName=\"swaAppName\" ui:varValue=\"Crosswalk,Editor{= IF(?frozen, &quot;,ReadOnly&quot;, ?none) }\">
            <ui:setContext ui:varName=\"projectTab\" ui:varValue=\"{= ?projectTab }\">
                <ui:setContext let:resourceType=\"{= COALESCE(?sourceType, spl:object(?projectGraph, tagger:subjectRootClass), rdfs:Resource) }\" let:sourceGraph=\"{= spl:object(teamwork:currentMasterGraph(), IF(swa:falseOrUnbound(?inverse), tagger:subjectGraph, tagger:objectGraph)) }\" ui:varName=\"crosswalkInverse\" ui:varValue=\"{= ?inverse }\">
                    <teamwork:EditorChrome arg:pageType=\"results-editor-page tagger-editor-page\" arg:projectGraph=\"{= ?projectGraph }\" arg:projectTab=\"{= COALESCE(?projectTab, teamwork:EditorProjectTab) }\" arg:projectType=\"{= ?projectType }\" arg:tag=\"{= teamwork:currentTag() }\" default:editable=\"{= !?frozen }\">
                        <ui:insert ui:into=\"header\">
                            <teamwork:EditorHeader arg:frozen=\"{= ?frozen }\" arg:pageType=\"results-editor-page tagger-editor-page\">
                                <ui:insert ui:into=\"buttons\">
                                    <taggerui:CustomHeaderInsert arg:isOnEditorTab=\"{= true }\"/>
                                </ui:insert>
                            </teamwork:EditorHeader>
                        </ui:insert>
                        <ui:insert ui:into=\"main\">
                            <swa:Initializer/>
                            <ui:group>
                                <teamwork:Filter arg:resourceType=\"{= ?resourceType }\" arg:rootClass=\"{= ?resourceType }\"/>
                                <swa:SimpleDataTableResults arg:frozen=\"{= ?frozen }\" arg:hasFixedHeader=\"{= true }\"/>
                            </ui:group>
                        </ui:insert>
                    </teamwork:EditorChrome>
                </ui:setContext>
            </ui:setContext>
        </ui:setContext>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:comment "An application for tagging RDF models with skos:Concepts from a given EVN model." ;
  rdfs:label "Tabular Tagger Application" ;
  rdfs:subClassOf teamwork:EditorApplications ;
.
taggerui:TagWithIcon
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:frozen ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disable editing." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:object ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The tag object." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject being tagged." ;
    ] ;
  ui:prototype """
<div class=\"tagger-tag\">
    <table class=\"taggerui-tag-with-icon-table\">
        <tr>
            <td class=\"taggerui-tag-with-icon-table-td\">
                <div class=\"tagger-tag-icon\"/>
            </td>
            <td class=\"swa-padding-zero\">
                <div class=\"tagger-tag-predicate\">{= ui:label(?predicate) }</div>
                <div class=\"tagger-tag-object\">
                    <a href=\"javascript:void(0)\" onclick=\"tagger.setSelectedObject('{= ?object }')\">
                        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(tagger:currentObjectGraph()) }\">{= ui:label(?object) }</ui:setContext>
                    </a>
                </div>
                <ui:if ui:condition=\"{= (!bound(?frozen)) || (!?frozen) }\">
                    <div class=\"tagger-delete-tag-button taggerui-tag-with-icon-delete-button\" onclick=\"tagger.deleteTag('{= ?subject }', '{= ?predicate }', '{= ?object }')\" title=\"Delete this tag\"/>
                </ui:if>
            </td>
        </tr>
    </table>
</div>
"""^^ui:Literal ;
  rdfs:label "Tag with icon" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:TagsPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:frozen ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to disable editing" ;
    ] ;
  ui:prototype """
<div class=\"taggerui-tags-panel\" id=\"tags-panel\">
    <div class=\"tagger-tags-panel-header\">
        <div class=\"swa-header-label\">Current Tags</div>
    </div>
    <div>
        <ui:loadable ui:loadId=\"loadable-current-tags\">
            <ui:if ui:condition=\"{= bound(?subject) }\">
                <div class=\"tagger-tags-panel-main swa-overflow-auto\">
                    <ui:forEach ui:resultSet=\"{#
                            SELECT ?predicate ?object
                            WHERE {
                                BIND (ui:graphWithoutImports(ui:currentQueryGraph()) AS ?graph) .
                                GRAPH ?graph {
                                    ?subject ?predicate ?object .
                                } .
                            }
                            ORDER BY (ui:label(?predicate)) (ui:label(?object)) }\">
                        <taggerui:TagWithIcon arg:frozen=\"{= ?frozen }\" arg:object=\"{= ?object }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?subject }\"/>
                    </ui:forEach>
                </div>
            </ui:if>
            <ui:else>
                <span class=\"taggerui-tags-panel-no-subject-selected\">No content subject selected</span>
            </ui:else>
        </ui:loadable>
        <ui:if ui:condition=\"{= (!bound(?frozen)) || (!?frozen) }\">
            <taggerui:AddTagButton/>
        </ui:if>
    </div>
</div>
"""^^ui:Literal ;
  rdfs:label "Tags panel" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:ToggleIcon
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:active ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconClass ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconOnClick ;
      spl:valueType xsd:string ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:iconToolTip ;
      spl:valueType xsd:string ;
    ] ;
  ui:prototype """
<div class=\"tagger-toggle-icon {= IF(?active, &quot;tagger-toggle-icon-active&quot;, &quot;&quot;) } {= ?iconClass }\" onclick=\"{= ?iconOnClick }\" title=\"{= IF(COALESCE(?active, false), &quot;&quot;, ?iconToolTip) }\"/>
"""^^ui:Literal ;
  rdfs:label "Toggle icon" ;
  rdfs:subClassOf taggerui:Elements ;
.
taggerui:currentSubjectGraphHasFile
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithoutImports ;
                sp:arg1 [
                    a tagger:currentSubjectGraph ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "baseGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a smf:file ;
                sp:arg1 [
                    sp:varName "baseGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "file" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "file" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if the current subject graph is backed by a file in the workspace. If not then we have an external resource such as a web page." ;
  rdfs:label "current subject graph has file" ;
  rdfs:subClassOf spin:Functions ;
.
taggerui:isClassMode
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
                sp:arg2 tagger:objectGraph ;
                sp:arg3 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "objectGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    a teamwork:getProjectType ;
                    arg:projectGraph [
                        sp:varName "objectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 ontologyprojects:ProjectType ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The main project graph of the tagset." ;
    ] ;
  rdfs:label "is class mode" ;
  rdfs:subClassOf spin:Functions ;
.
taggerui:isTaxonomyGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a taggerui:isTeamworkGraph ;
                arg:graph [
                    sp:varName "graph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:eq ;
                sp:arg1 [
                    a teamwork:getProjectType ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 taxonomies:ProjectType ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "is taxonomy graph" ;
  rdfs:subClassOf spin:Functions ;
.
taggerui:isTeamworkGraph
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a teamwork:teamGraph ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "teamGraph" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "teamGraph" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "is teamwork graph" ;
  rdfs:subClassOf spin:Functions ;
.
taggerui:setSelectedObject
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "js" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a fn:concat ;
                sp:arg1 "tagger.setSelectedObject('" ;
                sp:arg2 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg3 "')" ;
              ] ;
            sp:variable [
                sp:varName "js" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "The default link creation function on the object forms of Tagger. This simply calls the namesake JavaScript function." ;
  rdfs:label "set selected object" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
taggerui:setSelectedSubject
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "js" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:if ;
                sp:arg1 [
                    a sp:notExists ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "any" ;
                            ] ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "resource" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 "window.open" ;
                sp:arg3 "tagger.setSelectedSubject" ;
              ] ;
            sp:variable [
                sp:varName "function" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    sp:varName "function" ;
                  ] ;
                sp:arg2 "('" ;
                sp:arg3 [
                    a sp:str ;
                    sp:arg1 [
                        sp:varName "resource" ;
                      ] ;
                  ] ;
                sp:arg4 "')" ;
              ] ;
            sp:variable [
                sp:varName "js" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "The default link creation function on the subject forms of Tagger. This simply calls the namesake JavaScript function." ;
  rdfs:label "set selected subject" ;
  rdfs:subClassOf swa:CreateLinkFunctions ;
.
arg:active
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:activeTab
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:classMode
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:color
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:extraClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:hidden
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:iconOnClick
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:iconToolTip
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:rootClass
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:tagGraph
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:withAutoClassifier
  a rdf:Property ;
  rdfs:range xsd:boolean ;
.
swa:DataTable
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:withToolbarConfig ;
      spl:valueType xsd:boolean ;
    ] ;
.
