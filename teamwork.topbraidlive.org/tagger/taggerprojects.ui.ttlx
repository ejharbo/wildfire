# baseURI: http://evn.topbraidlive.org/taggerprojects
# imports: http://evn.topbraidlive.org/autotagger
# imports: http://evn.topbraidlive.org/taggerui
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworknotifications
# prefix: taggerprojects

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/web/2013/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

taxonomies:ProjectType
  teamwork:projectPlugin teamwork:GraphURIPlugin ;
.
<http://evn.topbraidlive.org/taggerprojects>
  a owl:Ontology ;
  rdfs:comment "Defines the management pages and project type specific to EVN Tagger." ;
  owl:imports <http://evn.topbraidlive.org/autotagger> ;
  owl:imports <http://evn.topbraidlive.org/taggerui> ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworknotifications> ;
  owl:versionInfo "0.1.0" ;
.
taggerprojects:ChangeTaggerDefaultPropertyService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property to change." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <ui:transaction ui:logMessage=\"Set default tag property to {= ?property }\">
        <ui:update ui:updateQuery=\"{!
                DELETE WHERE {
                    ?projectGraph tagger:defaultTagProperty ?oldProperty .
                } }\"/>
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?projectGraph tagger:defaultTagProperty ?property .
                }
                WHERE {
                } }\"/>
    </ui:transaction>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Change tagger default property service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
taggerprojects:ChangeTaggerPropertyService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:property ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property to change." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True (include) or false (exclude)." ;
    ] ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
    <ui:if ui:condition=\"{= ?value }\">
        <ui:transaction ui:logMessage=\"Add tag property {= ?property }\">
            <ui:update ui:updateQuery=\"{!
                    INSERT {
                        ?projectGraph tagger:tagProperty ?property .
                    }
                    WHERE {
                    } }\"/>
        </ui:transaction>
    </ui:if>
    <ui:else>
        <ui:transaction ui:logMessage=\"Remove tag property {= ?property }\">
            <ui:update ui:updateQuery=\"{!
                    DELETE {
                        ?projectGraph tagger:tagProperty ?property .
                    }
                    WHERE {
                    } }\"/>
        </ui:transaction>
    </ui:else>
</ui:setContext>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Change tagger property service" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
taggerprojects:ConfigSectionPlugin
  a ui:NodeClass ;
  ui:prototype """
<ui:if ui:condition=\"{= taggerprojects:hasLicense() }\">
    <taggerprojects:TaggerGraphsPanel arg:label=\"Tagger Content\" arg:template=\"{= taggerprojects:SelectableSubjectGraphs }\" arg:type=\"{= tagger:SubjectGraph }\"/>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Tagger config section plugin" ;
  rdfs:subClassOf teamworkconfig:ConfigSectionPlugins ;
.
taggerprojects:ContentTagSet
  a rdfs:Class ;
  rdfs:label "Content tag set" ;
  rdfs:subClassOf teamwork:Vocabulary ;
.
taggerprojects:ContentTagSetClonePlugin
  a teamwork:ClonePlugin ;
  ui:prototype """
<ui:if ui:condition=\"{= (!spl:hasValue(?oldProjectGraph, tagger:useTrainingModelFrom)) &amp;&amp; autotagger:isTrained(?oldProjectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?newProjectGraph }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?newProjectGraph tagger:useTrainingModelFrom ?oldProjectGraph .
                }
                WHERE {
                } }\"/>
    </ui:setContext>
</ui:if>
"""^^ui:Literal ;
  rdfs:comment "A clone plugin that takes care of setting the AutoClassifier training model for the copied project." ;
  rdfs:label "content tag set clone plugin" ;
  rdfs:subClassOf teamwork:ClonePlugins ;
.
taggerprojects:CreateTaggerProjectPage1
  a ui:NodeClass ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"create-project-page\" arg:projectType=\"{= ?projectType }\" let:typeLabel=\"{= teamwork:taggerTypeLabel() }\">
    <h1>Create New {= ?typeLabel } (Step 1)</h1>
    <p>This creates a new {= ?typeLabel } with yourself as the manager.</p>
    <br/>
    <form action=\"swp\">
        <input name=\"_viewClass\" type=\"hidden\" value=\"taggerprojects:CreateTaggerProjectPage2\"/>
        <input name=\"projectType\" type=\"hidden\" value=\"{= ?projectType }\"/>
        <ui:if ui:condition=\"{= bound(?subjectArea) &amp;&amp; isIRI(?subjectArea) }\">
            <input name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
        </ui:if>
        <teamwork:CreateProjectLabelElement/>
        <br/>
        <swa:LabeledElement arg:label=\"Description\">
            <textarea class=\"form-control\" cols=\"80\" name=\"comment\" rows=\"4\"/>
        </swa:LabeledElement>
        <br/>
        <swa:LabeledElement arg:label=\"Content Graph\" arg:toolTip=\"The RDF graph containing the content being tagged (left hand side). The EVN admin can configure the choices.\">
            <select class=\"form-control taggerprojects-create-tagger-project-page1-label\" name=\"subjectGraph\">
                <ui:call ui:template=\"{= taggerprojects:PotentialSubjectGraphs }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) != 1 }\">
                        <option/>
                    </ui:if>
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <option value=\"&lt;{= ?graph }&gt;\">{= teamwork:graphLabel(?graph) }</option>
                    </ui:forEach>
                </ui:call>
            </select>
        </swa:LabeledElement>
        <br/>
        <swa:LabeledElement arg:label=\"Tagging Vocabulary\" arg:toolTip=\"The EVN vocabulary containing the available tags (right hand side)\">
            <select class=\"form-control taggerprojects-create-tagger-project-page1-label\" name=\"objectGraph\">
                <ui:call ui:template=\"{= taggerprojects:PotentialObjectGraphs }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) != 1 }\">
                        <option/>
                    </ui:if>
                    <ui:forEach ui:resultSet=\"{= ?rs }\">
                        <option value=\"&lt;{= ?graph }&gt;\">{= teamwork:projectLabel(?graph) }</option>
                    </ui:forEach>
                </ui:call>
            </select>
        </swa:LabeledElement>
        <br/>
        <ui:if ui:condition=\"{= tbl:dpCreateOption() }\">
            <div class=\"checkbox\">
                <swa:LabeledElement arg:label=\"Data Platform\">
                    <input id=\"data-platform-flag\" name=\"dataPlatform\" type=\"checkbox\" value=\"true\"/>
                </swa:LabeledElement>
            </div>
            <br/>
        </ui:if>
        <ui:if ui:condition=\"{= !swa:falseOrUnbound(cfg:disableLuceneIndexing) }\">
            <swa:LabeledElement>
                <div class=\"checkbox\">
                    <input id=\"lucene-index-flag\" name=\"luceneIndex\" type=\"checkbox\" value=\"true\"/>
                    <label for=\"lucene-index-flag\">Include this asset collection in the index for <em>Search the EDG</em>
                    </label>
                </div>
            </swa:LabeledElement>
            <br/>
        </ui:if>
        <input type=\"submit\" value=\"Next\"/>
    </form>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:label "Create tagger project page 1" ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
taggerprojects:CreateTaggerProjectPage2
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:comment ;
      spl:valueType xsd:string ;
      rdfs:comment "The description of the project." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:dataPlatform ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Flag indicating whether to use the Data Platform." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:luceneIndex ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:name ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the new project." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:objectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject graph." ;
    ] ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?name) }\">
    <teamwork:ErrorPage arg:message=\"Missing name\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?objectGraph) }\">
    <teamwork:ErrorPage arg:message=\"Missing tagging vocabulary\"/>
</ui:if>
"""^^ui:Literal ;
  ui:errorPrototype """
<ui:if ui:condition=\"{= !bound(?subjectGraph) }\">
    <teamwork:ErrorPage arg:message=\"Missing content graph\"/>
</ui:if>
"""^^ui:Literal ;
  ui:headIncludes """
<script src=\"{= ui:lib() }/teamwork/build/tagger.bundle.js\"/>
"""^^ui:Literal ;
  ui:prototype """
<ui:setContext let:typeLabel=\"{= teamwork:taggerTypeLabel() }\" ui:queryGraph=\"{= ui:graphWithImports(?subjectGraph) }\">
    <ui:call arg:objectsAreFromOntology=\"{= !taggerui:isTaxonomyGraph(?objectGraph) }\" ui:template=\"{= taggerprojects:PotentialTagProperties }\">
        <ui:if ui:condition=\"{= spr:isEmpty(?rs) }\">
            <teamwork:ErrorPage arg:message=\"No tag properties found in selected tag property graph\"/>
        </ui:if>
        <ui:else>
            <teamwork:Chrome arg:pageType=\"create-project-page\" arg:projectType=\"{= ?projectType }\">
                <h1>Create New {= ?typeLabel } (Step 2)</h1>
                <p>Please select which properties can be used for tagging.</p>
                <br/>
                <form action=\"swp\" id=\"theForm\">
                    <input name=\"_viewClass\" type=\"hidden\" value=\"{= taggerprojects:CreateTaggerProjectService }\"/>
                    <input name=\"_snippet\" type=\"hidden\" value=\"true\"/>
                    <ui:if ui:condition=\"{= bound(?subjectArea) &amp;&amp; isIRI(?subjectArea) }\">
                        <input name=\"subjectArea\" type=\"hidden\" value=\"&lt;{= ?subjectArea }&gt;\"/>
                    </ui:if>
                    <input name=\"objectGraph\" type=\"hidden\" value=\"&lt;{= ?objectGraph }&gt;\"/>
                    <input name=\"subjectGraph\" type=\"hidden\" value=\"&lt;{= ?subjectGraph }&gt;\"/>
                    <input name=\"comment\" type=\"hidden\" value=\"{= ?comment }\"/>
                    <input name=\"name\" type=\"hidden\" value=\"{= ?name }\"/>
                    <input name=\"dataPlatform\" type=\"hidden\" value=\"{= COALESCE(?dataPlatform, false) }\"/>
                    <input name=\"luceneIndex\" type=\"hidden\" value=\"{= COALESCE(?luceneIndex, false) }\"/>
                    <swa:LabeledElement arg:label=\"Default Tag Property\">
                        <select class=\"form-control\" name=\"defaultTagProperty\">
                            <option/>
                            <ui:forEach ui:resultSet=\"{= ?rs }\">
                                <option value=\"&lt;{= ?property }&gt;\">{= ?label }</option>
                            </ui:forEach>
                        </select>
                    </swa:LabeledElement>
                    <ui:forEach ui:indexVar=\"idx\" ui:resultSet=\"{= ?rs }\">
                        <input name=\"tagProperty{= ?idx }\" type=\"hidden\" value=\"{= ?property }\"/>
                    </ui:forEach>
                    <br/>
                    <ui:if let:initialRootClass=\"{= tagger:getMainClass(?subjectGraph) }\" ui:condition=\"{= !taggerui:isTaxonomyGraph(?subjectGraph) }\">
                        <p>&nbsp;</p>
                        <p>Optionally, select a root class for the content types tree.</p>
                        <br/>
                        <input id=\"subjectRootClassInput\" name=\"subjectRootClass\" type=\"hidden\" value=\"{= COALESCE(CONCAT(&quot;&lt;&quot;, str(?initialRootClass), &quot;&gt;&quot;), &quot;&quot;) }\"/>
                        <swa:LabeledElement arg:label=\"Root Content Type (optional)\">
                            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?subjectGraph) }\">
                                <ui:group let:hideUnused=\"{= (!bound(?initialRootClass)) || EXISTS {
                                    ?instance a ?initialRootClass .
                                } }\">
                                    <div class=\"taggerprojects-create-tagger-project-page2-tree-container\">
                                        <ui:loadable ui:loadId=\"treeLoadable\">
                                            <swa:Tree arg:dataProvider=\"{= swa:ClassTreeDataProvider }\" arg:filterFunction=\"{= IF(?hideUnused, taggerui:filterUnusedAndSystemClasses, teamwork:filterSystemResourcesExceptOWLThing) }\" arg:id=\"theTree\" arg:onLoaded=\"taggerprojects.contentRootClassTreeLoaded('{= ui:currentQueryGraph() }')\" arg:onSelect=\"taggerprojects.contentRootClassTreeNodeSelected(resource)\" arg:root=\"{= rdfs:Resource }\"/>
                                        </ui:loadable>
                                    </div>
                                    <div class=\"checkbox\">
                                        <label>
                                            <input checked=\"{= IF(?hideUnused, &quot;checked&quot;, ?unbound) }\" id=\"hideUnused\" type=\"checkbox\">
                                                <ui:handle ui:event=\"onclick\" ui:script=\"swa.load('treeLoadable', {hideUnused: $('#hideUnused').is(':checked')}, null, true)\"/>
                                            </input>
Hide unused classes
</label>
                                    </div>
                                </ui:group>
                            </ui:setContext>
                        </swa:LabeledElement>
                    </ui:if>
                    <p>&nbsp;</p>
                    <input type=\"submit\" value=\"Finish\"/>
                </form>
                <script>teamwork.initCreateForm()</script>
            </teamwork:Chrome>
        </ui:else>
    </ui:call>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Create tagger project page 2" ;
  rdfs:subClassOf swa:Elements ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
taggerprojects:CreateTaggerProjectService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:defaultTagProperty ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The default tag property." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:luceneIndex ;
      spl:valueType xsd:boolean ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectArea ;
      spl:valueType edg:SubjectArea ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:subjectRootClass ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The root of the subject graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:dataPlatform ;
      spl:valueType xsd:boolean ;
      rdfs:comment "Flag indicating whether to use the Data Platform." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:objectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The object graph." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:subjectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject graph to use." ;
    ] ;
  ui:prototype """
<teamwork:createProject arg:comment=\"{= ?comment }\" arg:dataPlatform=\"{= ?dataPlatform }\" arg:name=\"{= ?name }\" arg:owlImports=\"http://topbraid.org/taggershapes http://www.w3.org/2004/02/skos/core\" arg:projectType=\"{= taggerprojects:ProjectType }\" arg:spinImports=\"http://topbraid.org/spin/evnconstraints\">
    <ui:group let:graph=\"{= teamwork:masterGraph(?graphId) }\">
        <ui:setContext ui:queryGraph=\"{= ?graph }\" ui:silentTransactions=\"{= true }\">
            <ui:transaction>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?graph tagger:subjectGraph ?subjectGraph .
                            ?graph tagger:objectGraph ?objectGraph .
                            ?graph tagger:subjectRootClass ?subjectRootClass .
                            ?graph tagger:defaultTagProperty ?defaultTagProperty .
                            ?graph edg:subjectArea ?subjectArea .
                        }
                        WHERE {
                        } }\"/>
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?graph tagger:tagProperty ?argValue .
                        }
                        WHERE {
                            ?i tops:for ( 0 100 ) .
                            BIND (ui:param(CONCAT(&quot;tagProperty&quot;, xsd:string(?i)), rdf:Property) AS ?argValue) .
                            FILTER bound(?argValue) .
                        } }\"/>
            </ui:transaction>
        </ui:setContext>
        <teamwork:CreateProjectPlugins arg:projectGraph=\"{= ?graph }\" arg:teamGraph=\"{= teamwork:teamGraph(?graph) }\"/>
        <ui:if ui:condition=\"{= ?luceneIndex }\">
            <ui:group let:pg=\"{= teamwork:masterGraph(?graphId) }\">
                <safconfig:BulkAddGraph arg:checked=\"{= true }\" arg:graph=\"{= ?pg }\"/>
            </ui:group>
        </ui:if>
    </ui:group>
    <swon:Object>
        <swon:NameValuePair arg:name=\"response\" arg:value=\"Successfully created {= teamwork:singularProjectTypeLabel(taggerprojects:ProjectType) } with id '{= ?graphId }'.\"/>
        <swon:NameValuePair arg:name=\"id\" arg:value=\"{= ?graphId }\"/>
    </swon:Object>
</teamwork:createProject>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Create tagger project service" ;
  rdfs:subClassOf teamwork:LabelAndCommentService ;
.
taggerprojects:GetColumnsJSON
  a ui:Service ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:resourceType ;
      spl:valueType rdfs:Resource ;
    ] ;
  ui:private true ;
  ui:prototype """
<ui:group let:ontology=\"{= teamwork:currentMasterGraph() }\">
    <swon:Array let:defaultTagProperty=\"{= spl:object(?ontology, tagger:defaultTagProperty) }\" let:objectGraph=\"{= spl:object(?ontology, tagger:objectGraph) }\" let:subjectGraph=\"{= spl:object(?ontology, tagger:subjectGraph) }\" let:subjectRootClass=\"{= COALESCE(IRI(?resourceType), spl:object(?ontology, tagger:subjectRootClass)) }\">
        <swon:Object>
            <swon:Value arg:name=\"title\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"label\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"name\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"path\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"data\" arg:value=\"uri\"/>
            <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"visible\" arg:value=\"{= false }\"/>
            <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"preventEdit\" arg:value=\"{= true }\"/>
            <swon:Value arg:name=\"sourceGraph\" arg:value=\"{= COALESCE(teamwork:graphIdFromGraph(?subjectGraph), ?subjectGraph) }\"/>
            <swon:Value arg:name=\"targetGraph\" arg:value=\"{= COALESCE(teamwork:graphIdFromGraph(?objectGraph), ?objectGraph) }\"/>
            <swon:Value arg:name=\"targetGraphURI\" arg:value=\"{= ui:graphWithImports(?objectGraph) }\"/>
            <swon:Value arg:name=\"targetType\" arg:value=\"{= owl:Thing }\"/>
            <swon:Value arg:name=\"matchTemplate\" arg:value=\"http://topbraid.org/teamwork#getMatchesByPredicate\"/>
            <swon:Value arg:name=\"matchPredicate\" arg:value=\"{= COALESCE(?defaultTagProperty, ?nil) }\"/>
        </swon:Object>
        <swon:Object>
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?subjectGraph) }\">
                <swon:Value arg:name=\"title\" arg:value=\"{= ui:label(?subjectRootClass) } \"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?subjectRootClass) }\"/>
                <swon:Value arg:name=\"projectType\" arg:value=\"tagset\"/>
                <swon:Value arg:name=\"name\" arg:value=\"label\"/>
                <swon:Value arg:name=\"sourceTypeQName\" arg:value=\"{= smf:qname(?subjectRootClass) }\"/>
                <swon:Value arg:name=\"sourceType\" arg:value=\"{= ?subjectRootClass }\"/>
                <swon:Value arg:name=\"data\" arg:value=\"label\"/>
                <swon:Value arg:name=\"maxCount\" arg:value=\"1\"/>
                <swon:Value arg:name=\"path\" arg:value=\"label\"/>
                <swon:Value arg:name=\"searchable\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"preventEdit\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"objectGraph\" arg:value=\"{= ?objectGraph }\"/>
                <swon:Value arg:name=\"sourceGraph\" arg:value=\"{= COALESCE(teamwork:graphIdFromGraph(?subjectGraph), ?subjectGraph) }\"/>
                <swon:Value arg:name=\"defaultTagProperty\" arg:value=\"{= swa:labelInGraph(?defaultTagProperty, ui:graphWithImports(?objectGraph)) }\"/>
                <swon:Value arg:name=\"defaultTagPropertyURI\" arg:value=\"{= COALESCE(?defaultTagProperty, ?nil) }\"/>
                <swon:Value arg:name=\"subjectRootClass\" arg:value=\"{= COALESCE(?subjectRootClass, owl:Thing) }\"/>
            </ui:setContext>
        </swon:Object>
        <swon:Object>
            <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?subjectGraph) }\">
                <swon:Value arg:name=\"uri\" arg:value=\"{= ?defaultTagProperty }\"/>
                <swon:Value arg:name=\"name\" arg:value=\"{= ui:label(?defaultTagProperty) }\"/>
                <swon:Value arg:name=\"label\" arg:value=\"{= ui:label(?defaultTagProperty) }\"/>
                <swon:Value arg:name=\"path\" arg:value=\"{= ui:label(?defaultTagProperty) }\"/>
                <swon:Value arg:name=\"title\" arg:value=\"{= ui:label(?defaultTagProperty) }\"/>
                <swon:Value arg:name=\"maxCount\" arg:value=\"{= 1 }\"/>
                <swon:Value arg:name=\"orderable\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"searchable\" arg:value=\"{= false }\"/>
                <swon:Value arg:name=\"visible\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"render\" arg:value=\"taggerColumn\"/>
                <swon:Value arg:name=\"excludedFromQuery\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"crosswalkMatchCol\" arg:value=\"{= true }\"/>
                <swon:Value arg:name=\"data\" arg:value=\"{= ui:label(?defaultTagProperty) }\"/>
            </ui:setContext>
        </swon:Object>
    </swon:Array>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf ui:JSONServices ;
.
taggerprojects:PotentialObjectGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a teamwork:projectLabel ;
            arg:projectGraph [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "graph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "teamGraph" ;
              ] ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?2" ;
              ] ;
            sp:predicate teamwork:readableGraphsOfType ;
            sp:subject [
                sp:varName "?0" ;
              ] ;
          ]
          [
            sp:object ontologyprojects:ProjectType ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?3" ;
              ] ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?2" ;
              ] ;
          ]
          [
            sp:object taxonomies:ProjectType ;
            sp:predicate rdf:first ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
          [
            sp:object () ;
            sp:predicate rdf:rest ;
            sp:subject [
                sp:varName "?3" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Potential object graphs" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
taggerprojects:PotentialSubjectGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object tagger:SubjectGraph ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "graph" ;
                            ] ;
                        ]
                        [
                          a sp:Bind ;
                          sp:expression [
                              a teamwork:teamGraph ;
                              sp:arg1 [
                                  sp:varName "graph" ;
                                ] ;
                            ] ;
                          sp:variable [
                              sp:varName "teamGraph" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode <http://server.topbraidlive.org/dynamic/config> ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a sp:bound ;
                            sp:arg1 [
                                sp:varName "teamGraph" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:userWithName ;
                        sp:arg1 [
                            a smf:currentUserName ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "user" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate teamwork:readableGraphsUnderTeamControl ;
                    sp:subject () ;
                  ]
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "teamGraph" ;
                      ] ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:label "Potential subject graphs" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
taggerprojects:PotentialTagProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:not ;
                    sp:arg1 [
                        a sp:bound ;
                        sp:arg1 [
                            sp:varName "objectsAreFromOntology" ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:not ;
                    sp:arg1 [
                        sp:varName "objectsAreFromOntology" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "rangeMustBeSkosConcept" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    sp:varName "contentRootClass" ;
                  ] ;
                sp:arg2 rdfs:Resource ;
              ] ;
            sp:variable [
                sp:varName "root" ;
              ] ;
          ]
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    a sp:TriplePath ;
                    sp:object [
                        sp:varName "root" ;
                      ] ;
                    sp:path [
                        a sp:ModPath ;
                        sp:modMax -2 ;
                        sp:modMin 0 ;
                        sp:subPath rdfs:subClassOf ;
                      ] ;
                    sp:subject [
                        sp:varName "domainClass" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a teamwork:filterSystemResourcesExceptOWLThing ;
                        arg:node [
                            sp:varName "domainClass" ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression rdfs:Resource ;
                    sp:variable [
                        sp:varName "domainClass" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            sp:object [
                sp:varName "superProperty" ;
              ] ;
            sp:predicate swa:relevantClassOfProperty ;
            sp:subject [
                sp:varName "domainClass" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:localRangeAtClass ;
                arg:class [
                    sp:varName "domainClass" ;
                  ] ;
                arg:property [
                    sp:varName "superProperty" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "range" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      sp:object rdfs:Datatype ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "range" ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:notExists ;
                sp:elements (
                    [
                      a sp:NamedGraph ;
                      sp:elements (
                          [
                            sp:object rdfs:Datatype ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "range" ;
                              ] ;
                          ]
                        ) ;
                      sp:graphNameNode ui:graph ;
                    ]
                  ) ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "range" ;
                  ] ;
                sp:arg2 rdfs:Literal ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object skos:Concept ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath rdfs:subClassOf ;
                            ] ;
                          sp:subject [
                              sp:varName "range" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a sp:not ;
                    sp:arg1 [
                        sp:varName "rangeMustBeSkosConcept" ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "superProperty" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subPropertyOf ;
              ] ;
            sp:subject [
                sp:varName "property" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a teamwork:filterSystemResourcesExceptOWLThing ;
                arg:node [
                    sp:varName "property" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:or ;
                sp:arg1 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object rdf:Property ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "property" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          sp:object owl:ObjectProperty ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "property" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "property" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue rdfs:Resource ;
      spl:optional true ;
      spl:predicate arg:contentRootClass ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue false ;
      spl:optional true ;
      spl:predicate arg:objectsAreFromOntology ;
      spl:valueType xsd:boolean ;
      rdfs:comment "If true, the returned properties are appropriate for use with objects that come from an ontology (instead of SKOS taxonomy)." ;
    ] ;
  spin:private true ;
  rdfs:comment "Finds properties defined in the current graph that can potentially be used as tag properties. To be eligible, a property must have a range of skos:Concept or one of its subclasses (except if arg:objectsAreFromOntology is true, then the range must be a non-datatype). The domain must be the content root class argument, or a subclass or superclass thereof. If no content root class is given, rdfs:Resource is assumed. Subproperties of eligible properties are also returned." ;
  rdfs:label "Potential tag properties" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
taggerprojects:ProjectSummary
  a teamwork:ProjectSummary ;
  ui:prototype """
<div class=\"teamworkSubTitle\">
    <ui:group let:graph=\"{= spl:object(?projectGraph, tagger:subjectGraph) }\">
        <span>Content Graph:&nbsp;</span>
        <span class=\"teamwork-main-class\">
            <ui:if ui:condition=\"{= teamwork:hasTeamGraph(?graph) }\">
                <a href=\"{= teamwork:editorLink(?graph) }\">{= teamwork:projectLabel(?graph) }</a>
            </ui:if>
            <ui:else>
                <span>{= teamwork:graphLabel(?graph) }</span>
            </ui:else>
        </span>
    </ui:group>
    <ui:group let:graph=\"{= spl:object(?projectGraph, tagger:objectGraph) }\">
        <teamwork:Spaces/>
        <span>Concept Vocabulary:&nbsp;</span>
        <span class=\"teamwork-main-class\">
            <a href=\"{= teamwork:editorLink(?graph) }\">{= teamwork:projectLabel(?graph) }</a>
        </span>
    </ui:group>
</div>
"""^^ui:Literal ;
  rdfs:label "Project summary" ;
  rdfs:subClassOf teamwork:ProjectElements ;
.
taggerprojects:ProjectType
  a teamwork:ProjectType ;
  edg.v:icon "tq-tagger-icon" ;
  teamwork:clonePlugin taggerprojects:ContentTagSetClonePlugin ;
  teamwork:createProjectPageClass taggerprojects:CreateTaggerProjectPage1 ;
  teamwork:customHeaderInsert taggerui:CustomHeaderInsert ;
  teamwork:dashboardGadget teamwork:TagStatusDashboardGadget ;
  teamwork:deletePlugin teamwork:RemoveFromLuceneIndexDeletePlugin ;
  teamwork:editorProjectTabLabel "Taggings" ;
  teamwork:isLinkProjectType true ;
  teamwork:newEditorDisabled true ;
  teamwork:pluralLabel "Content Tag Sets" ;
  teamwork:projectEditorClass taggerui:TabularEditor ;
  teamwork:projectEditorClassOption taggerui:Application ;
  teamwork:projectPlugin autotagger:AutoTaggingManagePlugin ;
  teamwork:projectPlugin autotagger:ResultsReviewPlugin ;
  teamwork:projectPlugin autotagger:RunAutoClassifierOnContentChanges ;
  teamwork:projectPlugin taggerprojects:SelectTagPropertiesManagePlugin ;
  teamwork:projectPlugin savedQueries:ExportSavedSPARQLQueriesPlugin ;
  teamwork:projectPlugin savedQueries:SPARQLEndpointPlugin ;
  teamwork:projectPlugin teamwork:ComparisonReportPlugin ;
  teamwork:projectPlugin teamwork:GraphURIPlugin ;
  teamwork:projectPlugin teamwork:ImportedByGeneralPlugin ;
  teamwork:projectPlugin teamwork:NotificationsManagePlugin ;
  teamwork:projectPlugin teamwork:ProblemsAndSuggestionsReportPlugin ;
  teamwork:projectPlugin teamwork:PublishExportPlugin ;
  teamwork:projectPlugin teamwork:RDFFileImporterPlugin ;
  teamwork:projectPlugin teamwork:ScriptBasedImportPlugin ;
  teamwork:projectSummaryClass taggerprojects:ProjectSummary ;
  teamwork:projectTypeWeight 9 ;
  teamwork:singularLabel "Content Tag Set" ;
  teamwork:supportedNotification teamwork:FileImportedNotification ;
  teamwork:supportedNotification teamwork:TagCreatedNotification ;
  teamwork:supportedNotification teamwork:TagStatusChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyClearedNotification ;
  teamwork:supportedNotification teamwork:VocabularyStatusChangedNotification ;
  teamwork:vocabularyType taggerprojects:ContentTagSet ;
  rdfs:comment "Content Tag Sets are typically used to store connections between documents and items in controlled vocabularies (taxonomies or ontologies) that deemed to be relevant for a document. Content Tag Sets can also store connection (links) between two controlled vocabularies. You define what property or properties to use to specify the connections." ;
  rdfs:label "Tagger project type" ;
.
taggerprojects:SelectTagPropertiesManagePlugin
  a teamwork:ManagePlugin ;
  ui:prototype """
<ui:createLink arg:projectGraph=\"{= ?projectGraph }\" ui:viewClass=\"{= taggerprojects:TaggerPropertiesPage }\">
    <teamwork:ActionLink arg:comment=\"Can be used to select which properties (from those in the property graphs) shall be used for tagging.\" arg:faIcon=\"fa-tag\" arg:link=\"{= ?link }\" arg:title=\"Select Tag Properties\"/>
</ui:createLink>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
taggerprojects:SelectableSubjectGraphs
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:groupBy (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:having (
          [
            a sp:bound ;
            sp:arg1 [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
      sp:orderBy (
          [
            sp:varName "graph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:expression [
                a sp:ge ;
                sp:arg1 [
                    a sp:Count ;
                    sp:expression [
                        sp:varName "exists" ;
                      ] ;
                  ] ;
                sp:arg2 1 ;
              ] ;
            sp:varName "available" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  (
                    [
                      sp:object [
                          sp:varName "?0" ;
                        ] ;
                      sp:predicate tops:files ;
                      sp:subject [
                          sp:varName "file" ;
                        ] ;
                    ]
                    [
                      sp:object "/" ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?1" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?0" ;
                        ] ;
                    ]
                    [
                      sp:object true ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "?2" ;
                        ] ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?1" ;
                        ] ;
                    ]
                    [
                      sp:object true ;
                      sp:predicate rdf:first ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      sp:object () ;
                      sp:predicate rdf:rest ;
                      sp:subject [
                          sp:varName "?2" ;
                        ] ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a smf:baseURI ;
                          sp:arg1 [
                              sp:varName "file" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "graph" ;
                        ] ;
                    ]
                    [
                      a sp:Bind ;
                      sp:expression [
                          a xsd:string ;
                          sp:arg1 [
                              sp:varName "graph" ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "uri" ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:and ;
                          sp:arg1 [
                              a sp:and ;
                              sp:arg1 [
                                  a sp:bound ;
                                  sp:arg1 [
                                      sp:varName "graph" ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:not ;
                                  sp:arg1 [
                                      a fn:starts-with ;
                                      sp:arg1 [
                                          sp:varName "uri" ;
                                        ] ;
                                      sp:arg2 "file:" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:not ;
                              sp:arg1 [
                                  a fn:ends-with ;
                                  sp:arg1 [
                                      sp:varName "uri" ;
                                    ] ;
                                  sp:arg2 ".tch" ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      a sp:Filter ;
                      sp:expression [
                          a sp:and ;
                          sp:arg1 [
                              a sp:bound ;
                              sp:arg1 [
                                  sp:varName "graph" ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:not ;
                              sp:arg1 [
                                  a fn:starts-with ;
                                  sp:arg1 [
                                      a sp:str ;
                                      sp:arg1 [
                                          sp:varName "graph" ;
                                        ] ;
                                    ] ;
                                  sp:arg2 "urn:x-evn-" ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  )
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:not ;
                        sp:arg1 [
                            a teamwork:hasTeamGraph ;
                            sp:arg1 [
                                sp:varName "graph" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression true ;
                    sp:variable [
                        sp:varName "exists" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://topbraid.org/demo/paintings/sample> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a spif:graphExists ;
                        arg:graph [
                            sp:varName "graph" ;
                          ] ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression true ;
                    sp:variable [
                        sp:varName "exists" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object tagger:SubjectGraph ;
                    sp:predicate rdf:type ;
                    sp:subject [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  spin:private true ;
  rdfs:comment "Returns potential subject graphs and configured subject graphs. A value of false for ?available indicates a configured subject graph that is not a potential subject graph, that is, it was probably removed from the system." ;
  rdfs:label "Selectable subject graphs" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
taggerprojects:SetGraphTypeService
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:graph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The graph to change the type of." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The type to set (or unset)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:value ;
      spl:valueType xsd:boolean ;
      rdfs:comment "True to set, false to unset." ;
    ] ;
  ui:prototype """
<ui:transaction>
    <ui:if ui:condition=\"{= ?value }\">
        <ui:update ui:updateQuery=\"{!
                INSERT {
                    ?graph a ?type .
                }
                WHERE {
                } }\"/>
    </ui:if>
    <ui:else>
        <ui:update ui:updateQuery=\"{!
                DELETE {
                    ?graph a ?type .
                }
                WHERE {
                } }\"/>
    </ui:else>
</ui:transaction>
"""^^ui:Literal ;
  ui:responseType ui:JSON ;
  rdfs:label "Set graph type service" ;
  rdfs:subClassOf swa:Elements ;
.
taggerprojects:TaggerGraphsPanel
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:label ;
      spl:valueType xsd:string ;
      rdfs:comment "The title label" ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The template delivering the candidates." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The type of the graph" ;
    ] ;
  ui:prototype """
<tblui:Section arg:label=\"{= ?label } Graphs\">
    <script>setGraphType = function(graph, type, value) {
		var params = {
			_base : '{= ui:currentQueryGraph() }',
			_viewClass : 'taggerprojects:SetGraphTypeService',
			graph : '&lt;' + graph + '&gt;',
			type : '&lt;' + type + '&gt;',
			value : value
		};
		var $jqXHR = $.ajax({
			'url': 'swp',
			'method': 'get',
			'data': params
		});
		$.when(
			$jqXHR
		).done(function (data, textStatus, jqXHR) {
			//
		}).fail(function (jqXHR, textStatus, errorThrown) {
			swa.populateModalDialog('Operation failed: ' + errorThrown, 'Operation failed', null);
		});
		return $jqXHR;
	};</script>
    <ui:call ui:template=\"{= ?template }\">
        <div class=\"checkbox\">
            <ui:forEach ui:resultSet=\"{= ?rs }\">
                <label>
                    <input checked=\"{= IF(EXISTS {
                        ?graph a ?type .
                    }, &quot;checked&quot;, ?none) }\" onclick=\"setGraphType('{= ?graph }', '{= ?type }', $(this).is(':checked'))\" type=\"checkbox\"/>
                    <ui:if ui:condition=\"{= bound(?available) &amp;&amp; (!?available) }\">
                        <span class=\"text-muted\">{= ?graph }&nbsp;(Missing)</span>
                    </ui:if>
                    <ui:else>
                        <span>{= ?graph }</span>
                    </ui:else>
                </label>
                <br/>
            </ui:forEach>
        </div>
    </ui:call>
</tblui:Section>
"""^^ui:Literal ;
  rdfs:label "Tagger graphs panel" ;
  rdfs:subClassOf swa:Elements ;
.
taggerprojects:TaggerPropertiesPage
  a ui:NodeClass ;
  ui:headIncludes """
<script src=\"{= ui:lib() }/teamwork/build/tagger.bundle.js\"/>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
    <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
        <ui:group let:objectGraph=\"{= tagger:currentObjectGraph() }\">
            <teamwork:Chrome arg:projectTab=\"{= teamwork:ManageProjectTab }\" ui:args=\"*\">
                <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?objectGraph) }\">
                    <ui:call ui:template=\"{= taggerprojects:PotentialTagProperties }\" ui:varName=\"properties\">
                        <ui:setContext ui:queryGraph=\"{= ?projectGraph }\">
                            <h1>Select Tag Properties for {= teamwork:projectLabel(?projectGraph) }</h1>
                            <swa:LabeledElement arg:label=\"Default Tag Property\">
                                <select autocomplete=\"off\" class=\"form-control\" onchange=\"taggerprojects.changeTaggerDefaultProperty('{= ?projectGraph }', $(this).val())\">
                                    <ui:forEach ui:resultSet=\"{= ?properties }\">
                                        <option selected=\"{= IF(spl:hasValue(?projectGraph, tagger:defaultTagProperty, ?property), &quot;selected&quot;, ?none) }\" value=\"{= ?property }\">{= ?label }</option>
                                    </ui:forEach>
                                </select>
                            </swa:LabeledElement>
                            <br/>
                            <swa:LabeledElement arg:label=\"Tag Properties\">
                                <div class=\"taggerprojects-tag-properties\">
                                    <ui:forEach ui:resultSet=\"{= ?properties }\">
                                        <div class=\"checkbox\">
                                            <input autocomplete=\"off\" checked=\"{= IF(tagger:isTagProperty(?projectGraph, ?property), &quot;checked&quot;, ?none) }\" onclick=\"taggerprojects.changeTaggerProperty('{= ?projectGraph }', '{= ?property }', $(this).is(':checked'))\" type=\"checkbox\"/>&nbsp;<span title=\"{= ?property }\">{= ?label }</span>
                                        </div>
                                    </ui:forEach>
                                </div>
                            </swa:LabeledElement>
                        </ui:setContext>
                    </ui:call>
                </ui:setContext>
            </teamwork:Chrome>
        </ui:group>
    </ui:setContext>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:MustHaveAccessToProjectPage ;
.
taggerprojects:hasLicense
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a tbl:hasLicense ;
                sp:arg1 60 ;
              ] ;
          ]
        ) ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  rdfs:label "has license" ;
  rdfs:subClassOf spin:Functions ;
.
taggerui:filterUnusedAndSystemClasses
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:and ;
                sp:arg1 [
                    a teamwork:filterSystemResourcesExceptOWLThing ;
                    arg:node [
                        sp:varName "node" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a sp:exists ;
                    sp:elements (
                        [
                          a sp:TriplePath ;
                          sp:object [
                              sp:varName "node" ;
                            ] ;
                          sp:path [
                              a sp:ModPath ;
                              sp:modMax -2 ;
                              sp:modMin 0 ;
                              sp:subPath rdfs:subClassOf ;
                            ] ;
                          sp:subject [
                              sp:varName "class" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "class" ;
                            ] ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "instance" ;
                            ] ;
                        ]
                      ) ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "Filters out any classes that don't have instances in the current graph, as well as anything from the RDF, RDFS, OWL, SPIN and SHACL namespaces, except owl:Thing." ;
  rdfs:label "filter unused and system classes" ;
  rdfs:subClassOf swa:FilterFunctions ;
.
arg:objectsAreFromOntology
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
