# baseURI: http://rdm.topbraidlive.org/rdmprojects
# imports: http://edg.topbraid.solutions/1.0/editor/results
# imports: http://server.topbraidlive.org/system-applications/teamworkconfig
# imports: http://teamwork.topbraidlive.org/crosswalkprojects
# imports: http://teamwork.topbraidlive.org/datagraph/datagraphprojects
# imports: http://teamwork.topbraidlive.org/ontologyprojects
# imports: http://topbraid.org/metadata.ui
# imports: http://topbraid.org/rdmfact
# imports: http://topbraid.org/swa
# imports: http://topbraid.org/tasks.ui
# imports: http://topbraid.org/teamwork.ui
# imports: http://topbraid.org/teamworknotifications
# prefix: rdmprojects

@prefix acjob: <http://evn.topbraidlive.org/tagger/acjob#> .
@prefix acpp: <http://topbraid.org/nlp/autoclassifier-preproc#> .
@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix autotagger: <http://evn.topbraidlive.org/autotagger#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix compliance: <http://topbraid.org/compliance#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix conceptmatch: <http://topbraid.org/conceptmatch#> .
@prefix config: <http://server.topbraidlive.org/dynamic/config#> .
@prefix config-importers: <http://edg.topbraidlive.org/config/importers#> .
@prefix contact: <http://www.w3.org/2000/10/swap/pim/contact#> .
@prefix core-soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix corpus: <http://topbraid.org/corpus#> .
@prefix corpusprojects: <http://topbraid.org/corpus-projects#> .
@prefix crosswalk: <http://topbraid.org/crosswalk#> .
@prefix crosswalk.spin: <http://topbraid.org/crosswalk.spin#> .
@prefix crosswalkapp: <http://topbraid.org/swa/crosswalkapp#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix dashboard: <http://example.org/dashboard#> .
@prefix datagraph: <http://teamwork.topbraidlive.org/datagraph/datagraphprojects#> .
@prefix dataset: <http://teamwork.topbraidlive.org/dataset#> .
@prefix datasetapp: <http://topbraid.org/swa/datasetapp#> .
@prefix datasetviewer: <http://topbraid.org/swa/datasetviewer#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ddl: <http://edg.topbraidlive.org/1.0/importers/ddl#> .
@prefix default: <http://uispin.org/default#> .
@prefix defaultapp: <http://topbraid.org/swa/defaultapp#> .
@prefix deployProjectToServer: <http://server.topbraidlive.org/doc/deployProjectToServer#> .
@prefix devguide: <http://evn.topbraidlive.org/evndoc.www/devguide#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix document: <http://topbraid.org/document#> .
@prefix documents: <http://edg.topbraid.solutions/1.0/shapes/documents#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg-config: <http://edg.ext.topbraidlive.org/schema/config/importers#> .
@prefix edg-importer: <http://edg.topbraidlive.org/importer/> .
@prefix edg-qa: <http://edg.topbraidlive.org/utility/qa/> .
@prefix edg.c: <http://edg.topbraid.solutions/controller/> .
@prefix edg.global: <urn:x-evn-global:> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix edgproduct: <http://edg.topbraidlive.org/edgproduct#> .
@prefix eeh-lib: <http://www.environmenthub.no/spin/1.0/eeh-lib#> .
@prefix eeh-reportlib: <http://www.environmenthub.no/spin/1.0/eeh-reportlib#> .
@prefix elements: <http://purl.org/dc/elements/1.1/> .
@prefix email: <http://topbraid.org/email#> .
@prefix evn: <http://topbraid.org/evn/evn#> .
@prefix evnAdminIndex: <http://evn.topbraidlive.org/evnAdminIndex#> .
@prefix evnIntro: <http://evn.topbraidlive.org/evndoc.www/evnIntro#> .
@prefix evndoc: <http://evn.topbraidlive.org/evndoc.www/evndoc#> .
@prefix evnimport: <http://evn.topbraidlive.org/uispin/evnimport#> .
@prefix evninstallguide: <http://teamwork.topbraidlive.org/doc/evninstallguide#> .
@prefix evnui: <http://evn.topbraidlive.org/ui#> .
@prefix ex: <http://example.org/> .
@prefix extjs: <http://uispin.com/extjs#> .
@prefix flow: <http://www.w3.org/2005/01/wf/flow#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix formTemplate: <http://teamwork.topbraidlive.org/system/formTemplate#> .
@prefix forms: <http://www.topbraid.org/2007/01/forms.owl#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gettingstarted: <http://evn.topbraidlive.org/evndoc.www/gettingstarted#> .
@prefix glossary: <http://evn.topbraidlive.org/evndoc.www/glossary#> .
@prefix governance: <http://topbraid.org/teamworkgovernance.ui#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix graphql.search: <http://teamwork.topbraidlive.org/graphql.search#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix inference: <http://www.topbraid.org/2007/06/inference.owl#> .
@prefix jdbc: <http://edg.topbraidlive.org/1.0/importers/jdbc#> .
@prefix json: <http://topbraid.org/json#> .
@prefix kennedys: <http://topbraid.org/examples/kennedys#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix lib-importer: <http://edg.topbraid.solutions/importer/lib#> .
@prefix lineage-transform: <http://edg.topbraid.solutions/transform/importer/lineage#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix ontologyviewer: <http://topbraid.org/swa/ontologyviewer#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix permissionGroupMgmt: <http://server.topbraidlive.org/doc/permissionGroupMgmt#> .
@prefix pg: <http://server.topbraidlive.org/dynamic/permissiongroups#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix proxy-lineage: <http://edg.topbraid.solutions/proxy/importer/lineage#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix raci.spin: <http://topbraid.org/raci.spin#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmapp: <http://rdm.topbraidlive.org/rdmapp#> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix rdmviewer: <http://rdm.topbraidlive.org/rdmviewer#> .
@prefix saf: <http://topbraid.org/saf/> .
@prefix safconfig: <http://topbraid.org/safconfig/> .
@prefix safindex: <http://topbraid.org/safindex#> .
@prefix safm: <http://saf.topbraidlive.org/metaschema/> .
@prefix savedQueries: <http://teamwork.topbraidlive.org/ui/savedQueries#> .
@prefix scheduler: <http://topbraid.org/scheduler#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix server: <http://server.topbraidlive.org/server.ui#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shapesgraph: <http://teamwork.topbraidlive.org/shapesgraph/shapesgraphprojects#> .
@prefix sharepoint: <http://topbraid.org/sharepoint#> .
@prefix sharepoint.spin: <http://topbraid.org/sharepoint.spin#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix soa: <http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spin.ui: <http://spinrdf.org/spin.ui#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spinx: <http://spinrdf.org/spinx#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix ss: <http://www.topbraidcomposer.org/owl/2006/08/spreadsheets.owl#> .
@prefix stats: <http://topbraid.org/statistics#> .
@prefix status: <http://topbraid.org/status#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swadoc: <http://topbraid.org/swadoc#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix tablesmap: <http://topbraid.org/spin/tablesmap#> .
@prefix tagger: <http://evn.topbraidlive.org/tagger#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix taggerspin: <http://evn.topbraidlive.org/taggerspin#> .
@prefix taggerui: <http://evn.topbraidlive.org/taggerui#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix tasks.spin: <http://topbraid.org/tasks.spin#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix tbladmin: <http://server.topbraidlive.org/system-applications/tbladmin#> .
@prefix tbladmindoc: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix tblinstallguide: <http://server.topbraidlive.org/doc/tblinstallguide#> .
@prefix tblui: <http://server.topbraidlive.org/tblui#> .
@prefix teaminstallsec: <http://teamwork.topbraidlive.org/doc/teamworkInstallGuideSections#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix teamworkAdmin: <http://teamwork.topbraidlive.org/doc/teamworkAdmin#> .
@prefix teamworkconfig: <http://server.topbraidlive.org/system-applications/teamworkconfig#> .
@prefix teamworkconstraints: <http://topbraid.org/teamworkconstraints#> .
@prefix teamworkdashboard: <http://topbraid.org/teamworkdashboard#> .
@prefix teamworknotifications: <http://topbraid.org/teamworknotifications#> .
@prefix teamworkrules: <http://topbraid.org/teamworkrules#> .
@prefix teamworkscripts: <http://topbraid.org/teamworkscripts#> .
@prefix teamworkupdate: <http://teamworkAPI.topbraid.com/teamworkUpdate#> .
@prefix textindex: <http://topbraid.org/textindex#> .
@prefix tika-importer: <http://teamwork.topbraidlive.org/corpus/tika-importer#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix tracker: <http://teamwork.topbraidlive.org/ui/tracker#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uitest: <http://uispin.org/test#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix userAdminIndex: <http://evn.topbraidlive.org/userAdminIndex#> .
@prefix userIndex: <http://evn.topbraidlive.org/evndoc.www/userIndex#> .
@prefix userdat: <http://teamwork.topbraidlive.org/ui/userdata> .
@prefix userdata: <http://teamwork.topbraidlive.org/ui/userdata#> .
@prefix usingtagger: <http://evn.topbraidlive.org/taggerdoc.www/usingtagger#> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix victory: <http://edg.topbraid.solutions/victory/> .
@prefix visual: <http://topbraid.org/visual#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wf: <http://www.w3.org/2005/01/wf/flow#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xhtml: <http://topbraid.org/xhtml#> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://rdm.topbraidlive.org/rdmprojects>
  a owl:Ontology ;
  rdfs:comment "APIs for accessing codes within the Reference Datasets." ;
  rdfs:label "Reference Datasets" ;
  owl:imports <http://edg.topbraid.solutions/1.0/editor/results> ;
  owl:imports <http://server.topbraidlive.org/system-applications/teamworkconfig> ;
  owl:imports <http://teamwork.topbraidlive.org/crosswalkprojects> ;
  owl:imports <http://teamwork.topbraidlive.org/datagraph/datagraphprojects> ;
  owl:imports <http://teamwork.topbraidlive.org/ontologyprojects> ;
  owl:imports <http://topbraid.org/metadata.ui> ;
  owl:imports <http://topbraid.org/rdmfact> ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://topbraid.org/tasks.ui> ;
  owl:imports <http://topbraid.org/teamwork.ui> ;
  owl:imports <http://topbraid.org/teamworknotifications> ;
.
rdmprojects:CodeLookupHomePageTab
  a teamwork:HomePageTab ;
  edg.v:icon "tq-find-code-icon" ;
  arg:visibility [
      a sp:not ;
      sp:arg1 [
          a teamwork:isProjectTypeDisabled ;
          arg:projectType rdmprojects:ProjectType ;
        ] ;
    ] ;
  swa:tabIndex -150 ;
  ui:prototype """
<teamwork:Chrome arg:pageType=\"chrome-with-ui-layout\" arg:parentPage=\"{= rdmprojects:CodeLookupHomePageTab }\" let:resourceSelectedEvent=\"org.topbraid.rdm.codes.resourceSelected\">
    <swa:BorderLayout arg:class=\"rdmprojects-code-lookup-home-page-tab-border-layout-height\" arg:westSize=\"{= 500 }\">
        <swa:BorderLayout arg:layoutPanel=\"west\" arg:northSize=\"{= 170 }\">
            <swa:Window arg:id=\"codeLookupSearchWindow\" arg:layoutPanel=\"north\" arg:title=\"Search for Code\">
                <div class=\"rdmprojects-code-lookup-home-page-tab-padding-eight\">
                    <swa:LabeledElement arg:label=\"Code:\">
                        <div>
                            <input class=\"form-control\" id=\"codeLookupInput\" type=\"text\"/>
                        </div>
                        <div class=\"checkbox\">
                            <input checked=\"checked\" id=\"codeLookupCaseSensitive\" type=\"checkbox\" value=\"true\"/>
                            <span>Case sensitive</span>
                            <swa:Space/>
                            <span class=\"text-danger\">(Faster)</span>
                        </div>
                        <button class=\"btn btn-primary\" onclick=\"swa.load('codeLookupResults', {code:'&quot;' + $('#codeLookupInput').val() + '&quot;^^xsd:string', ignoreCase: !$('#codeLookupCaseSensitive').prop('checked')})\">Search</button>
                    </swa:LabeledElement>
                </div>
            </swa:Window>
            <swa:Window arg:id=\"codeLookupResultsWindow\" arg:layoutPanel=\"center\" arg:title=\"Search Results\">
                <ui:loadable ui:loadId=\"codeLookupResults\" ui:loadOnDemand=\"{= true }\">
                    <ui:call arg:code=\"{= ?code }\" ui:template=\"{= IF(?ignoreCase, rdmprojects:FindCodeIgnoreCase, rdmprojects:FindCode) }\">
                        <div class=\"rdmprojects-code-lookup-home-page-tab-results\">{= spr:rowCount(?rs) } result{= IF((spr:rowCount(?rs) = 1), ?none, \"s\") }</div>
                        <ul>
                            <ui:forEach ui:resultSet=\"{= ?rs }\">
                                <li>
                                    <a href=\"javascript:void(0)\" onclick=\"swa.loadWindow('codeLookupViewFormGadget', { 'resource': '&lt;{= ?instance }&gt;', queryGraph : '&lt;{= ui:graphWithImports(?projectGraph) }&gt;' })\">{= ?instanceLabel } (type: {= ?typeLabel }) in dataset {= teamwork:projectLabel(?projectGraph) }</a>
                                    <span>&nbsp;</span>
                                    <a href=\"{= teamwork:graphIdFromGraph(?projectGraph) }.editor?resourceType={= ui:encodeURL(?type) }&amp;preselectedResource={= ui:encodeURL(?instance) }\">(Details)</a>
                                </li>
                            </ui:forEach>
                        </ul>
                    </ui:call>
                </ui:loadable>
            </swa:Window>
        </swa:BorderLayout>
        <swa:Window arg:id=\"codeLookupViewFormGadget\" arg:layoutPanel=\"center\" arg:title=\"Selected Item\">
            <ui:if ui:condition=\"{= bound(?resource) }\">
                <ui:setContext ui:queryGraph=\"{= ?queryGraph }\" ui:varName=\"createLinkFunction\" ui:varValue=\"{= swa:createNoLink }\">
                    <ui:setContext ui:varName=\"createEventLinkEvent\" ui:varValue=\"{= ?resourceSelectedEvent }\">
                        <swa:WindowTitleSetter arg:title=\"{= ui:label(?resource) } ({= ui:label(spl:object(?resource, rdf:type)) })\"/>
                        <swa:ViewForm arg:resource=\"{= ?resource }\" arg:showURI=\"{= ?showURI }\"/>
                    </ui:setContext>
                </ui:setContext>
            </ui:if>
        </swa:Window>
    </swa:BorderLayout>
</teamwork:Chrome>
"""^^ui:Literal ;
  rdfs:comment "Can be used to search for a code across all Reference Datasets." ;
  rdfs:label "Find Code" ;
  rdfs:subClassOf teamwork:HomePageTabs ;
.
rdmprojects:ConnectionsPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex -2 ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:group letrs:cs=\"{#
            SELECT ?property ?propertyLabel ?class ?classLabel
            WHERE {
                {
                    ?projectGraph teamwork:mainClass ?mainClass .
                    ?main (rdfs:subClassOf)* ?mainClass .
                    ?property spl:relevantPropertyAtClass ?main .
                    FILTER (!swa:isHiddenProperty(?property)) .
                    FILTER (?property NOT IN (rdf:type)) .
                } .
                BIND (swa:localRangeAtClass(?main, ?property) AS ?class) .
                FILTER (isIRI(?class) &amp;&amp; (!swa:isDatatypeRange(?class))) .
                FILTER (?class NOT IN (rdfs:Resource, owl:Thing)) .
                FILTER EXISTS {
                    ?class (rdfs:subClassOf)* ?superClass .
                    ?otherVocab teamwork:mainClass ?superClass .
                    FILTER (?otherVocab != ?projectGraph) .
                } .
                BIND (ui:label(?property) AS ?propertyLabel) .
                BIND (ui:label(?class) AS ?classLabel) .
            }
            ORDER BY (?classLabel) (?propertyLabel) }\">
        <ui:if ui:condition=\"{= !spr:isEmpty(?cs) }\">
            <teamwork:ActionLink arg:comment=\"This {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } has relationships to data in other asset collections:\" arg:faIcon=\"fa-share-alt\" arg:title=\"Connections\">
                <ul>
                    <ui:forEach ui:indexVar=\"index\" ui:resultSet=\"{= ?cs }\">
                        <li>
                            <strong title=\"{= ?class }\">{= ?classLabel }</strong>
                            <span> (via property </span>
                            <em title=\"{= ?property }\">{= ?propertyLabel }</em>
                            <span>) in </span>
                            <ui:forEach ui:resultSet=\"{#
                                    SELECT ?vocabulary ?vocabularyLabel
                                    WHERE {
                                        ?class (rdfs:subClassOf)* ?superClass .
                                        ?vocabulary teamwork:mainClass ?superClass .
                                        FILTER (?vocabulary != ?projectGraph) .
                                        BIND (teamwork:projectLabel(?vocabulary) AS ?vocabularyLabel) .
                                    }
                                    ORDER BY (?vocabularyLabel) }\" ui:separator=\", \">
                                <a href=\"{= teamwork:editorLink(?vocabulary) }\">{= ?vocabularyLabel }</a>
                            </ui:forEach>
                        </li>
                    </ui:forEach>
                </ul>
            </teamwork:ActionLink>
        </ui:if>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Connections plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
rdmprojects:CreateProjectPage
  a ui:NodeClass ;
  ui:prototype """
<datagraph:CreateProjectPage arg:noUriOptions=\"true\" ui:args=\"*\"/>
"""^^ui:Literal ;
  rdfs:comment "The form for creating a new reference dataset project" ;
  rdfs:label "Reference Dataset create project page" ;
  rdfs:subClassOf teamwork:CreateProjectPages ;
.
rdmprojects:DeepLinkViewer
  a swa:ObjectViewerClass ;
  ui:private true ;
  ui:prototype """
<div class=\"swa-shifted-label\">
    <a href=\"{= teamwork:graphIdFromGraph(?subject) }.editor?resourceType={= ui:encodeURL(?object) }\" title=\"Open {= ?object } in a new Window\">{= ui:label(?object) }</a>
</div>
"""^^ui:Literal ;
  rdfs:comment "Hyperlinks to a view of the instance in the editor, opening a new window." ;
  rdfs:label "Deep link viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
rdmprojects:DisplayDataFacts
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseURI ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI of the query graph (the EVN data store)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The predicate to display." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:viewWidget ;
      spl:valueType swa:ObjectViewer ;
      rdfs:comment "The preferred widget if in view mode." ;
    ] ;
  ui:prototype """
<ui:call arg:baseURI=\"{= ?baseURI }\" arg:predicate=\"{= ?predicate }\" ui:template=\"{= rdmprojects:FindFacts }\" ui:varName=\"factrs\">
    <ui:if ui:condition=\"{= spr:rowCount(?factrs) &gt; 0 }\">
        <swa:ObjectsEnum arg:label=\"{= ?label }\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
            <ui:forEach ui:resultSet=\"{= ?factrs }\">
                <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:label=\"{= CONCAT(ui:label(?predicate), &quot; (&quot;, ui:label(?factRsc), &quot;)&quot;) }\" arg:predicate=\"{= ?predicate }\" arg:subject=\"{= ?factRsc }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
            </ui:forEach>
        </swa:ObjectsEnum>
    </ui:if>
</ui:call>
"""^^ui:Literal ;
  rdfs:label "Display data facts" ;
  rdfs:subClassOf swa:ObjectGroupElements ;
.
rdmprojects:EditableImports
  a teamwork:EditableImportsTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "graph" ;
          ]
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "?0" ;
                      ] ;
                    sp:predicate tops:files ;
                    sp:subject [
                        sp:varName "file" ;
                      ] ;
                  ]
                  [
                    sp:object "/" ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?1" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?0" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object [
                        sp:varName "?2" ;
                      ] ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?1" ;
                      ] ;
                  ]
                  [
                    sp:object true ;
                    sp:predicate rdf:first ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    sp:object () ;
                    sp:predicate rdf:rest ;
                    sp:subject [
                        sp:varName "?2" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a smf:baseURI ;
                        sp:arg1 [
                            sp:varName "file" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:and ;
                        sp:arg1 [
                            a sp:ne ;
                            sp:arg1 [
                                sp:varName "graph" ;
                              ] ;
                            sp:arg2 [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 [
                            a teamwork:isImportableGraph ;
                            arg:file [
                                sp:varName "file" ;
                              ] ;
                            arg:graph [
                                sp:varName "graph" ;
                              ] ;
                          ] ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://spinrdf.org/spl> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:NamedGraph ;
                    sp:elements (
                        [
                          sp:object [
                              sp:varName "graph" ;
                            ] ;
                          sp:predicate teamwork:importableSystemGraph ;
                          sp:subject [
                              sp:varName "any" ;
                            ] ;
                        ]
                      ) ;
                    sp:graphNameNode ui:graph ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://www.w3.org/2004/02/skos/core> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    a sp:Bind ;
                    sp:expression <http://topbraid.org/rdmfact> ;
                    sp:variable [
                        sp:varName "graph" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate teamwork:readableExampleVocabularies ;
                    sp:subject "/sample.teamwork.topbraidlive.org/" ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "graph" ;
                      ] ;
                    sp:predicate owl:imports ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                )
              ) ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "graph" ;
                  ] ;
                sp:arg2 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a teamwork:projectLabel ;
                    arg:projectGraph [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg2 [
                    a spl:objectInGraph ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                    sp:arg2 rdfs:label ;
                    sp:arg3 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
                sp:arg3 [
                    a xsd:string ;
                    sp:arg1 [
                        sp:varName "graph" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Editable imports" ;
  rdfs:subClassOf teamwork:EditableImportsTemplates ;
.
rdmprojects:FindCode
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "instanceLabel" ;
          ]
          [
            sp:varName "typeLabel" ;
          ]
          [
            sp:varName "projectGraph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "projectGraph" ;
          ]
          [
            sp:varName "instance" ;
          ]
          [
            sp:varName "instanceLabel" ;
          ]
          [
            sp:varName "type" ;
          ]
          [
            sp:varName "typeLabel" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate teamwork:readableGraphsUnderTeamControl ;
              sp:subject () ;
            ]
            [
              sp:object [
                  sp:varName "projectGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "teamGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a ui:graphWithImports ;
                  sp:arg1 [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "wi" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      a teamwork:getProjectType ;
                      arg:projectGraph [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:arg2 rdmprojects:ProjectType ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate rdmprojects:primaryKeyProperties ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:coalesce ;
                sp:arg1 [
                    a rdmprojects:primaryKeyDatatype ;
                    arg:predicate [
                        sp:varName "predicate" ;
                      ] ;
                    arg:projectGraph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 xsd:string ;
              ] ;
            sp:variable [
                sp:varName "datatype" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spif:cast ;
                arg:datatype [
                    sp:varName "datatype" ;
                  ] ;
                sp:arg1 [
                    sp:varName "code" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "matchValue" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "matchValue" ;
                    ] ;
                  sp:predicate [
                      sp:varName "predicate" ;
                    ] ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "type" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "instance" ;
                  ] ;
                arg:resourceGraph [
                    sp:varName "wi" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "instanceLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "type" ;
                  ] ;
                arg:resourceGraph [
                    sp:varName "wi" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "typeLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:code ;
      spl:valueType xsd:string ;
      rdfs:comment "The string representation of the code." ;
    ] ;
  rdfs:comment "Finds a given code across all accessible datasets." ;
  rdfs:label "Find code" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
rdmprojects:FindCodeIgnoreCase
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "instanceLabel" ;
          ]
          [
            sp:varName "typeLabel" ;
          ]
          [
            sp:varName "projectGraph" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "projectGraph" ;
          ]
          [
            sp:varName "instance" ;
          ]
          [
            sp:varName "instanceLabel" ;
          ]
          [
            sp:varName "type" ;
          ]
          [
            sp:varName "typeLabel" ;
          ]
        ) ;
      sp:where (
          (
            [
              sp:object [
                  sp:varName "?0" ;
                ] ;
              sp:predicate teamwork:readableGraphsUnderTeamControl ;
              sp:subject () ;
            ]
            [
              sp:object [
                  sp:varName "projectGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "?1" ;
                ] ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?0" ;
                ] ;
            ]
            [
              sp:object [
                  sp:varName "teamGraph" ;
                ] ;
              sp:predicate rdf:first ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              sp:object () ;
              sp:predicate rdf:rest ;
              sp:subject [
                  sp:varName "?1" ;
                ] ;
            ]
            [
              a sp:Bind ;
              sp:expression [
                  a ui:graphWithImports ;
                  sp:arg1 [
                      sp:varName "projectGraph" ;
                    ] ;
                ] ;
              sp:variable [
                  sp:varName "wi" ;
                ] ;
            ]
            [
              a sp:Filter ;
              sp:expression [
                  a sp:eq ;
                  sp:arg1 [
                      a teamwork:getProjectType ;
                      arg:projectGraph [
                          sp:varName "projectGraph" ;
                        ] ;
                    ] ;
                  sp:arg2 rdmprojects:ProjectType ;
                ] ;
            ]
          )
          [
            sp:object [
                sp:varName "predicate" ;
              ] ;
            sp:predicate rdmprojects:primaryKeyProperties ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "value" ;
                    ] ;
                  sp:predicate [
                      sp:varName "predicate" ;
                    ] ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "type" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "instance" ;
                    ] ;
                ]
                [
                  a sp:Filter ;
                  sp:expression [
                      a sp:or ;
                      sp:arg1 [
                          a sp:eq ;
                          sp:arg1 [
                              a sp:lcase ;
                              sp:arg1 [
                                  a sp:str ;
                                  sp:arg1 [
                                      sp:varName "value" ;
                                    ] ;
                                ] ;
                            ] ;
                          sp:arg2 [
                              a sp:lcase ;
                              sp:arg1 [
                                  a sp:str ;
                                  sp:arg1 [
                                      sp:varName "code" ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:arg2 [
                          a sp:and ;
                          sp:arg1 [
                              a sp:strends ;
                              sp:arg1 [
                                  a sp:str ;
                                  sp:arg1 [
                                      sp:varName "code" ;
                                    ] ;
                                ] ;
                              sp:arg2 "*" ;
                            ] ;
                          sp:arg2 [
                              a sp:strstarts ;
                              sp:arg1 [
                                  a sp:lcase ;
                                  sp:arg1 [
                                      a sp:str ;
                                      sp:arg1 [
                                          sp:varName "value" ;
                                        ] ;
                                    ] ;
                                ] ;
                              sp:arg2 [
                                  a sp:lcase ;
                                  sp:arg1 [
                                      a sp:substr ;
                                      sp:arg1 [
                                          a sp:str ;
                                          sp:arg1 [
                                              sp:varName "code" ;
                                            ] ;
                                        ] ;
                                      sp:arg2 1 ;
                                      sp:arg3 [
                                          a sp:sub ;
                                          sp:arg1 [
                                              a sp:strlen ;
                                              sp:arg1 [
                                                  a sp:str ;
                                                  sp:arg1 [
                                                      sp:varName "code" ;
                                                    ] ;
                                                ] ;
                                            ] ;
                                          sp:arg2 1 ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "instance" ;
                  ] ;
                arg:resourceGraph [
                    sp:varName "wi" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "instanceLabel" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a swa:labelInGraph ;
                arg:resource [
                    sp:varName "type" ;
                  ] ;
                arg:resourceGraph [
                    sp:varName "wi" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "typeLabel" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:code ;
      spl:valueType xsd:string ;
      rdfs:comment "The string representation of the code." ;
    ] ;
  rdfs:comment "Finds a given code (ignoring case) across all accessible datasets." ;
  rdfs:label "Find code ignore case" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
rdmprojects:FindFacts
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            a ui:label ;
            sp:arg1 [
                sp:varName "factRsc" ;
              ] ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "predicate" ;
          ]
          [
            sp:varName "factRsc" ;
          ]
        ) ;
      sp:where (
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "fact" ;
                    ] ;
                  sp:predicate [
                      sp:varName "predicate" ;
                    ] ;
                  sp:subject [
                      sp:varName "factRsc" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "baseURI" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:ne ;
                sp:arg1 [
                    sp:varName "factRsc" ;
                  ] ;
                sp:arg2 [
                    sp:varName "baseURI" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:baseURI ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The base URI of the graph to query." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The property values are being queried." ;
    ] ;
  rdfs:label "Find facts" ;
  rdfs:subClassOf spin:SelectTemplates ;
.
rdmprojects:MainClassSelectEditor
  a swa:ObjectEditorClass ;
  ui:prototype """
<swa:AutoComplete arg:class=\"swa-text-field\" arg:filterFunction=\"{= teamwork:filterPotentialMainClasses }\" arg:id=\"new-{= ?uid }\" arg:initialValue=\"{= ?object }\" arg:menuFilterNode=\"{= ?predicate }\" arg:placeholder=\"Select main class\" arg:type=\"{= rdfs:Class }\"/>
"""^^ui:Literal ;
  rdfs:comment "An auto-complete for all suitable classes that could become teamwork:mainClass." ;
  rdfs:label "teamwork:mainClass select editor" ;
  rdfs:subClassOf swa:ObjectEditor ;
.
rdmprojects:MetadataFormBody
  a ui:ResourceViewClass ;
  ui:prototype """
<ui:group default:hideIfEmpty=\"{= true }\" default:subject=\"{= ?resource }\" let:isExternal=\"{= spl:object(?resource, metadata:isExternalDataset) }\" let:projectId=\"{= spl:object(?resource, rdfs:label) }\">
    <swa:ObjectsEnum arg:alwaysDisplay=\"{= true }\" arg:label=\"Overview\">
        <swa:Object arg:editWidget=\"{= swa:PlainTextFieldEditor }\" arg:predicate=\"{= metadata:identifier }\"/>
        <swa:Object arg:predicate=\"{= metadata:officialName }\"/>
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= metadata:purpose }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
        <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(teamwork:platformGovernanceGraph())) }\">
            <swa:Object arg:label=\"subject area\" arg:predicate=\"{= edg:subjectArea }\"/>
        </ui:setContext>
        <swa:Object arg:editWidget=\"{= swa:PlainTextFieldEditor }\" arg:predicate=\"{= metadata:version }\"/>
        <swa:LabeledElement arg:label=\"last updated:\">
            <div class=\"swa-object-row swa-shifted-label\">{= ui:label(teamwork:lastChangeTime(?resource)) }</div>
        </swa:LabeledElement>
        <swa:Object arg:hideInModes=\"edit\" arg:predicate=\"{= metadata:dateGenerated }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Description of {= ?projectId }\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Object arg:label=\"short description\" arg:predicate=\"{= rdfs:comment }\"/>
        <swa:Object arg:editWidget=\"{= swa:RichTextEditor }\" arg:label=\"long description\" arg:predicate=\"{= elements:description }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
        <swa:Objects arg:predicate=\"{= metadata:basedOn }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Dataset Status\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:status }\"/>
        <swa:Object arg:predicate=\"{= metadata:isEnterprise }\"/>
        <swa:Object arg:predicate=\"{= metadata:effectiveStartDate }\"/>
        <swa:Object arg:predicate=\"{= metadata:effectiveEndDate }\"/>
        <swa:Object arg:predicate=\"{= metadata:isExternalDataset }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Reference Dataset Facts\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= rdmfact:fact }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
    </swa:ObjectsEnum>
    <rdmprojects:DisplayDataFacts arg:baseURI=\"{= ?resource }\" arg:label=\"Reference Data Facts\" arg:predicate=\"{= rdmfact:fact }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
    <swa:ObjectsEnum arg:label=\"Onboarding Procedures\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= metadata:onboardingProcedure }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
    </swa:ObjectsEnum>
    <swa:ObjectsEnum arg:label=\"Provisioning Procedures\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= metadata:provisioningProcedure }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
    </swa:ObjectsEnum>
    <ui:if ui:condition=\"{= ?isExternal }\">
        <swa:ObjectsEnum arg:label=\"Subscription\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
            <ui:setContext ui:queryGraph=\"{= ui:unionOfGraphs(ui:currentQueryGraph(), ui:graphWithImports(&lt;http://topbraid.org/metadata&gt;), ui:graphWithImports(teamwork:platformGovernanceGraph())) }\">
                <swa:Object arg:predicate=\"{= metadata:standardizedBy }\"/>
                <swa:Object arg:predicate=\"{= metadata:maintainedBy }\"/>
                <swa:Object arg:predicate=\"{= metadata:sourcedFrom }\"/>
            </ui:setContext>
            <swa:Objects arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= metadata:subscriptionNote }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
            <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:accessPaymentType }\"/>
            <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:changeFrequency }\"/>
            <swa:Object arg:editWidget=\"{= swa:RichTextEditor }\" arg:predicate=\"{= metadata:changeFrequencyNotes }\" arg:viewWidget=\"{= swa:RichTextViewer }\"/>
            <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:updateFrequency }\"/>
            <swa:Object arg:editWidget=\"{= swa:InstancesSelectEditor }\" arg:predicate=\"{= metadata:accessToUpdatesPaymentType }\"/>
            <swa:Object arg:predicate=\"{= metadata:updateFileURL }\" arg:viewWidget=\"{= rdmprojects:URLViewer }\"/>
        </swa:ObjectsEnum>
    </ui:if>
    <swa:ObjectsEnum arg:label=\"Reference\" arg:open=\"{= false }\" arg:openable=\"{= true }\">
        <swa:Objects arg:predicate=\"{= metadata:referenceURL }\" arg:viewWidget=\"{= rdmprojects:URLViewer }\"/>
    </swa:ObjectsEnum>
</ui:group>
"""^^ui:Literal ;
  rdfs:subClassOf swa:FormBody ;
.
rdmprojects:NavigationTreeChildSelectTemplate
  a teamwork:NavigationTreeSelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "link" ;
          ]
          [
            sp:varName "icon" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "relatedClass" ;
              ] ;
            sp:predicate teamwork:relatedClass ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a ui:label ;
                sp:arg1 [
                    sp:varName "relatedClass" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a sp:concat ;
                sp:arg1 [
                    a teamwork:editorLink ;
                    arg:projectGraph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 "?resourceType=" ;
                sp:arg3 [
                    a ui:encodeURL ;
                    sp:arg1 [
                        a sp:str ;
                        sp:arg1 [
                            sp:varName "relatedClass" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "link" ;
              ] ;
          ]
          [
            a sp:Bind ;
            sp:expression [
                a spl:objectInGraph ;
                sp:arg1 [
                    a teamwork:getProjectType ;
                    arg:projectGraph [
                        sp:varName "projectGraph" ;
                      ] ;
                  ] ;
                sp:arg2 teamwork:projectTypeIcon ;
                sp:arg3 ui:graph ;
              ] ;
            sp:variable [
                sp:varName "icon" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "This is only ever called for the related classes. Produces links to the related classes." ;
  rdfs:label "Navigation tree child select template" ;
  rdfs:subClassOf teamwork:NavigationTreeSelectTemplates ;
.
rdmprojects:NavigationTreeRootSelectTemplate
  a teamwork:NavigationTreeSelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "child" ;
          ]
          [
            sp:varName "link" ;
          ]
          [
            sp:varName "label" ;
          ]
          [
            sp:varName "icon" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Union ;
            sp:elements (
                (
                  [
                    sp:object [
                        sp:varName "rootClass" ;
                      ] ;
                    sp:predicate teamwork:mainClass ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "relatedClass" ;
                                ] ;
                              sp:predicate teamwork:relatedClass ;
                              sp:subject [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a sp:concat ;
                        sp:arg1 "Main entity: " ;
                        sp:arg2 [
                            a ui:label ;
                            sp:arg1 [
                                sp:varName "rootClass" ;
                              ] ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a teamwork:editorLink ;
                        arg:projectGraph [
                            sp:varName "projectGraph" ;
                          ] ;
                      ] ;
                    sp:variable [
                        sp:varName "link" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        a spl:objectInGraph ;
                        sp:arg1 [
                            a teamwork:getProjectType ;
                            arg:projectGraph [
                                sp:varName "projectGraph" ;
                              ] ;
                          ] ;
                        sp:arg2 teamwork:projectTypeIcon ;
                        sp:arg3 ui:graph ;
                      ] ;
                    sp:variable [
                        sp:varName "icon" ;
                      ] ;
                  ]
                )
                (
                  [
                    sp:object [
                        sp:varName "rootClass" ;
                      ] ;
                    sp:predicate teamwork:mainClass ;
                    sp:subject [
                        sp:varName "projectGraph" ;
                      ] ;
                  ]
                  [
                    a sp:Filter ;
                    sp:expression [
                        a sp:exists ;
                        sp:elements (
                            [
                              sp:object [
                                  sp:varName "relatedClass" ;
                                ] ;
                              sp:predicate teamwork:relatedClass ;
                              sp:subject [
                                  sp:varName "projectGraph" ;
                                ] ;
                            ]
                          ) ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression [
                        sp:varName "rootClass" ;
                      ] ;
                    sp:variable [
                        sp:varName "child" ;
                      ] ;
                  ]
                  [
                    a sp:Bind ;
                    sp:expression "Related entities" ;
                    sp:variable [
                        sp:varName "label" ;
                      ] ;
                  ]
                )
              ) ;
          ]
        ) ;
    ] ;
  rdfs:comment "If a mainClass exists and at least one relatedClass, then this produces a top-level hierarchy with a link to the main class and a submenu for the related classes." ;
  rdfs:label "Navigation tree root select template" ;
  rdfs:subClassOf teamwork:NavigationTreeSelectTemplates ;
.
rdmprojects:NewCodeCreatedNotification
  a teamwork:RegularEditNotification ;
  arg:expression [
      a sp:exists ;
      sp:elements (
          [
            sp:object [
                sp:varName "mainClass" ;
              ] ;
            sp:predicate teamwork:mainClass ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "mainClass" ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "new" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode ui:addedGraph ;
          ]
        ) ;
    ] ;
  ui:prototype """
<div>
    <ui:forEach let:label=\"{= swa:labelInGraph(?predicate, ui:graph) }\" ui:resultSet=\"{#
            SELECT ?subject
            WHERE {
                ?projectGraph teamwork:mainClass ?mainClass .
                GRAPH ui:addedGraph {
                    ?subject a ?mainClass .
                } .
            } }\">
        <h3>New code created: {= ui:label(?subject) }</h3>
    </ui:forEach>
</div>
"""^^ui:Literal ;
  rdfs:comment "Sent out to the RACI roles of the dataset when a new instance of the main class has been created." ;
  rdfs:label "New code created" ;
  rdfs:subClassOf teamwork:RegularEditNotifications ;
.
rdmprojects:OntologyAnnotationCompletenessDashboardGadget
  a teamwork:DashboardGadget ;
  teamwork:dashboardGadgetIndex 40 ;
  teamwork:dashboardSection teamwork:InformationDashboardSection ;
  ui:prototype """
<ui:setContext let:class=\"{= spl:objectInGraph(?projectGraph, teamwork:mainClass, ?projectGraph) }\" ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:if ui:condition=\"{= bound(?class) }\">
        <ui:group let:completeCount=\"{#
                SELECT (COUNT(DISTINCT ?p) AS ?result)
                WHERE {
                    {
                        ?class (rdfs:subClassOf)* ?c .
                        FILTER ((?c != owl:Thing) &amp;&amp; (?c != rdfs:Resource)) .
                    } .
                    ?p rdfs:domain ?c .
                    ?p rdfs:label ?someLabel .
                    ?p rdfs:comment ?someComment .
                } }\" let:propertyCount=\"{#
                SELECT (COUNT(?p) AS ?result)
                WHERE {
                    ?class (rdfs:subClassOf)* ?c .
                    FILTER ((?c != owl:Thing) &amp;&amp; (?c != rdfs:Resource)) .
                    ?p rdfs:domain ?c .
                } }\">
            <teamwork:DashboardGadgetContainer arg:iconName=\"{= IF(((?propertyCount - ?completeCount) &gt; 0), &quot;Warning&quot;, &quot;OK&quot;) }\" arg:label=\"Semantic Analysis of {= ui:label(?class) }: {= floor(((?completeCount / ?propertyCount) * 100)) }%\">
                <ui:insert ui:into=\"subtitle\">
                    <div>The main entity (class) of this dataset has {= ?propertyCount } properties.</div>
                    <div>{= ?propertyCount - ?completeCount } of these properties lack label or description.</div>
                </ui:insert>
                <ui:insert ui:into=\"body\">
                    <swa:DonutChart arg:height=\"{= 140 }\" arg:resultSet='{#
                            SELECT ?value ?label
                            WHERE {
                                {
                                    BIND (?completeCount AS ?value) .
                                    BIND (CONCAT(str(?value), \" complete\") AS ?label) .
                                }
                                UNION
                                {
                                    BIND ((?propertyCount - ?completeCount) AS ?value) .
                                    BIND (CONCAT(str(?value), \" incomplete\") AS ?label) .
                                } .
                            } }' arg:seriesColors=\"['#6AC20A','#E0E0E0']\" arg:showLegend=\"{= true }\" arg:width=\"{= 300 }\"/>
                </ui:insert>
            </teamwork:DashboardGadgetContainer>
        </ui:group>
    </ui:if>
    <ui:else>
        <teamwork:DashboardGadgetContainer arg:iconName=\"Unknown\" arg:label=\"Semantic Analysis\">
            <ui:insert ui:into=\"subtitle\">
                <div>No main entity has been selected yet.</div>
            </ui:insert>
        </teamwork:DashboardGadgetContainer>
    </ui:else>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Ontology annotation completeness dashboard gadget" ;
  rdfs:subClassOf teamwork:DashboardGadgets ;
.
rdmprojects:ProjectType
  a teamwork:ProjectType ;
  teamwork:createProjectPageClass rdmprojects:CreateProjectPage ;
  teamwork:dashboardGadget rdmprojects:OntologyAnnotationCompletenessDashboardGadget ;
  teamwork:dashboardGadget rdmprojects:SubscriptionInfoCompletenessDashboardGadget ;
  teamwork:dashboardGadget tasks:TaskStatusDashboardGadget ;
  teamwork:dashboardGadget teamwork:CompletenessDashboardGadget ;
  teamwork:dashboardGadget teamwork:DescriptiveMetadataCompletenessDashboardGadget ;
  teamwork:dashboardGadget teamwork:TagStatusDashboardGadget ;
  teamwork:dashboardGadget teamwork:ValidationDashboardGadget ;
  teamwork:deletePlugin teamwork:RemoveFromLuceneIndexDeletePlugin ;
  teamwork:editableImportsTemplate rdmprojects:EditableImports ;
  teamwork:editorProjectTabLabel "Codes" ;
  teamwork:hideDefaultNamespaceInput true ;
  teamwork:isDataGraphProjectType true ;
  teamwork:isReadOnlyTypeFunction rdmprojects:isReadOnlyType ;
  teamwork:navigationTreeChildSelectTemplate rdmprojects:NavigationTreeChildSelectTemplate ;
  teamwork:navigationTreeRootSelectTemplate rdmprojects:NavigationTreeRootSelectTemplate ;
  teamwork:owlImports "http://topbraid.org/metadata" ;
  teamwork:owlImports "http://topbraid.org/teamworkconstraints" ;
  teamwork:pluralLabel "Reference Datasets" ;
  teamwork:projectEditorClass edg:ResultsModelEditor ;
  teamwork:projectPlugin rdmprojects:ConnectionsPlugin ;
  teamwork:projectPlugin rdmprojects:PropertyDefinitionsPlugin ;
  teamwork:projectPlugin rdmprojects:SetMainClassPlugin ;
  teamwork:projectPlugin crosswalkprojects:CrosswalksGeneralPlugin ;
  teamwork:projectPlugin savedQueries:ExportSavedSPARQLQueriesPlugin ;
  teamwork:projectPlugin savedQueries:SPARQLEndpointPlugin ;
  teamwork:projectPlugin teamwork:ComparisonReportPlugin ;
  teamwork:projectPlugin teamwork:ExportSavedSearchPlugin ;
  teamwork:projectPlugin teamwork:GraphURIPlugin ;
  teamwork:projectPlugin teamwork:ImportedByGeneralPlugin ;
  teamwork:projectPlugin teamwork:ImportsGeneralPlugin ;
  teamwork:projectPlugin teamwork:LocalSearchManagePlugin ;
  teamwork:projectPlugin teamwork:NotificationsManagePlugin ;
  teamwork:projectPlugin teamwork:ProblemsAndSuggestionsReportPlugin ;
  teamwork:projectPlugin teamwork:PublishExportPlugin ;
  teamwork:projectPlugin teamwork:RDFFileImporterPlugin ;
  teamwork:projectPlugin teamwork:ScriptBasedImportPlugin ;
  teamwork:projectPlugin teamwork:SetImportSubjectAreaGraphsPlugin ;
  teamwork:projectPlugin teamwork:SetPerResourceGovernanceRolesManagePlugin ;
  teamwork:projectPlugin teamwork:SetSimpleSearchModePlugin ;
  teamwork:projectPlugin teamwork:SpreadsheetImportPlugin ;
  teamwork:projectPlugin teamwork:SpreadsheetUsingTemplateImportPlugin ;
  teamwork:projectPlugin teamwork:StatisticsReportPlugin ;
  teamwork:projectTypeSupportsUsageTab true ;
  teamwork:projectTypeWeight 1 ;
  teamwork:singularLabel "Reference Dataset" ;
  teamwork:supportedNotification rdmprojects:NewCodeCreatedNotification ;
  teamwork:supportedNotification tasks:TaskCreatedNotification ;
  teamwork:supportedNotification tasks:TaskStatusChangedNotification ;
  teamwork:supportedNotification teamwork:AnyCodeStatusChangedNotification ;
  teamwork:supportedNotification teamwork:FileImportedNotification ;
  teamwork:supportedNotification teamwork:SpreadsheetImportedNotification ;
  teamwork:supportedNotification teamwork:TagCreatedNotification ;
  teamwork:supportedNotification teamwork:TagStatusChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyClearedNotification ;
  teamwork:supportedNotification teamwork:VocabularyEffectiveEndDateChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyEffectiveStartDateChangedNotification ;
  teamwork:supportedNotification teamwork:VocabularyStatusChangedNotification ;
  teamwork:vocabularyType rdmprojects:ReferenceDataset ;
  rdfs:comment "Reference Datasets contain reference data or codes - for example, country codes and currency codes. Properties available for the specification of reference data are defined in an ontology that must be included in to a dataset. When creating a dataset you will be asked to select among the ontology classes the main entity (e.g., country, currency) for which you are governing reference data." ;
  rdfs:label "Reference Data project type" ;
.
rdmprojects:ProjectWarnings
  a ui:NodeClass ;
  ui:prototype """
<ui:if ui:condition=\"{= teamwork:getProjectType(?projectGraph) = rdmprojects:ProjectType }\">
    <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
        <ui:group let:mainClass=\"{= spl:object(teamwork:currentMasterGraph(), teamwork:mainClass) }\">
            <ui:if ui:condition=\"{= !bound(?mainClass) }\">
                <p class=\"text-danger\">
                    <i class=\"fa fa-exclamation-triangle\"/>
                    <swa:Space/>
                    <span>This {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } does not yet define a main class.</span>
                </p>
            </ui:if>
            <ui:else>
                <ui:if ui:condition=\"{= !swa:hasPrimaryKey(?mainClass) }\">
                    <p class=\"text-danger\">
                        <i class=\"fa fa-exclamation-triangle\"/>
                        <swa:Space/>
                        <span>The selected main class {= ui:label(?mainClass) } of this {= teamwork:singularProjectTypeLabel(teamwork:getProjectType(?projectGraph)) } does not define a primary key.</span>
                    </p>
                </ui:if>
            </ui:else>
        </ui:group>
    </ui:setContext>
</ui:if>
"""^^ui:Literal ;
  rdfs:label "Project warnings" ;
  rdfs:subClassOf teamwork:ProjectWarnings ;
.
rdmprojects:PropertyDefinitionsPlugin
  a teamwork:GeneralPlugin ;
  teamwork:pluginIndex 90 ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <teamwork:ActionLink arg:comment=\"Click the checkboxes to expose a property as a property value set.\" arg:faIcon=\"fa-scroll\" arg:title=\"Property Definitions\" let:mainClass=\"{= spl:object(?projectGraph, teamwork:mainClass) }\" let:manager=\"{= teamwork:currentUserIsProjectManager(?projectGraph) }\">
        <ui:if ui:condition=\"{= bound(?mainClass) }\">
            <ui:loadable ui:loadLater=\"{= true }\">
                <ui:call arg:mainClass=\"{= ?mainClass }\" ui:template=\"{= rdmprojects:RelevantProperties }\">
                    <ui:if ui:condition=\"{= spr:rowCount(?rs) &gt; 0 }\">
                        <table class=\"datasetapp-metadata-properties-table\">
                            <thead>
                                <tr>
                                    <th class=\"column-header swa-text-align-center\" scope=\"column\">Property</th>
                                    <th class=\"column-header swa-text-align-center\" scope=\"column\">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <ui:forEach ui:resultSet=\"{= ?rs }\">
                                    <tr class=\"property\" let:pvs=\"{#
                                            SELECT ?set
                                            WHERE {
                                                ?set edg:class ?mainClass .
                                                ?set edg:graph ?projectGraph .
                                                ?set edg:property ?property .
                                                ?set a edg:PropertyValueSet .
                                            } }\">
                                        <td class=\"property-meta property-toggle swa-shifted-label\">
                                            <div class=\"checkbox\">
                                                <input checked=\"{= IF(bound(?pvs), &quot;checked&quot;, ?none) }\" disabled=\"{= IF(((!?manager) || (bound(?pvs) &amp;&amp; rdmprojects:isPropertyValueSetUsed(?pvs))), &quot;disabled&quot;, ?none) }\" type=\"checkbox\">
                                                    <ui:handle arg:checked=\"$(this).is(':checked')\" ui:event=\"onclick\">
                                                        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(teamwork:masterGraphForCurrentUser(?projectGraph)) }\">
                                                            <ui:if ui:condition=\"{= ?checked }\">
                                                                <ui:transaction ui:logMessage=\"Create edg:PropertyValueSet for {= ui:label(?property) } at {= ui:label(?mainClass) }\">
                                                                    <ui:update ui:updateQuery=\"{!
                                                                            INSERT {
                                                                                ?set a edg:PropertyValueSet .
                                                                                ?set rdfs:label ?rdfsLabel .
                                                                                ?set edg:graph ?projectGraph .
                                                                                ?set edg:class ?mainClass .
                                                                                ?set edg:property ?property .
                                                                            }
                                                                            WHERE {
                                                                                BIND (UUID() AS ?set) .
                                                                                BIND (CONCAT(ui:label(?property), &quot; of &quot;, ui:label(?mainClass), &quot; from &quot;, teamwork:projectLabel(?projectGraph)) AS ?rdfsLabel) .
                                                                            } }\"/>
                                                                </ui:transaction>
                                                            </ui:if>
                                                            <ui:else>
                                                                <ui:transaction ui:logMessage=\"Delete edg:PropertyValueSet for {= ui:label(?property) } at {= ui:label(?mainClass) }\">
                                                                    <ui:update ui:updateQuery=\"{!
                                                                            DELETE {
                                                                                ?set ?setP ?setO .
                                                                            }
                                                                            WHERE {
                                                                                ?set a edg:PropertyValueSet .
                                                                                ?set edg:graph ?projectGraph .
                                                                                ?set edg:class ?mainClass .
                                                                                ?set edg:property ?property .
                                                                                ?set ?setP ?setO .
                                                                            } }\"/>
                                                                </ui:transaction>
                                                            </ui:else>
                                                        </ui:setContext>
                                                    </ui:handle>
                                                </input>
                                                <div class=\"property-meta property-label\">{= ui:label(?property) }</div>
                                            </div>
                                        </td>
                                        <td class=\"property-meta property-description swa-shifted-label-property-definitions\">
                                            <ui:group let:comment=\"{= spl:object(?property, rdfs:comment) }\">
                                                <ui:if ui:condition=\"{= bound(?comment) }\">
                                                    <swa:RichTextViewer arg:object=\"{= ?comment }\"/>
                                                </ui:if>
                                            </ui:group>
                                        </td>
                                    </tr>
                                </ui:forEach>
                            </tbody>
                        </table>
                    </ui:if>
                </ui:call>
            </ui:loadable>
        </ui:if>
        <ui:else>
            <p class=\"text-danger\">No main class has been set yet.</p>
        </ui:else>
    </teamwork:ActionLink>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Property definitions plugin" ;
  rdfs:subClassOf teamwork:GeneralPlugins ;
.
rdmprojects:ReferenceDataset
  a rdfs:Class ;
  ui:instanceView """
<rdmprojects:MetadataFormBody arg:resource=\"{= ?this }\" ui:id=\"metadata\"/>
"""^^ui:Literal ;
  rdfs:subClassOf teamwork:Vocabulary ;
.
rdmprojects:RelevantProperties
  a spin:SelectTemplate ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:orderBy (
          [
            sp:varName "label" ;
          ]
        ) ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          (
            (
              [
                a sp:TriplePath ;
                sp:object [
                    sp:varName "domainClass" ;
                  ] ;
                sp:path [
                    a sp:ModPath ;
                    sp:modMax -2 ;
                    sp:modMin 0 ;
                    sp:subPath rdfs:subClassOf ;
                  ] ;
                sp:subject [
                    sp:varName "mainClass" ;
                  ] ;
              ]
              [
                a sp:Filter ;
                sp:expression [
                    a sp:and ;
                    sp:arg1 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "domainClass" ;
                          ] ;
                        sp:arg2 owl:Thing ;
                      ] ;
                    sp:arg2 [
                        a sp:ne ;
                        sp:arg1 [
                            sp:varName "domainClass" ;
                          ] ;
                        sp:arg2 rdfs:Resource ;
                      ] ;
                  ] ;
              ]
            )
            [
              sp:object [
                  sp:varName "property" ;
                ] ;
              sp:predicate swa:directRelevantClassOfProperty ;
              sp:subject [
                  sp:varName "domainClass" ;
                ] ;
            ]
          )
          [
            a sp:Bind ;
            sp:expression [
                a swa:propertyLabelAtClassOrShape ;
                arg:property [
                    sp:varName "property" ;
                  ] ;
                arg:theClassOrShape [
                    sp:varName "mainClass" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:mainClass ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The main class to get the relevant properties of." ;
    ] ;
  spin:private true ;
  rdfs:subClassOf spin:SelectTemplates ;
.
rdmprojects:SetMainClassPlugin
  a teamwork:ManagePlugin ;
  teamwork:pluginIndex 0 ;
  ui:prototype """
<ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:group let:currentMainClass=\"{= spl:object(?projectGraph, teamwork:mainClass) }\" let:projectType=\"{= teamwork:getProjectType(?projectGraph) }\" let:teamGraph=\"{= teamwork:teamGraph(?projectGraph) }\">
        <!--ui:dumpScope ui:message=\"AAA1: datagraph:MainClassManagePlugin\"/-->
        <ui:call ui:template=\"{= teamwork:PotentialMainClasses }\" ui:varName=\"classes\">
            <teamwork:ActionLink arg:comment=\"Please select the main entity (class).\" arg:faIcon=\"fa-exclamation-circle\" arg:title=\"Main Entity (Class) of {= teamwork:projectLabel(?projectGraph) }\">
                <ui:group>
                    <ui:if ui:condition=\"{= spr:isEmpty(?classes) }\">
                        <div class=\"text-danger\">There are no public classes (for GraphQL) declared.</div>
                    </ui:if>
                    <ui:else>
                        <p>
                            <span>Main class:&nbsp;</span>
                            <select class=\"form-control\">
                                <ui:if ui:condition=\"{= !bound(?currentMainClass) }\">
                                    <option/>
                                </ui:if>
                                <ui:forEach ui:resultSet=\"{= ?classes }\">
                                    <option selected=\"{= IF((?currentMainClass = ?class), &quot;selected&quot;, ?none) }\" value=\"&lt;{= ?class }&gt;\">{= ?label }</option>
                                </ui:forEach>
                                <ui:handle arg:value=\"$(this).val() ? $(this).val() : 0\" ui:event=\"onchange\" ui:thenLoadId=\"relatedClasses\">
                                    <ui:setPropertyValue arg:property=\"{= teamwork:mainClass }\" arg:value=\"{= IF((?value != 0), ?value, ?none) }\" ui:this=\"{= ?projectGraph }\"/>
                                </ui:handle>
                            </select>
                        </p>
                        <ui:loadable ui:loadId=\"relatedClasses\">
                            <ui:group let:mc=\"{= spl:object(?projectGraph, teamwork:mainClass) }\">
                                <ui:if ui:condition=\"{= bound(?mc) }\">
                                    <p>Related Classes:</p>
                                    <ul>
                                        <ui:forEach ui:resultSet=\"{#
                                                SELECT ?rc ?rcLabel
                                                WHERE {
                                                    ?projectGraph teamwork:relatedClass ?rc .
                                                    BIND (ui:label(?rc) AS ?rcLabel) .
                                                } }\">
                                            <li title=\"{= ?rc }\">{= ?rcLabel }</li>
                                        </ui:forEach>
                                    </ul>
                                </ui:if>
                            </ui:group>
                        </ui:loadable>
                    </ui:else>
                </ui:group>
            </teamwork:ActionLink>
        </ui:call>
    </ui:group>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:isDefinedBy <http://edg.topbraid.solutions/1.0/project/common> ;
  rdfs:label "Set main class of data set plugin" ;
  rdfs:subClassOf teamwork:ManagePlugins ;
.
rdmprojects:SubscriptionInfoCompletenessDashboardGadget
  a teamwork:DashboardGadget ;
  teamwork:dashboardGadgetIndex 35 ;
  teamwork:dashboardSection teamwork:InformationDashboardSection ;
  ui:prototype """
<ui:setContext let:isExternal=\"{= spl:objectInGraph(?projectGraph, metadata:isExternalDataset, ?projectGraph) }\" let:title=\"External Dataset Profiling\" ui:queryGraph=\"{= ui:graphWithImports(?projectGraph) }\">
    <ui:if ui:condition=\"{= ?isExternal }\">
        <ui:group let:incompleteCount=\"{#
                SELECT (COUNT(DISTINCT ?p) AS ?result)
                WHERE {
                    VALUES ?p {
                        metadata:standardizedBy
                        metadata:maintainedBy
                        metadata:sourcedFrom
                        metadata:subscriptionNote
                        metadata:accessPaymentType
                        metadata:changeFrequency
                        metadata:changeFrequencyNotes
                        metadata:updateFrequency
                        metadata:accessToUpdatesPaymentType
                        metadata:updateFileURL
                    } .
                    FILTER NOT EXISTS {
                        ?projectGraph ?p ?any .
                    } .
                } }\">
            <teamwork:DashboardGadgetContainer arg:iconName=\"{= IF((?incompleteCount &gt; 0), &quot;Warning&quot;, &quot;OK&quot;) }\" arg:label=\"{= ?title }: {= floor((((11 - ?incompleteCount) / 11) * 100)) }%\">
                <ui:insert ui:into=\"subtitle\">
                    <div>{= teamwork:projectLabel(?projectGraph) } is an external dataset.</div>
                    <div>{= ?incompleteCount } of the 11 Subscription properties do not have values.</div>
                </ui:insert>
                <ui:insert ui:into=\"body\">
                    <ui:if ui:condition=\"{= ?incompleteCount &gt; 0 }\">
                        <swa:DonutChart arg:height=\"{= 140 }\" arg:resultSet='{#
                                SELECT ?value ?label
                                WHERE {
                                    {
                                        BIND ((11 - ?incompleteCount) AS ?value) .
                                        BIND (CONCAT(str(?value), \" complete\") AS ?label) .
                                    }
                                    UNION
                                    {
                                        BIND (?incompleteCount AS ?value) .
                                        BIND (CONCAT(str(?value), \" incomplete\") AS ?label) .
                                    } .
                                } }' arg:seriesColors=\"['#6AC20A','#E0E0E0']\" arg:showLegend=\"{= true }\" arg:width=\"{= 300 }\"/>
                    </ui:if>
                </ui:insert>
            </teamwork:DashboardGadgetContainer>
        </ui:group>
    </ui:if>
    <ui:else>
        <teamwork:DashboardGadgetContainer arg:iconName=\"OK\" arg:label=\"{= ?title }\">
            <ui:insert ui:into=\"subtitle\">
                <div>{= teamwork:projectLabel(?projectGraph) } is not an external dataset.</div>
                <div>Therefore, no Subscription properties need to be filled in.</div>
            </ui:insert>
        </teamwork:DashboardGadgetContainer>
    </ui:else>
</ui:setContext>
"""^^ui:Literal ;
  rdfs:label "Subscription info completeness dashboard gadget" ;
  rdfs:subClassOf teamwork:DashboardGadgets ;
.
rdmprojects:URLViewer
  a swa:ObjectViewerClass ;
  ui:private true ;
  ui:prototype """
<div class=\"swa-shifted-label\" title=\"{= ?object }\">
    <a href=\"{= ?object }\" target=\"_blank\" title=\"Open {= ?object } in a new Window\">{= ?object }</a>
</div>
"""^^ui:Literal ;
  rdfs:comment "Hyperlinks to a URL, opening a new window." ;
  rdfs:label "URL viewer" ;
  rdfs:subClassOf swa:ObjectViewer ;
.
rdmprojects:isEditableClass
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:bound ;
                sp:arg1 [
                    sp:varName "class" ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "mainClass" ;
              ] ;
            sp:predicate teamwork:mainClass ;
            sp:subject [
                sp:varName "projectGraph" ;
              ] ;
          ]
          [
            a sp:TriplePath ;
            sp:object [
                sp:varName "mainClass" ;
              ] ;
            sp:path [
                a sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "class" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:optional true ;
      spl:predicate arg:class ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The class to check (may be unbound)." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource holding the mainclass." ;
    ] ;
  spin:returnType xsd:boolean ;
  rdfs:comment "Checks if a given class is editable in the Dataset editor. A class is editable if it is equal to the main class of the vocabulary, or a subclass thereof." ;
  rdfs:label "is editable class" ;
  rdfs:subClassOf spin:Functions ;
.
rdmprojects:isPropertyValueSetUsed
  a ui:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:set ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The edg:PropertyValueSet to check." ;
    ] ;
  spin:private true ;
  spin:returnType xsd:boolean ;
  ui:prototype """
<uix:asAdmin>
    <ui:return ui:result=\"{= EXISTS {
        rdf:nil teamwork:graphsUnderTeamControl ( ?projectGraph ?teamGraph ) .
        GRAPH ?projectGraph {
            ?anyS ?anyP ?set .
        } .
    } }\"/>
</uix:asAdmin>
"""^^ui:Literal ;
  rdfs:label "is property value set used" ;
  rdfs:subClassOf ui:Functions ;
.
rdmprojects:isReadOnlyType
  a spin:Function ;
  spin:body [
      a sp:Ask ;
      sp:where (
          [
            a sp:Filter ;
            sp:expression [
                a sp:not ;
                sp:arg1 [
                    a rdmprojects:isEditableClass ;
                    arg:class [
                        sp:varName "resourceType" ;
                      ] ;
                    arg:projectGraph [
                        a teamwork:currentMasterGraph ;
                      ] ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "is read only type" ;
  rdfs:subClassOf teamwork:isReadOnlyTypeFunctions ;
.
rdmprojects:primaryKeyDatatype
  a spin:Function ;
  spin:body [
      a sp:Select ;
      sp:resultVariables (
          [
            sp:varName "datatype" ;
          ]
        ) ;
      sp:where (
          [
            a sp:Bind ;
            sp:expression [
                a ui:graphWithImports ;
                sp:arg1 [
                    sp:varName "projectGraph" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "queryGraph" ;
              ] ;
          ]
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "predicate" ;
                    ] ;
                  sp:predicate sh:path ;
                  sp:subject [
                      sp:varName "ps" ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "datatype" ;
                    ] ;
                  sp:predicate sh:datatype ;
                  sp:subject [
                      sp:varName "ps" ;
                    ] ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "queryGraph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:predicate ;
      rdfs:comment "The primary key predicate." ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate arg:projectGraph ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The master graph to operate on." ;
    ] ;
  spin:private true ;
  spin:returnType rdfs:Datatype ;
  rdfs:label "primary key datatype" ;
  rdfs:subClassOf spin:Functions ;
.
rdmprojects:primaryKeyProperties
  a spin:MagicProperty ;
  spin:body [
      a sp:Select ;
      sp:distinct true ;
      sp:resultVariables (
          [
            sp:varName "property" ;
          ]
        ) ;
      sp:where (
          (
            [
              a sp:Bind ;
              sp:expression [
                  a ui:graphWithImports ;
                  sp:arg1 spin:_arg1 ;
                ] ;
              sp:variable [
                  sp:varName "graph" ;
                ] ;
            ]
          )
          [
            a sp:NamedGraph ;
            sp:elements (
                [
                  a sp:Union ;
                  sp:elements (
                      (
                        [
                          sp:object spl:PrimaryKeyPropertyConstraint ;
                          sp:predicate rdf:type ;
                          sp:subject [
                              sp:varName "constraint" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "property" ;
                            ] ;
                          sp:predicate arg:property ;
                          sp:subject [
                              sp:varName "constraint" ;
                            ] ;
                        ]
                      )
                      (
                        [
                          sp:object [
                              sp:varName "uriStart" ;
                            ] ;
                          sp:predicate dash:uriStart ;
                          sp:subject [
                              sp:varName "ps" ;
                            ] ;
                        ]
                        [
                          sp:object [
                              sp:varName "property" ;
                            ] ;
                          sp:predicate sh:path ;
                          sp:subject [
                              sp:varName "ps" ;
                            ] ;
                        ]
                        [
                          a sp:Filter ;
                          sp:expression [
                              a sp:isIRI ;
                              sp:arg1 [
                                  sp:varName "property" ;
                                ] ;
                            ] ;
                        ]
                      )
                    ) ;
                ]
              ) ;
            sp:graphNameNode [
                sp:varName "graph" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The project graph (without imports)." ;
    ] ;
  spin:private true ;
  spin:returnType rdf:Property ;
  rdfs:comment "Gets all primary key properties in a given project graph." ;
  rdfs:label "primary key properties" ;
  rdfs:subClassOf spin:MagicProperties ;
.
arg:fact
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:set
  a rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
